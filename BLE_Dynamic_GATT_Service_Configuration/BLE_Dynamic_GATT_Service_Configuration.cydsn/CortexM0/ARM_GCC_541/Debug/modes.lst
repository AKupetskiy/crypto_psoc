ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modes.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.xor_bb,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	xor_bb, %function
  24              	xor_bb:
  25              	.LFB13:
  26              		.file 1 "bitops.h"
   1:bitops.h      **** /*
   2:bitops.h      ****  * cifra - embedded cryptography library
   3:bitops.h      ****  * Written in 2014 by Joseph Birr-Pixton <jpixton@gmail.com>
   4:bitops.h      ****  *
   5:bitops.h      ****  * To the extent possible under law, the author(s) have dedicated all
   6:bitops.h      ****  * copyright and related and neighboring rights to this software to the
   7:bitops.h      ****  * public domain worldwide. This software is distributed without any
   8:bitops.h      ****  * warranty.
   9:bitops.h      ****  *
  10:bitops.h      ****  * You should have received a copy of the CC0 Public Domain Dedication
  11:bitops.h      ****  * along with this software. If not, see
  12:bitops.h      ****  * <http://creativecommons.org/publicdomain/zero/1.0/>.
  13:bitops.h      ****  */
  14:bitops.h      **** 
  15:bitops.h      **** #ifndef BITOPS_H
  16:bitops.h      **** #define BITOPS_H
  17:bitops.h      **** 
  18:bitops.h      **** #include <stdint.h>
  19:bitops.h      **** #include <stddef.h>
  20:bitops.h      **** 
  21:bitops.h      **** /* Assorted bitwise and common operations used in ciphers. */
  22:bitops.h      **** 
  23:bitops.h      **** /** Circularly rotate right x by n bits.
  24:bitops.h      ****  *  0 > n > 32. */
  25:bitops.h      **** static inline uint32_t rotr32(uint32_t x, unsigned n)
  26:bitops.h      **** {
  27:bitops.h      ****   return (x >> n) | (x << (32 - n));
  28:bitops.h      **** }
  29:bitops.h      **** 
  30:bitops.h      **** /** Circularly rotate left x by n bits.
  31:bitops.h      ****  *  0 > n > 32. */
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 2


  32:bitops.h      **** static inline uint32_t rotl32(uint32_t x, unsigned n)
  33:bitops.h      **** {
  34:bitops.h      ****   return (x << n) | (x >> (32 - n));
  35:bitops.h      **** }
  36:bitops.h      **** 
  37:bitops.h      **** /** Circularly rotate right x by n bits.
  38:bitops.h      ****  *  0 > n > 64. */
  39:bitops.h      **** static inline uint64_t rotr64(uint64_t x, unsigned n)
  40:bitops.h      **** {
  41:bitops.h      ****   return (x >> n) | (x << (64 - n));
  42:bitops.h      **** }
  43:bitops.h      **** 
  44:bitops.h      **** /** Circularly rotate left x by n bits.
  45:bitops.h      ****  *  0 > n > 64. */
  46:bitops.h      **** static inline uint64_t rotl64(uint64_t x, unsigned n)
  47:bitops.h      **** {
  48:bitops.h      ****   return (x << n) | (x >> (64 - n));
  49:bitops.h      **** }
  50:bitops.h      **** 
  51:bitops.h      **** /** Read 4 bytes from buf, as a 32-bit big endian quantity. */
  52:bitops.h      **** static inline uint32_t read32_be(const uint8_t buf[4])
  53:bitops.h      **** {
  54:bitops.h      ****   return (buf[0] << 24) |
  55:bitops.h      ****          (buf[1] << 16) |
  56:bitops.h      ****          (buf[2] << 8) |
  57:bitops.h      ****          (buf[3]);
  58:bitops.h      **** }
  59:bitops.h      **** 
  60:bitops.h      **** /** Read 4 bytes from buf, as a 32-bit little endian quantity. */
  61:bitops.h      **** static inline uint32_t read32_le(const uint8_t buf[4])
  62:bitops.h      **** {
  63:bitops.h      ****   return (buf[3] << 24) |
  64:bitops.h      ****          (buf[2] << 16) |
  65:bitops.h      ****          (buf[1] << 8) |
  66:bitops.h      ****          (buf[0]);
  67:bitops.h      **** }
  68:bitops.h      **** 
  69:bitops.h      **** /** Read 8 bytes from buf, as a 64-bit big endian quantity. */
  70:bitops.h      **** static inline uint64_t read64_be(const uint8_t buf[8])
  71:bitops.h      **** {
  72:bitops.h      ****   uint32_t hi = read32_be(buf),
  73:bitops.h      ****            lo = read32_be(buf + 4);
  74:bitops.h      ****   return ((uint64_t)hi) << 32 |
  75:bitops.h      ****          lo;
  76:bitops.h      **** }
  77:bitops.h      **** 
  78:bitops.h      **** /** Read 8 bytes from buf, as a 64-bit little endian quantity. */
  79:bitops.h      **** static inline uint64_t read64_le(const uint8_t buf[8])
  80:bitops.h      **** {
  81:bitops.h      ****   uint32_t hi = read32_le(buf + 4),
  82:bitops.h      ****            lo = read32_le(buf);
  83:bitops.h      ****   return ((uint64_t)hi) << 32 |
  84:bitops.h      ****          lo;
  85:bitops.h      **** }
  86:bitops.h      **** 
  87:bitops.h      **** /** Encode v as a 32-bit big endian quantity into buf. */
  88:bitops.h      **** static inline void write32_be(uint32_t v, uint8_t buf[4])
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 3


  89:bitops.h      **** {
  90:bitops.h      ****   *buf++ = (v >> 24) & 0xff;
  91:bitops.h      ****   *buf++ = (v >> 16) & 0xff;
  92:bitops.h      ****   *buf++ = (v >> 8) & 0xff;
  93:bitops.h      ****   *buf   = v & 0xff;
  94:bitops.h      **** }
  95:bitops.h      **** 
  96:bitops.h      **** /** Encode v as a 32-bit little endian quantity into buf. */
  97:bitops.h      **** static inline void write32_le(uint32_t v, uint8_t buf[4])
  98:bitops.h      **** {
  99:bitops.h      ****   *buf++ = v & 0xff;
 100:bitops.h      ****   *buf++ = (v >> 8) & 0xff;
 101:bitops.h      ****   *buf++ = (v >> 16) & 0xff;
 102:bitops.h      ****   *buf   = (v >> 24) & 0xff;
 103:bitops.h      **** }
 104:bitops.h      **** 
 105:bitops.h      **** /** Encode v as a 64-bit big endian quantity into buf. */
 106:bitops.h      **** static inline void write64_be(uint64_t v, uint8_t buf[8])
 107:bitops.h      **** {
 108:bitops.h      ****   *buf++ = (v >> 56) & 0xff;
 109:bitops.h      ****   *buf++ = (v >> 48) & 0xff;
 110:bitops.h      ****   *buf++ = (v >> 40) & 0xff;
 111:bitops.h      ****   *buf++ = (v >> 32) & 0xff;
 112:bitops.h      ****   *buf++ = (v >> 24) & 0xff;
 113:bitops.h      ****   *buf++ = (v >> 16) & 0xff;
 114:bitops.h      ****   *buf++ = (v >> 8) & 0xff;
 115:bitops.h      ****   *buf   = v & 0xff;
 116:bitops.h      **** }
 117:bitops.h      **** 
 118:bitops.h      **** /** Encode v as a 64-bit little endian quantity into buf. */
 119:bitops.h      **** static inline void write64_le(uint64_t v, uint8_t buf[8])
 120:bitops.h      **** {
 121:bitops.h      ****   *buf++ = v & 0xff;
 122:bitops.h      ****   *buf++ = (v >> 8) & 0xff;
 123:bitops.h      ****   *buf++ = (v >> 16) & 0xff;
 124:bitops.h      ****   *buf++ = (v >> 24) & 0xff;
 125:bitops.h      ****   *buf++ = (v >> 32) & 0xff;
 126:bitops.h      ****   *buf++ = (v >> 40) & 0xff;
 127:bitops.h      ****   *buf++ = (v >> 48) & 0xff;
 128:bitops.h      ****   *buf   = (v >> 56) & 0xff;
 129:bitops.h      **** }
 130:bitops.h      **** 
 131:bitops.h      **** /** out = in ^ b8.
 132:bitops.h      ****  *  out and in may alias. */
 133:bitops.h      **** static inline void xor_b8(uint8_t *out, const uint8_t *in, uint8_t b8, size_t len)
 134:bitops.h      **** {
 135:bitops.h      ****   for (size_t i = 0; i < len; i++)
 136:bitops.h      ****     out[i] = in[i] ^ b8;
 137:bitops.h      **** }
 138:bitops.h      **** 
 139:bitops.h      **** /** out = x ^ y.
 140:bitops.h      ****  *  out, x and y may alias. */
 141:bitops.h      **** static inline void xor_bb(uint8_t *out, const uint8_t *x, const uint8_t *y, size_t len)
 142:bitops.h      **** {
  27              		.loc 1 142 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 4


  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 86B0     		sub	sp, sp, #24
  33              		.cfi_def_cfa_offset 24
  34 0002 0390     		str	r0, [sp, #12]
  35 0004 0291     		str	r1, [sp, #8]
  36 0006 0192     		str	r2, [sp, #4]
  37 0008 0093     		str	r3, [sp]
  38              	.LBB2:
 143:bitops.h      ****   for (size_t i = 0; i < len; i++)
  39              		.loc 1 143 0
  40 000a 0023     		movs	r3, #0
  41 000c 0593     		str	r3, [sp, #20]
  42 000e 10E0     		b	.L2
  43              	.L3:
 144:bitops.h      ****     out[i] = x[i] ^ y[i];
  44              		.loc 1 144 0 discriminator 3
  45 0010 039A     		ldr	r2, [sp, #12]
  46 0012 059B     		ldr	r3, [sp, #20]
  47 0014 D318     		adds	r3, r2, r3
  48 0016 0299     		ldr	r1, [sp, #8]
  49 0018 059A     		ldr	r2, [sp, #20]
  50 001a 8A18     		adds	r2, r1, r2
  51 001c 1178     		ldrb	r1, [r2]
  52 001e 0198     		ldr	r0, [sp, #4]
  53 0020 059A     		ldr	r2, [sp, #20]
  54 0022 8218     		adds	r2, r0, r2
  55 0024 1278     		ldrb	r2, [r2]
  56 0026 4A40     		eors	r2, r1
  57 0028 D2B2     		uxtb	r2, r2
  58 002a 1A70     		strb	r2, [r3]
 143:bitops.h      ****   for (size_t i = 0; i < len; i++)
  59              		.loc 1 143 0 discriminator 3
  60 002c 059B     		ldr	r3, [sp, #20]
  61 002e 0133     		adds	r3, r3, #1
  62 0030 0593     		str	r3, [sp, #20]
  63              	.L2:
 143:bitops.h      ****   for (size_t i = 0; i < len; i++)
  64              		.loc 1 143 0 is_stmt 0 discriminator 1
  65 0032 059A     		ldr	r2, [sp, #20]
  66 0034 009B     		ldr	r3, [sp]
  67 0036 9A42     		cmp	r2, r3
  68 0038 EAD3     		bcc	.L3
  69              	.LBE2:
 145:bitops.h      **** }
  70              		.loc 1 145 0 is_stmt 1
  71 003a C046     		nop
  72 003c 06B0     		add	sp, sp, #24
  73              		@ sp needed
  74 003e 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE13:
  77              		.size	xor_bb, .-xor_bb
  78              		.section	.text.incr_be,"ax",%progbits
  79              		.align	2
  80              		.code	16
  81              		.thumb_func
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 5


  82              		.type	incr_be, %function
  83              	incr_be:
  84              	.LFB22:
 146:bitops.h      **** 
 147:bitops.h      **** /* out ^= x
 148:bitops.h      ****  * out and x may alias. */
 149:bitops.h      **** static inline void xor_words(uint32_t *out, const uint32_t *x, size_t nwords)
 150:bitops.h      **** {
 151:bitops.h      ****   for (size_t i = 0; i < nwords; i++)
 152:bitops.h      ****     out[i] ^= x[i];
 153:bitops.h      **** }
 154:bitops.h      **** 
 155:bitops.h      **** /** Produce 0xffffffff if x == y, zero otherwise, without branching. */
 156:bitops.h      **** static inline uint32_t mask_u32(uint32_t x, uint32_t y)
 157:bitops.h      **** {
 158:bitops.h      ****   uint32_t diff = x ^ y;
 159:bitops.h      ****   uint32_t diff_is_zero = ~diff & (diff - 1);
 160:bitops.h      ****   return - (diff_is_zero >> 31);
 161:bitops.h      **** }
 162:bitops.h      **** 
 163:bitops.h      **** /** Product 0xff if x == y, zero otherwise, without branching. */
 164:bitops.h      **** static inline uint8_t mask_u8(uint32_t x, uint32_t y)
 165:bitops.h      **** {
 166:bitops.h      ****   uint32_t diff = x ^ y;
 167:bitops.h      ****   uint8_t diff_is_zero = ~diff & (diff - 1);
 168:bitops.h      ****   return - (diff_is_zero >> 7);
 169:bitops.h      **** }
 170:bitops.h      **** 
 171:bitops.h      **** /** Select the ith entry from the given table of n values, in a side channel-silent
 172:bitops.h      ****  *  way. */
 173:bitops.h      **** static inline uint32_t select_u32(uint32_t i, volatile const uint32_t *tab, uint32_t n)
 174:bitops.h      **** {
 175:bitops.h      ****   uint32_t r = 0;
 176:bitops.h      **** 
 177:bitops.h      ****   for (uint32_t ii = 0; ii < n; ii++)
 178:bitops.h      ****   {
 179:bitops.h      ****     uint32_t mask = mask_u32(i, ii);
 180:bitops.h      ****     r = (r & ~mask) | (tab[ii] & mask);
 181:bitops.h      ****   }
 182:bitops.h      **** 
 183:bitops.h      ****   return r;
 184:bitops.h      **** }
 185:bitops.h      **** 
 186:bitops.h      **** /** Select the ith entry from the given table of n values, in a side channel-silent
 187:bitops.h      ****  *  way. */
 188:bitops.h      **** static inline uint8_t select_u8(uint32_t i, volatile const uint8_t *tab, uint32_t n)
 189:bitops.h      **** {
 190:bitops.h      ****   uint8_t r = 0;
 191:bitops.h      **** 
 192:bitops.h      ****   for (uint32_t ii = 0; ii < n; ii++)
 193:bitops.h      ****   {
 194:bitops.h      ****     uint8_t mask = mask_u8(i, ii);
 195:bitops.h      ****     r = (r & ~mask) | (tab[ii] & mask);
 196:bitops.h      ****   }
 197:bitops.h      **** 
 198:bitops.h      ****   return r;
 199:bitops.h      **** }
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 6


 200:bitops.h      **** 
 201:bitops.h      **** /** Select the ath, bth, cth and dth entries from the given table of n values,
 202:bitops.h      ****  *  placing the results into a, b, c and d. */
 203:bitops.h      **** static inline void select_u8x4(uint8_t *a, uint8_t *b, uint8_t *c, uint8_t *d,
 204:bitops.h      ****                                volatile const uint8_t *tab, uint32_t n)
 205:bitops.h      **** {
 206:bitops.h      ****   uint8_t ra = 0,
 207:bitops.h      ****           rb = 0,
 208:bitops.h      ****           rc = 0,
 209:bitops.h      ****           rd = 0;
 210:bitops.h      ****   uint8_t mask;
 211:bitops.h      **** 
 212:bitops.h      ****   for (uint32_t i = 0; i < n; i++)
 213:bitops.h      ****   {
 214:bitops.h      ****     uint8_t item = tab[i];
 215:bitops.h      **** 
 216:bitops.h      ****     mask = mask_u8(*a, i); ra = (ra & ~mask) | (item & mask);
 217:bitops.h      ****     mask = mask_u8(*b, i); rb = (rb & ~mask) | (item & mask);
 218:bitops.h      ****     mask = mask_u8(*c, i); rc = (rc & ~mask) | (item & mask);
 219:bitops.h      ****     mask = mask_u8(*d, i); rd = (rd & ~mask) | (item & mask);
 220:bitops.h      ****   }
 221:bitops.h      **** 
 222:bitops.h      ****   *a = ra;
 223:bitops.h      ****   *b = rb;
 224:bitops.h      ****   *c = rc;
 225:bitops.h      ****   *d = rd;
 226:bitops.h      **** }
 227:bitops.h      **** 
 228:bitops.h      **** /** out ^= if0 or if1, depending on the value of bit. */
 229:bitops.h      **** static inline void select_xor128(uint32_t out[4],
 230:bitops.h      ****                                  const uint32_t if0[4],
 231:bitops.h      ****                                  const uint32_t if1[4],
 232:bitops.h      ****                                  uint8_t bit)
 233:bitops.h      **** {
 234:bitops.h      ****   uint32_t mask1 = mask_u32(bit, 1);
 235:bitops.h      ****   uint32_t mask0 = ~mask1;
 236:bitops.h      **** 
 237:bitops.h      ****   out[0] ^= (if0[0] & mask0) | (if1[0] & mask1);
 238:bitops.h      ****   out[1] ^= (if0[1] & mask0) | (if1[1] & mask1);
 239:bitops.h      ****   out[2] ^= (if0[2] & mask0) | (if1[2] & mask1);
 240:bitops.h      ****   out[3] ^= (if0[3] & mask0) | (if1[3] & mask1);
 241:bitops.h      **** }
 242:bitops.h      **** 
 243:bitops.h      **** /** Increments the integer stored at v (of non-zero length len)
 244:bitops.h      ****  *  with the least significant byte first. */
 245:bitops.h      **** static inline void incr_le(uint8_t *v, size_t len)
 246:bitops.h      **** {
 247:bitops.h      ****   size_t i = 0;
 248:bitops.h      ****   while (1)
 249:bitops.h      ****   {
 250:bitops.h      ****     if (++v[i] != 0)
 251:bitops.h      ****       return;
 252:bitops.h      ****     i++;
 253:bitops.h      ****     if (i == len)
 254:bitops.h      ****       return;
 255:bitops.h      ****   }
 256:bitops.h      **** }
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 7


 257:bitops.h      **** 
 258:bitops.h      **** /** Increments the integer stored at v (of non-zero length len)
 259:bitops.h      ****  *  with the most significant byte last. */
 260:bitops.h      **** static inline void incr_be(uint8_t *v, size_t len)
 261:bitops.h      **** {
  85              		.loc 1 261 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 8
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90 0000 82B0     		sub	sp, sp, #8
  91              		.cfi_def_cfa_offset 8
  92 0002 0190     		str	r0, [sp, #4]
  93 0004 0091     		str	r1, [sp]
 262:bitops.h      ****   len--;
  94              		.loc 1 262 0
  95 0006 009B     		ldr	r3, [sp]
  96 0008 013B     		subs	r3, r3, #1
  97 000a 0093     		str	r3, [sp]
  98              	.L8:
 263:bitops.h      ****   while (1)
 264:bitops.h      ****   {
 265:bitops.h      ****     if (++v[len] != 0)
  99              		.loc 1 265 0
 100 000c 019A     		ldr	r2, [sp, #4]
 101 000e 009B     		ldr	r3, [sp]
 102 0010 D318     		adds	r3, r2, r3
 103 0012 1A78     		ldrb	r2, [r3]
 104 0014 0132     		adds	r2, r2, #1
 105 0016 D2B2     		uxtb	r2, r2
 106 0018 1A70     		strb	r2, [r3]
 107 001a 1B78     		ldrb	r3, [r3]
 108 001c 002B     		cmp	r3, #0
 109 001e 06D1     		bne	.L9
 266:bitops.h      ****       return;
 267:bitops.h      ****     if (len == 0)
 110              		.loc 1 267 0
 111 0020 009B     		ldr	r3, [sp]
 112 0022 002B     		cmp	r3, #0
 113 0024 05D0     		beq	.L10
 268:bitops.h      ****       return;
 269:bitops.h      ****     len--;
 114              		.loc 1 269 0
 115 0026 009B     		ldr	r3, [sp]
 116 0028 013B     		subs	r3, r3, #1
 117 002a 0093     		str	r3, [sp]
 270:bitops.h      ****   }
 118              		.loc 1 270 0
 119 002c EEE7     		b	.L8
 120              	.L9:
 266:bitops.h      ****       return;
 121              		.loc 1 266 0
 122 002e C046     		nop
 123 0030 00E0     		b	.L4
 124              	.L10:
 268:bitops.h      ****       return;
 125              		.loc 1 268 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 8


 126 0032 C046     		nop
 127              	.L4:
 271:bitops.h      **** }
 128              		.loc 1 271 0
 129 0034 02B0     		add	sp, sp, #8
 130              		@ sp needed
 131 0036 7047     		bx	lr
 132              		.cfi_endproc
 133              	.LFE22:
 134              		.size	incr_be, .-incr_be
 135              		.section	.text.cf_cbc_init,"ax",%progbits
 136              		.align	2
 137              		.global	cf_cbc_init
 138              		.code	16
 139              		.thumb_func
 140              		.type	cf_cbc_init, %function
 141              	cf_cbc_init:
 142              	.LFB25:
 143              		.file 2 "modes.c"
   1:modes.c       **** /*
   2:modes.c       ****  * cifra - embedded cryptography library
   3:modes.c       ****  * Written in 2014 by Joseph Birr-Pixton <jpixton@gmail.com>
   4:modes.c       ****  *
   5:modes.c       ****  * To the extent possible under law, the author(s) have dedicated all
   6:modes.c       ****  * copyright and related and neighboring rights to this software to the
   7:modes.c       ****  * public domain worldwide. This software is distributed without any
   8:modes.c       ****  * warranty.
   9:modes.c       ****  *
  10:modes.c       ****  * You should have received a copy of the CC0 Public Domain Dedication
  11:modes.c       ****  * along with this software. If not, see
  12:modes.c       ****  * <http://creativecommons.org/publicdomain/zero/1.0/>.
  13:modes.c       ****  */
  14:modes.c       **** 
  15:modes.c       **** #include "prp.h"
  16:modes.c       **** #include "modes.h"
  17:modes.c       **** #include "bitops.h"
  18:modes.c       **** #include "blockwise.h"
  19:modes.c       **** 
  20:modes.c       **** #include <string.h>
  21:modes.c       **** #include "tassert.h"
  22:modes.c       **** 
  23:modes.c       **** /* CBC */
  24:modes.c       **** void cf_cbc_init(cf_cbc *ctx, const cf_prp *prp, void *prpctx, const uint8_t iv[CF_MAXBLOCK])
  25:modes.c       **** {
 144              		.loc 2 25 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 16
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148 0000 00B5     		push	{lr}
 149              		.cfi_def_cfa_offset 4
 150              		.cfi_offset 14, -4
 151 0002 85B0     		sub	sp, sp, #20
 152              		.cfi_def_cfa_offset 24
 153 0004 0390     		str	r0, [sp, #12]
 154 0006 0291     		str	r1, [sp, #8]
 155 0008 0192     		str	r2, [sp, #4]
 156 000a 0093     		str	r3, [sp]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 9


  26:modes.c       ****   ctx->prp = prp;
 157              		.loc 2 26 0
 158 000c 039B     		ldr	r3, [sp, #12]
 159 000e 029A     		ldr	r2, [sp, #8]
 160 0010 1A60     		str	r2, [r3]
  27:modes.c       ****   ctx->prpctx = prpctx;
 161              		.loc 2 27 0
 162 0012 039B     		ldr	r3, [sp, #12]
 163 0014 019A     		ldr	r2, [sp, #4]
 164 0016 5A60     		str	r2, [r3, #4]
  28:modes.c       ****   memcpy(ctx->block, iv, prp->blocksz);
 165              		.loc 2 28 0
 166 0018 039B     		ldr	r3, [sp, #12]
 167 001a 0833     		adds	r3, r3, #8
 168 001c 1800     		movs	r0, r3
 169 001e 029B     		ldr	r3, [sp, #8]
 170 0020 1A68     		ldr	r2, [r3]
 171 0022 009B     		ldr	r3, [sp]
 172 0024 1900     		movs	r1, r3
 173 0026 FFF7FEFF 		bl	memcpy
  29:modes.c       **** }
 174              		.loc 2 29 0
 175 002a C046     		nop
 176 002c 05B0     		add	sp, sp, #20
 177              		@ sp needed
 178 002e 00BD     		pop	{pc}
 179              		.cfi_endproc
 180              	.LFE25:
 181              		.size	cf_cbc_init, .-cf_cbc_init
 182              		.section	.text.cf_cbc_encrypt,"ax",%progbits
 183              		.align	2
 184              		.global	cf_cbc_encrypt
 185              		.code	16
 186              		.thumb_func
 187              		.type	cf_cbc_encrypt, %function
 188              	cf_cbc_encrypt:
 189              	.LFB26:
  30:modes.c       **** 
  31:modes.c       **** void cf_cbc_encrypt(cf_cbc *ctx, const uint8_t *input, uint8_t *output, size_t blocks)
  32:modes.c       **** {
 190              		.loc 2 32 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 40
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194 0000 10B5     		push	{r4, lr}
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 4, -8
 197              		.cfi_offset 14, -4
 198 0002 8AB0     		sub	sp, sp, #40
 199              		.cfi_def_cfa_offset 48
 200 0004 0390     		str	r0, [sp, #12]
 201 0006 0291     		str	r1, [sp, #8]
 202 0008 0192     		str	r2, [sp, #4]
 203 000a 0093     		str	r3, [sp]
  33:modes.c       ****   uint8_t buf[CF_MAXBLOCK];
  34:modes.c       ****   size_t nblk = ctx->prp->blocksz;
 204              		.loc 2 34 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 10


 205 000c 039B     		ldr	r3, [sp, #12]
 206 000e 1B68     		ldr	r3, [r3]
 207 0010 1B68     		ldr	r3, [r3]
 208 0012 0993     		str	r3, [sp, #36]
  35:modes.c       **** 
  36:modes.c       ****   while (blocks--)
 209              		.loc 2 36 0
 210 0014 22E0     		b	.L13
 211              	.L14:
  37:modes.c       ****   {
  38:modes.c       ****     xor_bb(buf, input, ctx->block, nblk);
 212              		.loc 2 38 0
 213 0016 039B     		ldr	r3, [sp, #12]
 214 0018 0833     		adds	r3, r3, #8
 215 001a 1A00     		movs	r2, r3
 216 001c 099B     		ldr	r3, [sp, #36]
 217 001e 0299     		ldr	r1, [sp, #8]
 218 0020 05A8     		add	r0, sp, #20
 219 0022 FFF7FEFF 		bl	xor_bb
  39:modes.c       ****     ctx->prp->encrypt(ctx->prpctx, buf, ctx->block);
 220              		.loc 2 39 0
 221 0026 039B     		ldr	r3, [sp, #12]
 222 0028 1B68     		ldr	r3, [r3]
 223 002a 5C68     		ldr	r4, [r3, #4]
 224 002c 039B     		ldr	r3, [sp, #12]
 225 002e 5868     		ldr	r0, [r3, #4]
 226 0030 039B     		ldr	r3, [sp, #12]
 227 0032 0833     		adds	r3, r3, #8
 228 0034 1A00     		movs	r2, r3
 229 0036 05AB     		add	r3, sp, #20
 230 0038 1900     		movs	r1, r3
 231 003a A047     		blx	r4
  40:modes.c       ****     memcpy(output, ctx->block, nblk);
 232              		.loc 2 40 0
 233 003c 039B     		ldr	r3, [sp, #12]
 234 003e 0833     		adds	r3, r3, #8
 235 0040 1900     		movs	r1, r3
 236 0042 099A     		ldr	r2, [sp, #36]
 237 0044 019B     		ldr	r3, [sp, #4]
 238 0046 1800     		movs	r0, r3
 239 0048 FFF7FEFF 		bl	memcpy
  41:modes.c       ****     input += nblk;
 240              		.loc 2 41 0
 241 004c 029A     		ldr	r2, [sp, #8]
 242 004e 099B     		ldr	r3, [sp, #36]
 243 0050 D318     		adds	r3, r2, r3
 244 0052 0293     		str	r3, [sp, #8]
  42:modes.c       ****     output += nblk;
 245              		.loc 2 42 0
 246 0054 019A     		ldr	r2, [sp, #4]
 247 0056 099B     		ldr	r3, [sp, #36]
 248 0058 D318     		adds	r3, r2, r3
 249 005a 0193     		str	r3, [sp, #4]
 250              	.L13:
  36:modes.c       ****   {
 251              		.loc 2 36 0
 252 005c 009B     		ldr	r3, [sp]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 11


 253 005e 5A1E     		subs	r2, r3, #1
 254 0060 0092     		str	r2, [sp]
 255 0062 002B     		cmp	r3, #0
 256 0064 D7D1     		bne	.L14
  43:modes.c       ****   }
  44:modes.c       **** }
 257              		.loc 2 44 0
 258 0066 C046     		nop
 259 0068 0AB0     		add	sp, sp, #40
 260              		@ sp needed
 261 006a 10BD     		pop	{r4, pc}
 262              		.cfi_endproc
 263              	.LFE26:
 264              		.size	cf_cbc_encrypt, .-cf_cbc_encrypt
 265              		.section	.text.cf_cbc_decrypt,"ax",%progbits
 266              		.align	2
 267              		.global	cf_cbc_decrypt
 268              		.code	16
 269              		.thumb_func
 270              		.type	cf_cbc_decrypt, %function
 271              	cf_cbc_decrypt:
 272              	.LFB27:
  45:modes.c       **** 
  46:modes.c       **** void cf_cbc_decrypt(cf_cbc *ctx, const uint8_t *input, uint8_t *output, size_t blocks)
  47:modes.c       **** {
 273              		.loc 2 47 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 40
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277 0000 10B5     		push	{r4, lr}
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 4, -8
 280              		.cfi_offset 14, -4
 281 0002 8AB0     		sub	sp, sp, #40
 282              		.cfi_def_cfa_offset 48
 283 0004 0390     		str	r0, [sp, #12]
 284 0006 0291     		str	r1, [sp, #8]
 285 0008 0192     		str	r2, [sp, #4]
 286 000a 0093     		str	r3, [sp]
  48:modes.c       ****   uint8_t buf[CF_MAXBLOCK];
  49:modes.c       ****   size_t nblk = ctx->prp->blocksz;
 287              		.loc 2 49 0
 288 000c 039B     		ldr	r3, [sp, #12]
 289 000e 1B68     		ldr	r3, [r3]
 290 0010 1B68     		ldr	r3, [r3]
 291 0012 0993     		str	r3, [sp, #36]
  50:modes.c       **** 
  51:modes.c       ****   while (blocks--)
 292              		.loc 2 51 0
 293 0014 1FE0     		b	.L16
 294              	.L17:
  52:modes.c       ****   {
  53:modes.c       ****     ctx->prp->decrypt(ctx->prpctx, input, buf);
 295              		.loc 2 53 0
 296 0016 039B     		ldr	r3, [sp, #12]
 297 0018 1B68     		ldr	r3, [r3]
 298 001a 9C68     		ldr	r4, [r3, #8]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 12


 299 001c 039B     		ldr	r3, [sp, #12]
 300 001e 5B68     		ldr	r3, [r3, #4]
 301 0020 05AA     		add	r2, sp, #20
 302 0022 0299     		ldr	r1, [sp, #8]
 303 0024 1800     		movs	r0, r3
 304 0026 A047     		blx	r4
  54:modes.c       ****     xor_bb(output, buf, ctx->block, nblk);
 305              		.loc 2 54 0
 306 0028 039B     		ldr	r3, [sp, #12]
 307 002a 0833     		adds	r3, r3, #8
 308 002c 1A00     		movs	r2, r3
 309 002e 099B     		ldr	r3, [sp, #36]
 310 0030 05A9     		add	r1, sp, #20
 311 0032 0198     		ldr	r0, [sp, #4]
 312 0034 FFF7FEFF 		bl	xor_bb
  55:modes.c       ****     memcpy(ctx->block, input, nblk);
 313              		.loc 2 55 0
 314 0038 039B     		ldr	r3, [sp, #12]
 315 003a 0833     		adds	r3, r3, #8
 316 003c 099A     		ldr	r2, [sp, #36]
 317 003e 0299     		ldr	r1, [sp, #8]
 318 0040 1800     		movs	r0, r3
 319 0042 FFF7FEFF 		bl	memcpy
  56:modes.c       ****     input += nblk;
 320              		.loc 2 56 0
 321 0046 029A     		ldr	r2, [sp, #8]
 322 0048 099B     		ldr	r3, [sp, #36]
 323 004a D318     		adds	r3, r2, r3
 324 004c 0293     		str	r3, [sp, #8]
  57:modes.c       ****     output += nblk;
 325              		.loc 2 57 0
 326 004e 019A     		ldr	r2, [sp, #4]
 327 0050 099B     		ldr	r3, [sp, #36]
 328 0052 D318     		adds	r3, r2, r3
 329 0054 0193     		str	r3, [sp, #4]
 330              	.L16:
  51:modes.c       ****   {
 331              		.loc 2 51 0
 332 0056 009B     		ldr	r3, [sp]
 333 0058 5A1E     		subs	r2, r3, #1
 334 005a 0092     		str	r2, [sp]
 335 005c 002B     		cmp	r3, #0
 336 005e DAD1     		bne	.L17
  58:modes.c       ****   }
  59:modes.c       **** }
 337              		.loc 2 59 0
 338 0060 C046     		nop
 339 0062 0AB0     		add	sp, sp, #40
 340              		@ sp needed
 341 0064 10BD     		pop	{r4, pc}
 342              		.cfi_endproc
 343              	.LFE27:
 344              		.size	cf_cbc_decrypt, .-cf_cbc_decrypt
 345 0066 C046     		.section	.text.cf_ctr_init,"ax",%progbits
 346              		.align	2
 347              		.global	cf_ctr_init
 348              		.code	16
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 13


 349              		.thumb_func
 350              		.type	cf_ctr_init, %function
 351              	cf_ctr_init:
 352              	.LFB28:
  60:modes.c       **** 
  61:modes.c       **** /* CTR */
  62:modes.c       **** void cf_ctr_init(cf_ctr *ctx, const cf_prp *prp, void *prpctx, const uint8_t nonce[CF_MAXBLOCK])
  63:modes.c       **** {
 353              		.loc 2 63 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 16
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357 0000 00B5     		push	{lr}
 358              		.cfi_def_cfa_offset 4
 359              		.cfi_offset 14, -4
 360 0002 85B0     		sub	sp, sp, #20
 361              		.cfi_def_cfa_offset 24
 362 0004 0390     		str	r0, [sp, #12]
 363 0006 0291     		str	r1, [sp, #8]
 364 0008 0192     		str	r2, [sp, #4]
 365 000a 0093     		str	r3, [sp]
  64:modes.c       ****   memset(ctx, 0, sizeof *ctx);
 366              		.loc 2 64 0
 367 000c 039B     		ldr	r3, [sp, #12]
 368 000e 3422     		movs	r2, #52
 369 0010 0021     		movs	r1, #0
 370 0012 1800     		movs	r0, r3
 371 0014 FFF7FEFF 		bl	memset
  65:modes.c       ****   ctx->counter_offset = 0;
 372              		.loc 2 65 0
 373 0018 039B     		ldr	r3, [sp, #12]
 374 001a 0022     		movs	r2, #0
 375 001c DA62     		str	r2, [r3, #44]
  66:modes.c       ****   ctx->counter_width = prp->blocksz;
 376              		.loc 2 66 0
 377 001e 029B     		ldr	r3, [sp, #8]
 378 0020 1A68     		ldr	r2, [r3]
 379 0022 039B     		ldr	r3, [sp, #12]
 380 0024 1A63     		str	r2, [r3, #48]
  67:modes.c       ****   ctx->prp = prp;
 381              		.loc 2 67 0
 382 0026 039B     		ldr	r3, [sp, #12]
 383 0028 029A     		ldr	r2, [sp, #8]
 384 002a 1A60     		str	r2, [r3]
  68:modes.c       ****   ctx->prpctx = prpctx;
 385              		.loc 2 68 0
 386 002c 039B     		ldr	r3, [sp, #12]
 387 002e 019A     		ldr	r2, [sp, #4]
 388 0030 5A60     		str	r2, [r3, #4]
  69:modes.c       ****   ctx->nkeymat = 0;
 389              		.loc 2 69 0
 390 0032 039B     		ldr	r3, [sp, #12]
 391 0034 0022     		movs	r2, #0
 392 0036 9A62     		str	r2, [r3, #40]
  70:modes.c       ****   memcpy(ctx->nonce, nonce, prp->blocksz);
 393              		.loc 2 70 0
 394 0038 039B     		ldr	r3, [sp, #12]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 14


 395 003a 0833     		adds	r3, r3, #8
 396 003c 1800     		movs	r0, r3
 397 003e 029B     		ldr	r3, [sp, #8]
 398 0040 1A68     		ldr	r2, [r3]
 399 0042 009B     		ldr	r3, [sp]
 400 0044 1900     		movs	r1, r3
 401 0046 FFF7FEFF 		bl	memcpy
  71:modes.c       **** }
 402              		.loc 2 71 0
 403 004a C046     		nop
 404 004c 05B0     		add	sp, sp, #20
 405              		@ sp needed
 406 004e 00BD     		pop	{pc}
 407              		.cfi_endproc
 408              	.LFE28:
 409              		.size	cf_ctr_init, .-cf_ctr_init
 410              		.section	.text.cf_ctr_custom_counter,"ax",%progbits
 411              		.align	2
 412              		.global	cf_ctr_custom_counter
 413              		.code	16
 414              		.thumb_func
 415              		.type	cf_ctr_custom_counter, %function
 416              	cf_ctr_custom_counter:
 417              	.LFB29:
  72:modes.c       **** 
  73:modes.c       **** void cf_ctr_custom_counter(cf_ctr *ctx, size_t offset, size_t width)
  74:modes.c       **** {
 418              		.loc 2 74 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 16
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422              		@ link register save eliminated.
 423 0000 84B0     		sub	sp, sp, #16
 424              		.cfi_def_cfa_offset 16
 425 0002 0390     		str	r0, [sp, #12]
 426 0004 0291     		str	r1, [sp, #8]
 427 0006 0192     		str	r2, [sp, #4]
  75:modes.c       ****   assert(ctx->prp->blocksz <= offset + width);
  76:modes.c       ****   ctx->counter_offset = offset;
 428              		.loc 2 76 0
 429 0008 039B     		ldr	r3, [sp, #12]
 430 000a 029A     		ldr	r2, [sp, #8]
 431 000c DA62     		str	r2, [r3, #44]
  77:modes.c       ****   ctx->counter_width = width;
 432              		.loc 2 77 0
 433 000e 039B     		ldr	r3, [sp, #12]
 434 0010 019A     		ldr	r2, [sp, #4]
 435 0012 1A63     		str	r2, [r3, #48]
  78:modes.c       **** }
 436              		.loc 2 78 0
 437 0014 C046     		nop
 438 0016 04B0     		add	sp, sp, #16
 439              		@ sp needed
 440 0018 7047     		bx	lr
 441              		.cfi_endproc
 442              	.LFE29:
 443              		.size	cf_ctr_custom_counter, .-cf_ctr_custom_counter
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 15


 444 001a C046     		.section	.text.ctr_next_block,"ax",%progbits
 445              		.align	2
 446              		.code	16
 447              		.thumb_func
 448              		.type	ctr_next_block, %function
 449              	ctr_next_block:
 450              	.LFB30:
  79:modes.c       **** 
  80:modes.c       **** static void ctr_next_block(void *vctx, uint8_t *out)
  81:modes.c       **** {
 451              		.loc 2 81 0
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 16
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455 0000 10B5     		push	{r4, lr}
 456              		.cfi_def_cfa_offset 8
 457              		.cfi_offset 4, -8
 458              		.cfi_offset 14, -4
 459 0002 84B0     		sub	sp, sp, #16
 460              		.cfi_def_cfa_offset 24
 461 0004 0190     		str	r0, [sp, #4]
 462 0006 0091     		str	r1, [sp]
  82:modes.c       ****   cf_ctr *ctx = vctx;
 463              		.loc 2 82 0
 464 0008 019B     		ldr	r3, [sp, #4]
 465 000a 0393     		str	r3, [sp, #12]
  83:modes.c       ****   ctx->prp->encrypt(ctx->prpctx, ctx->nonce, out);
 466              		.loc 2 83 0
 467 000c 039B     		ldr	r3, [sp, #12]
 468 000e 1B68     		ldr	r3, [r3]
 469 0010 5C68     		ldr	r4, [r3, #4]
 470 0012 039B     		ldr	r3, [sp, #12]
 471 0014 5868     		ldr	r0, [r3, #4]
 472 0016 039B     		ldr	r3, [sp, #12]
 473 0018 0833     		adds	r3, r3, #8
 474 001a 009A     		ldr	r2, [sp]
 475 001c 1900     		movs	r1, r3
 476 001e A047     		blx	r4
  84:modes.c       ****   incr_be(ctx->nonce + ctx->counter_offset, ctx->counter_width);
 477              		.loc 2 84 0
 478 0020 039B     		ldr	r3, [sp, #12]
 479 0022 0833     		adds	r3, r3, #8
 480 0024 1A00     		movs	r2, r3
 481 0026 039B     		ldr	r3, [sp, #12]
 482 0028 DB6A     		ldr	r3, [r3, #44]
 483 002a D218     		adds	r2, r2, r3
 484 002c 039B     		ldr	r3, [sp, #12]
 485 002e 1B6B     		ldr	r3, [r3, #48]
 486 0030 1900     		movs	r1, r3
 487 0032 1000     		movs	r0, r2
 488 0034 FFF7FEFF 		bl	incr_be
  85:modes.c       **** }
 489              		.loc 2 85 0
 490 0038 C046     		nop
 491 003a 04B0     		add	sp, sp, #16
 492              		@ sp needed
 493 003c 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 16


 494              		.cfi_endproc
 495              	.LFE30:
 496              		.size	ctr_next_block, .-ctr_next_block
 497 003e C046     		.section	.text.cf_ctr_cipher,"ax",%progbits
 498              		.align	2
 499              		.global	cf_ctr_cipher
 500              		.code	16
 501              		.thumb_func
 502              		.type	cf_ctr_cipher, %function
 503              	cf_ctr_cipher:
 504              	.LFB31:
  86:modes.c       **** 
  87:modes.c       **** void cf_ctr_cipher(cf_ctr *ctx, const uint8_t *input, uint8_t *output, size_t bytes)
  88:modes.c       **** {
 505              		.loc 2 88 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 16
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509 0000 10B5     		push	{r4, lr}
 510              		.cfi_def_cfa_offset 8
 511              		.cfi_offset 4, -8
 512              		.cfi_offset 14, -4
 513 0002 88B0     		sub	sp, sp, #32
 514              		.cfi_def_cfa_offset 40
 515 0004 0790     		str	r0, [sp, #28]
 516 0006 0691     		str	r1, [sp, #24]
 517 0008 0592     		str	r2, [sp, #20]
 518 000a 0493     		str	r3, [sp, #16]
  89:modes.c       ****   cf_blockwise_xor(ctx->keymat, &ctx->nkeymat,
 519              		.loc 2 89 0
 520 000c 079B     		ldr	r3, [sp, #28]
 521 000e 1833     		adds	r3, r3, #24
 522 0010 1800     		movs	r0, r3
 523 0012 079B     		ldr	r3, [sp, #28]
 524 0014 2833     		adds	r3, r3, #40
 525 0016 1900     		movs	r1, r3
  90:modes.c       ****                    ctx->prp->blocksz,
 526              		.loc 2 90 0
 527 0018 079B     		ldr	r3, [sp, #28]
 528 001a 1B68     		ldr	r3, [r3]
  89:modes.c       ****   cf_blockwise_xor(ctx->keymat, &ctx->nkeymat,
 529              		.loc 2 89 0
 530 001c 1A68     		ldr	r2, [r3]
 531 001e 069C     		ldr	r4, [sp, #24]
 532 0020 079B     		ldr	r3, [sp, #28]
 533 0022 0393     		str	r3, [sp, #12]
 534 0024 054B     		ldr	r3, .L22
 535 0026 0293     		str	r3, [sp, #8]
 536 0028 049B     		ldr	r3, [sp, #16]
 537 002a 0193     		str	r3, [sp, #4]
 538 002c 059B     		ldr	r3, [sp, #20]
 539 002e 0093     		str	r3, [sp]
 540 0030 2300     		movs	r3, r4
 541 0032 FFF7FEFF 		bl	cf_blockwise_xor
  91:modes.c       ****                    input, output, bytes,
  92:modes.c       ****                    ctr_next_block,
  93:modes.c       ****                    ctx);
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 17


  94:modes.c       **** }
 542              		.loc 2 94 0
 543 0036 C046     		nop
 544 0038 08B0     		add	sp, sp, #32
 545              		@ sp needed
 546 003a 10BD     		pop	{r4, pc}
 547              	.L23:
 548              		.align	2
 549              	.L22:
 550 003c 00000000 		.word	ctr_next_block
 551              		.cfi_endproc
 552              	.LFE31:
 553              		.size	cf_ctr_cipher, .-cf_ctr_cipher
 554              		.section	.text.cf_ctr_discard_block,"ax",%progbits
 555              		.align	2
 556              		.global	cf_ctr_discard_block
 557              		.code	16
 558              		.thumb_func
 559              		.type	cf_ctr_discard_block, %function
 560              	cf_ctr_discard_block:
 561              	.LFB32:
  95:modes.c       **** 
  96:modes.c       **** void cf_ctr_discard_block(cf_ctr *ctx)
  97:modes.c       **** {
 562              		.loc 2 97 0
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 8
 565              		@ frame_needed = 0, uses_anonymous_args = 0
 566              		@ link register save eliminated.
 567 0000 82B0     		sub	sp, sp, #8
 568              		.cfi_def_cfa_offset 8
 569 0002 0190     		str	r0, [sp, #4]
  98:modes.c       ****   ctx->nkeymat = 0;
 570              		.loc 2 98 0
 571 0004 019B     		ldr	r3, [sp, #4]
 572 0006 0022     		movs	r2, #0
 573 0008 9A62     		str	r2, [r3, #40]
  99:modes.c       **** }
 574              		.loc 2 99 0
 575 000a C046     		nop
 576 000c 02B0     		add	sp, sp, #8
 577              		@ sp needed
 578 000e 7047     		bx	lr
 579              		.cfi_endproc
 580              	.LFE32:
 581              		.size	cf_ctr_discard_block, .-cf_ctr_discard_block
 582              		.text
 583              	.Letext0:
 584              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 585              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 586              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 587              		.file 6 "prp.h"
 588              		.file 7 "modes.h"
 589              		.section	.debug_info,"",%progbits
 590              	.Ldebug_info0:
 591 0000 C6040000 		.4byte	0x4c6
 592 0004 0400     		.2byte	0x4
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 18


 593 0006 00000000 		.4byte	.Ldebug_abbrev0
 594 000a 04       		.byte	0x4
 595 000b 01       		.uleb128 0x1
 596 000c 16000000 		.4byte	.LASF46
 597 0010 0C       		.byte	0xc
 598 0011 8E010000 		.4byte	.LASF47
 599 0015 09020000 		.4byte	.LASF48
 600 0019 00000000 		.4byte	.Ldebug_ranges0+0
 601 001d 00000000 		.4byte	0
 602 0021 00000000 		.4byte	.Ldebug_line0
 603 0025 02       		.uleb128 0x2
 604 0026 04       		.byte	0x4
 605 0027 05       		.byte	0x5
 606 0028 696E7400 		.ascii	"int\000"
 607 002c 03       		.uleb128 0x3
 608 002d 58010000 		.4byte	.LASF4
 609 0031 03       		.byte	0x3
 610 0032 D8       		.byte	0xd8
 611 0033 37000000 		.4byte	0x37
 612 0037 04       		.uleb128 0x4
 613 0038 04       		.byte	0x4
 614 0039 07       		.byte	0x7
 615 003a A5010000 		.4byte	.LASF0
 616 003e 04       		.uleb128 0x4
 617 003f 08       		.byte	0x8
 618 0040 05       		.byte	0x5
 619 0041 FB010000 		.4byte	.LASF1
 620 0045 04       		.uleb128 0x4
 621 0046 08       		.byte	0x8
 622 0047 04       		.byte	0x4
 623 0048 E7020000 		.4byte	.LASF2
 624 004c 04       		.uleb128 0x4
 625 004d 01       		.byte	0x1
 626 004e 06       		.byte	0x6
 627 004f 09030000 		.4byte	.LASF3
 628 0053 03       		.uleb128 0x3
 629 0054 0C000000 		.4byte	.LASF5
 630 0058 04       		.byte	0x4
 631 0059 1D       		.byte	0x1d
 632 005a 5E000000 		.4byte	0x5e
 633 005e 04       		.uleb128 0x4
 634 005f 01       		.byte	0x1
 635 0060 08       		.byte	0x8
 636 0061 03010000 		.4byte	.LASF6
 637 0065 04       		.uleb128 0x4
 638 0066 02       		.byte	0x2
 639 0067 05       		.byte	0x5
 640 0068 B6020000 		.4byte	.LASF7
 641 006c 04       		.uleb128 0x4
 642 006d 02       		.byte	0x2
 643 006e 07       		.byte	0x7
 644 006f 45010000 		.4byte	.LASF8
 645 0073 04       		.uleb128 0x4
 646 0074 04       		.byte	0x4
 647 0075 05       		.byte	0x5
 648 0076 D8020000 		.4byte	.LASF9
 649 007a 04       		.uleb128 0x4
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 19


 650 007b 04       		.byte	0x4
 651 007c 07       		.byte	0x7
 652 007d 33010000 		.4byte	.LASF10
 653 0081 04       		.uleb128 0x4
 654 0082 08       		.byte	0x8
 655 0083 07       		.byte	0x7
 656 0084 B9010000 		.4byte	.LASF11
 657 0088 03       		.uleb128 0x3
 658 0089 CF000000 		.4byte	.LASF12
 659 008d 05       		.byte	0x5
 660 008e 18       		.byte	0x18
 661 008f 53000000 		.4byte	0x53
 662 0093 03       		.uleb128 0x3
 663 0094 81010000 		.4byte	.LASF13
 664 0098 06       		.byte	0x6
 665 0099 26       		.byte	0x26
 666 009a 9E000000 		.4byte	0x9e
 667 009e 05       		.uleb128 0x5
 668 009f 04       		.byte	0x4
 669 00a0 A4000000 		.4byte	0xa4
 670 00a4 06       		.uleb128 0x6
 671 00a5 B9000000 		.4byte	0xb9
 672 00a9 07       		.uleb128 0x7
 673 00aa B9000000 		.4byte	0xb9
 674 00ae 07       		.uleb128 0x7
 675 00af BB000000 		.4byte	0xbb
 676 00b3 07       		.uleb128 0x7
 677 00b4 C6000000 		.4byte	0xc6
 678 00b8 00       		.byte	0
 679 00b9 08       		.uleb128 0x8
 680 00ba 04       		.byte	0x4
 681 00bb 05       		.uleb128 0x5
 682 00bc 04       		.byte	0x4
 683 00bd C1000000 		.4byte	0xc1
 684 00c1 09       		.uleb128 0x9
 685 00c2 88000000 		.4byte	0x88
 686 00c6 05       		.uleb128 0x5
 687 00c7 04       		.byte	0x4
 688 00c8 88000000 		.4byte	0x88
 689 00cc 0A       		.uleb128 0xa
 690 00cd 0C       		.byte	0xc
 691 00ce 06       		.byte	0x6
 692 00cf 34       		.byte	0x34
 693 00d0 F9000000 		.4byte	0xf9
 694 00d4 0B       		.uleb128 0xb
 695 00d5 EE000000 		.4byte	.LASF14
 696 00d9 06       		.byte	0x6
 697 00da 36       		.byte	0x36
 698 00db 2C000000 		.4byte	0x2c
 699 00df 00       		.byte	0
 700 00e0 0B       		.uleb128 0xb
 701 00e1 C7000000 		.4byte	.LASF15
 702 00e5 06       		.byte	0x6
 703 00e6 37       		.byte	0x37
 704 00e7 93000000 		.4byte	0x93
 705 00eb 04       		.byte	0x4
 706 00ec 0B       		.uleb128 0xb
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 20


 707 00ed D7000000 		.4byte	.LASF16
 708 00f1 06       		.byte	0x6
 709 00f2 38       		.byte	0x38
 710 00f3 93000000 		.4byte	0x93
 711 00f7 08       		.byte	0x8
 712 00f8 00       		.byte	0
 713 00f9 03       		.uleb128 0x3
 714 00fa 17010000 		.4byte	.LASF17
 715 00fe 06       		.byte	0x6
 716 00ff 39       		.byte	0x39
 717 0100 CC000000 		.4byte	0xcc
 718 0104 0A       		.uleb128 0xa
 719 0105 18       		.byte	0x18
 720 0106 07       		.byte	0x7
 721 0107 35       		.byte	0x35
 722 0108 31010000 		.4byte	0x131
 723 010c 0C       		.uleb128 0xc
 724 010d 70727000 		.ascii	"prp\000"
 725 0111 07       		.byte	0x7
 726 0112 37       		.byte	0x37
 727 0113 31010000 		.4byte	0x131
 728 0117 00       		.byte	0
 729 0118 0B       		.uleb128 0xb
 730 0119 B2010000 		.4byte	.LASF18
 731 011d 07       		.byte	0x7
 732 011e 38       		.byte	0x38
 733 011f B9000000 		.4byte	0xb9
 734 0123 04       		.byte	0x4
 735 0124 0B       		.uleb128 0xb
 736 0125 F6000000 		.4byte	.LASF19
 737 0129 07       		.byte	0x7
 738 012a 39       		.byte	0x39
 739 012b 3C010000 		.4byte	0x13c
 740 012f 08       		.byte	0x8
 741 0130 00       		.byte	0
 742 0131 05       		.uleb128 0x5
 743 0132 04       		.byte	0x4
 744 0133 37010000 		.4byte	0x137
 745 0137 09       		.uleb128 0x9
 746 0138 F9000000 		.4byte	0xf9
 747 013c 0D       		.uleb128 0xd
 748 013d 88000000 		.4byte	0x88
 749 0141 4C010000 		.4byte	0x14c
 750 0145 0E       		.uleb128 0xe
 751 0146 4C010000 		.4byte	0x14c
 752 014a 0F       		.byte	0xf
 753 014b 00       		.byte	0
 754 014c 04       		.uleb128 0x4
 755 014d 04       		.byte	0x4
 756 014e 07       		.byte	0x7
 757 014f F2010000 		.4byte	.LASF20
 758 0153 03       		.uleb128 0x3
 759 0154 FC000000 		.4byte	.LASF21
 760 0158 07       		.byte	0x7
 761 0159 3A       		.byte	0x3a
 762 015a 04010000 		.4byte	0x104
 763 015e 0A       		.uleb128 0xa
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 21


 764 015f 34       		.byte	0x34
 765 0160 07       		.byte	0x7
 766 0161 72       		.byte	0x72
 767 0162 BB010000 		.4byte	0x1bb
 768 0166 0C       		.uleb128 0xc
 769 0167 70727000 		.ascii	"prp\000"
 770 016b 07       		.byte	0x7
 771 016c 74       		.byte	0x74
 772 016d 31010000 		.4byte	0x131
 773 0171 00       		.byte	0
 774 0172 0B       		.uleb128 0xb
 775 0173 B2010000 		.4byte	.LASF18
 776 0177 07       		.byte	0x7
 777 0178 75       		.byte	0x75
 778 0179 B9000000 		.4byte	0xb9
 779 017d 04       		.byte	0x4
 780 017e 0B       		.uleb128 0xb
 781 017f 5F010000 		.4byte	.LASF22
 782 0183 07       		.byte	0x7
 783 0184 76       		.byte	0x76
 784 0185 3C010000 		.4byte	0x13c
 785 0189 08       		.byte	0x8
 786 018a 0B       		.uleb128 0xb
 787 018b C0000000 		.4byte	.LASF23
 788 018f 07       		.byte	0x7
 789 0190 77       		.byte	0x77
 790 0191 3C010000 		.4byte	0x13c
 791 0195 18       		.byte	0x18
 792 0196 0B       		.uleb128 0xb
 793 0197 15030000 		.4byte	.LASF24
 794 019b 07       		.byte	0x7
 795 019c 78       		.byte	0x78
 796 019d 2C000000 		.4byte	0x2c
 797 01a1 28       		.byte	0x28
 798 01a2 0B       		.uleb128 0xb
 799 01a3 DF000000 		.4byte	.LASF25
 800 01a7 07       		.byte	0x7
 801 01a8 79       		.byte	0x79
 802 01a9 2C000000 		.4byte	0x2c
 803 01ad 2C       		.byte	0x2c
 804 01ae 0B       		.uleb128 0xb
 805 01af 65010000 		.4byte	.LASF26
 806 01b3 07       		.byte	0x7
 807 01b4 7A       		.byte	0x7a
 808 01b5 2C000000 		.4byte	0x2c
 809 01b9 30       		.byte	0x30
 810 01ba 00       		.byte	0
 811 01bb 03       		.uleb128 0x3
 812 01bc B9000000 		.4byte	.LASF27
 813 01c0 07       		.byte	0x7
 814 01c1 7B       		.byte	0x7b
 815 01c2 5E010000 		.4byte	0x15e
 816 01c6 04       		.uleb128 0x4
 817 01c7 01       		.byte	0x1
 818 01c8 08       		.byte	0x8
 819 01c9 95020000 		.4byte	.LASF28
 820 01cd 0F       		.uleb128 0xf
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 22


 821 01ce EB010000 		.4byte	.LASF29
 822 01d2 01       		.byte	0x1
 823 01d3 8D       		.byte	0x8d
 824 01d4 00000000 		.4byte	.LFB13
 825 01d8 40000000 		.4byte	.LFE13-.LFB13
 826 01dc 01       		.uleb128 0x1
 827 01dd 9C       		.byte	0x9c
 828 01de 2D020000 		.4byte	0x22d
 829 01e2 10       		.uleb128 0x10
 830 01e3 6F757400 		.ascii	"out\000"
 831 01e7 01       		.byte	0x1
 832 01e8 8D       		.byte	0x8d
 833 01e9 C6000000 		.4byte	0xc6
 834 01ed 02       		.uleb128 0x2
 835 01ee 91       		.byte	0x91
 836 01ef 74       		.sleb128 -12
 837 01f0 10       		.uleb128 0x10
 838 01f1 7800     		.ascii	"x\000"
 839 01f3 01       		.byte	0x1
 840 01f4 8D       		.byte	0x8d
 841 01f5 BB000000 		.4byte	0xbb
 842 01f9 02       		.uleb128 0x2
 843 01fa 91       		.byte	0x91
 844 01fb 70       		.sleb128 -16
 845 01fc 10       		.uleb128 0x10
 846 01fd 7900     		.ascii	"y\000"
 847 01ff 01       		.byte	0x1
 848 0200 8D       		.byte	0x8d
 849 0201 BB000000 		.4byte	0xbb
 850 0205 02       		.uleb128 0x2
 851 0206 91       		.byte	0x91
 852 0207 6C       		.sleb128 -20
 853 0208 10       		.uleb128 0x10
 854 0209 6C656E00 		.ascii	"len\000"
 855 020d 01       		.byte	0x1
 856 020e 8D       		.byte	0x8d
 857 020f 2C000000 		.4byte	0x2c
 858 0213 02       		.uleb128 0x2
 859 0214 91       		.byte	0x91
 860 0215 68       		.sleb128 -24
 861 0216 11       		.uleb128 0x11
 862 0217 0A000000 		.4byte	.LBB2
 863 021b 30000000 		.4byte	.LBE2-.LBB2
 864 021f 12       		.uleb128 0x12
 865 0220 6900     		.ascii	"i\000"
 866 0222 01       		.byte	0x1
 867 0223 8F       		.byte	0x8f
 868 0224 2C000000 		.4byte	0x2c
 869 0228 02       		.uleb128 0x2
 870 0229 91       		.byte	0x91
 871 022a 7C       		.sleb128 -4
 872 022b 00       		.byte	0
 873 022c 00       		.byte	0
 874 022d 13       		.uleb128 0x13
 875 022e 1D030000 		.4byte	.LASF30
 876 0232 01       		.byte	0x1
 877 0233 0401     		.2byte	0x104
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 23


 878 0235 00000000 		.4byte	.LFB22
 879 0239 38000000 		.4byte	.LFE22-.LFB22
 880 023d 01       		.uleb128 0x1
 881 023e 9C       		.byte	0x9c
 882 023f 60020000 		.4byte	0x260
 883 0243 14       		.uleb128 0x14
 884 0244 7600     		.ascii	"v\000"
 885 0246 01       		.byte	0x1
 886 0247 0401     		.2byte	0x104
 887 0249 C6000000 		.4byte	0xc6
 888 024d 02       		.uleb128 0x2
 889 024e 91       		.byte	0x91
 890 024f 7C       		.sleb128 -4
 891 0250 14       		.uleb128 0x14
 892 0251 6C656E00 		.ascii	"len\000"
 893 0255 01       		.byte	0x1
 894 0256 0401     		.2byte	0x104
 895 0258 2C000000 		.4byte	0x2c
 896 025c 02       		.uleb128 0x2
 897 025d 91       		.byte	0x91
 898 025e 78       		.sleb128 -8
 899 025f 00       		.byte	0
 900 0260 15       		.uleb128 0x15
 901 0261 00000000 		.4byte	.LASF31
 902 0265 02       		.byte	0x2
 903 0266 18       		.byte	0x18
 904 0267 00000000 		.4byte	.LFB25
 905 026b 30000000 		.4byte	.LFE25-.LFB25
 906 026f 01       		.uleb128 0x1
 907 0270 9C       		.byte	0x9c
 908 0271 AD020000 		.4byte	0x2ad
 909 0275 10       		.uleb128 0x10
 910 0276 63747800 		.ascii	"ctx\000"
 911 027a 02       		.byte	0x2
 912 027b 18       		.byte	0x18
 913 027c AD020000 		.4byte	0x2ad
 914 0280 02       		.uleb128 0x2
 915 0281 91       		.byte	0x91
 916 0282 74       		.sleb128 -12
 917 0283 10       		.uleb128 0x10
 918 0284 70727000 		.ascii	"prp\000"
 919 0288 02       		.byte	0x2
 920 0289 18       		.byte	0x18
 921 028a 31010000 		.4byte	0x131
 922 028e 02       		.uleb128 0x2
 923 028f 91       		.byte	0x91
 924 0290 70       		.sleb128 -16
 925 0291 16       		.uleb128 0x16
 926 0292 B2010000 		.4byte	.LASF18
 927 0296 02       		.byte	0x2
 928 0297 18       		.byte	0x18
 929 0298 B9000000 		.4byte	0xb9
 930 029c 02       		.uleb128 0x2
 931 029d 91       		.byte	0x91
 932 029e 6C       		.sleb128 -20
 933 029f 10       		.uleb128 0x10
 934 02a0 697600   		.ascii	"iv\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 24


 935 02a3 02       		.byte	0x2
 936 02a4 18       		.byte	0x18
 937 02a5 BB000000 		.4byte	0xbb
 938 02a9 02       		.uleb128 0x2
 939 02aa 91       		.byte	0x91
 940 02ab 68       		.sleb128 -24
 941 02ac 00       		.byte	0
 942 02ad 05       		.uleb128 0x5
 943 02ae 04       		.byte	0x4
 944 02af 53010000 		.4byte	0x153
 945 02b3 15       		.uleb128 0x15
 946 02b4 96010000 		.4byte	.LASF32
 947 02b8 02       		.byte	0x2
 948 02b9 1F       		.byte	0x1f
 949 02ba 00000000 		.4byte	.LFB26
 950 02be 6C000000 		.4byte	.LFE26-.LFB26
 951 02c2 01       		.uleb128 0x1
 952 02c3 9C       		.byte	0x9c
 953 02c4 1D030000 		.4byte	0x31d
 954 02c8 10       		.uleb128 0x10
 955 02c9 63747800 		.ascii	"ctx\000"
 956 02cd 02       		.byte	0x2
 957 02ce 1F       		.byte	0x1f
 958 02cf AD020000 		.4byte	0x2ad
 959 02d3 02       		.uleb128 0x2
 960 02d4 91       		.byte	0x91
 961 02d5 5C       		.sleb128 -36
 962 02d6 16       		.uleb128 0x16
 963 02d7 11010000 		.4byte	.LASF33
 964 02db 02       		.byte	0x2
 965 02dc 1F       		.byte	0x1f
 966 02dd BB000000 		.4byte	0xbb
 967 02e1 02       		.uleb128 0x2
 968 02e2 91       		.byte	0x91
 969 02e3 58       		.sleb128 -40
 970 02e4 16       		.uleb128 0x16
 971 02e5 CC020000 		.4byte	.LASF34
 972 02e9 02       		.byte	0x2
 973 02ea 1F       		.byte	0x1f
 974 02eb C6000000 		.4byte	0xc6
 975 02ef 02       		.uleb128 0x2
 976 02f0 91       		.byte	0x91
 977 02f1 54       		.sleb128 -44
 978 02f2 16       		.uleb128 0x16
 979 02f3 E4010000 		.4byte	.LASF35
 980 02f7 02       		.byte	0x2
 981 02f8 1F       		.byte	0x1f
 982 02f9 2C000000 		.4byte	0x2c
 983 02fd 02       		.uleb128 0x2
 984 02fe 91       		.byte	0x91
 985 02ff 50       		.sleb128 -48
 986 0300 12       		.uleb128 0x12
 987 0301 62756600 		.ascii	"buf\000"
 988 0305 02       		.byte	0x2
 989 0306 21       		.byte	0x21
 990 0307 3C010000 		.4byte	0x13c
 991 030b 02       		.uleb128 0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 25


 992 030c 91       		.byte	0x91
 993 030d 64       		.sleb128 -28
 994 030e 17       		.uleb128 0x17
 995 030f D0010000 		.4byte	.LASF36
 996 0313 02       		.byte	0x2
 997 0314 22       		.byte	0x22
 998 0315 2C000000 		.4byte	0x2c
 999 0319 02       		.uleb128 0x2
 1000 031a 91       		.byte	0x91
 1001 031b 74       		.sleb128 -12
 1002 031c 00       		.byte	0
 1003 031d 15       		.uleb128 0x15
 1004 031e D5010000 		.4byte	.LASF37
 1005 0322 02       		.byte	0x2
 1006 0323 2E       		.byte	0x2e
 1007 0324 00000000 		.4byte	.LFB27
 1008 0328 66000000 		.4byte	.LFE27-.LFB27
 1009 032c 01       		.uleb128 0x1
 1010 032d 9C       		.byte	0x9c
 1011 032e 87030000 		.4byte	0x387
 1012 0332 10       		.uleb128 0x10
 1013 0333 63747800 		.ascii	"ctx\000"
 1014 0337 02       		.byte	0x2
 1015 0338 2E       		.byte	0x2e
 1016 0339 AD020000 		.4byte	0x2ad
 1017 033d 02       		.uleb128 0x2
 1018 033e 91       		.byte	0x91
 1019 033f 5C       		.sleb128 -36
 1020 0340 16       		.uleb128 0x16
 1021 0341 11010000 		.4byte	.LASF33
 1022 0345 02       		.byte	0x2
 1023 0346 2E       		.byte	0x2e
 1024 0347 BB000000 		.4byte	0xbb
 1025 034b 02       		.uleb128 0x2
 1026 034c 91       		.byte	0x91
 1027 034d 58       		.sleb128 -40
 1028 034e 16       		.uleb128 0x16
 1029 034f CC020000 		.4byte	.LASF34
 1030 0353 02       		.byte	0x2
 1031 0354 2E       		.byte	0x2e
 1032 0355 C6000000 		.4byte	0xc6
 1033 0359 02       		.uleb128 0x2
 1034 035a 91       		.byte	0x91
 1035 035b 54       		.sleb128 -44
 1036 035c 16       		.uleb128 0x16
 1037 035d E4010000 		.4byte	.LASF35
 1038 0361 02       		.byte	0x2
 1039 0362 2E       		.byte	0x2e
 1040 0363 2C000000 		.4byte	0x2c
 1041 0367 02       		.uleb128 0x2
 1042 0368 91       		.byte	0x91
 1043 0369 50       		.sleb128 -48
 1044 036a 12       		.uleb128 0x12
 1045 036b 62756600 		.ascii	"buf\000"
 1046 036f 02       		.byte	0x2
 1047 0370 30       		.byte	0x30
 1048 0371 3C010000 		.4byte	0x13c
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 26


 1049 0375 02       		.uleb128 0x2
 1050 0376 91       		.byte	0x91
 1051 0377 64       		.sleb128 -28
 1052 0378 17       		.uleb128 0x17
 1053 0379 D0010000 		.4byte	.LASF36
 1054 037d 02       		.byte	0x2
 1055 037e 31       		.byte	0x31
 1056 037f 2C000000 		.4byte	0x2c
 1057 0383 02       		.uleb128 0x2
 1058 0384 91       		.byte	0x91
 1059 0385 74       		.sleb128 -12
 1060 0386 00       		.byte	0
 1061 0387 15       		.uleb128 0x15
 1062 0388 C0020000 		.4byte	.LASF38
 1063 038c 02       		.byte	0x2
 1064 038d 3E       		.byte	0x3e
 1065 038e 00000000 		.4byte	.LFB28
 1066 0392 50000000 		.4byte	.LFE28-.LFB28
 1067 0396 01       		.uleb128 0x1
 1068 0397 9C       		.byte	0x9c
 1069 0398 D5030000 		.4byte	0x3d5
 1070 039c 10       		.uleb128 0x10
 1071 039d 63747800 		.ascii	"ctx\000"
 1072 03a1 02       		.byte	0x2
 1073 03a2 3E       		.byte	0x3e
 1074 03a3 D5030000 		.4byte	0x3d5
 1075 03a7 02       		.uleb128 0x2
 1076 03a8 91       		.byte	0x91
 1077 03a9 74       		.sleb128 -12
 1078 03aa 10       		.uleb128 0x10
 1079 03ab 70727000 		.ascii	"prp\000"
 1080 03af 02       		.byte	0x2
 1081 03b0 3E       		.byte	0x3e
 1082 03b1 31010000 		.4byte	0x131
 1083 03b5 02       		.uleb128 0x2
 1084 03b6 91       		.byte	0x91
 1085 03b7 70       		.sleb128 -16
 1086 03b8 16       		.uleb128 0x16
 1087 03b9 B2010000 		.4byte	.LASF18
 1088 03bd 02       		.byte	0x2
 1089 03be 3E       		.byte	0x3e
 1090 03bf B9000000 		.4byte	0xb9
 1091 03c3 02       		.uleb128 0x2
 1092 03c4 91       		.byte	0x91
 1093 03c5 6C       		.sleb128 -20
 1094 03c6 16       		.uleb128 0x16
 1095 03c7 5F010000 		.4byte	.LASF22
 1096 03cb 02       		.byte	0x2
 1097 03cc 3E       		.byte	0x3e
 1098 03cd BB000000 		.4byte	0xbb
 1099 03d1 02       		.uleb128 0x2
 1100 03d2 91       		.byte	0x91
 1101 03d3 68       		.sleb128 -24
 1102 03d4 00       		.byte	0
 1103 03d5 05       		.uleb128 0x5
 1104 03d6 04       		.byte	0x4
 1105 03d7 BB010000 		.4byte	0x1bb
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 27


 1106 03db 18       		.uleb128 0x18
 1107 03dc F3020000 		.4byte	.LASF39
 1108 03e0 02       		.byte	0x2
 1109 03e1 49       		.byte	0x49
 1110 03e2 00000000 		.4byte	.LFB29
 1111 03e6 1A000000 		.4byte	.LFE29-.LFB29
 1112 03ea 01       		.uleb128 0x1
 1113 03eb 9C       		.byte	0x9c
 1114 03ec 1B040000 		.4byte	0x41b
 1115 03f0 10       		.uleb128 0x10
 1116 03f1 63747800 		.ascii	"ctx\000"
 1117 03f5 02       		.byte	0x2
 1118 03f6 49       		.byte	0x49
 1119 03f7 D5030000 		.4byte	0x3d5
 1120 03fb 02       		.uleb128 0x2
 1121 03fc 91       		.byte	0x91
 1122 03fd 7C       		.sleb128 -4
 1123 03fe 16       		.uleb128 0x16
 1124 03ff A0020000 		.4byte	.LASF40
 1125 0403 02       		.byte	0x2
 1126 0404 49       		.byte	0x49
 1127 0405 2C000000 		.4byte	0x2c
 1128 0409 02       		.uleb128 0x2
 1129 040a 91       		.byte	0x91
 1130 040b 78       		.sleb128 -8
 1131 040c 16       		.uleb128 0x16
 1132 040d 9A020000 		.4byte	.LASF41
 1133 0411 02       		.byte	0x2
 1134 0412 49       		.byte	0x49
 1135 0413 2C000000 		.4byte	0x2c
 1136 0417 02       		.uleb128 0x2
 1137 0418 91       		.byte	0x91
 1138 0419 74       		.sleb128 -12
 1139 041a 00       		.byte	0
 1140 041b 19       		.uleb128 0x19
 1141 041c A7020000 		.4byte	.LASF42
 1142 0420 02       		.byte	0x2
 1143 0421 50       		.byte	0x50
 1144 0422 00000000 		.4byte	.LFB30
 1145 0426 3E000000 		.4byte	.LFE30-.LFB30
 1146 042a 01       		.uleb128 0x1
 1147 042b 9C       		.byte	0x9c
 1148 042c 5B040000 		.4byte	0x45b
 1149 0430 16       		.uleb128 0x16
 1150 0431 D3020000 		.4byte	.LASF43
 1151 0435 02       		.byte	0x2
 1152 0436 50       		.byte	0x50
 1153 0437 B9000000 		.4byte	0xb9
 1154 043b 02       		.uleb128 0x2
 1155 043c 91       		.byte	0x91
 1156 043d 6C       		.sleb128 -20
 1157 043e 10       		.uleb128 0x10
 1158 043f 6F757400 		.ascii	"out\000"
 1159 0443 02       		.byte	0x2
 1160 0444 50       		.byte	0x50
 1161 0445 C6000000 		.4byte	0xc6
 1162 0449 02       		.uleb128 0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 28


 1163 044a 91       		.byte	0x91
 1164 044b 68       		.sleb128 -24
 1165 044c 12       		.uleb128 0x12
 1166 044d 63747800 		.ascii	"ctx\000"
 1167 0451 02       		.byte	0x2
 1168 0452 52       		.byte	0x52
 1169 0453 D5030000 		.4byte	0x3d5
 1170 0457 02       		.uleb128 0x2
 1171 0458 91       		.byte	0x91
 1172 0459 74       		.sleb128 -12
 1173 045a 00       		.byte	0
 1174 045b 15       		.uleb128 0x15
 1175 045c 73010000 		.4byte	.LASF44
 1176 0460 02       		.byte	0x2
 1177 0461 57       		.byte	0x57
 1178 0462 00000000 		.4byte	.LFB31
 1179 0466 40000000 		.4byte	.LFE31-.LFB31
 1180 046a 01       		.uleb128 0x1
 1181 046b 9C       		.byte	0x9c
 1182 046c A9040000 		.4byte	0x4a9
 1183 0470 10       		.uleb128 0x10
 1184 0471 63747800 		.ascii	"ctx\000"
 1185 0475 02       		.byte	0x2
 1186 0476 57       		.byte	0x57
 1187 0477 D5030000 		.4byte	0x3d5
 1188 047b 02       		.uleb128 0x2
 1189 047c 91       		.byte	0x91
 1190 047d 74       		.sleb128 -12
 1191 047e 16       		.uleb128 0x16
 1192 047f 11010000 		.4byte	.LASF33
 1193 0483 02       		.byte	0x2
 1194 0484 57       		.byte	0x57
 1195 0485 BB000000 		.4byte	0xbb
 1196 0489 02       		.uleb128 0x2
 1197 048a 91       		.byte	0x91
 1198 048b 70       		.sleb128 -16
 1199 048c 16       		.uleb128 0x16
 1200 048d CC020000 		.4byte	.LASF34
 1201 0491 02       		.byte	0x2
 1202 0492 57       		.byte	0x57
 1203 0493 C6000000 		.4byte	0xc6
 1204 0497 02       		.uleb128 0x2
 1205 0498 91       		.byte	0x91
 1206 0499 6C       		.sleb128 -20
 1207 049a 16       		.uleb128 0x16
 1208 049b E1020000 		.4byte	.LASF45
 1209 049f 02       		.byte	0x2
 1210 04a0 57       		.byte	0x57
 1211 04a1 2C000000 		.4byte	0x2c
 1212 04a5 02       		.uleb128 0x2
 1213 04a6 91       		.byte	0x91
 1214 04a7 68       		.sleb128 -24
 1215 04a8 00       		.byte	0
 1216 04a9 1A       		.uleb128 0x1a
 1217 04aa 1E010000 		.4byte	.LASF49
 1218 04ae 02       		.byte	0x2
 1219 04af 60       		.byte	0x60
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 29


 1220 04b0 00000000 		.4byte	.LFB32
 1221 04b4 10000000 		.4byte	.LFE32-.LFB32
 1222 04b8 01       		.uleb128 0x1
 1223 04b9 9C       		.byte	0x9c
 1224 04ba 10       		.uleb128 0x10
 1225 04bb 63747800 		.ascii	"ctx\000"
 1226 04bf 02       		.byte	0x2
 1227 04c0 60       		.byte	0x60
 1228 04c1 D5030000 		.4byte	0x3d5
 1229 04c5 02       		.uleb128 0x2
 1230 04c6 91       		.byte	0x91
 1231 04c7 7C       		.sleb128 -4
 1232 04c8 00       		.byte	0
 1233 04c9 00       		.byte	0
 1234              		.section	.debug_abbrev,"",%progbits
 1235              	.Ldebug_abbrev0:
 1236 0000 01       		.uleb128 0x1
 1237 0001 11       		.uleb128 0x11
 1238 0002 01       		.byte	0x1
 1239 0003 25       		.uleb128 0x25
 1240 0004 0E       		.uleb128 0xe
 1241 0005 13       		.uleb128 0x13
 1242 0006 0B       		.uleb128 0xb
 1243 0007 03       		.uleb128 0x3
 1244 0008 0E       		.uleb128 0xe
 1245 0009 1B       		.uleb128 0x1b
 1246 000a 0E       		.uleb128 0xe
 1247 000b 55       		.uleb128 0x55
 1248 000c 17       		.uleb128 0x17
 1249 000d 11       		.uleb128 0x11
 1250 000e 01       		.uleb128 0x1
 1251 000f 10       		.uleb128 0x10
 1252 0010 17       		.uleb128 0x17
 1253 0011 00       		.byte	0
 1254 0012 00       		.byte	0
 1255 0013 02       		.uleb128 0x2
 1256 0014 24       		.uleb128 0x24
 1257 0015 00       		.byte	0
 1258 0016 0B       		.uleb128 0xb
 1259 0017 0B       		.uleb128 0xb
 1260 0018 3E       		.uleb128 0x3e
 1261 0019 0B       		.uleb128 0xb
 1262 001a 03       		.uleb128 0x3
 1263 001b 08       		.uleb128 0x8
 1264 001c 00       		.byte	0
 1265 001d 00       		.byte	0
 1266 001e 03       		.uleb128 0x3
 1267 001f 16       		.uleb128 0x16
 1268 0020 00       		.byte	0
 1269 0021 03       		.uleb128 0x3
 1270 0022 0E       		.uleb128 0xe
 1271 0023 3A       		.uleb128 0x3a
 1272 0024 0B       		.uleb128 0xb
 1273 0025 3B       		.uleb128 0x3b
 1274 0026 0B       		.uleb128 0xb
 1275 0027 49       		.uleb128 0x49
 1276 0028 13       		.uleb128 0x13
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 30


 1277 0029 00       		.byte	0
 1278 002a 00       		.byte	0
 1279 002b 04       		.uleb128 0x4
 1280 002c 24       		.uleb128 0x24
 1281 002d 00       		.byte	0
 1282 002e 0B       		.uleb128 0xb
 1283 002f 0B       		.uleb128 0xb
 1284 0030 3E       		.uleb128 0x3e
 1285 0031 0B       		.uleb128 0xb
 1286 0032 03       		.uleb128 0x3
 1287 0033 0E       		.uleb128 0xe
 1288 0034 00       		.byte	0
 1289 0035 00       		.byte	0
 1290 0036 05       		.uleb128 0x5
 1291 0037 0F       		.uleb128 0xf
 1292 0038 00       		.byte	0
 1293 0039 0B       		.uleb128 0xb
 1294 003a 0B       		.uleb128 0xb
 1295 003b 49       		.uleb128 0x49
 1296 003c 13       		.uleb128 0x13
 1297 003d 00       		.byte	0
 1298 003e 00       		.byte	0
 1299 003f 06       		.uleb128 0x6
 1300 0040 15       		.uleb128 0x15
 1301 0041 01       		.byte	0x1
 1302 0042 27       		.uleb128 0x27
 1303 0043 19       		.uleb128 0x19
 1304 0044 01       		.uleb128 0x1
 1305 0045 13       		.uleb128 0x13
 1306 0046 00       		.byte	0
 1307 0047 00       		.byte	0
 1308 0048 07       		.uleb128 0x7
 1309 0049 05       		.uleb128 0x5
 1310 004a 00       		.byte	0
 1311 004b 49       		.uleb128 0x49
 1312 004c 13       		.uleb128 0x13
 1313 004d 00       		.byte	0
 1314 004e 00       		.byte	0
 1315 004f 08       		.uleb128 0x8
 1316 0050 0F       		.uleb128 0xf
 1317 0051 00       		.byte	0
 1318 0052 0B       		.uleb128 0xb
 1319 0053 0B       		.uleb128 0xb
 1320 0054 00       		.byte	0
 1321 0055 00       		.byte	0
 1322 0056 09       		.uleb128 0x9
 1323 0057 26       		.uleb128 0x26
 1324 0058 00       		.byte	0
 1325 0059 49       		.uleb128 0x49
 1326 005a 13       		.uleb128 0x13
 1327 005b 00       		.byte	0
 1328 005c 00       		.byte	0
 1329 005d 0A       		.uleb128 0xa
 1330 005e 13       		.uleb128 0x13
 1331 005f 01       		.byte	0x1
 1332 0060 0B       		.uleb128 0xb
 1333 0061 0B       		.uleb128 0xb
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 31


 1334 0062 3A       		.uleb128 0x3a
 1335 0063 0B       		.uleb128 0xb
 1336 0064 3B       		.uleb128 0x3b
 1337 0065 0B       		.uleb128 0xb
 1338 0066 01       		.uleb128 0x1
 1339 0067 13       		.uleb128 0x13
 1340 0068 00       		.byte	0
 1341 0069 00       		.byte	0
 1342 006a 0B       		.uleb128 0xb
 1343 006b 0D       		.uleb128 0xd
 1344 006c 00       		.byte	0
 1345 006d 03       		.uleb128 0x3
 1346 006e 0E       		.uleb128 0xe
 1347 006f 3A       		.uleb128 0x3a
 1348 0070 0B       		.uleb128 0xb
 1349 0071 3B       		.uleb128 0x3b
 1350 0072 0B       		.uleb128 0xb
 1351 0073 49       		.uleb128 0x49
 1352 0074 13       		.uleb128 0x13
 1353 0075 38       		.uleb128 0x38
 1354 0076 0B       		.uleb128 0xb
 1355 0077 00       		.byte	0
 1356 0078 00       		.byte	0
 1357 0079 0C       		.uleb128 0xc
 1358 007a 0D       		.uleb128 0xd
 1359 007b 00       		.byte	0
 1360 007c 03       		.uleb128 0x3
 1361 007d 08       		.uleb128 0x8
 1362 007e 3A       		.uleb128 0x3a
 1363 007f 0B       		.uleb128 0xb
 1364 0080 3B       		.uleb128 0x3b
 1365 0081 0B       		.uleb128 0xb
 1366 0082 49       		.uleb128 0x49
 1367 0083 13       		.uleb128 0x13
 1368 0084 38       		.uleb128 0x38
 1369 0085 0B       		.uleb128 0xb
 1370 0086 00       		.byte	0
 1371 0087 00       		.byte	0
 1372 0088 0D       		.uleb128 0xd
 1373 0089 01       		.uleb128 0x1
 1374 008a 01       		.byte	0x1
 1375 008b 49       		.uleb128 0x49
 1376 008c 13       		.uleb128 0x13
 1377 008d 01       		.uleb128 0x1
 1378 008e 13       		.uleb128 0x13
 1379 008f 00       		.byte	0
 1380 0090 00       		.byte	0
 1381 0091 0E       		.uleb128 0xe
 1382 0092 21       		.uleb128 0x21
 1383 0093 00       		.byte	0
 1384 0094 49       		.uleb128 0x49
 1385 0095 13       		.uleb128 0x13
 1386 0096 2F       		.uleb128 0x2f
 1387 0097 0B       		.uleb128 0xb
 1388 0098 00       		.byte	0
 1389 0099 00       		.byte	0
 1390 009a 0F       		.uleb128 0xf
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 32


 1391 009b 2E       		.uleb128 0x2e
 1392 009c 01       		.byte	0x1
 1393 009d 03       		.uleb128 0x3
 1394 009e 0E       		.uleb128 0xe
 1395 009f 3A       		.uleb128 0x3a
 1396 00a0 0B       		.uleb128 0xb
 1397 00a1 3B       		.uleb128 0x3b
 1398 00a2 0B       		.uleb128 0xb
 1399 00a3 27       		.uleb128 0x27
 1400 00a4 19       		.uleb128 0x19
 1401 00a5 11       		.uleb128 0x11
 1402 00a6 01       		.uleb128 0x1
 1403 00a7 12       		.uleb128 0x12
 1404 00a8 06       		.uleb128 0x6
 1405 00a9 40       		.uleb128 0x40
 1406 00aa 18       		.uleb128 0x18
 1407 00ab 9742     		.uleb128 0x2117
 1408 00ad 19       		.uleb128 0x19
 1409 00ae 01       		.uleb128 0x1
 1410 00af 13       		.uleb128 0x13
 1411 00b0 00       		.byte	0
 1412 00b1 00       		.byte	0
 1413 00b2 10       		.uleb128 0x10
 1414 00b3 05       		.uleb128 0x5
 1415 00b4 00       		.byte	0
 1416 00b5 03       		.uleb128 0x3
 1417 00b6 08       		.uleb128 0x8
 1418 00b7 3A       		.uleb128 0x3a
 1419 00b8 0B       		.uleb128 0xb
 1420 00b9 3B       		.uleb128 0x3b
 1421 00ba 0B       		.uleb128 0xb
 1422 00bb 49       		.uleb128 0x49
 1423 00bc 13       		.uleb128 0x13
 1424 00bd 02       		.uleb128 0x2
 1425 00be 18       		.uleb128 0x18
 1426 00bf 00       		.byte	0
 1427 00c0 00       		.byte	0
 1428 00c1 11       		.uleb128 0x11
 1429 00c2 0B       		.uleb128 0xb
 1430 00c3 01       		.byte	0x1
 1431 00c4 11       		.uleb128 0x11
 1432 00c5 01       		.uleb128 0x1
 1433 00c6 12       		.uleb128 0x12
 1434 00c7 06       		.uleb128 0x6
 1435 00c8 00       		.byte	0
 1436 00c9 00       		.byte	0
 1437 00ca 12       		.uleb128 0x12
 1438 00cb 34       		.uleb128 0x34
 1439 00cc 00       		.byte	0
 1440 00cd 03       		.uleb128 0x3
 1441 00ce 08       		.uleb128 0x8
 1442 00cf 3A       		.uleb128 0x3a
 1443 00d0 0B       		.uleb128 0xb
 1444 00d1 3B       		.uleb128 0x3b
 1445 00d2 0B       		.uleb128 0xb
 1446 00d3 49       		.uleb128 0x49
 1447 00d4 13       		.uleb128 0x13
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 33


 1448 00d5 02       		.uleb128 0x2
 1449 00d6 18       		.uleb128 0x18
 1450 00d7 00       		.byte	0
 1451 00d8 00       		.byte	0
 1452 00d9 13       		.uleb128 0x13
 1453 00da 2E       		.uleb128 0x2e
 1454 00db 01       		.byte	0x1
 1455 00dc 03       		.uleb128 0x3
 1456 00dd 0E       		.uleb128 0xe
 1457 00de 3A       		.uleb128 0x3a
 1458 00df 0B       		.uleb128 0xb
 1459 00e0 3B       		.uleb128 0x3b
 1460 00e1 05       		.uleb128 0x5
 1461 00e2 27       		.uleb128 0x27
 1462 00e3 19       		.uleb128 0x19
 1463 00e4 11       		.uleb128 0x11
 1464 00e5 01       		.uleb128 0x1
 1465 00e6 12       		.uleb128 0x12
 1466 00e7 06       		.uleb128 0x6
 1467 00e8 40       		.uleb128 0x40
 1468 00e9 18       		.uleb128 0x18
 1469 00ea 9742     		.uleb128 0x2117
 1470 00ec 19       		.uleb128 0x19
 1471 00ed 01       		.uleb128 0x1
 1472 00ee 13       		.uleb128 0x13
 1473 00ef 00       		.byte	0
 1474 00f0 00       		.byte	0
 1475 00f1 14       		.uleb128 0x14
 1476 00f2 05       		.uleb128 0x5
 1477 00f3 00       		.byte	0
 1478 00f4 03       		.uleb128 0x3
 1479 00f5 08       		.uleb128 0x8
 1480 00f6 3A       		.uleb128 0x3a
 1481 00f7 0B       		.uleb128 0xb
 1482 00f8 3B       		.uleb128 0x3b
 1483 00f9 05       		.uleb128 0x5
 1484 00fa 49       		.uleb128 0x49
 1485 00fb 13       		.uleb128 0x13
 1486 00fc 02       		.uleb128 0x2
 1487 00fd 18       		.uleb128 0x18
 1488 00fe 00       		.byte	0
 1489 00ff 00       		.byte	0
 1490 0100 15       		.uleb128 0x15
 1491 0101 2E       		.uleb128 0x2e
 1492 0102 01       		.byte	0x1
 1493 0103 3F       		.uleb128 0x3f
 1494 0104 19       		.uleb128 0x19
 1495 0105 03       		.uleb128 0x3
 1496 0106 0E       		.uleb128 0xe
 1497 0107 3A       		.uleb128 0x3a
 1498 0108 0B       		.uleb128 0xb
 1499 0109 3B       		.uleb128 0x3b
 1500 010a 0B       		.uleb128 0xb
 1501 010b 27       		.uleb128 0x27
 1502 010c 19       		.uleb128 0x19
 1503 010d 11       		.uleb128 0x11
 1504 010e 01       		.uleb128 0x1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 34


 1505 010f 12       		.uleb128 0x12
 1506 0110 06       		.uleb128 0x6
 1507 0111 40       		.uleb128 0x40
 1508 0112 18       		.uleb128 0x18
 1509 0113 9642     		.uleb128 0x2116
 1510 0115 19       		.uleb128 0x19
 1511 0116 01       		.uleb128 0x1
 1512 0117 13       		.uleb128 0x13
 1513 0118 00       		.byte	0
 1514 0119 00       		.byte	0
 1515 011a 16       		.uleb128 0x16
 1516 011b 05       		.uleb128 0x5
 1517 011c 00       		.byte	0
 1518 011d 03       		.uleb128 0x3
 1519 011e 0E       		.uleb128 0xe
 1520 011f 3A       		.uleb128 0x3a
 1521 0120 0B       		.uleb128 0xb
 1522 0121 3B       		.uleb128 0x3b
 1523 0122 0B       		.uleb128 0xb
 1524 0123 49       		.uleb128 0x49
 1525 0124 13       		.uleb128 0x13
 1526 0125 02       		.uleb128 0x2
 1527 0126 18       		.uleb128 0x18
 1528 0127 00       		.byte	0
 1529 0128 00       		.byte	0
 1530 0129 17       		.uleb128 0x17
 1531 012a 34       		.uleb128 0x34
 1532 012b 00       		.byte	0
 1533 012c 03       		.uleb128 0x3
 1534 012d 0E       		.uleb128 0xe
 1535 012e 3A       		.uleb128 0x3a
 1536 012f 0B       		.uleb128 0xb
 1537 0130 3B       		.uleb128 0x3b
 1538 0131 0B       		.uleb128 0xb
 1539 0132 49       		.uleb128 0x49
 1540 0133 13       		.uleb128 0x13
 1541 0134 02       		.uleb128 0x2
 1542 0135 18       		.uleb128 0x18
 1543 0136 00       		.byte	0
 1544 0137 00       		.byte	0
 1545 0138 18       		.uleb128 0x18
 1546 0139 2E       		.uleb128 0x2e
 1547 013a 01       		.byte	0x1
 1548 013b 3F       		.uleb128 0x3f
 1549 013c 19       		.uleb128 0x19
 1550 013d 03       		.uleb128 0x3
 1551 013e 0E       		.uleb128 0xe
 1552 013f 3A       		.uleb128 0x3a
 1553 0140 0B       		.uleb128 0xb
 1554 0141 3B       		.uleb128 0x3b
 1555 0142 0B       		.uleb128 0xb
 1556 0143 27       		.uleb128 0x27
 1557 0144 19       		.uleb128 0x19
 1558 0145 11       		.uleb128 0x11
 1559 0146 01       		.uleb128 0x1
 1560 0147 12       		.uleb128 0x12
 1561 0148 06       		.uleb128 0x6
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 35


 1562 0149 40       		.uleb128 0x40
 1563 014a 18       		.uleb128 0x18
 1564 014b 9742     		.uleb128 0x2117
 1565 014d 19       		.uleb128 0x19
 1566 014e 01       		.uleb128 0x1
 1567 014f 13       		.uleb128 0x13
 1568 0150 00       		.byte	0
 1569 0151 00       		.byte	0
 1570 0152 19       		.uleb128 0x19
 1571 0153 2E       		.uleb128 0x2e
 1572 0154 01       		.byte	0x1
 1573 0155 03       		.uleb128 0x3
 1574 0156 0E       		.uleb128 0xe
 1575 0157 3A       		.uleb128 0x3a
 1576 0158 0B       		.uleb128 0xb
 1577 0159 3B       		.uleb128 0x3b
 1578 015a 0B       		.uleb128 0xb
 1579 015b 27       		.uleb128 0x27
 1580 015c 19       		.uleb128 0x19
 1581 015d 11       		.uleb128 0x11
 1582 015e 01       		.uleb128 0x1
 1583 015f 12       		.uleb128 0x12
 1584 0160 06       		.uleb128 0x6
 1585 0161 40       		.uleb128 0x40
 1586 0162 18       		.uleb128 0x18
 1587 0163 9642     		.uleb128 0x2116
 1588 0165 19       		.uleb128 0x19
 1589 0166 01       		.uleb128 0x1
 1590 0167 13       		.uleb128 0x13
 1591 0168 00       		.byte	0
 1592 0169 00       		.byte	0
 1593 016a 1A       		.uleb128 0x1a
 1594 016b 2E       		.uleb128 0x2e
 1595 016c 01       		.byte	0x1
 1596 016d 3F       		.uleb128 0x3f
 1597 016e 19       		.uleb128 0x19
 1598 016f 03       		.uleb128 0x3
 1599 0170 0E       		.uleb128 0xe
 1600 0171 3A       		.uleb128 0x3a
 1601 0172 0B       		.uleb128 0xb
 1602 0173 3B       		.uleb128 0x3b
 1603 0174 0B       		.uleb128 0xb
 1604 0175 27       		.uleb128 0x27
 1605 0176 19       		.uleb128 0x19
 1606 0177 11       		.uleb128 0x11
 1607 0178 01       		.uleb128 0x1
 1608 0179 12       		.uleb128 0x12
 1609 017a 06       		.uleb128 0x6
 1610 017b 40       		.uleb128 0x40
 1611 017c 18       		.uleb128 0x18
 1612 017d 9742     		.uleb128 0x2117
 1613 017f 19       		.uleb128 0x19
 1614 0180 00       		.byte	0
 1615 0181 00       		.byte	0
 1616 0182 00       		.byte	0
 1617              		.section	.debug_aranges,"",%progbits
 1618 0000 64000000 		.4byte	0x64
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 36


 1619 0004 0200     		.2byte	0x2
 1620 0006 00000000 		.4byte	.Ldebug_info0
 1621 000a 04       		.byte	0x4
 1622 000b 00       		.byte	0
 1623 000c 0000     		.2byte	0
 1624 000e 0000     		.2byte	0
 1625 0010 00000000 		.4byte	.LFB13
 1626 0014 40000000 		.4byte	.LFE13-.LFB13
 1627 0018 00000000 		.4byte	.LFB22
 1628 001c 38000000 		.4byte	.LFE22-.LFB22
 1629 0020 00000000 		.4byte	.LFB25
 1630 0024 30000000 		.4byte	.LFE25-.LFB25
 1631 0028 00000000 		.4byte	.LFB26
 1632 002c 6C000000 		.4byte	.LFE26-.LFB26
 1633 0030 00000000 		.4byte	.LFB27
 1634 0034 66000000 		.4byte	.LFE27-.LFB27
 1635 0038 00000000 		.4byte	.LFB28
 1636 003c 50000000 		.4byte	.LFE28-.LFB28
 1637 0040 00000000 		.4byte	.LFB29
 1638 0044 1A000000 		.4byte	.LFE29-.LFB29
 1639 0048 00000000 		.4byte	.LFB30
 1640 004c 3E000000 		.4byte	.LFE30-.LFB30
 1641 0050 00000000 		.4byte	.LFB31
 1642 0054 40000000 		.4byte	.LFE31-.LFB31
 1643 0058 00000000 		.4byte	.LFB32
 1644 005c 10000000 		.4byte	.LFE32-.LFB32
 1645 0060 00000000 		.4byte	0
 1646 0064 00000000 		.4byte	0
 1647              		.section	.debug_ranges,"",%progbits
 1648              	.Ldebug_ranges0:
 1649 0000 00000000 		.4byte	.LFB13
 1650 0004 40000000 		.4byte	.LFE13
 1651 0008 00000000 		.4byte	.LFB22
 1652 000c 38000000 		.4byte	.LFE22
 1653 0010 00000000 		.4byte	.LFB25
 1654 0014 30000000 		.4byte	.LFE25
 1655 0018 00000000 		.4byte	.LFB26
 1656 001c 6C000000 		.4byte	.LFE26
 1657 0020 00000000 		.4byte	.LFB27
 1658 0024 66000000 		.4byte	.LFE27
 1659 0028 00000000 		.4byte	.LFB28
 1660 002c 50000000 		.4byte	.LFE28
 1661 0030 00000000 		.4byte	.LFB29
 1662 0034 1A000000 		.4byte	.LFE29
 1663 0038 00000000 		.4byte	.LFB30
 1664 003c 3E000000 		.4byte	.LFE30
 1665 0040 00000000 		.4byte	.LFB31
 1666 0044 40000000 		.4byte	.LFE31
 1667 0048 00000000 		.4byte	.LFB32
 1668 004c 10000000 		.4byte	.LFE32
 1669 0050 00000000 		.4byte	0
 1670 0054 00000000 		.4byte	0
 1671              		.section	.debug_line,"",%progbits
 1672              	.Ldebug_line0:
 1673 0000 B9020000 		.section	.debug_str,"MS",%progbits,1
 1673      0200BD01 
 1673      00000201 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 37


 1673      FB0E0D00 
 1673      01010101 
 1674              	.LASF31:
 1675 0000 63665F63 		.ascii	"cf_cbc_init\000"
 1675      62635F69 
 1675      6E697400 
 1676              	.LASF5:
 1677 000c 5F5F7569 		.ascii	"__uint8_t\000"
 1677      6E74385F 
 1677      7400
 1678              	.LASF46:
 1679 0016 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1679      43313120 
 1679      352E342E 
 1679      31203230 
 1679      31363036 
 1680 0049 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 1680      20726576 
 1680      6973696F 
 1680      6E203233 
 1680      37373135 
 1681 007c 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects -fomit-fram"
 1681      66756E63 
 1681      74696F6E 
 1681      2D736563 
 1681      74696F6E 
 1682 00af 652D706F 		.ascii	"e-pointer\000"
 1682      696E7465 
 1682      7200
 1683              	.LASF27:
 1684 00b9 63665F63 		.ascii	"cf_ctr\000"
 1684      747200
 1685              	.LASF23:
 1686 00c0 6B65796D 		.ascii	"keymat\000"
 1686      617400
 1687              	.LASF15:
 1688 00c7 656E6372 		.ascii	"encrypt\000"
 1688      79707400 
 1689              	.LASF12:
 1690 00cf 75696E74 		.ascii	"uint8_t\000"
 1690      385F7400 
 1691              	.LASF16:
 1692 00d7 64656372 		.ascii	"decrypt\000"
 1692      79707400 
 1693              	.LASF25:
 1694 00df 636F756E 		.ascii	"counter_offset\000"
 1694      7465725F 
 1694      6F666673 
 1694      657400
 1695              	.LASF14:
 1696 00ee 626C6F63 		.ascii	"blocksz\000"
 1696      6B737A00 
 1697              	.LASF19:
 1698 00f6 626C6F63 		.ascii	"block\000"
 1698      6B00
 1699              	.LASF21:
 1700 00fc 63665F63 		.ascii	"cf_cbc\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 38


 1700      626300
 1701              	.LASF6:
 1702 0103 756E7369 		.ascii	"unsigned char\000"
 1702      676E6564 
 1702      20636861 
 1702      7200
 1703              	.LASF33:
 1704 0111 696E7075 		.ascii	"input\000"
 1704      7400
 1705              	.LASF17:
 1706 0117 63665F70 		.ascii	"cf_prp\000"
 1706      727000
 1707              	.LASF49:
 1708 011e 63665F63 		.ascii	"cf_ctr_discard_block\000"
 1708      74725F64 
 1708      69736361 
 1708      72645F62 
 1708      6C6F636B 
 1709              	.LASF10:
 1710 0133 6C6F6E67 		.ascii	"long unsigned int\000"
 1710      20756E73 
 1710      69676E65 
 1710      6420696E 
 1710      7400
 1711              	.LASF8:
 1712 0145 73686F72 		.ascii	"short unsigned int\000"
 1712      7420756E 
 1712      7369676E 
 1712      65642069 
 1712      6E7400
 1713              	.LASF4:
 1714 0158 73697A65 		.ascii	"size_t\000"
 1714      5F7400
 1715              	.LASF22:
 1716 015f 6E6F6E63 		.ascii	"nonce\000"
 1716      6500
 1717              	.LASF26:
 1718 0165 636F756E 		.ascii	"counter_width\000"
 1718      7465725F 
 1718      77696474 
 1718      6800
 1719              	.LASF44:
 1720 0173 63665F63 		.ascii	"cf_ctr_cipher\000"
 1720      74725F63 
 1720      69706865 
 1720      7200
 1721              	.LASF13:
 1722 0181 63665F70 		.ascii	"cf_prp_block\000"
 1722      72705F62 
 1722      6C6F636B 
 1722      00
 1723              	.LASF47:
 1724 018e 6D6F6465 		.ascii	"modes.c\000"
 1724      732E6300 
 1725              	.LASF32:
 1726 0196 63665F63 		.ascii	"cf_cbc_encrypt\000"
 1726      62635F65 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 39


 1726      6E637279 
 1726      707400
 1727              	.LASF0:
 1728 01a5 756E7369 		.ascii	"unsigned int\000"
 1728      676E6564 
 1728      20696E74 
 1728      00
 1729              	.LASF18:
 1730 01b2 70727063 		.ascii	"prpctx\000"
 1730      747800
 1731              	.LASF11:
 1732 01b9 6C6F6E67 		.ascii	"long long unsigned int\000"
 1732      206C6F6E 
 1732      6720756E 
 1732      7369676E 
 1732      65642069 
 1733              	.LASF36:
 1734 01d0 6E626C6B 		.ascii	"nblk\000"
 1734      00
 1735              	.LASF37:
 1736 01d5 63665F63 		.ascii	"cf_cbc_decrypt\000"
 1736      62635F64 
 1736      65637279 
 1736      707400
 1737              	.LASF35:
 1738 01e4 626C6F63 		.ascii	"blocks\000"
 1738      6B7300
 1739              	.LASF29:
 1740 01eb 786F725F 		.ascii	"xor_bb\000"
 1740      626200
 1741              	.LASF20:
 1742 01f2 73697A65 		.ascii	"sizetype\000"
 1742      74797065 
 1742      00
 1743              	.LASF1:
 1744 01fb 6C6F6E67 		.ascii	"long long int\000"
 1744      206C6F6E 
 1744      6720696E 
 1744      7400
 1745              	.LASF48:
 1746 0209 443A5C44 		.ascii	"D:\\Dropbox\\6_kurs\\diploma\\crypto_miscocontrolle"
 1746      726F7062 
 1746      6F785C36 
 1746      5F6B7572 
 1746      735C6469 
 1747 0238 725F5354 		.ascii	"r_STABLE\\BLE_Dynamic_GATT_Service_Configuration\\B"
 1747      41424C45 
 1747      5C424C45 
 1747      5F44796E 
 1747      616D6963 
 1748 0269 4C455F44 		.ascii	"LE_Dynamic_GATT_Service_Configuration.cydsn\000"
 1748      796E616D 
 1748      69635F47 
 1748      4154545F 
 1748      53657276 
 1749              	.LASF28:
 1750 0295 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccGQ7h9h.s 			page 40


 1750      00
 1751              	.LASF41:
 1752 029a 77696474 		.ascii	"width\000"
 1752      6800
 1753              	.LASF40:
 1754 02a0 6F666673 		.ascii	"offset\000"
 1754      657400
 1755              	.LASF42:
 1756 02a7 6374725F 		.ascii	"ctr_next_block\000"
 1756      6E657874 
 1756      5F626C6F 
 1756      636B00
 1757              	.LASF7:
 1758 02b6 73686F72 		.ascii	"short int\000"
 1758      7420696E 
 1758      7400
 1759              	.LASF38:
 1760 02c0 63665F63 		.ascii	"cf_ctr_init\000"
 1760      74725F69 
 1760      6E697400 
 1761              	.LASF34:
 1762 02cc 6F757470 		.ascii	"output\000"
 1762      757400
 1763              	.LASF43:
 1764 02d3 76637478 		.ascii	"vctx\000"
 1764      00
 1765              	.LASF9:
 1766 02d8 6C6F6E67 		.ascii	"long int\000"
 1766      20696E74 
 1766      00
 1767              	.LASF45:
 1768 02e1 62797465 		.ascii	"bytes\000"
 1768      7300
 1769              	.LASF2:
 1770 02e7 6C6F6E67 		.ascii	"long double\000"
 1770      20646F75 
 1770      626C6500 
 1771              	.LASF39:
 1772 02f3 63665F63 		.ascii	"cf_ctr_custom_counter\000"
 1772      74725F63 
 1772      7573746F 
 1772      6D5F636F 
 1772      756E7465 
 1773              	.LASF3:
 1774 0309 7369676E 		.ascii	"signed char\000"
 1774      65642063 
 1774      68617200 
 1775              	.LASF24:
 1776 0315 6E6B6579 		.ascii	"nkeymat\000"
 1776      6D617400 
 1777              	.LASF30:
 1778 031d 696E6372 		.ascii	"incr_be\000"
 1778      5F626500 
 1779              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
