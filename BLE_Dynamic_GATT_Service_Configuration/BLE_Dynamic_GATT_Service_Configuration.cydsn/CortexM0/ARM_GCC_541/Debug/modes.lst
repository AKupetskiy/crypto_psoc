ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modes.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.xor_bb,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	xor_bb, %function
  24              	xor_bb:
  25              	.LFB13:
  26              		.file 1 "bitops.h"
   1:bitops.h      **** /*
   2:bitops.h      ****  * cifra - embedded cryptography library
   3:bitops.h      ****  * Written in 2014 by Joseph Birr-Pixton <jpixton@gmail.com>
   4:bitops.h      ****  *
   5:bitops.h      ****  * To the extent possible under law, the author(s) have dedicated all
   6:bitops.h      ****  * copyright and related and neighboring rights to this software to the
   7:bitops.h      ****  * public domain worldwide. This software is distributed without any
   8:bitops.h      ****  * warranty.
   9:bitops.h      ****  *
  10:bitops.h      ****  * You should have received a copy of the CC0 Public Domain Dedication
  11:bitops.h      ****  * along with this software. If not, see
  12:bitops.h      ****  * <http://creativecommons.org/publicdomain/zero/1.0/>.
  13:bitops.h      ****  */
  14:bitops.h      **** 
  15:bitops.h      **** #ifndef BITOPS_H
  16:bitops.h      **** #define BITOPS_H
  17:bitops.h      **** 
  18:bitops.h      **** #include <stdint.h>
  19:bitops.h      **** #include <stddef.h>
  20:bitops.h      **** 
  21:bitops.h      **** /* Assorted bitwise and common operations used in ciphers. */
  22:bitops.h      **** 
  23:bitops.h      **** /** Circularly rotate right x by n bits.
  24:bitops.h      ****  *  0 > n > 32. */
  25:bitops.h      **** static inline uint32_t rotr32(uint32_t x, unsigned n)
  26:bitops.h      **** {
  27:bitops.h      ****   return (x >> n) | (x << (32 - n));
  28:bitops.h      **** }
  29:bitops.h      **** 
  30:bitops.h      **** /** Circularly rotate left x by n bits.
  31:bitops.h      ****  *  0 > n > 32. */
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 2


  32:bitops.h      **** static inline uint32_t rotl32(uint32_t x, unsigned n)
  33:bitops.h      **** {
  34:bitops.h      ****   return (x << n) | (x >> (32 - n));
  35:bitops.h      **** }
  36:bitops.h      **** 
  37:bitops.h      **** /** Circularly rotate right x by n bits.
  38:bitops.h      ****  *  0 > n > 64. */
  39:bitops.h      **** static inline uint64_t rotr64(uint64_t x, unsigned n)
  40:bitops.h      **** {
  41:bitops.h      ****   return (x >> n) | (x << (64 - n));
  42:bitops.h      **** }
  43:bitops.h      **** 
  44:bitops.h      **** /** Circularly rotate left x by n bits.
  45:bitops.h      ****  *  0 > n > 64. */
  46:bitops.h      **** static inline uint64_t rotl64(uint64_t x, unsigned n)
  47:bitops.h      **** {
  48:bitops.h      ****   return (x << n) | (x >> (64 - n));
  49:bitops.h      **** }
  50:bitops.h      **** 
  51:bitops.h      **** /** Read 4 bytes from buf, as a 32-bit big endian quantity. */
  52:bitops.h      **** static inline uint32_t read32_be(const uint8_t buf[4])
  53:bitops.h      **** {
  54:bitops.h      ****   return (buf[0] << 24) |
  55:bitops.h      ****          (buf[1] << 16) |
  56:bitops.h      ****          (buf[2] << 8) |
  57:bitops.h      ****          (buf[3]);
  58:bitops.h      **** }
  59:bitops.h      **** 
  60:bitops.h      **** /** Read 4 bytes from buf, as a 32-bit little endian quantity. */
  61:bitops.h      **** static inline uint32_t read32_le(const uint8_t buf[4])
  62:bitops.h      **** {
  63:bitops.h      ****   return (buf[3] << 24) |
  64:bitops.h      ****          (buf[2] << 16) |
  65:bitops.h      ****          (buf[1] << 8) |
  66:bitops.h      ****          (buf[0]);
  67:bitops.h      **** }
  68:bitops.h      **** 
  69:bitops.h      **** /** Read 8 bytes from buf, as a 64-bit big endian quantity. */
  70:bitops.h      **** static inline uint64_t read64_be(const uint8_t buf[8])
  71:bitops.h      **** {
  72:bitops.h      ****   uint32_t hi = read32_be(buf),
  73:bitops.h      ****            lo = read32_be(buf + 4);
  74:bitops.h      ****   return ((uint64_t)hi) << 32 |
  75:bitops.h      ****          lo;
  76:bitops.h      **** }
  77:bitops.h      **** 
  78:bitops.h      **** /** Read 8 bytes from buf, as a 64-bit little endian quantity. */
  79:bitops.h      **** static inline uint64_t read64_le(const uint8_t buf[8])
  80:bitops.h      **** {
  81:bitops.h      ****   uint32_t hi = read32_le(buf + 4),
  82:bitops.h      ****            lo = read32_le(buf);
  83:bitops.h      ****   return ((uint64_t)hi) << 32 |
  84:bitops.h      ****          lo;
  85:bitops.h      **** }
  86:bitops.h      **** 
  87:bitops.h      **** /** Encode v as a 32-bit big endian quantity into buf. */
  88:bitops.h      **** static inline void write32_be(uint32_t v, uint8_t buf[4])
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 3


  89:bitops.h      **** {
  90:bitops.h      ****   *buf++ = (v >> 24) & 0xff;
  91:bitops.h      ****   *buf++ = (v >> 16) & 0xff;
  92:bitops.h      ****   *buf++ = (v >> 8) & 0xff;
  93:bitops.h      ****   *buf   = v & 0xff;
  94:bitops.h      **** }
  95:bitops.h      **** 
  96:bitops.h      **** /** Encode v as a 32-bit little endian quantity into buf. */
  97:bitops.h      **** static inline void write32_le(uint32_t v, uint8_t buf[4])
  98:bitops.h      **** {
  99:bitops.h      ****   *buf++ = v & 0xff;
 100:bitops.h      ****   *buf++ = (v >> 8) & 0xff;
 101:bitops.h      ****   *buf++ = (v >> 16) & 0xff;
 102:bitops.h      ****   *buf   = (v >> 24) & 0xff;
 103:bitops.h      **** }
 104:bitops.h      **** 
 105:bitops.h      **** /** Encode v as a 64-bit big endian quantity into buf. */
 106:bitops.h      **** static inline void write64_be(uint64_t v, uint8_t buf[8])
 107:bitops.h      **** {
 108:bitops.h      ****   *buf++ = (v >> 56) & 0xff;
 109:bitops.h      ****   *buf++ = (v >> 48) & 0xff;
 110:bitops.h      ****   *buf++ = (v >> 40) & 0xff;
 111:bitops.h      ****   *buf++ = (v >> 32) & 0xff;
 112:bitops.h      ****   *buf++ = (v >> 24) & 0xff;
 113:bitops.h      ****   *buf++ = (v >> 16) & 0xff;
 114:bitops.h      ****   *buf++ = (v >> 8) & 0xff;
 115:bitops.h      ****   *buf   = v & 0xff;
 116:bitops.h      **** }
 117:bitops.h      **** 
 118:bitops.h      **** /** Encode v as a 64-bit little endian quantity into buf. */
 119:bitops.h      **** static inline void write64_le(uint64_t v, uint8_t buf[8])
 120:bitops.h      **** {
 121:bitops.h      ****   *buf++ = v & 0xff;
 122:bitops.h      ****   *buf++ = (v >> 8) & 0xff;
 123:bitops.h      ****   *buf++ = (v >> 16) & 0xff;
 124:bitops.h      ****   *buf++ = (v >> 24) & 0xff;
 125:bitops.h      ****   *buf++ = (v >> 32) & 0xff;
 126:bitops.h      ****   *buf++ = (v >> 40) & 0xff;
 127:bitops.h      ****   *buf++ = (v >> 48) & 0xff;
 128:bitops.h      ****   *buf   = (v >> 56) & 0xff;
 129:bitops.h      **** }
 130:bitops.h      **** 
 131:bitops.h      **** /** out = in ^ b8.
 132:bitops.h      ****  *  out and in may alias. */
 133:bitops.h      **** static inline void xor_b8(uint8_t *out, const uint8_t *in, uint8_t b8, size_t len)
 134:bitops.h      **** {
 135:bitops.h      ****   for (size_t i = 0; i < len; i++)
 136:bitops.h      ****     out[i] = in[i] ^ b8;
 137:bitops.h      **** }
 138:bitops.h      **** 
 139:bitops.h      **** /** out = x ^ y.
 140:bitops.h      ****  *  out, x and y may alias. */
 141:bitops.h      **** static inline void xor_bb(uint8_t *out, const uint8_t *x, const uint8_t *y, size_t len)
 142:bitops.h      **** {
  27              		.loc 1 142 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 4


  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 86B0     		sub	sp, sp, #24
  33              		.cfi_def_cfa_offset 24
  34 0002 0390     		str	r0, [sp, #12]
  35 0004 0291     		str	r1, [sp, #8]
  36 0006 0192     		str	r2, [sp, #4]
  37 0008 0093     		str	r3, [sp]
  38              	.LBB2:
 143:bitops.h      ****   for (size_t i = 0; i < len; i++)
  39              		.loc 1 143 0
  40 000a 0023     		movs	r3, #0
  41 000c 0593     		str	r3, [sp, #20]
  42 000e 10E0     		b	.L2
  43              	.L3:
 144:bitops.h      ****     out[i] = x[i] ^ y[i];
  44              		.loc 1 144 0 discriminator 3
  45 0010 039A     		ldr	r2, [sp, #12]
  46 0012 059B     		ldr	r3, [sp, #20]
  47 0014 D318     		adds	r3, r2, r3
  48 0016 0299     		ldr	r1, [sp, #8]
  49 0018 059A     		ldr	r2, [sp, #20]
  50 001a 8A18     		adds	r2, r1, r2
  51 001c 1178     		ldrb	r1, [r2]
  52 001e 0198     		ldr	r0, [sp, #4]
  53 0020 059A     		ldr	r2, [sp, #20]
  54 0022 8218     		adds	r2, r0, r2
  55 0024 1278     		ldrb	r2, [r2]
  56 0026 4A40     		eors	r2, r1
  57 0028 D2B2     		uxtb	r2, r2
  58 002a 1A70     		strb	r2, [r3]
 143:bitops.h      ****   for (size_t i = 0; i < len; i++)
  59              		.loc 1 143 0 discriminator 3
  60 002c 059B     		ldr	r3, [sp, #20]
  61 002e 0133     		adds	r3, r3, #1
  62 0030 0593     		str	r3, [sp, #20]
  63              	.L2:
 143:bitops.h      ****   for (size_t i = 0; i < len; i++)
  64              		.loc 1 143 0 is_stmt 0 discriminator 1
  65 0032 059A     		ldr	r2, [sp, #20]
  66 0034 009B     		ldr	r3, [sp]
  67 0036 9A42     		cmp	r2, r3
  68 0038 EAD3     		bcc	.L3
  69              	.LBE2:
 145:bitops.h      **** }
  70              		.loc 1 145 0 is_stmt 1
  71 003a C046     		nop
  72 003c 06B0     		add	sp, sp, #24
  73              		@ sp needed
  74 003e 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE13:
  77              		.size	xor_bb, .-xor_bb
  78              		.section	.text.incr_be,"ax",%progbits
  79              		.align	2
  80              		.code	16
  81              		.thumb_func
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 5


  82              		.type	incr_be, %function
  83              	incr_be:
  84              	.LFB22:
 146:bitops.h      **** 
 147:bitops.h      **** /* out ^= x
 148:bitops.h      ****  * out and x may alias. */
 149:bitops.h      **** static inline void xor_words(uint32_t *out, const uint32_t *x, size_t nwords)
 150:bitops.h      **** {
 151:bitops.h      ****   for (size_t i = 0; i < nwords; i++)
 152:bitops.h      ****     out[i] ^= x[i];
 153:bitops.h      **** }
 154:bitops.h      **** 
 155:bitops.h      **** /** Produce 0xffffffff if x == y, zero otherwise, without branching. */
 156:bitops.h      **** static inline uint32_t mask_u32(uint32_t x, uint32_t y)
 157:bitops.h      **** {
 158:bitops.h      ****   uint32_t diff = x ^ y;
 159:bitops.h      ****   uint32_t diff_is_zero = ~diff & (diff - 1);
 160:bitops.h      ****   return - (diff_is_zero >> 31);
 161:bitops.h      **** }
 162:bitops.h      **** 
 163:bitops.h      **** /** Product 0xff if x == y, zero otherwise, without branching. */
 164:bitops.h      **** static inline uint8_t mask_u8(uint32_t x, uint32_t y)
 165:bitops.h      **** {
 166:bitops.h      ****   uint32_t diff = x ^ y;
 167:bitops.h      ****   uint8_t diff_is_zero = ~diff & (diff - 1);
 168:bitops.h      ****   return - (diff_is_zero >> 7);
 169:bitops.h      **** }
 170:bitops.h      **** 
 171:bitops.h      **** /** Select the ith entry from the given table of n values, in a side channel-silent
 172:bitops.h      ****  *  way. */
 173:bitops.h      **** static inline uint32_t select_u32(uint32_t i, volatile const uint32_t *tab, uint32_t n)
 174:bitops.h      **** {
 175:bitops.h      ****   uint32_t r = 0;
 176:bitops.h      **** 
 177:bitops.h      ****   for (uint32_t ii = 0; ii < n; ii++)
 178:bitops.h      ****   {
 179:bitops.h      ****     uint32_t mask = mask_u32(i, ii);
 180:bitops.h      ****     r = (r & ~mask) | (tab[ii] & mask);
 181:bitops.h      ****   }
 182:bitops.h      **** 
 183:bitops.h      ****   return r;
 184:bitops.h      **** }
 185:bitops.h      **** 
 186:bitops.h      **** /** Select the ith entry from the given table of n values, in a side channel-silent
 187:bitops.h      ****  *  way. */
 188:bitops.h      **** static inline uint8_t select_u8(uint32_t i, volatile const uint8_t *tab, uint32_t n)
 189:bitops.h      **** {
 190:bitops.h      ****   uint8_t r = 0;
 191:bitops.h      **** 
 192:bitops.h      ****   for (uint32_t ii = 0; ii < n; ii++)
 193:bitops.h      ****   {
 194:bitops.h      ****     uint8_t mask = mask_u8(i, ii);
 195:bitops.h      ****     r = (r & ~mask) | (tab[ii] & mask);
 196:bitops.h      ****   }
 197:bitops.h      **** 
 198:bitops.h      ****   return r;
 199:bitops.h      **** }
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 6


 200:bitops.h      **** 
 201:bitops.h      **** /** Select the ath, bth, cth and dth entries from the given table of n values,
 202:bitops.h      ****  *  placing the results into a, b, c and d. */
 203:bitops.h      **** static inline void select_u8x4(uint8_t *a, uint8_t *b, uint8_t *c, uint8_t *d,
 204:bitops.h      ****                                volatile const uint8_t *tab, uint32_t n)
 205:bitops.h      **** {
 206:bitops.h      ****   uint8_t ra = 0,
 207:bitops.h      ****           rb = 0,
 208:bitops.h      ****           rc = 0,
 209:bitops.h      ****           rd = 0;
 210:bitops.h      ****   uint8_t mask;
 211:bitops.h      **** 
 212:bitops.h      ****   for (uint32_t i = 0; i < n; i++)
 213:bitops.h      ****   {
 214:bitops.h      ****     uint8_t item = tab[i];
 215:bitops.h      **** 
 216:bitops.h      ****     mask = mask_u8(*a, i); ra = (ra & ~mask) | (item & mask);
 217:bitops.h      ****     mask = mask_u8(*b, i); rb = (rb & ~mask) | (item & mask);
 218:bitops.h      ****     mask = mask_u8(*c, i); rc = (rc & ~mask) | (item & mask);
 219:bitops.h      ****     mask = mask_u8(*d, i); rd = (rd & ~mask) | (item & mask);
 220:bitops.h      ****   }
 221:bitops.h      **** 
 222:bitops.h      ****   *a = ra;
 223:bitops.h      ****   *b = rb;
 224:bitops.h      ****   *c = rc;
 225:bitops.h      ****   *d = rd;
 226:bitops.h      **** }
 227:bitops.h      **** 
 228:bitops.h      **** /** out ^= if0 or if1, depending on the value of bit. */
 229:bitops.h      **** static inline void select_xor128(uint32_t out[4],
 230:bitops.h      ****                                  const uint32_t if0[4],
 231:bitops.h      ****                                  const uint32_t if1[4],
 232:bitops.h      ****                                  uint8_t bit)
 233:bitops.h      **** {
 234:bitops.h      ****   uint32_t mask1 = mask_u32(bit, 1);
 235:bitops.h      ****   uint32_t mask0 = ~mask1;
 236:bitops.h      **** 
 237:bitops.h      ****   out[0] ^= (if0[0] & mask0) | (if1[0] & mask1);
 238:bitops.h      ****   out[1] ^= (if0[1] & mask0) | (if1[1] & mask1);
 239:bitops.h      ****   out[2] ^= (if0[2] & mask0) | (if1[2] & mask1);
 240:bitops.h      ****   out[3] ^= (if0[3] & mask0) | (if1[3] & mask1);
 241:bitops.h      **** }
 242:bitops.h      **** 
 243:bitops.h      **** /** Increments the integer stored at v (of non-zero length len)
 244:bitops.h      ****  *  with the least significant byte first. */
 245:bitops.h      **** static inline void incr_le(uint8_t *v, size_t len)
 246:bitops.h      **** {
 247:bitops.h      ****   size_t i = 0;
 248:bitops.h      ****   while (1)
 249:bitops.h      ****   {
 250:bitops.h      ****     if (++v[i] != 0)
 251:bitops.h      ****       return;
 252:bitops.h      ****     i++;
 253:bitops.h      ****     if (i == len)
 254:bitops.h      ****       return;
 255:bitops.h      ****   }
 256:bitops.h      **** }
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 7


 257:bitops.h      **** 
 258:bitops.h      **** /** Increments the integer stored at v (of non-zero length len)
 259:bitops.h      ****  *  with the most significant byte last. */
 260:bitops.h      **** static inline void incr_be(uint8_t *v, size_t len)
 261:bitops.h      **** {
  85              		.loc 1 261 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 8
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90 0000 82B0     		sub	sp, sp, #8
  91              		.cfi_def_cfa_offset 8
  92 0002 0190     		str	r0, [sp, #4]
  93 0004 0091     		str	r1, [sp]
 262:bitops.h      ****   len--;
  94              		.loc 1 262 0
  95 0006 009B     		ldr	r3, [sp]
  96 0008 013B     		subs	r3, r3, #1
  97 000a 0093     		str	r3, [sp]
  98              	.L8:
 263:bitops.h      ****   while (1)
 264:bitops.h      ****   {
 265:bitops.h      ****     if (++v[len] != 0)
  99              		.loc 1 265 0
 100 000c 019A     		ldr	r2, [sp, #4]
 101 000e 009B     		ldr	r3, [sp]
 102 0010 D318     		adds	r3, r2, r3
 103 0012 1A78     		ldrb	r2, [r3]
 104 0014 0132     		adds	r2, r2, #1
 105 0016 D2B2     		uxtb	r2, r2
 106 0018 1A70     		strb	r2, [r3]
 107 001a 1B78     		ldrb	r3, [r3]
 108 001c 002B     		cmp	r3, #0
 109 001e 06D1     		bne	.L9
 266:bitops.h      ****       return;
 267:bitops.h      ****     if (len == 0)
 110              		.loc 1 267 0
 111 0020 009B     		ldr	r3, [sp]
 112 0022 002B     		cmp	r3, #0
 113 0024 05D0     		beq	.L10
 268:bitops.h      ****       return;
 269:bitops.h      ****     len--;
 114              		.loc 1 269 0
 115 0026 009B     		ldr	r3, [sp]
 116 0028 013B     		subs	r3, r3, #1
 117 002a 0093     		str	r3, [sp]
 270:bitops.h      ****   }
 118              		.loc 1 270 0
 119 002c EEE7     		b	.L8
 120              	.L9:
 266:bitops.h      ****       return;
 121              		.loc 1 266 0
 122 002e C046     		nop
 123 0030 00E0     		b	.L4
 124              	.L10:
 268:bitops.h      ****       return;
 125              		.loc 1 268 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 8


 126 0032 C046     		nop
 127              	.L4:
 271:bitops.h      **** }
 128              		.loc 1 271 0
 129 0034 02B0     		add	sp, sp, #8
 130              		@ sp needed
 131 0036 7047     		bx	lr
 132              		.cfi_endproc
 133              	.LFE22:
 134              		.size	incr_be, .-incr_be
 135              		.section	.text.cf_cbc_init,"ax",%progbits
 136              		.align	2
 137              		.global	cf_cbc_init
 138              		.code	16
 139              		.thumb_func
 140              		.type	cf_cbc_init, %function
 141              	cf_cbc_init:
 142              	.LFB25:
 143              		.file 2 "modes.c"
   1:modes.c       **** /*
   2:modes.c       ****  * cifra - embedded cryptography library
   3:modes.c       ****  * Written in 2014 by Joseph Birr-Pixton <jpixton@gmail.com>
   4:modes.c       ****  *
   5:modes.c       ****  * To the extent possible under law, the author(s) have dedicated all
   6:modes.c       ****  * copyright and related and neighboring rights to this software to the
   7:modes.c       ****  * public domain worldwide. This software is distributed without any
   8:modes.c       ****  * warranty.
   9:modes.c       ****  *
  10:modes.c       ****  * You should have received a copy of the CC0 Public Domain Dedication
  11:modes.c       ****  * along with this software. If not, see
  12:modes.c       ****  * <http://creativecommons.org/publicdomain/zero/1.0/>.
  13:modes.c       ****  */
  14:modes.c       **** 
  15:modes.c       **** #include "prp.h"
  16:modes.c       **** #include "modes.h"
  17:modes.c       **** #include "bitops.h"
  18:modes.c       **** #include "blockwise.h"
  19:modes.c       **** 
  20:modes.c       **** #include <string.h>
  21:modes.c       **** #include "tassert.h"
  22:modes.c       **** 
  23:modes.c       **** /* CBC */
  24:modes.c       **** void cf_cbc_init(cf_cbc *ctx, const cf_prp *prp, void *prpctx, const uint8_t iv[CF_MAXBLOCK])
  25:modes.c       **** {
 144              		.loc 2 25 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 16
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148 0000 00B5     		push	{lr}
 149              		.cfi_def_cfa_offset 4
 150              		.cfi_offset 14, -4
 151 0002 85B0     		sub	sp, sp, #20
 152              		.cfi_def_cfa_offset 24
 153 0004 0390     		str	r0, [sp, #12]
 154 0006 0291     		str	r1, [sp, #8]
 155 0008 0192     		str	r2, [sp, #4]
 156 000a 0093     		str	r3, [sp]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 9


  26:modes.c       ****   ctx->prp = prp;
 157              		.loc 2 26 0
 158 000c 039B     		ldr	r3, [sp, #12]
 159 000e 029A     		ldr	r2, [sp, #8]
 160 0010 1A60     		str	r2, [r3]
  27:modes.c       ****   ctx->prpctx = prpctx;
 161              		.loc 2 27 0
 162 0012 039B     		ldr	r3, [sp, #12]
 163 0014 019A     		ldr	r2, [sp, #4]
 164 0016 5A60     		str	r2, [r3, #4]
  28:modes.c       ****   memcpy(ctx->block, iv, prp->blocksz);
 165              		.loc 2 28 0
 166 0018 039B     		ldr	r3, [sp, #12]
 167 001a 0833     		adds	r3, r3, #8
 168 001c 1800     		movs	r0, r3
 169 001e 029B     		ldr	r3, [sp, #8]
 170 0020 1A68     		ldr	r2, [r3]
 171 0022 009B     		ldr	r3, [sp]
 172 0024 1900     		movs	r1, r3
 173 0026 FFF7FEFF 		bl	memcpy
  29:modes.c       **** }
 174              		.loc 2 29 0
 175 002a C046     		nop
 176 002c 05B0     		add	sp, sp, #20
 177              		@ sp needed
 178 002e 00BD     		pop	{pc}
 179              		.cfi_endproc
 180              	.LFE25:
 181              		.size	cf_cbc_init, .-cf_cbc_init
 182              		.section	.text.cf_cbc_encrypt,"ax",%progbits
 183              		.align	2
 184              		.global	cf_cbc_encrypt
 185              		.code	16
 186              		.thumb_func
 187              		.type	cf_cbc_encrypt, %function
 188              	cf_cbc_encrypt:
 189              	.LFB26:
  30:modes.c       **** 
  31:modes.c       **** void cf_cbc_encrypt(cf_cbc *ctx, const uint8_t *input, uint8_t *output, size_t blocks)
  32:modes.c       **** {
 190              		.loc 2 32 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 40
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194 0000 10B5     		push	{r4, lr}
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 4, -8
 197              		.cfi_offset 14, -4
 198 0002 8AB0     		sub	sp, sp, #40
 199              		.cfi_def_cfa_offset 48
 200 0004 0390     		str	r0, [sp, #12]
 201 0006 0291     		str	r1, [sp, #8]
 202 0008 0192     		str	r2, [sp, #4]
 203 000a 0093     		str	r3, [sp]
  33:modes.c       ****   uint8_t buf[CF_MAXBLOCK];
  34:modes.c       ****   size_t nblk = ctx->prp->blocksz;
 204              		.loc 2 34 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 10


 205 000c 039B     		ldr	r3, [sp, #12]
 206 000e 1B68     		ldr	r3, [r3]
 207 0010 1B68     		ldr	r3, [r3]
 208 0012 0993     		str	r3, [sp, #36]
  35:modes.c       **** 
  36:modes.c       ****   while (blocks--)
 209              		.loc 2 36 0
 210 0014 22E0     		b	.L13
 211              	.L14:
  37:modes.c       ****   {
  38:modes.c       ****     xor_bb(buf, input, ctx->block, nblk);
 212              		.loc 2 38 0
 213 0016 039B     		ldr	r3, [sp, #12]
 214 0018 0833     		adds	r3, r3, #8
 215 001a 1A00     		movs	r2, r3
 216 001c 099B     		ldr	r3, [sp, #36]
 217 001e 0299     		ldr	r1, [sp, #8]
 218 0020 05A8     		add	r0, sp, #20
 219 0022 FFF7FEFF 		bl	xor_bb
  39:modes.c       ****     ctx->prp->encrypt(ctx->prpctx, buf, ctx->block);
 220              		.loc 2 39 0
 221 0026 039B     		ldr	r3, [sp, #12]
 222 0028 1B68     		ldr	r3, [r3]
 223 002a 5C68     		ldr	r4, [r3, #4]
 224 002c 039B     		ldr	r3, [sp, #12]
 225 002e 5868     		ldr	r0, [r3, #4]
 226 0030 039B     		ldr	r3, [sp, #12]
 227 0032 0833     		adds	r3, r3, #8
 228 0034 1A00     		movs	r2, r3
 229 0036 05AB     		add	r3, sp, #20
 230 0038 1900     		movs	r1, r3
 231 003a A047     		blx	r4
  40:modes.c       ****     memcpy(output, ctx->block, nblk);
 232              		.loc 2 40 0
 233 003c 039B     		ldr	r3, [sp, #12]
 234 003e 0833     		adds	r3, r3, #8
 235 0040 1900     		movs	r1, r3
 236 0042 099A     		ldr	r2, [sp, #36]
 237 0044 019B     		ldr	r3, [sp, #4]
 238 0046 1800     		movs	r0, r3
 239 0048 FFF7FEFF 		bl	memcpy
  41:modes.c       ****     input += nblk;
 240              		.loc 2 41 0
 241 004c 029A     		ldr	r2, [sp, #8]
 242 004e 099B     		ldr	r3, [sp, #36]
 243 0050 D318     		adds	r3, r2, r3
 244 0052 0293     		str	r3, [sp, #8]
  42:modes.c       ****     output += nblk;
 245              		.loc 2 42 0
 246 0054 019A     		ldr	r2, [sp, #4]
 247 0056 099B     		ldr	r3, [sp, #36]
 248 0058 D318     		adds	r3, r2, r3
 249 005a 0193     		str	r3, [sp, #4]
 250              	.L13:
  36:modes.c       ****   {
 251              		.loc 2 36 0
 252 005c 009B     		ldr	r3, [sp]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 11


 253 005e 5A1E     		subs	r2, r3, #1
 254 0060 0092     		str	r2, [sp]
 255 0062 002B     		cmp	r3, #0
 256 0064 D7D1     		bne	.L14
  43:modes.c       ****   }
  44:modes.c       **** }
 257              		.loc 2 44 0
 258 0066 C046     		nop
 259 0068 0AB0     		add	sp, sp, #40
 260              		@ sp needed
 261 006a 10BD     		pop	{r4, pc}
 262              		.cfi_endproc
 263              	.LFE26:
 264              		.size	cf_cbc_encrypt, .-cf_cbc_encrypt
 265              		.section	.text.cf_cbc_decrypt,"ax",%progbits
 266              		.align	2
 267              		.global	cf_cbc_decrypt
 268              		.code	16
 269              		.thumb_func
 270              		.type	cf_cbc_decrypt, %function
 271              	cf_cbc_decrypt:
 272              	.LFB27:
  45:modes.c       **** 
  46:modes.c       **** void cf_cbc_decrypt(cf_cbc *ctx, const uint8_t *input, uint8_t *output, size_t blocks)
  47:modes.c       **** {
 273              		.loc 2 47 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 40
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277 0000 10B5     		push	{r4, lr}
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 4, -8
 280              		.cfi_offset 14, -4
 281 0002 8AB0     		sub	sp, sp, #40
 282              		.cfi_def_cfa_offset 48
 283 0004 0390     		str	r0, [sp, #12]
 284 0006 0291     		str	r1, [sp, #8]
 285 0008 0192     		str	r2, [sp, #4]
 286 000a 0093     		str	r3, [sp]
  48:modes.c       ****   uint8_t buf[CF_MAXBLOCK];
  49:modes.c       ****   size_t nblk = ctx->prp->blocksz;
 287              		.loc 2 49 0
 288 000c 039B     		ldr	r3, [sp, #12]
 289 000e 1B68     		ldr	r3, [r3]
 290 0010 1B68     		ldr	r3, [r3]
 291 0012 0993     		str	r3, [sp, #36]
  50:modes.c       **** 
  51:modes.c       ****   while (blocks--)
 292              		.loc 2 51 0
 293 0014 1FE0     		b	.L16
 294              	.L17:
  52:modes.c       ****   {
  53:modes.c       ****     ctx->prp->decrypt(ctx->prpctx, input, buf);
 295              		.loc 2 53 0
 296 0016 039B     		ldr	r3, [sp, #12]
 297 0018 1B68     		ldr	r3, [r3]
 298 001a 9C68     		ldr	r4, [r3, #8]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 12


 299 001c 039B     		ldr	r3, [sp, #12]
 300 001e 5B68     		ldr	r3, [r3, #4]
 301 0020 05AA     		add	r2, sp, #20
 302 0022 0299     		ldr	r1, [sp, #8]
 303 0024 1800     		movs	r0, r3
 304 0026 A047     		blx	r4
  54:modes.c       ****     xor_bb(output, buf, ctx->block, nblk);
 305              		.loc 2 54 0
 306 0028 039B     		ldr	r3, [sp, #12]
 307 002a 0833     		adds	r3, r3, #8
 308 002c 1A00     		movs	r2, r3
 309 002e 099B     		ldr	r3, [sp, #36]
 310 0030 05A9     		add	r1, sp, #20
 311 0032 0198     		ldr	r0, [sp, #4]
 312 0034 FFF7FEFF 		bl	xor_bb
  55:modes.c       ****     memcpy(ctx->block, input, nblk);
 313              		.loc 2 55 0
 314 0038 039B     		ldr	r3, [sp, #12]
 315 003a 0833     		adds	r3, r3, #8
 316 003c 099A     		ldr	r2, [sp, #36]
 317 003e 0299     		ldr	r1, [sp, #8]
 318 0040 1800     		movs	r0, r3
 319 0042 FFF7FEFF 		bl	memcpy
  56:modes.c       ****     input += nblk;
 320              		.loc 2 56 0
 321 0046 029A     		ldr	r2, [sp, #8]
 322 0048 099B     		ldr	r3, [sp, #36]
 323 004a D318     		adds	r3, r2, r3
 324 004c 0293     		str	r3, [sp, #8]
  57:modes.c       ****     output += nblk;
 325              		.loc 2 57 0
 326 004e 019A     		ldr	r2, [sp, #4]
 327 0050 099B     		ldr	r3, [sp, #36]
 328 0052 D318     		adds	r3, r2, r3
 329 0054 0193     		str	r3, [sp, #4]
 330              	.L16:
  51:modes.c       ****   {
 331              		.loc 2 51 0
 332 0056 009B     		ldr	r3, [sp]
 333 0058 5A1E     		subs	r2, r3, #1
 334 005a 0092     		str	r2, [sp]
 335 005c 002B     		cmp	r3, #0
 336 005e DAD1     		bne	.L17
  58:modes.c       ****   }
  59:modes.c       **** }
 337              		.loc 2 59 0
 338 0060 C046     		nop
 339 0062 0AB0     		add	sp, sp, #40
 340              		@ sp needed
 341 0064 10BD     		pop	{r4, pc}
 342              		.cfi_endproc
 343              	.LFE27:
 344              		.size	cf_cbc_decrypt, .-cf_cbc_decrypt
 345 0066 C046     		.section	.text.cf_ctr_init,"ax",%progbits
 346              		.align	2
 347              		.global	cf_ctr_init
 348              		.code	16
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 13


 349              		.thumb_func
 350              		.type	cf_ctr_init, %function
 351              	cf_ctr_init:
 352              	.LFB28:
  60:modes.c       **** 
  61:modes.c       **** /* CTR */
  62:modes.c       **** void cf_ctr_init(cf_ctr *ctx, const cf_prp *prp, void *prpctx, const uint8_t nonce[CF_MAXBLOCK])
  63:modes.c       **** {
 353              		.loc 2 63 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 16
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357 0000 00B5     		push	{lr}
 358              		.cfi_def_cfa_offset 4
 359              		.cfi_offset 14, -4
 360 0002 85B0     		sub	sp, sp, #20
 361              		.cfi_def_cfa_offset 24
 362 0004 0390     		str	r0, [sp, #12]
 363 0006 0291     		str	r1, [sp, #8]
 364 0008 0192     		str	r2, [sp, #4]
 365 000a 0093     		str	r3, [sp]
  64:modes.c       ****   memset(ctx, 0, sizeof *ctx);
 366              		.loc 2 64 0
 367 000c 039B     		ldr	r3, [sp, #12]
 368 000e 3422     		movs	r2, #52
 369 0010 0021     		movs	r1, #0
 370 0012 1800     		movs	r0, r3
 371 0014 FFF7FEFF 		bl	memset
  65:modes.c       ****   ctx->counter_offset = 0;
 372              		.loc 2 65 0
 373 0018 039B     		ldr	r3, [sp, #12]
 374 001a 0022     		movs	r2, #0
 375 001c DA62     		str	r2, [r3, #44]
  66:modes.c       ****   ctx->counter_width = prp->blocksz;
 376              		.loc 2 66 0
 377 001e 029B     		ldr	r3, [sp, #8]
 378 0020 1A68     		ldr	r2, [r3]
 379 0022 039B     		ldr	r3, [sp, #12]
 380 0024 1A63     		str	r2, [r3, #48]
  67:modes.c       ****   ctx->prp = prp;
 381              		.loc 2 67 0
 382 0026 039B     		ldr	r3, [sp, #12]
 383 0028 029A     		ldr	r2, [sp, #8]
 384 002a 1A60     		str	r2, [r3]
  68:modes.c       ****   ctx->prpctx = prpctx;
 385              		.loc 2 68 0
 386 002c 039B     		ldr	r3, [sp, #12]
 387 002e 019A     		ldr	r2, [sp, #4]
 388 0030 5A60     		str	r2, [r3, #4]
  69:modes.c       ****   ctx->nkeymat = 0;
 389              		.loc 2 69 0
 390 0032 039B     		ldr	r3, [sp, #12]
 391 0034 0022     		movs	r2, #0
 392 0036 9A62     		str	r2, [r3, #40]
  70:modes.c       ****   memcpy(ctx->nonce, nonce, prp->blocksz);
 393              		.loc 2 70 0
 394 0038 039B     		ldr	r3, [sp, #12]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 14


 395 003a 0833     		adds	r3, r3, #8
 396 003c 1800     		movs	r0, r3
 397 003e 029B     		ldr	r3, [sp, #8]
 398 0040 1A68     		ldr	r2, [r3]
 399 0042 009B     		ldr	r3, [sp]
 400 0044 1900     		movs	r1, r3
 401 0046 FFF7FEFF 		bl	memcpy
  71:modes.c       **** }
 402              		.loc 2 71 0
 403 004a C046     		nop
 404 004c 05B0     		add	sp, sp, #20
 405              		@ sp needed
 406 004e 00BD     		pop	{pc}
 407              		.cfi_endproc
 408              	.LFE28:
 409              		.size	cf_ctr_init, .-cf_ctr_init
 410              		.section	.text.cf_ctr_custom_counter,"ax",%progbits
 411              		.align	2
 412              		.global	cf_ctr_custom_counter
 413              		.code	16
 414              		.thumb_func
 415              		.type	cf_ctr_custom_counter, %function
 416              	cf_ctr_custom_counter:
 417              	.LFB29:
  72:modes.c       **** 
  73:modes.c       **** void cf_ctr_custom_counter(cf_ctr *ctx, size_t offset, size_t width)
  74:modes.c       **** {
 418              		.loc 2 74 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 16
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422 0000 00B5     		push	{lr}
 423              		.cfi_def_cfa_offset 4
 424              		.cfi_offset 14, -4
 425 0002 85B0     		sub	sp, sp, #20
 426              		.cfi_def_cfa_offset 24
 427 0004 0390     		str	r0, [sp, #12]
 428 0006 0291     		str	r1, [sp, #8]
 429 0008 0192     		str	r2, [sp, #4]
  75:modes.c       ****   assert(ctx->prp->blocksz <= offset + width);
 430              		.loc 2 75 0
 431 000a 039B     		ldr	r3, [sp, #12]
 432 000c 1B68     		ldr	r3, [r3]
 433 000e 1A68     		ldr	r2, [r3]
 434 0010 0299     		ldr	r1, [sp, #8]
 435 0012 019B     		ldr	r3, [sp, #4]
 436 0014 CB18     		adds	r3, r1, r3
 437 0016 9A42     		cmp	r2, r3
 438 0018 01D9     		bls	.L20
 439              		.loc 2 75 0 is_stmt 0 discriminator 1
 440 001a FFF7FEFF 		bl	abort
 441              	.L20:
  76:modes.c       ****   ctx->counter_offset = offset;
 442              		.loc 2 76 0 is_stmt 1
 443 001e 039B     		ldr	r3, [sp, #12]
 444 0020 029A     		ldr	r2, [sp, #8]
 445 0022 DA62     		str	r2, [r3, #44]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 15


  77:modes.c       ****   ctx->counter_width = width;
 446              		.loc 2 77 0
 447 0024 039B     		ldr	r3, [sp, #12]
 448 0026 019A     		ldr	r2, [sp, #4]
 449 0028 1A63     		str	r2, [r3, #48]
  78:modes.c       **** }
 450              		.loc 2 78 0
 451 002a C046     		nop
 452 002c 05B0     		add	sp, sp, #20
 453              		@ sp needed
 454 002e 00BD     		pop	{pc}
 455              		.cfi_endproc
 456              	.LFE29:
 457              		.size	cf_ctr_custom_counter, .-cf_ctr_custom_counter
 458              		.section	.text.ctr_next_block,"ax",%progbits
 459              		.align	2
 460              		.code	16
 461              		.thumb_func
 462              		.type	ctr_next_block, %function
 463              	ctr_next_block:
 464              	.LFB30:
  79:modes.c       **** 
  80:modes.c       **** static void ctr_next_block(void *vctx, uint8_t *out)
  81:modes.c       **** {
 465              		.loc 2 81 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 16
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469 0000 10B5     		push	{r4, lr}
 470              		.cfi_def_cfa_offset 8
 471              		.cfi_offset 4, -8
 472              		.cfi_offset 14, -4
 473 0002 84B0     		sub	sp, sp, #16
 474              		.cfi_def_cfa_offset 24
 475 0004 0190     		str	r0, [sp, #4]
 476 0006 0091     		str	r1, [sp]
  82:modes.c       ****   cf_ctr *ctx = vctx;
 477              		.loc 2 82 0
 478 0008 019B     		ldr	r3, [sp, #4]
 479 000a 0393     		str	r3, [sp, #12]
  83:modes.c       ****   ctx->prp->encrypt(ctx->prpctx, ctx->nonce, out);
 480              		.loc 2 83 0
 481 000c 039B     		ldr	r3, [sp, #12]
 482 000e 1B68     		ldr	r3, [r3]
 483 0010 5C68     		ldr	r4, [r3, #4]
 484 0012 039B     		ldr	r3, [sp, #12]
 485 0014 5868     		ldr	r0, [r3, #4]
 486 0016 039B     		ldr	r3, [sp, #12]
 487 0018 0833     		adds	r3, r3, #8
 488 001a 009A     		ldr	r2, [sp]
 489 001c 1900     		movs	r1, r3
 490 001e A047     		blx	r4
  84:modes.c       ****   incr_be(ctx->nonce + ctx->counter_offset, ctx->counter_width);
 491              		.loc 2 84 0
 492 0020 039B     		ldr	r3, [sp, #12]
 493 0022 0833     		adds	r3, r3, #8
 494 0024 1A00     		movs	r2, r3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 16


 495 0026 039B     		ldr	r3, [sp, #12]
 496 0028 DB6A     		ldr	r3, [r3, #44]
 497 002a D218     		adds	r2, r2, r3
 498 002c 039B     		ldr	r3, [sp, #12]
 499 002e 1B6B     		ldr	r3, [r3, #48]
 500 0030 1900     		movs	r1, r3
 501 0032 1000     		movs	r0, r2
 502 0034 FFF7FEFF 		bl	incr_be
  85:modes.c       **** }
 503              		.loc 2 85 0
 504 0038 C046     		nop
 505 003a 04B0     		add	sp, sp, #16
 506              		@ sp needed
 507 003c 10BD     		pop	{r4, pc}
 508              		.cfi_endproc
 509              	.LFE30:
 510              		.size	ctr_next_block, .-ctr_next_block
 511 003e C046     		.section	.text.cf_ctr_cipher,"ax",%progbits
 512              		.align	2
 513              		.global	cf_ctr_cipher
 514              		.code	16
 515              		.thumb_func
 516              		.type	cf_ctr_cipher, %function
 517              	cf_ctr_cipher:
 518              	.LFB31:
  86:modes.c       **** 
  87:modes.c       **** void cf_ctr_cipher(cf_ctr *ctx, const uint8_t *input, uint8_t *output, size_t bytes)
  88:modes.c       **** {
 519              		.loc 2 88 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 16
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523 0000 10B5     		push	{r4, lr}
 524              		.cfi_def_cfa_offset 8
 525              		.cfi_offset 4, -8
 526              		.cfi_offset 14, -4
 527 0002 88B0     		sub	sp, sp, #32
 528              		.cfi_def_cfa_offset 40
 529 0004 0790     		str	r0, [sp, #28]
 530 0006 0691     		str	r1, [sp, #24]
 531 0008 0592     		str	r2, [sp, #20]
 532 000a 0493     		str	r3, [sp, #16]
  89:modes.c       ****   cf_blockwise_xor(ctx->keymat, &ctx->nkeymat,
 533              		.loc 2 89 0
 534 000c 079B     		ldr	r3, [sp, #28]
 535 000e 1833     		adds	r3, r3, #24
 536 0010 1800     		movs	r0, r3
 537 0012 079B     		ldr	r3, [sp, #28]
 538 0014 2833     		adds	r3, r3, #40
 539 0016 1900     		movs	r1, r3
  90:modes.c       ****                    ctx->prp->blocksz,
 540              		.loc 2 90 0
 541 0018 079B     		ldr	r3, [sp, #28]
 542 001a 1B68     		ldr	r3, [r3]
  89:modes.c       ****   cf_blockwise_xor(ctx->keymat, &ctx->nkeymat,
 543              		.loc 2 89 0
 544 001c 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 17


 545 001e 069C     		ldr	r4, [sp, #24]
 546 0020 079B     		ldr	r3, [sp, #28]
 547 0022 0393     		str	r3, [sp, #12]
 548 0024 054B     		ldr	r3, .L23
 549 0026 0293     		str	r3, [sp, #8]
 550 0028 049B     		ldr	r3, [sp, #16]
 551 002a 0193     		str	r3, [sp, #4]
 552 002c 059B     		ldr	r3, [sp, #20]
 553 002e 0093     		str	r3, [sp]
 554 0030 2300     		movs	r3, r4
 555 0032 FFF7FEFF 		bl	cf_blockwise_xor
  91:modes.c       ****                    input, output, bytes,
  92:modes.c       ****                    ctr_next_block,
  93:modes.c       ****                    ctx);
  94:modes.c       **** }
 556              		.loc 2 94 0
 557 0036 C046     		nop
 558 0038 08B0     		add	sp, sp, #32
 559              		@ sp needed
 560 003a 10BD     		pop	{r4, pc}
 561              	.L24:
 562              		.align	2
 563              	.L23:
 564 003c 00000000 		.word	ctr_next_block
 565              		.cfi_endproc
 566              	.LFE31:
 567              		.size	cf_ctr_cipher, .-cf_ctr_cipher
 568              		.section	.text.cf_ctr_discard_block,"ax",%progbits
 569              		.align	2
 570              		.global	cf_ctr_discard_block
 571              		.code	16
 572              		.thumb_func
 573              		.type	cf_ctr_discard_block, %function
 574              	cf_ctr_discard_block:
 575              	.LFB32:
  95:modes.c       **** 
  96:modes.c       **** void cf_ctr_discard_block(cf_ctr *ctx)
  97:modes.c       **** {
 576              		.loc 2 97 0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 8
 579              		@ frame_needed = 0, uses_anonymous_args = 0
 580              		@ link register save eliminated.
 581 0000 82B0     		sub	sp, sp, #8
 582              		.cfi_def_cfa_offset 8
 583 0002 0190     		str	r0, [sp, #4]
  98:modes.c       ****   ctx->nkeymat = 0;
 584              		.loc 2 98 0
 585 0004 019B     		ldr	r3, [sp, #4]
 586 0006 0022     		movs	r2, #0
 587 0008 9A62     		str	r2, [r3, #40]
  99:modes.c       **** }
 588              		.loc 2 99 0
 589 000a C046     		nop
 590 000c 02B0     		add	sp, sp, #8
 591              		@ sp needed
 592 000e 7047     		bx	lr
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 18


 593              		.cfi_endproc
 594              	.LFE32:
 595              		.size	cf_ctr_discard_block, .-cf_ctr_discard_block
 596              		.text
 597              	.Letext0:
 598              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 599              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 600              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 601              		.file 6 "prp.h"
 602              		.file 7 "modes.h"
 603              		.section	.debug_info,"",%progbits
 604              	.Ldebug_info0:
 605 0000 C6040000 		.4byte	0x4c6
 606 0004 0400     		.2byte	0x4
 607 0006 00000000 		.4byte	.Ldebug_abbrev0
 608 000a 04       		.byte	0x4
 609 000b 01       		.uleb128 0x1
 610 000c 16000000 		.4byte	.LASF46
 611 0010 0C       		.byte	0xc
 612 0011 98010000 		.4byte	.LASF47
 613 0015 34020000 		.4byte	.LASF48
 614 0019 00000000 		.4byte	.Ldebug_ranges0+0
 615 001d 00000000 		.4byte	0
 616 0021 00000000 		.4byte	.Ldebug_line0
 617 0025 02       		.uleb128 0x2
 618 0026 04       		.byte	0x4
 619 0027 05       		.byte	0x5
 620 0028 696E7400 		.ascii	"int\000"
 621 002c 03       		.uleb128 0x3
 622 002d 58010000 		.4byte	.LASF4
 623 0031 03       		.byte	0x3
 624 0032 D8       		.byte	0xd8
 625 0033 37000000 		.4byte	0x37
 626 0037 04       		.uleb128 0x4
 627 0038 04       		.byte	0x4
 628 0039 07       		.byte	0x7
 629 003a AF010000 		.4byte	.LASF0
 630 003e 04       		.uleb128 0x4
 631 003f 08       		.byte	0x8
 632 0040 05       		.byte	0x5
 633 0041 05020000 		.4byte	.LASF1
 634 0045 04       		.uleb128 0x4
 635 0046 08       		.byte	0x8
 636 0047 04       		.byte	0x4
 637 0048 DF020000 		.4byte	.LASF2
 638 004c 04       		.uleb128 0x4
 639 004d 01       		.byte	0x1
 640 004e 06       		.byte	0x6
 641 004f 01030000 		.4byte	.LASF3
 642 0053 03       		.uleb128 0x3
 643 0054 0C000000 		.4byte	.LASF5
 644 0058 04       		.byte	0x4
 645 0059 1D       		.byte	0x1d
 646 005a 5E000000 		.4byte	0x5e
 647 005e 04       		.uleb128 0x4
 648 005f 01       		.byte	0x1
 649 0060 08       		.byte	0x8
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 19


 650 0061 03010000 		.4byte	.LASF6
 651 0065 04       		.uleb128 0x4
 652 0066 02       		.byte	0x2
 653 0067 05       		.byte	0x5
 654 0068 65010000 		.4byte	.LASF7
 655 006c 04       		.uleb128 0x4
 656 006d 02       		.byte	0x2
 657 006e 07       		.byte	0x7
 658 006f 45010000 		.4byte	.LASF8
 659 0073 04       		.uleb128 0x4
 660 0074 04       		.byte	0x4
 661 0075 05       		.byte	0x5
 662 0076 D0020000 		.4byte	.LASF9
 663 007a 04       		.uleb128 0x4
 664 007b 04       		.byte	0x4
 665 007c 07       		.byte	0x7
 666 007d 33010000 		.4byte	.LASF10
 667 0081 04       		.uleb128 0x4
 668 0082 08       		.byte	0x8
 669 0083 07       		.byte	0x7
 670 0084 C3010000 		.4byte	.LASF11
 671 0088 03       		.uleb128 0x3
 672 0089 CF000000 		.4byte	.LASF12
 673 008d 05       		.byte	0x5
 674 008e 18       		.byte	0x18
 675 008f 53000000 		.4byte	0x53
 676 0093 03       		.uleb128 0x3
 677 0094 8B010000 		.4byte	.LASF13
 678 0098 06       		.byte	0x6
 679 0099 26       		.byte	0x26
 680 009a 9E000000 		.4byte	0x9e
 681 009e 05       		.uleb128 0x5
 682 009f 04       		.byte	0x4
 683 00a0 A4000000 		.4byte	0xa4
 684 00a4 06       		.uleb128 0x6
 685 00a5 B9000000 		.4byte	0xb9
 686 00a9 07       		.uleb128 0x7
 687 00aa B9000000 		.4byte	0xb9
 688 00ae 07       		.uleb128 0x7
 689 00af BB000000 		.4byte	0xbb
 690 00b3 07       		.uleb128 0x7
 691 00b4 C6000000 		.4byte	0xc6
 692 00b8 00       		.byte	0
 693 00b9 08       		.uleb128 0x8
 694 00ba 04       		.byte	0x4
 695 00bb 05       		.uleb128 0x5
 696 00bc 04       		.byte	0x4
 697 00bd C1000000 		.4byte	0xc1
 698 00c1 09       		.uleb128 0x9
 699 00c2 88000000 		.4byte	0x88
 700 00c6 05       		.uleb128 0x5
 701 00c7 04       		.byte	0x4
 702 00c8 88000000 		.4byte	0x88
 703 00cc 0A       		.uleb128 0xa
 704 00cd 0C       		.byte	0xc
 705 00ce 06       		.byte	0x6
 706 00cf 34       		.byte	0x34
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 20


 707 00d0 F9000000 		.4byte	0xf9
 708 00d4 0B       		.uleb128 0xb
 709 00d5 EE000000 		.4byte	.LASF14
 710 00d9 06       		.byte	0x6
 711 00da 36       		.byte	0x36
 712 00db 2C000000 		.4byte	0x2c
 713 00df 00       		.byte	0
 714 00e0 0B       		.uleb128 0xb
 715 00e1 C7000000 		.4byte	.LASF15
 716 00e5 06       		.byte	0x6
 717 00e6 37       		.byte	0x37
 718 00e7 93000000 		.4byte	0x93
 719 00eb 04       		.byte	0x4
 720 00ec 0B       		.uleb128 0xb
 721 00ed D7000000 		.4byte	.LASF16
 722 00f1 06       		.byte	0x6
 723 00f2 38       		.byte	0x38
 724 00f3 93000000 		.4byte	0x93
 725 00f7 08       		.byte	0x8
 726 00f8 00       		.byte	0
 727 00f9 03       		.uleb128 0x3
 728 00fa 17010000 		.4byte	.LASF17
 729 00fe 06       		.byte	0x6
 730 00ff 39       		.byte	0x39
 731 0100 CC000000 		.4byte	0xcc
 732 0104 0A       		.uleb128 0xa
 733 0105 18       		.byte	0x18
 734 0106 07       		.byte	0x7
 735 0107 35       		.byte	0x35
 736 0108 31010000 		.4byte	0x131
 737 010c 0C       		.uleb128 0xc
 738 010d 70727000 		.ascii	"prp\000"
 739 0111 07       		.byte	0x7
 740 0112 37       		.byte	0x37
 741 0113 31010000 		.4byte	0x131
 742 0117 00       		.byte	0
 743 0118 0B       		.uleb128 0xb
 744 0119 BC010000 		.4byte	.LASF18
 745 011d 07       		.byte	0x7
 746 011e 38       		.byte	0x38
 747 011f B9000000 		.4byte	0xb9
 748 0123 04       		.byte	0x4
 749 0124 0B       		.uleb128 0xb
 750 0125 F6000000 		.4byte	.LASF19
 751 0129 07       		.byte	0x7
 752 012a 39       		.byte	0x39
 753 012b 3C010000 		.4byte	0x13c
 754 012f 08       		.byte	0x8
 755 0130 00       		.byte	0
 756 0131 05       		.uleb128 0x5
 757 0132 04       		.byte	0x4
 758 0133 37010000 		.4byte	0x137
 759 0137 09       		.uleb128 0x9
 760 0138 F9000000 		.4byte	0xf9
 761 013c 0D       		.uleb128 0xd
 762 013d 88000000 		.4byte	0x88
 763 0141 4C010000 		.4byte	0x14c
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 21


 764 0145 0E       		.uleb128 0xe
 765 0146 4C010000 		.4byte	0x14c
 766 014a 0F       		.byte	0xf
 767 014b 00       		.byte	0
 768 014c 04       		.uleb128 0x4
 769 014d 04       		.byte	0x4
 770 014e 07       		.byte	0x7
 771 014f FC010000 		.4byte	.LASF20
 772 0153 03       		.uleb128 0x3
 773 0154 FC000000 		.4byte	.LASF21
 774 0158 07       		.byte	0x7
 775 0159 3A       		.byte	0x3a
 776 015a 04010000 		.4byte	0x104
 777 015e 0A       		.uleb128 0xa
 778 015f 34       		.byte	0x34
 779 0160 07       		.byte	0x7
 780 0161 72       		.byte	0x72
 781 0162 BB010000 		.4byte	0x1bb
 782 0166 0C       		.uleb128 0xc
 783 0167 70727000 		.ascii	"prp\000"
 784 016b 07       		.byte	0x7
 785 016c 74       		.byte	0x74
 786 016d 31010000 		.4byte	0x131
 787 0171 00       		.byte	0
 788 0172 0B       		.uleb128 0xb
 789 0173 BC010000 		.4byte	.LASF18
 790 0177 07       		.byte	0x7
 791 0178 75       		.byte	0x75
 792 0179 B9000000 		.4byte	0xb9
 793 017d 04       		.byte	0x4
 794 017e 0B       		.uleb128 0xb
 795 017f 5F010000 		.4byte	.LASF22
 796 0183 07       		.byte	0x7
 797 0184 76       		.byte	0x76
 798 0185 3C010000 		.4byte	0x13c
 799 0189 08       		.byte	0x8
 800 018a 0B       		.uleb128 0xb
 801 018b C0000000 		.4byte	.LASF23
 802 018f 07       		.byte	0x7
 803 0190 77       		.byte	0x77
 804 0191 3C010000 		.4byte	0x13c
 805 0195 18       		.byte	0x18
 806 0196 0B       		.uleb128 0xb
 807 0197 0D030000 		.4byte	.LASF24
 808 019b 07       		.byte	0x7
 809 019c 78       		.byte	0x78
 810 019d 2C000000 		.4byte	0x2c
 811 01a1 28       		.byte	0x28
 812 01a2 0B       		.uleb128 0xb
 813 01a3 DF000000 		.4byte	.LASF25
 814 01a7 07       		.byte	0x7
 815 01a8 79       		.byte	0x79
 816 01a9 2C000000 		.4byte	0x2c
 817 01ad 2C       		.byte	0x2c
 818 01ae 0B       		.uleb128 0xb
 819 01af 6F010000 		.4byte	.LASF26
 820 01b3 07       		.byte	0x7
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 22


 821 01b4 7A       		.byte	0x7a
 822 01b5 2C000000 		.4byte	0x2c
 823 01b9 30       		.byte	0x30
 824 01ba 00       		.byte	0
 825 01bb 03       		.uleb128 0x3
 826 01bc B9000000 		.4byte	.LASF27
 827 01c0 07       		.byte	0x7
 828 01c1 7B       		.byte	0x7b
 829 01c2 5E010000 		.4byte	0x15e
 830 01c6 04       		.uleb128 0x4
 831 01c7 01       		.byte	0x1
 832 01c8 08       		.byte	0x8
 833 01c9 13020000 		.4byte	.LASF28
 834 01cd 0F       		.uleb128 0xf
 835 01ce F5010000 		.4byte	.LASF29
 836 01d2 01       		.byte	0x1
 837 01d3 8D       		.byte	0x8d
 838 01d4 00000000 		.4byte	.LFB13
 839 01d8 40000000 		.4byte	.LFE13-.LFB13
 840 01dc 01       		.uleb128 0x1
 841 01dd 9C       		.byte	0x9c
 842 01de 2D020000 		.4byte	0x22d
 843 01e2 10       		.uleb128 0x10
 844 01e3 6F757400 		.ascii	"out\000"
 845 01e7 01       		.byte	0x1
 846 01e8 8D       		.byte	0x8d
 847 01e9 C6000000 		.4byte	0xc6
 848 01ed 02       		.uleb128 0x2
 849 01ee 91       		.byte	0x91
 850 01ef 74       		.sleb128 -12
 851 01f0 10       		.uleb128 0x10
 852 01f1 7800     		.ascii	"x\000"
 853 01f3 01       		.byte	0x1
 854 01f4 8D       		.byte	0x8d
 855 01f5 BB000000 		.4byte	0xbb
 856 01f9 02       		.uleb128 0x2
 857 01fa 91       		.byte	0x91
 858 01fb 70       		.sleb128 -16
 859 01fc 10       		.uleb128 0x10
 860 01fd 7900     		.ascii	"y\000"
 861 01ff 01       		.byte	0x1
 862 0200 8D       		.byte	0x8d
 863 0201 BB000000 		.4byte	0xbb
 864 0205 02       		.uleb128 0x2
 865 0206 91       		.byte	0x91
 866 0207 6C       		.sleb128 -20
 867 0208 10       		.uleb128 0x10
 868 0209 6C656E00 		.ascii	"len\000"
 869 020d 01       		.byte	0x1
 870 020e 8D       		.byte	0x8d
 871 020f 2C000000 		.4byte	0x2c
 872 0213 02       		.uleb128 0x2
 873 0214 91       		.byte	0x91
 874 0215 68       		.sleb128 -24
 875 0216 11       		.uleb128 0x11
 876 0217 0A000000 		.4byte	.LBB2
 877 021b 30000000 		.4byte	.LBE2-.LBB2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 23


 878 021f 12       		.uleb128 0x12
 879 0220 6900     		.ascii	"i\000"
 880 0222 01       		.byte	0x1
 881 0223 8F       		.byte	0x8f
 882 0224 2C000000 		.4byte	0x2c
 883 0228 02       		.uleb128 0x2
 884 0229 91       		.byte	0x91
 885 022a 7C       		.sleb128 -4
 886 022b 00       		.byte	0
 887 022c 00       		.byte	0
 888 022d 13       		.uleb128 0x13
 889 022e 15030000 		.4byte	.LASF30
 890 0232 01       		.byte	0x1
 891 0233 0401     		.2byte	0x104
 892 0235 00000000 		.4byte	.LFB22
 893 0239 38000000 		.4byte	.LFE22-.LFB22
 894 023d 01       		.uleb128 0x1
 895 023e 9C       		.byte	0x9c
 896 023f 60020000 		.4byte	0x260
 897 0243 14       		.uleb128 0x14
 898 0244 7600     		.ascii	"v\000"
 899 0246 01       		.byte	0x1
 900 0247 0401     		.2byte	0x104
 901 0249 C6000000 		.4byte	0xc6
 902 024d 02       		.uleb128 0x2
 903 024e 91       		.byte	0x91
 904 024f 7C       		.sleb128 -4
 905 0250 14       		.uleb128 0x14
 906 0251 6C656E00 		.ascii	"len\000"
 907 0255 01       		.byte	0x1
 908 0256 0401     		.2byte	0x104
 909 0258 2C000000 		.4byte	0x2c
 910 025c 02       		.uleb128 0x2
 911 025d 91       		.byte	0x91
 912 025e 78       		.sleb128 -8
 913 025f 00       		.byte	0
 914 0260 15       		.uleb128 0x15
 915 0261 00000000 		.4byte	.LASF31
 916 0265 02       		.byte	0x2
 917 0266 18       		.byte	0x18
 918 0267 00000000 		.4byte	.LFB25
 919 026b 30000000 		.4byte	.LFE25-.LFB25
 920 026f 01       		.uleb128 0x1
 921 0270 9C       		.byte	0x9c
 922 0271 AD020000 		.4byte	0x2ad
 923 0275 10       		.uleb128 0x10
 924 0276 63747800 		.ascii	"ctx\000"
 925 027a 02       		.byte	0x2
 926 027b 18       		.byte	0x18
 927 027c AD020000 		.4byte	0x2ad
 928 0280 02       		.uleb128 0x2
 929 0281 91       		.byte	0x91
 930 0282 74       		.sleb128 -12
 931 0283 10       		.uleb128 0x10
 932 0284 70727000 		.ascii	"prp\000"
 933 0288 02       		.byte	0x2
 934 0289 18       		.byte	0x18
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 24


 935 028a 31010000 		.4byte	0x131
 936 028e 02       		.uleb128 0x2
 937 028f 91       		.byte	0x91
 938 0290 70       		.sleb128 -16
 939 0291 16       		.uleb128 0x16
 940 0292 BC010000 		.4byte	.LASF18
 941 0296 02       		.byte	0x2
 942 0297 18       		.byte	0x18
 943 0298 B9000000 		.4byte	0xb9
 944 029c 02       		.uleb128 0x2
 945 029d 91       		.byte	0x91
 946 029e 6C       		.sleb128 -20
 947 029f 10       		.uleb128 0x10
 948 02a0 697600   		.ascii	"iv\000"
 949 02a3 02       		.byte	0x2
 950 02a4 18       		.byte	0x18
 951 02a5 BB000000 		.4byte	0xbb
 952 02a9 02       		.uleb128 0x2
 953 02aa 91       		.byte	0x91
 954 02ab 68       		.sleb128 -24
 955 02ac 00       		.byte	0
 956 02ad 05       		.uleb128 0x5
 957 02ae 04       		.byte	0x4
 958 02af 53010000 		.4byte	0x153
 959 02b3 15       		.uleb128 0x15
 960 02b4 A0010000 		.4byte	.LASF32
 961 02b8 02       		.byte	0x2
 962 02b9 1F       		.byte	0x1f
 963 02ba 00000000 		.4byte	.LFB26
 964 02be 6C000000 		.4byte	.LFE26-.LFB26
 965 02c2 01       		.uleb128 0x1
 966 02c3 9C       		.byte	0x9c
 967 02c4 1D030000 		.4byte	0x31d
 968 02c8 10       		.uleb128 0x10
 969 02c9 63747800 		.ascii	"ctx\000"
 970 02cd 02       		.byte	0x2
 971 02ce 1F       		.byte	0x1f
 972 02cf AD020000 		.4byte	0x2ad
 973 02d3 02       		.uleb128 0x2
 974 02d4 91       		.byte	0x91
 975 02d5 5C       		.sleb128 -36
 976 02d6 16       		.uleb128 0x16
 977 02d7 11010000 		.4byte	.LASF33
 978 02db 02       		.byte	0x2
 979 02dc 1F       		.byte	0x1f
 980 02dd BB000000 		.4byte	0xbb
 981 02e1 02       		.uleb128 0x2
 982 02e2 91       		.byte	0x91
 983 02e3 58       		.sleb128 -40
 984 02e4 16       		.uleb128 0x16
 985 02e5 C4020000 		.4byte	.LASF34
 986 02e9 02       		.byte	0x2
 987 02ea 1F       		.byte	0x1f
 988 02eb C6000000 		.4byte	0xc6
 989 02ef 02       		.uleb128 0x2
 990 02f0 91       		.byte	0x91
 991 02f1 54       		.sleb128 -44
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 25


 992 02f2 16       		.uleb128 0x16
 993 02f3 EE010000 		.4byte	.LASF35
 994 02f7 02       		.byte	0x2
 995 02f8 1F       		.byte	0x1f
 996 02f9 2C000000 		.4byte	0x2c
 997 02fd 02       		.uleb128 0x2
 998 02fe 91       		.byte	0x91
 999 02ff 50       		.sleb128 -48
 1000 0300 12       		.uleb128 0x12
 1001 0301 62756600 		.ascii	"buf\000"
 1002 0305 02       		.byte	0x2
 1003 0306 21       		.byte	0x21
 1004 0307 3C010000 		.4byte	0x13c
 1005 030b 02       		.uleb128 0x2
 1006 030c 91       		.byte	0x91
 1007 030d 64       		.sleb128 -28
 1008 030e 17       		.uleb128 0x17
 1009 030f DA010000 		.4byte	.LASF36
 1010 0313 02       		.byte	0x2
 1011 0314 22       		.byte	0x22
 1012 0315 2C000000 		.4byte	0x2c
 1013 0319 02       		.uleb128 0x2
 1014 031a 91       		.byte	0x91
 1015 031b 74       		.sleb128 -12
 1016 031c 00       		.byte	0
 1017 031d 15       		.uleb128 0x15
 1018 031e DF010000 		.4byte	.LASF37
 1019 0322 02       		.byte	0x2
 1020 0323 2E       		.byte	0x2e
 1021 0324 00000000 		.4byte	.LFB27
 1022 0328 66000000 		.4byte	.LFE27-.LFB27
 1023 032c 01       		.uleb128 0x1
 1024 032d 9C       		.byte	0x9c
 1025 032e 87030000 		.4byte	0x387
 1026 0332 10       		.uleb128 0x10
 1027 0333 63747800 		.ascii	"ctx\000"
 1028 0337 02       		.byte	0x2
 1029 0338 2E       		.byte	0x2e
 1030 0339 AD020000 		.4byte	0x2ad
 1031 033d 02       		.uleb128 0x2
 1032 033e 91       		.byte	0x91
 1033 033f 5C       		.sleb128 -36
 1034 0340 16       		.uleb128 0x16
 1035 0341 11010000 		.4byte	.LASF33
 1036 0345 02       		.byte	0x2
 1037 0346 2E       		.byte	0x2e
 1038 0347 BB000000 		.4byte	0xbb
 1039 034b 02       		.uleb128 0x2
 1040 034c 91       		.byte	0x91
 1041 034d 58       		.sleb128 -40
 1042 034e 16       		.uleb128 0x16
 1043 034f C4020000 		.4byte	.LASF34
 1044 0353 02       		.byte	0x2
 1045 0354 2E       		.byte	0x2e
 1046 0355 C6000000 		.4byte	0xc6
 1047 0359 02       		.uleb128 0x2
 1048 035a 91       		.byte	0x91
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 26


 1049 035b 54       		.sleb128 -44
 1050 035c 16       		.uleb128 0x16
 1051 035d EE010000 		.4byte	.LASF35
 1052 0361 02       		.byte	0x2
 1053 0362 2E       		.byte	0x2e
 1054 0363 2C000000 		.4byte	0x2c
 1055 0367 02       		.uleb128 0x2
 1056 0368 91       		.byte	0x91
 1057 0369 50       		.sleb128 -48
 1058 036a 12       		.uleb128 0x12
 1059 036b 62756600 		.ascii	"buf\000"
 1060 036f 02       		.byte	0x2
 1061 0370 30       		.byte	0x30
 1062 0371 3C010000 		.4byte	0x13c
 1063 0375 02       		.uleb128 0x2
 1064 0376 91       		.byte	0x91
 1065 0377 64       		.sleb128 -28
 1066 0378 17       		.uleb128 0x17
 1067 0379 DA010000 		.4byte	.LASF36
 1068 037d 02       		.byte	0x2
 1069 037e 31       		.byte	0x31
 1070 037f 2C000000 		.4byte	0x2c
 1071 0383 02       		.uleb128 0x2
 1072 0384 91       		.byte	0x91
 1073 0385 74       		.sleb128 -12
 1074 0386 00       		.byte	0
 1075 0387 15       		.uleb128 0x15
 1076 0388 B8020000 		.4byte	.LASF38
 1077 038c 02       		.byte	0x2
 1078 038d 3E       		.byte	0x3e
 1079 038e 00000000 		.4byte	.LFB28
 1080 0392 50000000 		.4byte	.LFE28-.LFB28
 1081 0396 01       		.uleb128 0x1
 1082 0397 9C       		.byte	0x9c
 1083 0398 D5030000 		.4byte	0x3d5
 1084 039c 10       		.uleb128 0x10
 1085 039d 63747800 		.ascii	"ctx\000"
 1086 03a1 02       		.byte	0x2
 1087 03a2 3E       		.byte	0x3e
 1088 03a3 D5030000 		.4byte	0x3d5
 1089 03a7 02       		.uleb128 0x2
 1090 03a8 91       		.byte	0x91
 1091 03a9 74       		.sleb128 -12
 1092 03aa 10       		.uleb128 0x10
 1093 03ab 70727000 		.ascii	"prp\000"
 1094 03af 02       		.byte	0x2
 1095 03b0 3E       		.byte	0x3e
 1096 03b1 31010000 		.4byte	0x131
 1097 03b5 02       		.uleb128 0x2
 1098 03b6 91       		.byte	0x91
 1099 03b7 70       		.sleb128 -16
 1100 03b8 16       		.uleb128 0x16
 1101 03b9 BC010000 		.4byte	.LASF18
 1102 03bd 02       		.byte	0x2
 1103 03be 3E       		.byte	0x3e
 1104 03bf B9000000 		.4byte	0xb9
 1105 03c3 02       		.uleb128 0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 27


 1106 03c4 91       		.byte	0x91
 1107 03c5 6C       		.sleb128 -20
 1108 03c6 16       		.uleb128 0x16
 1109 03c7 5F010000 		.4byte	.LASF22
 1110 03cb 02       		.byte	0x2
 1111 03cc 3E       		.byte	0x3e
 1112 03cd BB000000 		.4byte	0xbb
 1113 03d1 02       		.uleb128 0x2
 1114 03d2 91       		.byte	0x91
 1115 03d3 68       		.sleb128 -24
 1116 03d4 00       		.byte	0
 1117 03d5 05       		.uleb128 0x5
 1118 03d6 04       		.byte	0x4
 1119 03d7 BB010000 		.4byte	0x1bb
 1120 03db 15       		.uleb128 0x15
 1121 03dc EB020000 		.4byte	.LASF39
 1122 03e0 02       		.byte	0x2
 1123 03e1 49       		.byte	0x49
 1124 03e2 00000000 		.4byte	.LFB29
 1125 03e6 30000000 		.4byte	.LFE29-.LFB29
 1126 03ea 01       		.uleb128 0x1
 1127 03eb 9C       		.byte	0x9c
 1128 03ec 1B040000 		.4byte	0x41b
 1129 03f0 10       		.uleb128 0x10
 1130 03f1 63747800 		.ascii	"ctx\000"
 1131 03f5 02       		.byte	0x2
 1132 03f6 49       		.byte	0x49
 1133 03f7 D5030000 		.4byte	0x3d5
 1134 03fb 02       		.uleb128 0x2
 1135 03fc 91       		.byte	0x91
 1136 03fd 74       		.sleb128 -12
 1137 03fe 16       		.uleb128 0x16
 1138 03ff 1E020000 		.4byte	.LASF40
 1139 0403 02       		.byte	0x2
 1140 0404 49       		.byte	0x49
 1141 0405 2C000000 		.4byte	0x2c
 1142 0409 02       		.uleb128 0x2
 1143 040a 91       		.byte	0x91
 1144 040b 70       		.sleb128 -16
 1145 040c 16       		.uleb128 0x16
 1146 040d 18020000 		.4byte	.LASF41
 1147 0411 02       		.byte	0x2
 1148 0412 49       		.byte	0x49
 1149 0413 2C000000 		.4byte	0x2c
 1150 0417 02       		.uleb128 0x2
 1151 0418 91       		.byte	0x91
 1152 0419 6C       		.sleb128 -20
 1153 041a 00       		.byte	0
 1154 041b 18       		.uleb128 0x18
 1155 041c 25020000 		.4byte	.LASF42
 1156 0420 02       		.byte	0x2
 1157 0421 50       		.byte	0x50
 1158 0422 00000000 		.4byte	.LFB30
 1159 0426 3E000000 		.4byte	.LFE30-.LFB30
 1160 042a 01       		.uleb128 0x1
 1161 042b 9C       		.byte	0x9c
 1162 042c 5B040000 		.4byte	0x45b
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 28


 1163 0430 16       		.uleb128 0x16
 1164 0431 CB020000 		.4byte	.LASF43
 1165 0435 02       		.byte	0x2
 1166 0436 50       		.byte	0x50
 1167 0437 B9000000 		.4byte	0xb9
 1168 043b 02       		.uleb128 0x2
 1169 043c 91       		.byte	0x91
 1170 043d 6C       		.sleb128 -20
 1171 043e 10       		.uleb128 0x10
 1172 043f 6F757400 		.ascii	"out\000"
 1173 0443 02       		.byte	0x2
 1174 0444 50       		.byte	0x50
 1175 0445 C6000000 		.4byte	0xc6
 1176 0449 02       		.uleb128 0x2
 1177 044a 91       		.byte	0x91
 1178 044b 68       		.sleb128 -24
 1179 044c 12       		.uleb128 0x12
 1180 044d 63747800 		.ascii	"ctx\000"
 1181 0451 02       		.byte	0x2
 1182 0452 52       		.byte	0x52
 1183 0453 D5030000 		.4byte	0x3d5
 1184 0457 02       		.uleb128 0x2
 1185 0458 91       		.byte	0x91
 1186 0459 74       		.sleb128 -12
 1187 045a 00       		.byte	0
 1188 045b 15       		.uleb128 0x15
 1189 045c 7D010000 		.4byte	.LASF44
 1190 0460 02       		.byte	0x2
 1191 0461 57       		.byte	0x57
 1192 0462 00000000 		.4byte	.LFB31
 1193 0466 40000000 		.4byte	.LFE31-.LFB31
 1194 046a 01       		.uleb128 0x1
 1195 046b 9C       		.byte	0x9c
 1196 046c A9040000 		.4byte	0x4a9
 1197 0470 10       		.uleb128 0x10
 1198 0471 63747800 		.ascii	"ctx\000"
 1199 0475 02       		.byte	0x2
 1200 0476 57       		.byte	0x57
 1201 0477 D5030000 		.4byte	0x3d5
 1202 047b 02       		.uleb128 0x2
 1203 047c 91       		.byte	0x91
 1204 047d 74       		.sleb128 -12
 1205 047e 16       		.uleb128 0x16
 1206 047f 11010000 		.4byte	.LASF33
 1207 0483 02       		.byte	0x2
 1208 0484 57       		.byte	0x57
 1209 0485 BB000000 		.4byte	0xbb
 1210 0489 02       		.uleb128 0x2
 1211 048a 91       		.byte	0x91
 1212 048b 70       		.sleb128 -16
 1213 048c 16       		.uleb128 0x16
 1214 048d C4020000 		.4byte	.LASF34
 1215 0491 02       		.byte	0x2
 1216 0492 57       		.byte	0x57
 1217 0493 C6000000 		.4byte	0xc6
 1218 0497 02       		.uleb128 0x2
 1219 0498 91       		.byte	0x91
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 29


 1220 0499 6C       		.sleb128 -20
 1221 049a 16       		.uleb128 0x16
 1222 049b D9020000 		.4byte	.LASF45
 1223 049f 02       		.byte	0x2
 1224 04a0 57       		.byte	0x57
 1225 04a1 2C000000 		.4byte	0x2c
 1226 04a5 02       		.uleb128 0x2
 1227 04a6 91       		.byte	0x91
 1228 04a7 68       		.sleb128 -24
 1229 04a8 00       		.byte	0
 1230 04a9 19       		.uleb128 0x19
 1231 04aa 1E010000 		.4byte	.LASF49
 1232 04ae 02       		.byte	0x2
 1233 04af 60       		.byte	0x60
 1234 04b0 00000000 		.4byte	.LFB32
 1235 04b4 10000000 		.4byte	.LFE32-.LFB32
 1236 04b8 01       		.uleb128 0x1
 1237 04b9 9C       		.byte	0x9c
 1238 04ba 10       		.uleb128 0x10
 1239 04bb 63747800 		.ascii	"ctx\000"
 1240 04bf 02       		.byte	0x2
 1241 04c0 60       		.byte	0x60
 1242 04c1 D5030000 		.4byte	0x3d5
 1243 04c5 02       		.uleb128 0x2
 1244 04c6 91       		.byte	0x91
 1245 04c7 7C       		.sleb128 -4
 1246 04c8 00       		.byte	0
 1247 04c9 00       		.byte	0
 1248              		.section	.debug_abbrev,"",%progbits
 1249              	.Ldebug_abbrev0:
 1250 0000 01       		.uleb128 0x1
 1251 0001 11       		.uleb128 0x11
 1252 0002 01       		.byte	0x1
 1253 0003 25       		.uleb128 0x25
 1254 0004 0E       		.uleb128 0xe
 1255 0005 13       		.uleb128 0x13
 1256 0006 0B       		.uleb128 0xb
 1257 0007 03       		.uleb128 0x3
 1258 0008 0E       		.uleb128 0xe
 1259 0009 1B       		.uleb128 0x1b
 1260 000a 0E       		.uleb128 0xe
 1261 000b 55       		.uleb128 0x55
 1262 000c 17       		.uleb128 0x17
 1263 000d 11       		.uleb128 0x11
 1264 000e 01       		.uleb128 0x1
 1265 000f 10       		.uleb128 0x10
 1266 0010 17       		.uleb128 0x17
 1267 0011 00       		.byte	0
 1268 0012 00       		.byte	0
 1269 0013 02       		.uleb128 0x2
 1270 0014 24       		.uleb128 0x24
 1271 0015 00       		.byte	0
 1272 0016 0B       		.uleb128 0xb
 1273 0017 0B       		.uleb128 0xb
 1274 0018 3E       		.uleb128 0x3e
 1275 0019 0B       		.uleb128 0xb
 1276 001a 03       		.uleb128 0x3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 30


 1277 001b 08       		.uleb128 0x8
 1278 001c 00       		.byte	0
 1279 001d 00       		.byte	0
 1280 001e 03       		.uleb128 0x3
 1281 001f 16       		.uleb128 0x16
 1282 0020 00       		.byte	0
 1283 0021 03       		.uleb128 0x3
 1284 0022 0E       		.uleb128 0xe
 1285 0023 3A       		.uleb128 0x3a
 1286 0024 0B       		.uleb128 0xb
 1287 0025 3B       		.uleb128 0x3b
 1288 0026 0B       		.uleb128 0xb
 1289 0027 49       		.uleb128 0x49
 1290 0028 13       		.uleb128 0x13
 1291 0029 00       		.byte	0
 1292 002a 00       		.byte	0
 1293 002b 04       		.uleb128 0x4
 1294 002c 24       		.uleb128 0x24
 1295 002d 00       		.byte	0
 1296 002e 0B       		.uleb128 0xb
 1297 002f 0B       		.uleb128 0xb
 1298 0030 3E       		.uleb128 0x3e
 1299 0031 0B       		.uleb128 0xb
 1300 0032 03       		.uleb128 0x3
 1301 0033 0E       		.uleb128 0xe
 1302 0034 00       		.byte	0
 1303 0035 00       		.byte	0
 1304 0036 05       		.uleb128 0x5
 1305 0037 0F       		.uleb128 0xf
 1306 0038 00       		.byte	0
 1307 0039 0B       		.uleb128 0xb
 1308 003a 0B       		.uleb128 0xb
 1309 003b 49       		.uleb128 0x49
 1310 003c 13       		.uleb128 0x13
 1311 003d 00       		.byte	0
 1312 003e 00       		.byte	0
 1313 003f 06       		.uleb128 0x6
 1314 0040 15       		.uleb128 0x15
 1315 0041 01       		.byte	0x1
 1316 0042 27       		.uleb128 0x27
 1317 0043 19       		.uleb128 0x19
 1318 0044 01       		.uleb128 0x1
 1319 0045 13       		.uleb128 0x13
 1320 0046 00       		.byte	0
 1321 0047 00       		.byte	0
 1322 0048 07       		.uleb128 0x7
 1323 0049 05       		.uleb128 0x5
 1324 004a 00       		.byte	0
 1325 004b 49       		.uleb128 0x49
 1326 004c 13       		.uleb128 0x13
 1327 004d 00       		.byte	0
 1328 004e 00       		.byte	0
 1329 004f 08       		.uleb128 0x8
 1330 0050 0F       		.uleb128 0xf
 1331 0051 00       		.byte	0
 1332 0052 0B       		.uleb128 0xb
 1333 0053 0B       		.uleb128 0xb
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 31


 1334 0054 00       		.byte	0
 1335 0055 00       		.byte	0
 1336 0056 09       		.uleb128 0x9
 1337 0057 26       		.uleb128 0x26
 1338 0058 00       		.byte	0
 1339 0059 49       		.uleb128 0x49
 1340 005a 13       		.uleb128 0x13
 1341 005b 00       		.byte	0
 1342 005c 00       		.byte	0
 1343 005d 0A       		.uleb128 0xa
 1344 005e 13       		.uleb128 0x13
 1345 005f 01       		.byte	0x1
 1346 0060 0B       		.uleb128 0xb
 1347 0061 0B       		.uleb128 0xb
 1348 0062 3A       		.uleb128 0x3a
 1349 0063 0B       		.uleb128 0xb
 1350 0064 3B       		.uleb128 0x3b
 1351 0065 0B       		.uleb128 0xb
 1352 0066 01       		.uleb128 0x1
 1353 0067 13       		.uleb128 0x13
 1354 0068 00       		.byte	0
 1355 0069 00       		.byte	0
 1356 006a 0B       		.uleb128 0xb
 1357 006b 0D       		.uleb128 0xd
 1358 006c 00       		.byte	0
 1359 006d 03       		.uleb128 0x3
 1360 006e 0E       		.uleb128 0xe
 1361 006f 3A       		.uleb128 0x3a
 1362 0070 0B       		.uleb128 0xb
 1363 0071 3B       		.uleb128 0x3b
 1364 0072 0B       		.uleb128 0xb
 1365 0073 49       		.uleb128 0x49
 1366 0074 13       		.uleb128 0x13
 1367 0075 38       		.uleb128 0x38
 1368 0076 0B       		.uleb128 0xb
 1369 0077 00       		.byte	0
 1370 0078 00       		.byte	0
 1371 0079 0C       		.uleb128 0xc
 1372 007a 0D       		.uleb128 0xd
 1373 007b 00       		.byte	0
 1374 007c 03       		.uleb128 0x3
 1375 007d 08       		.uleb128 0x8
 1376 007e 3A       		.uleb128 0x3a
 1377 007f 0B       		.uleb128 0xb
 1378 0080 3B       		.uleb128 0x3b
 1379 0081 0B       		.uleb128 0xb
 1380 0082 49       		.uleb128 0x49
 1381 0083 13       		.uleb128 0x13
 1382 0084 38       		.uleb128 0x38
 1383 0085 0B       		.uleb128 0xb
 1384 0086 00       		.byte	0
 1385 0087 00       		.byte	0
 1386 0088 0D       		.uleb128 0xd
 1387 0089 01       		.uleb128 0x1
 1388 008a 01       		.byte	0x1
 1389 008b 49       		.uleb128 0x49
 1390 008c 13       		.uleb128 0x13
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 32


 1391 008d 01       		.uleb128 0x1
 1392 008e 13       		.uleb128 0x13
 1393 008f 00       		.byte	0
 1394 0090 00       		.byte	0
 1395 0091 0E       		.uleb128 0xe
 1396 0092 21       		.uleb128 0x21
 1397 0093 00       		.byte	0
 1398 0094 49       		.uleb128 0x49
 1399 0095 13       		.uleb128 0x13
 1400 0096 2F       		.uleb128 0x2f
 1401 0097 0B       		.uleb128 0xb
 1402 0098 00       		.byte	0
 1403 0099 00       		.byte	0
 1404 009a 0F       		.uleb128 0xf
 1405 009b 2E       		.uleb128 0x2e
 1406 009c 01       		.byte	0x1
 1407 009d 03       		.uleb128 0x3
 1408 009e 0E       		.uleb128 0xe
 1409 009f 3A       		.uleb128 0x3a
 1410 00a0 0B       		.uleb128 0xb
 1411 00a1 3B       		.uleb128 0x3b
 1412 00a2 0B       		.uleb128 0xb
 1413 00a3 27       		.uleb128 0x27
 1414 00a4 19       		.uleb128 0x19
 1415 00a5 11       		.uleb128 0x11
 1416 00a6 01       		.uleb128 0x1
 1417 00a7 12       		.uleb128 0x12
 1418 00a8 06       		.uleb128 0x6
 1419 00a9 40       		.uleb128 0x40
 1420 00aa 18       		.uleb128 0x18
 1421 00ab 9742     		.uleb128 0x2117
 1422 00ad 19       		.uleb128 0x19
 1423 00ae 01       		.uleb128 0x1
 1424 00af 13       		.uleb128 0x13
 1425 00b0 00       		.byte	0
 1426 00b1 00       		.byte	0
 1427 00b2 10       		.uleb128 0x10
 1428 00b3 05       		.uleb128 0x5
 1429 00b4 00       		.byte	0
 1430 00b5 03       		.uleb128 0x3
 1431 00b6 08       		.uleb128 0x8
 1432 00b7 3A       		.uleb128 0x3a
 1433 00b8 0B       		.uleb128 0xb
 1434 00b9 3B       		.uleb128 0x3b
 1435 00ba 0B       		.uleb128 0xb
 1436 00bb 49       		.uleb128 0x49
 1437 00bc 13       		.uleb128 0x13
 1438 00bd 02       		.uleb128 0x2
 1439 00be 18       		.uleb128 0x18
 1440 00bf 00       		.byte	0
 1441 00c0 00       		.byte	0
 1442 00c1 11       		.uleb128 0x11
 1443 00c2 0B       		.uleb128 0xb
 1444 00c3 01       		.byte	0x1
 1445 00c4 11       		.uleb128 0x11
 1446 00c5 01       		.uleb128 0x1
 1447 00c6 12       		.uleb128 0x12
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 33


 1448 00c7 06       		.uleb128 0x6
 1449 00c8 00       		.byte	0
 1450 00c9 00       		.byte	0
 1451 00ca 12       		.uleb128 0x12
 1452 00cb 34       		.uleb128 0x34
 1453 00cc 00       		.byte	0
 1454 00cd 03       		.uleb128 0x3
 1455 00ce 08       		.uleb128 0x8
 1456 00cf 3A       		.uleb128 0x3a
 1457 00d0 0B       		.uleb128 0xb
 1458 00d1 3B       		.uleb128 0x3b
 1459 00d2 0B       		.uleb128 0xb
 1460 00d3 49       		.uleb128 0x49
 1461 00d4 13       		.uleb128 0x13
 1462 00d5 02       		.uleb128 0x2
 1463 00d6 18       		.uleb128 0x18
 1464 00d7 00       		.byte	0
 1465 00d8 00       		.byte	0
 1466 00d9 13       		.uleb128 0x13
 1467 00da 2E       		.uleb128 0x2e
 1468 00db 01       		.byte	0x1
 1469 00dc 03       		.uleb128 0x3
 1470 00dd 0E       		.uleb128 0xe
 1471 00de 3A       		.uleb128 0x3a
 1472 00df 0B       		.uleb128 0xb
 1473 00e0 3B       		.uleb128 0x3b
 1474 00e1 05       		.uleb128 0x5
 1475 00e2 27       		.uleb128 0x27
 1476 00e3 19       		.uleb128 0x19
 1477 00e4 11       		.uleb128 0x11
 1478 00e5 01       		.uleb128 0x1
 1479 00e6 12       		.uleb128 0x12
 1480 00e7 06       		.uleb128 0x6
 1481 00e8 40       		.uleb128 0x40
 1482 00e9 18       		.uleb128 0x18
 1483 00ea 9742     		.uleb128 0x2117
 1484 00ec 19       		.uleb128 0x19
 1485 00ed 01       		.uleb128 0x1
 1486 00ee 13       		.uleb128 0x13
 1487 00ef 00       		.byte	0
 1488 00f0 00       		.byte	0
 1489 00f1 14       		.uleb128 0x14
 1490 00f2 05       		.uleb128 0x5
 1491 00f3 00       		.byte	0
 1492 00f4 03       		.uleb128 0x3
 1493 00f5 08       		.uleb128 0x8
 1494 00f6 3A       		.uleb128 0x3a
 1495 00f7 0B       		.uleb128 0xb
 1496 00f8 3B       		.uleb128 0x3b
 1497 00f9 05       		.uleb128 0x5
 1498 00fa 49       		.uleb128 0x49
 1499 00fb 13       		.uleb128 0x13
 1500 00fc 02       		.uleb128 0x2
 1501 00fd 18       		.uleb128 0x18
 1502 00fe 00       		.byte	0
 1503 00ff 00       		.byte	0
 1504 0100 15       		.uleb128 0x15
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 34


 1505 0101 2E       		.uleb128 0x2e
 1506 0102 01       		.byte	0x1
 1507 0103 3F       		.uleb128 0x3f
 1508 0104 19       		.uleb128 0x19
 1509 0105 03       		.uleb128 0x3
 1510 0106 0E       		.uleb128 0xe
 1511 0107 3A       		.uleb128 0x3a
 1512 0108 0B       		.uleb128 0xb
 1513 0109 3B       		.uleb128 0x3b
 1514 010a 0B       		.uleb128 0xb
 1515 010b 27       		.uleb128 0x27
 1516 010c 19       		.uleb128 0x19
 1517 010d 11       		.uleb128 0x11
 1518 010e 01       		.uleb128 0x1
 1519 010f 12       		.uleb128 0x12
 1520 0110 06       		.uleb128 0x6
 1521 0111 40       		.uleb128 0x40
 1522 0112 18       		.uleb128 0x18
 1523 0113 9642     		.uleb128 0x2116
 1524 0115 19       		.uleb128 0x19
 1525 0116 01       		.uleb128 0x1
 1526 0117 13       		.uleb128 0x13
 1527 0118 00       		.byte	0
 1528 0119 00       		.byte	0
 1529 011a 16       		.uleb128 0x16
 1530 011b 05       		.uleb128 0x5
 1531 011c 00       		.byte	0
 1532 011d 03       		.uleb128 0x3
 1533 011e 0E       		.uleb128 0xe
 1534 011f 3A       		.uleb128 0x3a
 1535 0120 0B       		.uleb128 0xb
 1536 0121 3B       		.uleb128 0x3b
 1537 0122 0B       		.uleb128 0xb
 1538 0123 49       		.uleb128 0x49
 1539 0124 13       		.uleb128 0x13
 1540 0125 02       		.uleb128 0x2
 1541 0126 18       		.uleb128 0x18
 1542 0127 00       		.byte	0
 1543 0128 00       		.byte	0
 1544 0129 17       		.uleb128 0x17
 1545 012a 34       		.uleb128 0x34
 1546 012b 00       		.byte	0
 1547 012c 03       		.uleb128 0x3
 1548 012d 0E       		.uleb128 0xe
 1549 012e 3A       		.uleb128 0x3a
 1550 012f 0B       		.uleb128 0xb
 1551 0130 3B       		.uleb128 0x3b
 1552 0131 0B       		.uleb128 0xb
 1553 0132 49       		.uleb128 0x49
 1554 0133 13       		.uleb128 0x13
 1555 0134 02       		.uleb128 0x2
 1556 0135 18       		.uleb128 0x18
 1557 0136 00       		.byte	0
 1558 0137 00       		.byte	0
 1559 0138 18       		.uleb128 0x18
 1560 0139 2E       		.uleb128 0x2e
 1561 013a 01       		.byte	0x1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 35


 1562 013b 03       		.uleb128 0x3
 1563 013c 0E       		.uleb128 0xe
 1564 013d 3A       		.uleb128 0x3a
 1565 013e 0B       		.uleb128 0xb
 1566 013f 3B       		.uleb128 0x3b
 1567 0140 0B       		.uleb128 0xb
 1568 0141 27       		.uleb128 0x27
 1569 0142 19       		.uleb128 0x19
 1570 0143 11       		.uleb128 0x11
 1571 0144 01       		.uleb128 0x1
 1572 0145 12       		.uleb128 0x12
 1573 0146 06       		.uleb128 0x6
 1574 0147 40       		.uleb128 0x40
 1575 0148 18       		.uleb128 0x18
 1576 0149 9642     		.uleb128 0x2116
 1577 014b 19       		.uleb128 0x19
 1578 014c 01       		.uleb128 0x1
 1579 014d 13       		.uleb128 0x13
 1580 014e 00       		.byte	0
 1581 014f 00       		.byte	0
 1582 0150 19       		.uleb128 0x19
 1583 0151 2E       		.uleb128 0x2e
 1584 0152 01       		.byte	0x1
 1585 0153 3F       		.uleb128 0x3f
 1586 0154 19       		.uleb128 0x19
 1587 0155 03       		.uleb128 0x3
 1588 0156 0E       		.uleb128 0xe
 1589 0157 3A       		.uleb128 0x3a
 1590 0158 0B       		.uleb128 0xb
 1591 0159 3B       		.uleb128 0x3b
 1592 015a 0B       		.uleb128 0xb
 1593 015b 27       		.uleb128 0x27
 1594 015c 19       		.uleb128 0x19
 1595 015d 11       		.uleb128 0x11
 1596 015e 01       		.uleb128 0x1
 1597 015f 12       		.uleb128 0x12
 1598 0160 06       		.uleb128 0x6
 1599 0161 40       		.uleb128 0x40
 1600 0162 18       		.uleb128 0x18
 1601 0163 9742     		.uleb128 0x2117
 1602 0165 19       		.uleb128 0x19
 1603 0166 00       		.byte	0
 1604 0167 00       		.byte	0
 1605 0168 00       		.byte	0
 1606              		.section	.debug_aranges,"",%progbits
 1607 0000 64000000 		.4byte	0x64
 1608 0004 0200     		.2byte	0x2
 1609 0006 00000000 		.4byte	.Ldebug_info0
 1610 000a 04       		.byte	0x4
 1611 000b 00       		.byte	0
 1612 000c 0000     		.2byte	0
 1613 000e 0000     		.2byte	0
 1614 0010 00000000 		.4byte	.LFB13
 1615 0014 40000000 		.4byte	.LFE13-.LFB13
 1616 0018 00000000 		.4byte	.LFB22
 1617 001c 38000000 		.4byte	.LFE22-.LFB22
 1618 0020 00000000 		.4byte	.LFB25
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 36


 1619 0024 30000000 		.4byte	.LFE25-.LFB25
 1620 0028 00000000 		.4byte	.LFB26
 1621 002c 6C000000 		.4byte	.LFE26-.LFB26
 1622 0030 00000000 		.4byte	.LFB27
 1623 0034 66000000 		.4byte	.LFE27-.LFB27
 1624 0038 00000000 		.4byte	.LFB28
 1625 003c 50000000 		.4byte	.LFE28-.LFB28
 1626 0040 00000000 		.4byte	.LFB29
 1627 0044 30000000 		.4byte	.LFE29-.LFB29
 1628 0048 00000000 		.4byte	.LFB30
 1629 004c 3E000000 		.4byte	.LFE30-.LFB30
 1630 0050 00000000 		.4byte	.LFB31
 1631 0054 40000000 		.4byte	.LFE31-.LFB31
 1632 0058 00000000 		.4byte	.LFB32
 1633 005c 10000000 		.4byte	.LFE32-.LFB32
 1634 0060 00000000 		.4byte	0
 1635 0064 00000000 		.4byte	0
 1636              		.section	.debug_ranges,"",%progbits
 1637              	.Ldebug_ranges0:
 1638 0000 00000000 		.4byte	.LFB13
 1639 0004 40000000 		.4byte	.LFE13
 1640 0008 00000000 		.4byte	.LFB22
 1641 000c 38000000 		.4byte	.LFE22
 1642 0010 00000000 		.4byte	.LFB25
 1643 0014 30000000 		.4byte	.LFE25
 1644 0018 00000000 		.4byte	.LFB26
 1645 001c 6C000000 		.4byte	.LFE26
 1646 0020 00000000 		.4byte	.LFB27
 1647 0024 66000000 		.4byte	.LFE27
 1648 0028 00000000 		.4byte	.LFB28
 1649 002c 50000000 		.4byte	.LFE28
 1650 0030 00000000 		.4byte	.LFB29
 1651 0034 30000000 		.4byte	.LFE29
 1652 0038 00000000 		.4byte	.LFB30
 1653 003c 3E000000 		.4byte	.LFE30
 1654 0040 00000000 		.4byte	.LFB31
 1655 0044 40000000 		.4byte	.LFE31
 1656 0048 00000000 		.4byte	.LFB32
 1657 004c 10000000 		.4byte	.LFE32
 1658 0050 00000000 		.4byte	0
 1659 0054 00000000 		.4byte	0
 1660              		.section	.debug_line,"",%progbits
 1661              	.Ldebug_line0:
 1662 0000 C1020000 		.section	.debug_str,"MS",%progbits,1
 1662      0200BD01 
 1662      00000201 
 1662      FB0E0D00 
 1662      01010101 
 1663              	.LASF31:
 1664 0000 63665F63 		.ascii	"cf_cbc_init\000"
 1664      62635F69 
 1664      6E697400 
 1665              	.LASF5:
 1666 000c 5F5F7569 		.ascii	"__uint8_t\000"
 1666      6E74385F 
 1666      7400
 1667              	.LASF46:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 37


 1668 0016 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1668      43313120 
 1668      352E342E 
 1668      31203230 
 1668      31363036 
 1669 0049 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 1669      20726576 
 1669      6973696F 
 1669      6E203233 
 1669      37373135 
 1670 007c 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects -fomit-fram"
 1670      66756E63 
 1670      74696F6E 
 1670      2D736563 
 1670      74696F6E 
 1671 00af 652D706F 		.ascii	"e-pointer\000"
 1671      696E7465 
 1671      7200
 1672              	.LASF27:
 1673 00b9 63665F63 		.ascii	"cf_ctr\000"
 1673      747200
 1674              	.LASF23:
 1675 00c0 6B65796D 		.ascii	"keymat\000"
 1675      617400
 1676              	.LASF15:
 1677 00c7 656E6372 		.ascii	"encrypt\000"
 1677      79707400 
 1678              	.LASF12:
 1679 00cf 75696E74 		.ascii	"uint8_t\000"
 1679      385F7400 
 1680              	.LASF16:
 1681 00d7 64656372 		.ascii	"decrypt\000"
 1681      79707400 
 1682              	.LASF25:
 1683 00df 636F756E 		.ascii	"counter_offset\000"
 1683      7465725F 
 1683      6F666673 
 1683      657400
 1684              	.LASF14:
 1685 00ee 626C6F63 		.ascii	"blocksz\000"
 1685      6B737A00 
 1686              	.LASF19:
 1687 00f6 626C6F63 		.ascii	"block\000"
 1687      6B00
 1688              	.LASF21:
 1689 00fc 63665F63 		.ascii	"cf_cbc\000"
 1689      626300
 1690              	.LASF6:
 1691 0103 756E7369 		.ascii	"unsigned char\000"
 1691      676E6564 
 1691      20636861 
 1691      7200
 1692              	.LASF33:
 1693 0111 696E7075 		.ascii	"input\000"
 1693      7400
 1694              	.LASF17:
 1695 0117 63665F70 		.ascii	"cf_prp\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 38


 1695      727000
 1696              	.LASF49:
 1697 011e 63665F63 		.ascii	"cf_ctr_discard_block\000"
 1697      74725F64 
 1697      69736361 
 1697      72645F62 
 1697      6C6F636B 
 1698              	.LASF10:
 1699 0133 6C6F6E67 		.ascii	"long unsigned int\000"
 1699      20756E73 
 1699      69676E65 
 1699      6420696E 
 1699      7400
 1700              	.LASF8:
 1701 0145 73686F72 		.ascii	"short unsigned int\000"
 1701      7420756E 
 1701      7369676E 
 1701      65642069 
 1701      6E7400
 1702              	.LASF4:
 1703 0158 73697A65 		.ascii	"size_t\000"
 1703      5F7400
 1704              	.LASF22:
 1705 015f 6E6F6E63 		.ascii	"nonce\000"
 1705      6500
 1706              	.LASF7:
 1707 0165 73686F72 		.ascii	"short int\000"
 1707      7420696E 
 1707      7400
 1708              	.LASF26:
 1709 016f 636F756E 		.ascii	"counter_width\000"
 1709      7465725F 
 1709      77696474 
 1709      6800
 1710              	.LASF44:
 1711 017d 63665F63 		.ascii	"cf_ctr_cipher\000"
 1711      74725F63 
 1711      69706865 
 1711      7200
 1712              	.LASF13:
 1713 018b 63665F70 		.ascii	"cf_prp_block\000"
 1713      72705F62 
 1713      6C6F636B 
 1713      00
 1714              	.LASF47:
 1715 0198 6D6F6465 		.ascii	"modes.c\000"
 1715      732E6300 
 1716              	.LASF32:
 1717 01a0 63665F63 		.ascii	"cf_cbc_encrypt\000"
 1717      62635F65 
 1717      6E637279 
 1717      707400
 1718              	.LASF0:
 1719 01af 756E7369 		.ascii	"unsigned int\000"
 1719      676E6564 
 1719      20696E74 
 1719      00
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 39


 1720              	.LASF18:
 1721 01bc 70727063 		.ascii	"prpctx\000"
 1721      747800
 1722              	.LASF11:
 1723 01c3 6C6F6E67 		.ascii	"long long unsigned int\000"
 1723      206C6F6E 
 1723      6720756E 
 1723      7369676E 
 1723      65642069 
 1724              	.LASF36:
 1725 01da 6E626C6B 		.ascii	"nblk\000"
 1725      00
 1726              	.LASF37:
 1727 01df 63665F63 		.ascii	"cf_cbc_decrypt\000"
 1727      62635F64 
 1727      65637279 
 1727      707400
 1728              	.LASF35:
 1729 01ee 626C6F63 		.ascii	"blocks\000"
 1729      6B7300
 1730              	.LASF29:
 1731 01f5 786F725F 		.ascii	"xor_bb\000"
 1731      626200
 1732              	.LASF20:
 1733 01fc 73697A65 		.ascii	"sizetype\000"
 1733      74797065 
 1733      00
 1734              	.LASF1:
 1735 0205 6C6F6E67 		.ascii	"long long int\000"
 1735      206C6F6E 
 1735      6720696E 
 1735      7400
 1736              	.LASF28:
 1737 0213 63686172 		.ascii	"char\000"
 1737      00
 1738              	.LASF41:
 1739 0218 77696474 		.ascii	"width\000"
 1739      6800
 1740              	.LASF40:
 1741 021e 6F666673 		.ascii	"offset\000"
 1741      657400
 1742              	.LASF42:
 1743 0225 6374725F 		.ascii	"ctr_next_block\000"
 1743      6E657874 
 1743      5F626C6F 
 1743      636B00
 1744              	.LASF48:
 1745 0234 443A5C44 		.ascii	"D:\\Dropbox\\5_kurs\\diploma\\led_lamp(for_diploma)"
 1745      726F7062 
 1745      6F785C35 
 1745      5F6B7572 
 1745      735C6469 
 1746 0263 5C424C45 		.ascii	"\\BLE_Dynamic_GATT_Service_Configuration\\BLE_Dynam"
 1746      5F44796E 
 1746      616D6963 
 1746      5F474154 
 1746      545F5365 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\cchAHyQa.s 			page 40


 1747 0294 69635F47 		.ascii	"ic_GATT_Service_Configuration.cydsn\000"
 1747      4154545F 
 1747      53657276 
 1747      6963655F 
 1747      436F6E66 
 1748              	.LASF38:
 1749 02b8 63665F63 		.ascii	"cf_ctr_init\000"
 1749      74725F69 
 1749      6E697400 
 1750              	.LASF34:
 1751 02c4 6F757470 		.ascii	"output\000"
 1751      757400
 1752              	.LASF43:
 1753 02cb 76637478 		.ascii	"vctx\000"
 1753      00
 1754              	.LASF9:
 1755 02d0 6C6F6E67 		.ascii	"long int\000"
 1755      20696E74 
 1755      00
 1756              	.LASF45:
 1757 02d9 62797465 		.ascii	"bytes\000"
 1757      7300
 1758              	.LASF2:
 1759 02df 6C6F6E67 		.ascii	"long double\000"
 1759      20646F75 
 1759      626C6500 
 1760              	.LASF39:
 1761 02eb 63665F63 		.ascii	"cf_ctr_custom_counter\000"
 1761      74725F63 
 1761      7573746F 
 1761      6D5F636F 
 1761      756E7465 
 1762              	.LASF3:
 1763 0301 7369676E 		.ascii	"signed char\000"
 1763      65642063 
 1763      68617200 
 1764              	.LASF24:
 1765 030d 6E6B6579 		.ascii	"nkeymat\000"
 1765      6D617400 
 1766              	.LASF30:
 1767 0315 696E6372 		.ascii	"incr_be\000"
 1767      5F626500 
 1768              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
