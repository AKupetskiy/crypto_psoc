ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ak_aes_crypto.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.mem_clean,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	mem_clean, %function
  24              	mem_clean:
  25              	.LFB1:
  26              		.file 1 "handy.h"
   1:handy.h       **** #ifndef HANDY_H
   2:handy.h       **** #define HANDY_H
   3:handy.h       **** 
   4:handy.h       **** #include <stddef.h>
   5:handy.h       **** #include <stdint.h>
   6:handy.h       **** #include <string.h>
   7:handy.h       **** 
   8:handy.h       **** /*
   9:handy.h       ****  * Handy CPP defines and C inline functions.
  10:handy.h       ****  */
  11:handy.h       **** 
  12:handy.h       **** /* Evaluates to the number of items in array-type variable arr. */
  13:handy.h       **** #define ARRAYCOUNT(arr) (sizeof arr / sizeof arr[0])
  14:handy.h       **** 
  15:handy.h       **** /* Normal MIN/MAX macros.  Evaluate argument expressions only once. */
  16:handy.h       **** #ifndef MIN
  17:handy.h       ****   #define MIN(x, y) \
  18:handy.h       ****     ({ typeof (x) __x = (x); \
  19:handy.h       ****        typeof (y) __y = (y); \
  20:handy.h       ****        __x < __y ? __x : __y; })
  21:handy.h       **** #endif
  22:handy.h       **** #ifndef MAX
  23:handy.h       ****   #define MAX(x, y) \
  24:handy.h       ****     ({ typeof (x) __x = (x); \
  25:handy.h       ****        typeof (y) __y = (y); \
  26:handy.h       ****        __x > __y ? __x : __y; })
  27:handy.h       **** #endif
  28:handy.h       **** 
  29:handy.h       **** /* Swap two values.  Uses GCC type inference magic. */
  30:handy.h       **** #ifndef SWAP
  31:handy.h       ****   #define SWAP(x, y) \
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 2


  32:handy.h       ****     do { \
  33:handy.h       ****       typeof (x) __tmp = (x); \
  34:handy.h       ****       (x) = (y); \
  35:handy.h       ****       (y) = __tmp; \
  36:handy.h       ****     } while (0)
  37:handy.h       **** #endif
  38:handy.h       **** 
  39:handy.h       **** /** Stringify its argument. */
  40:handy.h       **** #define STRINGIFY(x) STRINGIFY_(x)
  41:handy.h       **** #define STRINGIFY_(x) #x
  42:handy.h       **** 
  43:handy.h       **** /* Error handling macros.
  44:handy.h       ****  *
  45:handy.h       ****  * These expect a zero = success, non-zero = error convention.
  46:handy.h       ****  */
  47:handy.h       **** 
  48:handy.h       **** /** Error: return. 
  49:handy.h       ****  *  
  50:handy.h       ****  *  If the expression fails, return the error from this function. */
  51:handy.h       **** #define ER(expr) do { typeof (expr) err_ = (expr); if (err_) return err_; } while (0)
  52:handy.h       **** 
  53:handy.h       **** /** Error: goto.
  54:handy.h       ****  *
  55:handy.h       ****  *  If the expression fails, goto x_err.  Assumes defn of label
  56:handy.h       ****  *  x_err and 'error_type err'. */
  57:handy.h       **** #define EG(expr) do { err = (expr); if (err) goto x_err; } while (0)
  58:handy.h       **** 
  59:handy.h       **** /** Like memset(ptr, 0, len), but not allowed to be removed by
  60:handy.h       ****  *  compilers. */
  61:handy.h       **** static inline void mem_clean(volatile void *v, size_t len)
  62:handy.h       **** {
  27              		.loc 1 62 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 00B5     		push	{lr}
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 14, -4
  34 0002 83B0     		sub	sp, sp, #12
  35              		.cfi_def_cfa_offset 16
  36 0004 0190     		str	r0, [sp, #4]
  37 0006 0091     		str	r1, [sp]
  63:handy.h       ****   if (len)
  38              		.loc 1 63 0
  39 0008 009B     		ldr	r3, [sp]
  40 000a 002B     		cmp	r3, #0
  41 000c 07D0     		beq	.L3
  64:handy.h       ****   {
  65:handy.h       ****     memset((void *) v, 0, len);
  42              		.loc 1 65 0
  43 000e 009A     		ldr	r2, [sp]
  44 0010 019B     		ldr	r3, [sp, #4]
  45 0012 0021     		movs	r1, #0
  46 0014 1800     		movs	r0, r3
  47 0016 FFF7FEFF 		bl	memset
  66:handy.h       ****     (void) *((volatile uint8_t *) v);
  48              		.loc 1 66 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 3


  49 001a 019B     		ldr	r3, [sp, #4]
  50 001c 1B78     		ldrb	r3, [r3]
  51              	.L3:
  67:handy.h       ****   }
  68:handy.h       **** }
  52              		.loc 1 68 0
  53 001e C046     		nop
  54 0020 03B0     		add	sp, sp, #12
  55              		@ sp needed
  56 0022 00BD     		pop	{pc}
  57              		.cfi_endproc
  58              	.LFE1:
  59              		.size	mem_clean, .-mem_clean
  60              		.section	.text.append_counter_to_nonce,"ax",%progbits
  61              		.align	2
  62              		.global	append_counter_to_nonce
  63              		.code	16
  64              		.thumb_func
  65              		.type	append_counter_to_nonce, %function
  66              	append_counter_to_nonce:
  67              	.LFB3:
  68              		.file 2 "ak_aes_crypto.c"
   1:ak_aes_crypto.c **** //
   2:ak_aes_crypto.c **** //  ak_aes_crypto.c
   3:ak_aes_crypto.c **** //  crypto-ios
   4:ak_aes_crypto.c **** //
   5:ak_aes_crypto.c **** //  Created by Andrew Kupetskiy on 11/23/17.
   6:ak_aes_crypto.c **** //  Copyright Â© 2017 AndrewK. All rights reserved.
   7:ak_aes_crypto.c **** //
   8:ak_aes_crypto.c **** 
   9:ak_aes_crypto.c **** #include <stdio.h>
  10:ak_aes_crypto.c **** 
  11:ak_aes_crypto.c **** #include "ak_aes_crypto.h"
  12:ak_aes_crypto.c **** #include "modes.h"
  13:ak_aes_crypto.c **** #include "handy.h"
  14:ak_aes_crypto.c **** #include "tassert.h"
  15:ak_aes_crypto.c **** 
  16:ak_aes_crypto.c **** void append_counter_to_nonce(uint8_t *nonce, uint32_t counter) {
  69              		.loc 2 16 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 16
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73 0000 00B5     		push	{lr}
  74              		.cfi_def_cfa_offset 4
  75              		.cfi_offset 14, -4
  76 0002 85B0     		sub	sp, sp, #20
  77              		.cfi_def_cfa_offset 24
  78 0004 0190     		str	r0, [sp, #4]
  79 0006 0091     		str	r1, [sp]
  17:ak_aes_crypto.c ****     uint8_t ctr_array[4];
  18:ak_aes_crypto.c ****     ctr_array[0] = counter >> 24;
  80              		.loc 2 18 0
  81 0008 009B     		ldr	r3, [sp]
  82 000a 1B0E     		lsrs	r3, r3, #24
  83 000c DAB2     		uxtb	r2, r3
  84 000e 03AB     		add	r3, sp, #12
  85 0010 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 4


  19:ak_aes_crypto.c ****     ctr_array[1] = counter >> 16;
  86              		.loc 2 19 0
  87 0012 009B     		ldr	r3, [sp]
  88 0014 1B0C     		lsrs	r3, r3, #16
  89 0016 DAB2     		uxtb	r2, r3
  90 0018 03AB     		add	r3, sp, #12
  91 001a 5A70     		strb	r2, [r3, #1]
  20:ak_aes_crypto.c ****     ctr_array[2] = counter >>  8;
  92              		.loc 2 20 0
  93 001c 009B     		ldr	r3, [sp]
  94 001e 1B0A     		lsrs	r3, r3, #8
  95 0020 DAB2     		uxtb	r2, r3
  96 0022 03AB     		add	r3, sp, #12
  97 0024 9A70     		strb	r2, [r3, #2]
  21:ak_aes_crypto.c ****     ctr_array[3] = counter;
  98              		.loc 2 21 0
  99 0026 009B     		ldr	r3, [sp]
 100 0028 DAB2     		uxtb	r2, r3
 101 002a 03AB     		add	r3, sp, #12
 102 002c DA70     		strb	r2, [r3, #3]
  22:ak_aes_crypto.c ****     
  23:ak_aes_crypto.c ****     memcpy(nonce, ctr_array, 4);
 103              		.loc 2 23 0
 104 002e 019A     		ldr	r2, [sp, #4]
 105 0030 03AB     		add	r3, sp, #12
 106 0032 1000     		movs	r0, r2
 107 0034 1900     		movs	r1, r3
 108 0036 0423     		movs	r3, #4
 109 0038 1A00     		movs	r2, r3
 110 003a FFF7FEFF 		bl	memcpy
  24:ak_aes_crypto.c **** }
 111              		.loc 2 24 0
 112 003e C046     		nop
 113 0040 05B0     		add	sp, sp, #20
 114              		@ sp needed
 115 0042 00BD     		pop	{pc}
 116              		.cfi_endproc
 117              	.LFE3:
 118              		.size	append_counter_to_nonce, .-append_counter_to_nonce
 119              		.section	.rodata
 120              		.align	2
 121              	.LC0:
 122 0000 25303278 		.ascii	"%02x\000"
 122      00
 123 0005 000000   		.align	2
 124              	.LC2:
 125 0008 3E0D0D00 		.ascii	">\015\015\000"
 126              		.section	.text.c_print,"ax",%progbits
 127              		.align	2
 128              		.global	c_print
 129              		.code	16
 130              		.thumb_func
 131              		.type	c_print, %function
 132              	c_print:
 133              	.LFB4:
  25:ak_aes_crypto.c **** 
  26:ak_aes_crypto.c **** void c_print(uint8_t *vli, unsigned int size) {
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 5


 134              		.loc 2 26 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 16
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138 0000 00B5     		push	{lr}
 139              		.cfi_def_cfa_offset 4
 140              		.cfi_offset 14, -4
 141 0002 85B0     		sub	sp, sp, #20
 142              		.cfi_def_cfa_offset 24
 143 0004 0190     		str	r0, [sp, #4]
 144 0006 0091     		str	r1, [sp]
  27:ak_aes_crypto.c ****     printf("<");
 145              		.loc 2 27 0
 146 0008 3C20     		movs	r0, #60
 147 000a FFF7FEFF 		bl	putchar
 148              	.LBB2:
  28:ak_aes_crypto.c ****     for(unsigned i=0; i<size; ++i) {
 149              		.loc 2 28 0
 150 000e 0023     		movs	r3, #0
 151 0010 0393     		str	r3, [sp, #12]
 152 0012 0CE0     		b	.L6
 153              	.L7:
  29:ak_aes_crypto.c ****         printf("%02x", (unsigned)vli[i]);
 154              		.loc 2 29 0 discriminator 3
 155 0014 019A     		ldr	r2, [sp, #4]
 156 0016 039B     		ldr	r3, [sp, #12]
 157 0018 D318     		adds	r3, r2, r3
 158 001a 1B78     		ldrb	r3, [r3]
 159 001c 1A00     		movs	r2, r3
 160 001e 094B     		ldr	r3, .L8
 161 0020 1100     		movs	r1, r2
 162 0022 1800     		movs	r0, r3
 163 0024 FFF7FEFF 		bl	printf
  28:ak_aes_crypto.c ****     for(unsigned i=0; i<size; ++i) {
 164              		.loc 2 28 0 discriminator 3
 165 0028 039B     		ldr	r3, [sp, #12]
 166 002a 0133     		adds	r3, r3, #1
 167 002c 0393     		str	r3, [sp, #12]
 168              	.L6:
  28:ak_aes_crypto.c ****     for(unsigned i=0; i<size; ++i) {
 169              		.loc 2 28 0 is_stmt 0 discriminator 1
 170 002e 039A     		ldr	r2, [sp, #12]
 171 0030 009B     		ldr	r3, [sp]
 172 0032 9A42     		cmp	r2, r3
 173 0034 EED3     		bcc	.L7
 174              	.LBE2:
  30:ak_aes_crypto.c ****     }
  31:ak_aes_crypto.c ****     printf(">\r\r\n");
 175              		.loc 2 31 0 is_stmt 1
 176 0036 044B     		ldr	r3, .L8+4
 177 0038 1800     		movs	r0, r3
 178 003a FFF7FEFF 		bl	puts
  32:ak_aes_crypto.c **** }
 179              		.loc 2 32 0
 180 003e C046     		nop
 181 0040 05B0     		add	sp, sp, #20
 182              		@ sp needed
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 6


 183 0042 00BD     		pop	{pc}
 184              	.L9:
 185              		.align	2
 186              	.L8:
 187 0044 00000000 		.word	.LC0
 188 0048 08000000 		.word	.LC2
 189              		.cfi_endproc
 190              	.LFE4:
 191              		.size	c_print, .-c_print
 192              		.section	.rodata
 193              		.align	2
 194              	.LC4:
 195 000c 6E6F6E63 		.ascii	"nonce = \015\000"
 195      65203D20 
 195      0D00
 196 0016 0000     		.align	2
 197              	.LC6:
 198 0018 73656372 		.ascii	"secret key = \015\000"
 198      6574206B 
 198      6579203D 
 198      200D00
 199              		.section	.text.ak_aes_init,"ax",%progbits
 200              		.align	2
 201              		.global	ak_aes_init
 202              		.code	16
 203              		.thumb_func
 204              		.type	ak_aes_init, %function
 205              	ak_aes_init:
 206              	.LFB5:
  33:ak_aes_crypto.c **** 
  34:ak_aes_crypto.c **** //-----------------------------------------------------------------
  35:ak_aes_crypto.c **** 
  36:ak_aes_crypto.c **** void ak_aes_init(ak_aes_context *ctx,
  37:ak_aes_crypto.c ****                  const uint8_t *shared_secret,
  38:ak_aes_crypto.c ****                  size_t shared_secret_size) {
 207              		.loc 2 38 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 40
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211 0000 00B5     		push	{lr}
 212              		.cfi_def_cfa_offset 4
 213              		.cfi_offset 14, -4
 214 0002 8BB0     		sub	sp, sp, #44
 215              		.cfi_def_cfa_offset 48
 216 0004 0390     		str	r0, [sp, #12]
 217 0006 0291     		str	r1, [sp, #8]
 218 0008 0192     		str	r2, [sp, #4]
  39:ak_aes_crypto.c ****     memset(ctx, 0, sizeof *ctx);
 219              		.loc 2 39 0
 220 000a 039B     		ldr	r3, [sp, #12]
 221 000c 1822     		movs	r2, #24
 222 000e 0021     		movs	r1, #0
 223 0010 1800     		movs	r0, r3
 224 0012 FFF7FEFF 		bl	memset
  40:ak_aes_crypto.c ****     ctx->counter = 0;
 225              		.loc 2 40 0
 226 0016 039B     		ldr	r3, [sp, #12]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 7


 227 0018 0022     		movs	r2, #0
 228 001a 1A60     		str	r2, [r3]
  41:ak_aes_crypto.c ****     
  42:ak_aes_crypto.c ****     // init nonce from shared secret
  43:ak_aes_crypto.c ****     // nonce = shared_secret[19...31];
  44:ak_aes_crypto.c ****     memcpy(ctx->nonce, shared_secret+19, NONCE_SIZE);
 229              		.loc 2 44 0
 230 001c 039B     		ldr	r3, [sp, #12]
 231 001e 181D     		adds	r0, r3, #4
 232 0020 029B     		ldr	r3, [sp, #8]
 233 0022 1333     		adds	r3, r3, #19
 234 0024 0D22     		movs	r2, #13
 235 0026 1900     		movs	r1, r3
 236 0028 FFF7FEFF 		bl	memcpy
  45:ak_aes_crypto.c ****     
  46:ak_aes_crypto.c ****     printf("nonce = \r\n");
 237              		.loc 2 46 0
 238 002c 1E4B     		ldr	r3, .L11
 239 002e 1800     		movs	r0, r3
 240 0030 FFF7FEFF 		bl	puts
  47:ak_aes_crypto.c ****     c_print(ctx->nonce, 13);
 241              		.loc 2 47 0
 242 0034 039B     		ldr	r3, [sp, #12]
 243 0036 0433     		adds	r3, r3, #4
 244 0038 0D21     		movs	r1, #13
 245 003a 1800     		movs	r0, r3
 246 003c FFF7FEFF 		bl	c_print
  48:ak_aes_crypto.c ****     
  49:ak_aes_crypto.c ****     //then apply counter value onto it
  50:ak_aes_crypto.c ****     append_counter_to_nonce(ctx->nonce, ctx->counter);
 247              		.loc 2 50 0
 248 0040 039B     		ldr	r3, [sp, #12]
 249 0042 1A1D     		adds	r2, r3, #4
 250 0044 039B     		ldr	r3, [sp, #12]
 251 0046 1B68     		ldr	r3, [r3]
 252 0048 1900     		movs	r1, r3
 253 004a 1000     		movs	r0, r2
 254 004c FFF7FEFF 		bl	append_counter_to_nonce
  51:ak_aes_crypto.c ****     
  52:ak_aes_crypto.c ****     printf("nonce = \r\n");
 255              		.loc 2 52 0
 256 0050 154B     		ldr	r3, .L11
 257 0052 1800     		movs	r0, r3
 258 0054 FFF7FEFF 		bl	puts
  53:ak_aes_crypto.c ****     c_print(ctx->nonce, 13);
 259              		.loc 2 53 0
 260 0058 039B     		ldr	r3, [sp, #12]
 261 005a 0433     		adds	r3, r3, #4
 262 005c 0D21     		movs	r1, #13
 263 005e 1800     		movs	r0, r3
 264 0060 FFF7FEFF 		bl	c_print
  54:ak_aes_crypto.c ****     
  55:ak_aes_crypto.c ****     // init basic aes crypto
  56:ak_aes_crypto.c ****     cf_aes_context *ccm_context = (cf_aes_context *)malloc(sizeof(cf_aes_context));
 265              		.loc 2 56 0
 266 0064 F420     		movs	r0, #244
 267 0066 FFF7FEFF 		bl	malloc
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 8


 268 006a 0300     		movs	r3, r0
 269 006c 0993     		str	r3, [sp, #36]
  57:ak_aes_crypto.c ****     
  58:ak_aes_crypto.c ****     // pass secret key to it
  59:ak_aes_crypto.c ****     uint8_t secret_key[SECRET_KEY_SIZE];
  60:ak_aes_crypto.c ****     memcpy(secret_key, shared_secret, SECRET_KEY_SIZE);
 270              		.loc 2 60 0
 271 006e 05AA     		add	r2, sp, #20
 272 0070 029B     		ldr	r3, [sp, #8]
 273 0072 1000     		movs	r0, r2
 274 0074 1900     		movs	r1, r3
 275 0076 1023     		movs	r3, #16
 276 0078 1A00     		movs	r2, r3
 277 007a FFF7FEFF 		bl	memcpy
  61:ak_aes_crypto.c ****     
  62:ak_aes_crypto.c ****     printf("secret key = \r\n");
 278              		.loc 2 62 0
 279 007e 0B4B     		ldr	r3, .L11+4
 280 0080 1800     		movs	r0, r3
 281 0082 FFF7FEFF 		bl	puts
  63:ak_aes_crypto.c ****     c_print(secret_key, SECRET_KEY_SIZE);
 282              		.loc 2 63 0
 283 0086 05AB     		add	r3, sp, #20
 284 0088 1021     		movs	r1, #16
 285 008a 1800     		movs	r0, r3
 286 008c FFF7FEFF 		bl	c_print
  64:ak_aes_crypto.c ****     
  65:ak_aes_crypto.c ****     cf_aes_init(ccm_context, secret_key, SECRET_KEY_SIZE);
 287              		.loc 2 65 0
 288 0090 05A9     		add	r1, sp, #20
 289 0092 099B     		ldr	r3, [sp, #36]
 290 0094 1022     		movs	r2, #16
 291 0096 1800     		movs	r0, r3
 292 0098 FFF7FEFF 		bl	cf_aes_init
  66:ak_aes_crypto.c ****     
  67:ak_aes_crypto.c ****     ctx->ccm_ctx = ccm_context;
 293              		.loc 2 67 0
 294 009c 039B     		ldr	r3, [sp, #12]
 295 009e 099A     		ldr	r2, [sp, #36]
 296 00a0 5A61     		str	r2, [r3, #20]
  68:ak_aes_crypto.c **** }
 297              		.loc 2 68 0
 298 00a2 C046     		nop
 299 00a4 0BB0     		add	sp, sp, #44
 300              		@ sp needed
 301 00a6 00BD     		pop	{pc}
 302              	.L12:
 303              		.align	2
 304              	.L11:
 305 00a8 0C000000 		.word	.LC4
 306 00ac 18000000 		.word	.LC6
 307              		.cfi_endproc
 308              	.LFE5:
 309              		.size	ak_aes_init, .-ak_aes_init
 310              		.section	.text.ak_aes_finish,"ax",%progbits
 311              		.align	2
 312              		.global	ak_aes_finish
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 9


 313              		.code	16
 314              		.thumb_func
 315              		.type	ak_aes_finish, %function
 316              	ak_aes_finish:
 317              	.LFB6:
  69:ak_aes_crypto.c **** 
  70:ak_aes_crypto.c **** void ak_aes_finish(ak_aes_context *ctx)
  71:ak_aes_crypto.c **** {
 318              		.loc 2 71 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 8
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322 0000 00B5     		push	{lr}
 323              		.cfi_def_cfa_offset 4
 324              		.cfi_offset 14, -4
 325 0002 83B0     		sub	sp, sp, #12
 326              		.cfi_def_cfa_offset 16
 327 0004 0190     		str	r0, [sp, #4]
  72:ak_aes_crypto.c ****     free(ctx->nonce);
 328              		.loc 2 72 0
 329 0006 019B     		ldr	r3, [sp, #4]
 330 0008 0433     		adds	r3, r3, #4
 331 000a 1800     		movs	r0, r3
 332 000c FFF7FEFF 		bl	free
  73:ak_aes_crypto.c ****     free(ctx->ccm_ctx);
 333              		.loc 2 73 0
 334 0010 019B     		ldr	r3, [sp, #4]
 335 0012 5B69     		ldr	r3, [r3, #20]
 336 0014 1800     		movs	r0, r3
 337 0016 FFF7FEFF 		bl	free
  74:ak_aes_crypto.c ****     mem_clean(ctx, sizeof *ctx);
 338              		.loc 2 74 0
 339 001a 019B     		ldr	r3, [sp, #4]
 340 001c 1821     		movs	r1, #24
 341 001e 1800     		movs	r0, r3
 342 0020 FFF7FEFF 		bl	mem_clean
  75:ak_aes_crypto.c **** }
 343              		.loc 2 75 0
 344 0024 C046     		nop
 345 0026 03B0     		add	sp, sp, #12
 346              		@ sp needed
 347 0028 00BD     		pop	{pc}
 348              		.cfi_endproc
 349              	.LFE6:
 350              		.size	ak_aes_finish, .-ak_aes_finish
 351 002a C046     		.section	.rodata
 352 0027 00       		.align	2
 353              	.LC10:
 354 0028 636F756E 		.ascii	"counter = %d\015\012\000"
 354      74657220 
 354      3D202564 
 354      0D0A00
 355              		.section	.text.ak_aes_encrypt,"ax",%progbits
 356              		.align	2
 357              		.global	ak_aes_encrypt
 358              		.code	16
 359              		.thumb_func
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 10


 360              		.type	ak_aes_encrypt, %function
 361              	ak_aes_encrypt:
 362              	.LFB7:
  76:ak_aes_crypto.c **** 
  77:ak_aes_crypto.c **** //----------------------------------------------------------------------
  78:ak_aes_crypto.c **** 
  79:ak_aes_crypto.c **** void ak_aes_encrypt(ak_aes_context *ctx,
  80:ak_aes_crypto.c ****                     const uint8_t *plain_data, size_t plain_data_size,
  81:ak_aes_crypto.c ****                     uint8_t *encrypted_data,
  82:ak_aes_crypto.c ****                     uint8_t *tag, size_t ntag) {
 363              		.loc 2 82 0
 364              		.cfi_startproc
 365              		@ args = 8, pretend = 0, frame = 16
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367 0000 30B5     		push	{r4, r5, lr}
 368              		.cfi_def_cfa_offset 12
 369              		.cfi_offset 4, -12
 370              		.cfi_offset 5, -8
 371              		.cfi_offset 14, -4
 372 0002 8DB0     		sub	sp, sp, #52
 373              		.cfi_def_cfa_offset 64
 374 0004 0B90     		str	r0, [sp, #44]
 375 0006 0A91     		str	r1, [sp, #40]
 376 0008 0992     		str	r2, [sp, #36]
 377 000a 0893     		str	r3, [sp, #32]
  83:ak_aes_crypto.c ****     
  84:ak_aes_crypto.c ****     printf("nonce = \r\n");
 378              		.loc 2 84 0
 379 000c 1D4B     		ldr	r3, .L15
 380 000e 1800     		movs	r0, r3
 381 0010 FFF7FEFF 		bl	puts
  85:ak_aes_crypto.c ****     c_print(ctx->nonce, 13);
 382              		.loc 2 85 0
 383 0014 0B9B     		ldr	r3, [sp, #44]
 384 0016 0433     		adds	r3, r3, #4
 385 0018 0D21     		movs	r1, #13
 386 001a 1800     		movs	r0, r3
 387 001c FFF7FEFF 		bl	c_print
  86:ak_aes_crypto.c ****     
  87:ak_aes_crypto.c ****     //apply counter value onto it
  88:ak_aes_crypto.c ****     append_counter_to_nonce(ctx->nonce, ctx->counter);
 388              		.loc 2 88 0
 389 0020 0B9B     		ldr	r3, [sp, #44]
 390 0022 1A1D     		adds	r2, r3, #4
 391 0024 0B9B     		ldr	r3, [sp, #44]
 392 0026 1B68     		ldr	r3, [r3]
 393 0028 1900     		movs	r1, r3
 394 002a 1000     		movs	r0, r2
 395 002c FFF7FEFF 		bl	append_counter_to_nonce
  89:ak_aes_crypto.c ****     
  90:ak_aes_crypto.c ****     cf_ccm_encrypt(&cf_aes, ctx->ccm_ctx,
 396              		.loc 2 90 0
 397 0030 0B9B     		ldr	r3, [sp, #44]
 398 0032 5969     		ldr	r1, [r3, #20]
  91:ak_aes_crypto.c ****                    plain_data, plain_data_size, L_SIZE,
  92:ak_aes_crypto.c ****                    NULL, 0,
  93:ak_aes_crypto.c ****                    ctx->nonce, NONCE_SIZE,
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 11


 399              		.loc 2 93 0
 400 0034 0B9B     		ldr	r3, [sp, #44]
 401 0036 0433     		adds	r3, r3, #4
  90:ak_aes_crypto.c ****                    plain_data, plain_data_size, L_SIZE,
 402              		.loc 2 90 0
 403 0038 099D     		ldr	r5, [sp, #36]
 404 003a 0A9C     		ldr	r4, [sp, #40]
 405 003c 1248     		ldr	r0, .L15+4
 406 003e 119A     		ldr	r2, [sp, #68]
 407 0040 0792     		str	r2, [sp, #28]
 408 0042 109A     		ldr	r2, [sp, #64]
 409 0044 0692     		str	r2, [sp, #24]
 410 0046 089A     		ldr	r2, [sp, #32]
 411 0048 0592     		str	r2, [sp, #20]
 412 004a 0D22     		movs	r2, #13
 413 004c 0492     		str	r2, [sp, #16]
 414 004e 0393     		str	r3, [sp, #12]
 415 0050 0023     		movs	r3, #0
 416 0052 0293     		str	r3, [sp, #8]
 417 0054 0023     		movs	r3, #0
 418 0056 0193     		str	r3, [sp, #4]
 419 0058 0223     		movs	r3, #2
 420 005a 0093     		str	r3, [sp]
 421 005c 2B00     		movs	r3, r5
 422 005e 2200     		movs	r2, r4
 423 0060 FFF7FEFF 		bl	cf_ccm_encrypt
  94:ak_aes_crypto.c ****                    encrypted_data,
  95:ak_aes_crypto.c ****                    tag, ntag);
  96:ak_aes_crypto.c ****     
  97:ak_aes_crypto.c ****     //increment counter
  98:ak_aes_crypto.c ****     ctx->counter = ctx->counter + 1;
 424              		.loc 2 98 0
 425 0064 0B9B     		ldr	r3, [sp, #44]
 426 0066 1B68     		ldr	r3, [r3]
 427 0068 5A1C     		adds	r2, r3, #1
 428 006a 0B9B     		ldr	r3, [sp, #44]
 429 006c 1A60     		str	r2, [r3]
  99:ak_aes_crypto.c ****     printf("counter = %d\r\n", ctx->counter);
 430              		.loc 2 99 0
 431 006e 0B9B     		ldr	r3, [sp, #44]
 432 0070 1A68     		ldr	r2, [r3]
 433 0072 064B     		ldr	r3, .L15+8
 434 0074 1100     		movs	r1, r2
 435 0076 1800     		movs	r0, r3
 436 0078 FFF7FEFF 		bl	printf
 100:ak_aes_crypto.c ****     
 101:ak_aes_crypto.c **** }
 437              		.loc 2 101 0
 438 007c C046     		nop
 439 007e 0DB0     		add	sp, sp, #52
 440              		@ sp needed
 441 0080 30BD     		pop	{r4, r5, pc}
 442              	.L16:
 443 0082 C046     		.align	2
 444              	.L15:
 445 0084 0C000000 		.word	.LC4
 446 0088 00000000 		.word	cf_aes
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 12


 447 008c 28000000 		.word	.LC10
 448              		.cfi_endproc
 449              	.LFE7:
 450              		.size	ak_aes_encrypt, .-ak_aes_encrypt
 451              		.section	.text.ak_aes_decrypt,"ax",%progbits
 452              		.align	2
 453              		.global	ak_aes_decrypt
 454              		.code	16
 455              		.thumb_func
 456              		.type	ak_aes_decrypt, %function
 457              	ak_aes_decrypt:
 458              	.LFB8:
 102:ak_aes_crypto.c **** 
 103:ak_aes_crypto.c **** int ak_aes_decrypt(ak_aes_context *ctx,
 104:ak_aes_crypto.c ****                    const uint8_t *encrypted_data, size_t encrypted_data_size,
 105:ak_aes_crypto.c ****                    const uint8_t *tag, size_t ntag,
 106:ak_aes_crypto.c ****                    uint8_t *plain_data) {
 459              		.loc 2 106 0
 460              		.cfi_startproc
 461              		@ args = 8, pretend = 0, frame = 24
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463 0000 30B5     		push	{r4, r5, lr}
 464              		.cfi_def_cfa_offset 12
 465              		.cfi_offset 4, -12
 466              		.cfi_offset 5, -8
 467              		.cfi_offset 14, -4
 468 0002 8FB0     		sub	sp, sp, #60
 469              		.cfi_def_cfa_offset 72
 470 0004 0B90     		str	r0, [sp, #44]
 471 0006 0A91     		str	r1, [sp, #40]
 472 0008 0992     		str	r2, [sp, #36]
 473 000a 0893     		str	r3, [sp, #32]
 107:ak_aes_crypto.c ****     
 108:ak_aes_crypto.c ****     printf("nonce = \r\n");
 474              		.loc 2 108 0
 475 000c 1F4B     		ldr	r3, .L19
 476 000e 1800     		movs	r0, r3
 477 0010 FFF7FEFF 		bl	puts
 109:ak_aes_crypto.c ****     c_print(ctx->nonce, 13);
 478              		.loc 2 109 0
 479 0014 0B9B     		ldr	r3, [sp, #44]
 480 0016 0433     		adds	r3, r3, #4
 481 0018 0D21     		movs	r1, #13
 482 001a 1800     		movs	r0, r3
 483 001c FFF7FEFF 		bl	c_print
 110:ak_aes_crypto.c ****     
 111:ak_aes_crypto.c ****     //apply counter value onto it
 112:ak_aes_crypto.c ****     append_counter_to_nonce(ctx->nonce, ctx->counter);
 484              		.loc 2 112 0
 485 0020 0B9B     		ldr	r3, [sp, #44]
 486 0022 1A1D     		adds	r2, r3, #4
 487 0024 0B9B     		ldr	r3, [sp, #44]
 488 0026 1B68     		ldr	r3, [r3]
 489 0028 1900     		movs	r1, r3
 490 002a 1000     		movs	r0, r2
 491 002c FFF7FEFF 		bl	append_counter_to_nonce
 113:ak_aes_crypto.c ****     
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 13


 114:ak_aes_crypto.c ****     int err = 0;
 492              		.loc 2 114 0
 493 0030 0023     		movs	r3, #0
 494 0032 0D93     		str	r3, [sp, #52]
 115:ak_aes_crypto.c ****     err = cf_ccm_decrypt(&cf_aes, ctx->ccm_ctx,
 495              		.loc 2 115 0
 496 0034 0B9B     		ldr	r3, [sp, #44]
 497 0036 5969     		ldr	r1, [r3, #20]
 116:ak_aes_crypto.c ****                          encrypted_data, encrypted_data_size, L_SIZE,
 117:ak_aes_crypto.c ****                          NULL, 0,
 118:ak_aes_crypto.c ****                          ctx->nonce, NONCE_SIZE,
 498              		.loc 2 118 0
 499 0038 0B9B     		ldr	r3, [sp, #44]
 500 003a 0433     		adds	r3, r3, #4
 115:ak_aes_crypto.c ****     err = cf_ccm_decrypt(&cf_aes, ctx->ccm_ctx,
 501              		.loc 2 115 0
 502 003c 099D     		ldr	r5, [sp, #36]
 503 003e 0A9C     		ldr	r4, [sp, #40]
 504 0040 1348     		ldr	r0, .L19+4
 505 0042 139A     		ldr	r2, [sp, #76]
 506 0044 0792     		str	r2, [sp, #28]
 507 0046 129A     		ldr	r2, [sp, #72]
 508 0048 0692     		str	r2, [sp, #24]
 509 004a 089A     		ldr	r2, [sp, #32]
 510 004c 0592     		str	r2, [sp, #20]
 511 004e 0D22     		movs	r2, #13
 512 0050 0492     		str	r2, [sp, #16]
 513 0052 0393     		str	r3, [sp, #12]
 514 0054 0023     		movs	r3, #0
 515 0056 0293     		str	r3, [sp, #8]
 516 0058 0023     		movs	r3, #0
 517 005a 0193     		str	r3, [sp, #4]
 518 005c 0223     		movs	r3, #2
 519 005e 0093     		str	r3, [sp]
 520 0060 2B00     		movs	r3, r5
 521 0062 2200     		movs	r2, r4
 522 0064 FFF7FEFF 		bl	cf_ccm_decrypt
 523 0068 0300     		movs	r3, r0
 524 006a 0D93     		str	r3, [sp, #52]
 119:ak_aes_crypto.c ****                          tag, ntag,
 120:ak_aes_crypto.c ****                          plain_data);
 121:ak_aes_crypto.c ****     
 122:ak_aes_crypto.c ****     //increment counter
 123:ak_aes_crypto.c ****     ctx->counter = ctx->counter + 1;
 525              		.loc 2 123 0
 526 006c 0B9B     		ldr	r3, [sp, #44]
 527 006e 1B68     		ldr	r3, [r3]
 528 0070 5A1C     		adds	r2, r3, #1
 529 0072 0B9B     		ldr	r3, [sp, #44]
 530 0074 1A60     		str	r2, [r3]
 124:ak_aes_crypto.c ****     printf("counter = %d\r\n", ctx->counter);
 531              		.loc 2 124 0
 532 0076 0B9B     		ldr	r3, [sp, #44]
 533 0078 1A68     		ldr	r2, [r3]
 534 007a 064B     		ldr	r3, .L19+8
 535 007c 1100     		movs	r1, r2
 536 007e 1800     		movs	r0, r3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 14


 537 0080 FFF7FEFF 		bl	printf
 125:ak_aes_crypto.c ****     return err;
 538              		.loc 2 125 0
 539 0084 0D9B     		ldr	r3, [sp, #52]
 126:ak_aes_crypto.c **** }
 540              		.loc 2 126 0
 541 0086 1800     		movs	r0, r3
 542 0088 0FB0     		add	sp, sp, #60
 543              		@ sp needed
 544 008a 30BD     		pop	{r4, r5, pc}
 545              	.L20:
 546              		.align	2
 547              	.L19:
 548 008c 0C000000 		.word	.LC4
 549 0090 00000000 		.word	cf_aes
 550 0094 28000000 		.word	.LC10
 551              		.cfi_endproc
 552              	.LFE8:
 553              		.size	ak_aes_decrypt, .-ak_aes_decrypt
 554              		.section	.rodata
 555 0037 00       		.align	2
 556              	.LC15:
 557 0038 74616720 		.ascii	"tag = \015\000"
 557      3D200D00 
 558              		.align	2
 559              	.LC17:
 560 0040 656E6372 		.ascii	"encrypted message = \015\000"
 560      79707465 
 560      64206D65 
 560      73736167 
 560      65203D20 
 561 0056 0000     		.align	2
 562              	.LC19:
 563 0058 7061636B 		.ascii	"package = \015\000"
 563      61676520 
 563      3D200D00 
 564              		.section	.text.ak_aes_encrypt_and_pack,"ax",%progbits
 565              		.align	2
 566              		.global	ak_aes_encrypt_and_pack
 567              		.code	16
 568              		.thumb_func
 569              		.type	ak_aes_encrypt_and_pack, %function
 570              	ak_aes_encrypt_and_pack:
 571              	.LFB9:
 127:ak_aes_crypto.c **** 
 128:ak_aes_crypto.c **** // -------------------------------------------------------------------
 129:ak_aes_crypto.c **** 
 130:ak_aes_crypto.c **** void ak_aes_encrypt_and_pack(ak_aes_context *ctx,
 131:ak_aes_crypto.c ****                              const uint8_t *plain_data, size_t plain_data_size,
 132:ak_aes_crypto.c ****                              uint8_t *package, uint8_t *package_size) {
 572              		.loc 2 132 0
 573              		.cfi_startproc
 574              		@ args = 4, pretend = 0, frame = 72
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 577              		.cfi_def_cfa_offset 20
 578              		.cfi_offset 4, -20
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 15


 579              		.cfi_offset 5, -16
 580              		.cfi_offset 6, -12
 581              		.cfi_offset 7, -8
 582              		.cfi_offset 14, -4
 583 0002 95B0     		sub	sp, sp, #84
 584              		.cfi_def_cfa_offset 104
 585 0004 02AF     		add	r7, sp, #8
 586              		.cfi_def_cfa 7, 96
 587 0006 F862     		str	r0, [r7, #44]
 588 0008 B962     		str	r1, [r7, #40]
 589 000a 7A62     		str	r2, [r7, #36]
 590 000c 3B62     		str	r3, [r7, #32]
 591              		.loc 2 132 0
 592 000e 6B46     		mov	r3, sp
 593 0010 7B60     		str	r3, [r7, #4]
 133:ak_aes_crypto.c ****     uint8_t encrypted_data[plain_data_size], tag[TAG_SIZE];
 594              		.loc 2 133 0
 595 0012 7B6A     		ldr	r3, [r7, #36]
 596 0014 1A00     		movs	r2, r3
 597 0016 013A     		subs	r2, r2, #1
 598 0018 7A64     		str	r2, [r7, #68]
 599 001a 3B61     		str	r3, [r7, #16]
 600 001c 0022     		movs	r2, #0
 601 001e 7A61     		str	r2, [r7, #20]
 602 0020 3869     		ldr	r0, [r7, #16]
 603 0022 7969     		ldr	r1, [r7, #20]
 604 0024 0200     		movs	r2, r0
 605 0026 520F     		lsrs	r2, r2, #29
 606 0028 0E00     		movs	r6, r1
 607 002a F600     		lsls	r6, r6, #3
 608 002c FE61     		str	r6, [r7, #28]
 609 002e FE69     		ldr	r6, [r7, #28]
 610 0030 1643     		orrs	r6, r2
 611 0032 FE61     		str	r6, [r7, #28]
 612 0034 0200     		movs	r2, r0
 613 0036 D200     		lsls	r2, r2, #3
 614 0038 BA61     		str	r2, [r7, #24]
 615 003a BB60     		str	r3, [r7, #8]
 616 003c 0022     		movs	r2, #0
 617 003e FA60     		str	r2, [r7, #12]
 618 0040 B868     		ldr	r0, [r7, #8]
 619 0042 F968     		ldr	r1, [r7, #12]
 620 0044 0200     		movs	r2, r0
 621 0046 520F     		lsrs	r2, r2, #29
 622 0048 0E00     		movs	r6, r1
 623 004a F500     		lsls	r5, r6, #3
 624 004c 1543     		orrs	r5, r2
 625 004e 0200     		movs	r2, r0
 626 0050 D400     		lsls	r4, r2, #3
 627 0052 0733     		adds	r3, r3, #7
 628 0054 DB08     		lsrs	r3, r3, #3
 629 0056 DB00     		lsls	r3, r3, #3
 630 0058 6A46     		mov	r2, sp
 631 005a D31A     		subs	r3, r2, r3
 632 005c 9D46     		mov	sp, r3
 633 005e 02AB     		add	r3, sp, #8
 634 0060 0033     		adds	r3, r3, #0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 16


 635 0062 3B64     		str	r3, [r7, #64]
 134:ak_aes_crypto.c ****     //apply counter value onto it
 135:ak_aes_crypto.c ****     
 136:ak_aes_crypto.c ****     ak_aes_encrypt(ctx, plain_data, plain_data_size, encrypted_data, tag, TAG_SIZE);
 636              		.loc 2 136 0
 637 0064 3C6C     		ldr	r4, [r7, #64]
 638 0066 7A6A     		ldr	r2, [r7, #36]
 639 0068 B96A     		ldr	r1, [r7, #40]
 640 006a F86A     		ldr	r0, [r7, #44]
 641 006c 1023     		movs	r3, #16
 642 006e 0193     		str	r3, [sp, #4]
 643 0070 1023     		movs	r3, #16
 644 0072 2025     		movs	r5, #32
 645 0074 AC46     		mov	ip, r5
 646 0076 BC44     		add	ip, ip, r7
 647 0078 6344     		add	r3, r3, ip
 648 007a 0093     		str	r3, [sp]
 649 007c 2300     		movs	r3, r4
 650 007e FFF7FEFF 		bl	ak_aes_encrypt
 137:ak_aes_crypto.c ****     
 138:ak_aes_crypto.c ****     printf("tag = \r\n");
 651              		.loc 2 138 0
 652 0082 1E4B     		ldr	r3, .L22
 653 0084 1800     		movs	r0, r3
 654 0086 FFF7FEFF 		bl	puts
 139:ak_aes_crypto.c ****     c_print(tag, TAG_SIZE);
 655              		.loc 2 139 0
 656 008a 1023     		movs	r3, #16
 657 008c 2022     		movs	r2, #32
 658 008e 9446     		mov	ip, r2
 659 0090 BC44     		add	ip, ip, r7
 660 0092 6344     		add	r3, r3, ip
 661 0094 1021     		movs	r1, #16
 662 0096 1800     		movs	r0, r3
 663 0098 FFF7FEFF 		bl	c_print
 140:ak_aes_crypto.c ****     
 141:ak_aes_crypto.c ****     printf("encrypted message = \r\n");
 664              		.loc 2 141 0
 665 009c 184B     		ldr	r3, .L22+4
 666 009e 1800     		movs	r0, r3
 667 00a0 FFF7FEFF 		bl	puts
 142:ak_aes_crypto.c ****     c_print(encrypted_data, plain_data_size);
 668              		.loc 2 142 0
 669 00a4 3B6C     		ldr	r3, [r7, #64]
 670 00a6 7A6A     		ldr	r2, [r7, #36]
 671 00a8 1100     		movs	r1, r2
 672 00aa 1800     		movs	r0, r3
 673 00ac FFF7FEFF 		bl	c_print
 143:ak_aes_crypto.c ****     
 144:ak_aes_crypto.c ****     // copy tag first
 145:ak_aes_crypto.c ****     memcpy(package, tag, TAG_SIZE);
 674              		.loc 2 145 0
 675 00b0 3A6A     		ldr	r2, [r7, #32]
 676 00b2 1023     		movs	r3, #16
 677 00b4 2021     		movs	r1, #32
 678 00b6 8C46     		mov	ip, r1
 679 00b8 BC44     		add	ip, ip, r7
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 17


 680 00ba 6344     		add	r3, r3, ip
 681 00bc 1000     		movs	r0, r2
 682 00be 1900     		movs	r1, r3
 683 00c0 1023     		movs	r3, #16
 684 00c2 1A00     		movs	r2, r3
 685 00c4 FFF7FEFF 		bl	memcpy
 146:ak_aes_crypto.c ****     // then message
 147:ak_aes_crypto.c ****     memcpy(package + TAG_SIZE, encrypted_data, plain_data_size);
 686              		.loc 2 147 0
 687 00c8 3B6A     		ldr	r3, [r7, #32]
 688 00ca 1033     		adds	r3, r3, #16
 689 00cc 396C     		ldr	r1, [r7, #64]
 690 00ce 7A6A     		ldr	r2, [r7, #36]
 691 00d0 1800     		movs	r0, r3
 692 00d2 FFF7FEFF 		bl	memcpy
 148:ak_aes_crypto.c ****     
 149:ak_aes_crypto.c ****     printf("package = \r\n");
 693              		.loc 2 149 0
 694 00d6 0B4B     		ldr	r3, .L22+8
 695 00d8 1800     		movs	r0, r3
 696 00da FFF7FEFF 		bl	puts
 150:ak_aes_crypto.c ****     c_print(package, TAG_SIZE + plain_data_size);
 697              		.loc 2 150 0
 698 00de 7B6A     		ldr	r3, [r7, #36]
 699 00e0 1033     		adds	r3, r3, #16
 700 00e2 1A00     		movs	r2, r3
 701 00e4 3B6A     		ldr	r3, [r7, #32]
 702 00e6 1100     		movs	r1, r2
 703 00e8 1800     		movs	r0, r3
 704 00ea FFF7FEFF 		bl	c_print
 705 00ee 7B68     		ldr	r3, [r7, #4]
 706 00f0 9D46     		mov	sp, r3
 151:ak_aes_crypto.c **** }
 707              		.loc 2 151 0
 708 00f2 C046     		nop
 709 00f4 BD46     		mov	sp, r7
 710 00f6 13B0     		add	sp, sp, #76
 711              		@ sp needed
 712 00f8 F0BD     		pop	{r4, r5, r6, r7, pc}
 713              	.L23:
 714 00fa C046     		.align	2
 715              	.L22:
 716 00fc 38000000 		.word	.LC15
 717 0100 40000000 		.word	.LC17
 718 0104 58000000 		.word	.LC19
 719              		.cfi_endproc
 720              	.LFE9:
 721              		.size	ak_aes_encrypt_and_pack, .-ak_aes_encrypt_and_pack
 722              		.section	.text.ak_aes_unpack_and_decrypt,"ax",%progbits
 723              		.align	2
 724              		.global	ak_aes_unpack_and_decrypt
 725              		.code	16
 726              		.thumb_func
 727              		.type	ak_aes_unpack_and_decrypt, %function
 728              	ak_aes_unpack_and_decrypt:
 729              	.LFB10:
 152:ak_aes_crypto.c **** 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 18


 153:ak_aes_crypto.c **** int ak_aes_unpack_and_decrypt(ak_aes_context *ctx,
 154:ak_aes_crypto.c ****                               const uint8_t *package, size_t package_size,
 155:ak_aes_crypto.c ****                               uint8_t *plain_data) {
 730              		.loc 2 155 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 80
 733              		@ frame_needed = 1, uses_anonymous_args = 0
 734 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 735              		.cfi_def_cfa_offset 20
 736              		.cfi_offset 4, -20
 737              		.cfi_offset 5, -16
 738              		.cfi_offset 6, -12
 739              		.cfi_offset 7, -8
 740              		.cfi_offset 14, -4
 741 0002 97B0     		sub	sp, sp, #92
 742              		.cfi_def_cfa_offset 112
 743 0004 02AF     		add	r7, sp, #8
 744              		.cfi_def_cfa 7, 104
 745 0006 F862     		str	r0, [r7, #44]
 746 0008 B962     		str	r1, [r7, #40]
 747 000a 7A62     		str	r2, [r7, #36]
 748 000c 3B62     		str	r3, [r7, #32]
 749              		.loc 2 155 0
 750 000e 6B46     		mov	r3, sp
 751 0010 7B60     		str	r3, [r7, #4]
 156:ak_aes_crypto.c ****     size_t encrypted_data_size = package_size - TAG_SIZE;
 752              		.loc 2 156 0
 753 0012 7B6A     		ldr	r3, [r7, #36]
 754 0014 103B     		subs	r3, r3, #16
 755 0016 FB64     		str	r3, [r7, #76]
 157:ak_aes_crypto.c ****     uint8_t encrypted_data[encrypted_data_size], tag[TAG_SIZE];
 756              		.loc 2 157 0
 757 0018 FB6C     		ldr	r3, [r7, #76]
 758 001a 1A00     		movs	r2, r3
 759 001c 013A     		subs	r2, r2, #1
 760 001e BA64     		str	r2, [r7, #72]
 761 0020 3B61     		str	r3, [r7, #16]
 762 0022 0022     		movs	r2, #0
 763 0024 7A61     		str	r2, [r7, #20]
 764 0026 3869     		ldr	r0, [r7, #16]
 765 0028 7969     		ldr	r1, [r7, #20]
 766 002a 0200     		movs	r2, r0
 767 002c 520F     		lsrs	r2, r2, #29
 768 002e 0E00     		movs	r6, r1
 769 0030 F600     		lsls	r6, r6, #3
 770 0032 FE61     		str	r6, [r7, #28]
 771 0034 FE69     		ldr	r6, [r7, #28]
 772 0036 1643     		orrs	r6, r2
 773 0038 FE61     		str	r6, [r7, #28]
 774 003a 0200     		movs	r2, r0
 775 003c D200     		lsls	r2, r2, #3
 776 003e BA61     		str	r2, [r7, #24]
 777 0040 BB60     		str	r3, [r7, #8]
 778 0042 0022     		movs	r2, #0
 779 0044 FA60     		str	r2, [r7, #12]
 780 0046 B868     		ldr	r0, [r7, #8]
 781 0048 F968     		ldr	r1, [r7, #12]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 19


 782 004a 0200     		movs	r2, r0
 783 004c 520F     		lsrs	r2, r2, #29
 784 004e 0E00     		movs	r6, r1
 785 0050 F500     		lsls	r5, r6, #3
 786 0052 1543     		orrs	r5, r2
 787 0054 0200     		movs	r2, r0
 788 0056 D400     		lsls	r4, r2, #3
 789 0058 0733     		adds	r3, r3, #7
 790 005a DB08     		lsrs	r3, r3, #3
 791 005c DB00     		lsls	r3, r3, #3
 792 005e 6A46     		mov	r2, sp
 793 0060 D31A     		subs	r3, r2, r3
 794 0062 9D46     		mov	sp, r3
 795 0064 02AB     		add	r3, sp, #8
 796 0066 0033     		adds	r3, r3, #0
 797 0068 7B64     		str	r3, [r7, #68]
 158:ak_aes_crypto.c ****     
 159:ak_aes_crypto.c ****     printf("package = \r\n");
 798              		.loc 2 159 0
 799 006a 254B     		ldr	r3, .L26
 800 006c 1800     		movs	r0, r3
 801 006e FFF7FEFF 		bl	puts
 160:ak_aes_crypto.c ****     c_print(package, TAG_SIZE + package_size);
 802              		.loc 2 160 0
 803 0072 7B6A     		ldr	r3, [r7, #36]
 804 0074 1033     		adds	r3, r3, #16
 805 0076 1A00     		movs	r2, r3
 806 0078 BB6A     		ldr	r3, [r7, #40]
 807 007a 1100     		movs	r1, r2
 808 007c 1800     		movs	r0, r3
 809 007e FFF7FEFF 		bl	c_print
 161:ak_aes_crypto.c ****     
 162:ak_aes_crypto.c ****     // copy tag first
 163:ak_aes_crypto.c ****     memcpy(tag, package, TAG_SIZE);
 810              		.loc 2 163 0
 811 0082 1423     		movs	r3, #20
 812 0084 2022     		movs	r2, #32
 813 0086 BA18     		adds	r2, r7, r2
 814 0088 D218     		adds	r2, r2, r3
 815 008a BB6A     		ldr	r3, [r7, #40]
 816 008c 1000     		movs	r0, r2
 817 008e 1900     		movs	r1, r3
 818 0090 1023     		movs	r3, #16
 819 0092 1A00     		movs	r2, r3
 820 0094 FFF7FEFF 		bl	memcpy
 164:ak_aes_crypto.c ****     
 165:ak_aes_crypto.c ****     printf("tag = \r\n");
 821              		.loc 2 165 0
 822 0098 1A4B     		ldr	r3, .L26+4
 823 009a 1800     		movs	r0, r3
 824 009c FFF7FEFF 		bl	puts
 166:ak_aes_crypto.c ****     c_print(tag, TAG_SIZE);
 825              		.loc 2 166 0
 826 00a0 1423     		movs	r3, #20
 827 00a2 2022     		movs	r2, #32
 828 00a4 9446     		mov	ip, r2
 829 00a6 BC44     		add	ip, ip, r7
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 20


 830 00a8 6344     		add	r3, r3, ip
 831 00aa 1021     		movs	r1, #16
 832 00ac 1800     		movs	r0, r3
 833 00ae FFF7FEFF 		bl	c_print
 167:ak_aes_crypto.c ****     
 168:ak_aes_crypto.c ****     // then message
 169:ak_aes_crypto.c ****     memcpy(encrypted_data,package + TAG_SIZE, encrypted_data_size);
 834              		.loc 2 169 0
 835 00b2 786C     		ldr	r0, [r7, #68]
 836 00b4 BB6A     		ldr	r3, [r7, #40]
 837 00b6 1033     		adds	r3, r3, #16
 838 00b8 FA6C     		ldr	r2, [r7, #76]
 839 00ba 1900     		movs	r1, r3
 840 00bc FFF7FEFF 		bl	memcpy
 170:ak_aes_crypto.c ****     
 171:ak_aes_crypto.c ****     printf("encrypted message = \r\n");
 841              		.loc 2 171 0
 842 00c0 114B     		ldr	r3, .L26+8
 843 00c2 1800     		movs	r0, r3
 844 00c4 FFF7FEFF 		bl	puts
 172:ak_aes_crypto.c ****     c_print(encrypted_data, encrypted_data_size);
 845              		.loc 2 172 0
 846 00c8 7B6C     		ldr	r3, [r7, #68]
 847 00ca FA6C     		ldr	r2, [r7, #76]
 848 00cc 1100     		movs	r1, r2
 849 00ce 1800     		movs	r0, r3
 850 00d0 FFF7FEFF 		bl	c_print
 173:ak_aes_crypto.c ****     
 174:ak_aes_crypto.c ****     return ak_aes_decrypt(ctx, encrypted_data, encrypted_data_size, tag, TAG_SIZE, plain_data);
 851              		.loc 2 174 0
 852 00d4 796C     		ldr	r1, [r7, #68]
 853 00d6 1423     		movs	r3, #20
 854 00d8 2022     		movs	r2, #32
 855 00da BA18     		adds	r2, r7, r2
 856 00dc D418     		adds	r4, r2, r3
 857 00de FA6C     		ldr	r2, [r7, #76]
 858 00e0 F86A     		ldr	r0, [r7, #44]
 859 00e2 3B6A     		ldr	r3, [r7, #32]
 860 00e4 0193     		str	r3, [sp, #4]
 861 00e6 1023     		movs	r3, #16
 862 00e8 0093     		str	r3, [sp]
 863 00ea 2300     		movs	r3, r4
 864 00ec FFF7FEFF 		bl	ak_aes_decrypt
 865 00f0 0300     		movs	r3, r0
 866 00f2 7A68     		ldr	r2, [r7, #4]
 867 00f4 9546     		mov	sp, r2
 175:ak_aes_crypto.c **** }
 868              		.loc 2 175 0
 869 00f6 1800     		movs	r0, r3
 870 00f8 BD46     		mov	sp, r7
 871 00fa 15B0     		add	sp, sp, #84
 872              		@ sp needed
 873 00fc F0BD     		pop	{r4, r5, r6, r7, pc}
 874              	.L27:
 875 00fe C046     		.align	2
 876              	.L26:
 877 0100 58000000 		.word	.LC19
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 21


 878 0104 38000000 		.word	.LC15
 879 0108 40000000 		.word	.LC17
 880              		.cfi_endproc
 881              	.LFE10:
 882              		.size	ak_aes_unpack_and_decrypt, .-ak_aes_unpack_and_decrypt
 883              		.text
 884              	.Letext0:
 885              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 886              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 887              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 888              		.file 6 "prp.h"
 889              		.file 7 "aes.h"
 890              		.file 8 "ak_aes_crypto.h"
 891              		.section	.debug_info,"",%progbits
 892              	.Ldebug_info0:
 893 0000 27050000 		.4byte	0x527
 894 0004 0400     		.2byte	0x4
 895 0006 00000000 		.4byte	.Ldebug_abbrev0
 896 000a 04       		.byte	0x4
 897 000b 01       		.uleb128 0x1
 898 000c 0F000000 		.4byte	.LASF49
 899 0010 0C       		.byte	0xc
 900 0011 AA010000 		.4byte	.LASF50
 901 0015 E1020000 		.4byte	.LASF51
 902 0019 00000000 		.4byte	.Ldebug_ranges0+0
 903 001d 00000000 		.4byte	0
 904 0021 00000000 		.4byte	.Ldebug_line0
 905 0025 02       		.uleb128 0x2
 906 0026 01       		.byte	0x1
 907 0027 06       		.byte	0x6
 908 0028 79030000 		.4byte	.LASF0
 909 002c 03       		.uleb128 0x3
 910 002d 05000000 		.4byte	.LASF5
 911 0031 03       		.byte	0x3
 912 0032 1D       		.byte	0x1d
 913 0033 37000000 		.4byte	0x37
 914 0037 02       		.uleb128 0x2
 915 0038 01       		.byte	0x1
 916 0039 08       		.byte	0x8
 917 003a BA010000 		.4byte	.LASF1
 918 003e 02       		.uleb128 0x2
 919 003f 02       		.byte	0x2
 920 0040 05       		.byte	0x5
 921 0041 AC020000 		.4byte	.LASF2
 922 0045 02       		.uleb128 0x2
 923 0046 02       		.byte	0x2
 924 0047 07       		.byte	0x7
 925 0048 88010000 		.4byte	.LASF3
 926 004c 02       		.uleb128 0x2
 927 004d 04       		.byte	0x4
 928 004e 05       		.byte	0x5
 929 004f D8020000 		.4byte	.LASF4
 930 0053 03       		.uleb128 0x3
 931 0054 D6010000 		.4byte	.LASF6
 932 0058 03       		.byte	0x3
 933 0059 41       		.byte	0x41
 934 005a 5E000000 		.4byte	0x5e
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 22


 935 005e 02       		.uleb128 0x2
 936 005f 04       		.byte	0x4
 937 0060 07       		.byte	0x7
 938 0061 76010000 		.4byte	.LASF7
 939 0065 02       		.uleb128 0x2
 940 0066 08       		.byte	0x8
 941 0067 05       		.byte	0x5
 942 0068 76020000 		.4byte	.LASF8
 943 006c 02       		.uleb128 0x2
 944 006d 08       		.byte	0x8
 945 006e 07       		.byte	0x7
 946 006f 1F020000 		.4byte	.LASF9
 947 0073 04       		.uleb128 0x4
 948 0074 04       		.byte	0x4
 949 0075 05       		.byte	0x5
 950 0076 696E7400 		.ascii	"int\000"
 951 007a 02       		.uleb128 0x2
 952 007b 04       		.byte	0x4
 953 007c 07       		.byte	0x7
 954 007d 12020000 		.4byte	.LASF10
 955 0081 03       		.uleb128 0x3
 956 0082 9B010000 		.4byte	.LASF11
 957 0086 04       		.byte	0x4
 958 0087 D8       		.byte	0xd8
 959 0088 7A000000 		.4byte	0x7a
 960 008c 02       		.uleb128 0x2
 961 008d 08       		.byte	0x8
 962 008e 04       		.byte	0x4
 963 008f 6D030000 		.4byte	.LASF12
 964 0093 05       		.uleb128 0x5
 965 0094 04       		.byte	0x4
 966 0095 02       		.uleb128 0x2
 967 0096 04       		.byte	0x4
 968 0097 07       		.byte	0x7
 969 0098 6D020000 		.4byte	.LASF13
 970 009c 02       		.uleb128 0x2
 971 009d 01       		.byte	0x1
 972 009e 08       		.byte	0x8
 973 009f 93020000 		.4byte	.LASF14
 974 00a3 03       		.uleb128 0x3
 975 00a4 36020000 		.4byte	.LASF15
 976 00a8 05       		.byte	0x5
 977 00a9 18       		.byte	0x18
 978 00aa 2C000000 		.4byte	0x2c
 979 00ae 03       		.uleb128 0x3
 980 00af CF020000 		.4byte	.LASF16
 981 00b3 05       		.byte	0x5
 982 00b4 30       		.byte	0x30
 983 00b5 53000000 		.4byte	0x53
 984 00b9 03       		.uleb128 0x3
 985 00ba F9010000 		.4byte	.LASF17
 986 00be 06       		.byte	0x6
 987 00bf 26       		.byte	0x26
 988 00c0 C4000000 		.4byte	0xc4
 989 00c4 06       		.uleb128 0x6
 990 00c5 04       		.byte	0x4
 991 00c6 CA000000 		.4byte	0xca
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 23


 992 00ca 07       		.uleb128 0x7
 993 00cb DF000000 		.4byte	0xdf
 994 00cf 08       		.uleb128 0x8
 995 00d0 93000000 		.4byte	0x93
 996 00d4 08       		.uleb128 0x8
 997 00d5 DF000000 		.4byte	0xdf
 998 00d9 08       		.uleb128 0x8
 999 00da EA000000 		.4byte	0xea
 1000 00de 00       		.byte	0
 1001 00df 06       		.uleb128 0x6
 1002 00e0 04       		.byte	0x4
 1003 00e1 E5000000 		.4byte	0xe5
 1004 00e5 09       		.uleb128 0x9
 1005 00e6 A3000000 		.4byte	0xa3
 1006 00ea 06       		.uleb128 0x6
 1007 00eb 04       		.byte	0x4
 1008 00ec A3000000 		.4byte	0xa3
 1009 00f0 0A       		.uleb128 0xa
 1010 00f1 0C       		.byte	0xc
 1011 00f2 06       		.byte	0x6
 1012 00f3 34       		.byte	0x34
 1013 00f4 1D010000 		.4byte	0x11d
 1014 00f8 0B       		.uleb128 0xb
 1015 00f9 F1010000 		.4byte	.LASF18
 1016 00fd 06       		.byte	0x6
 1017 00fe 36       		.byte	0x36
 1018 00ff 81000000 		.4byte	0x81
 1019 0103 00       		.byte	0
 1020 0104 0B       		.uleb128 0xb
 1021 0105 CC000000 		.4byte	.LASF19
 1022 0109 06       		.byte	0x6
 1023 010a 37       		.byte	0x37
 1024 010b B9000000 		.4byte	0xb9
 1025 010f 04       		.byte	0x4
 1026 0110 0B       		.uleb128 0xb
 1027 0111 1A010000 		.4byte	.LASF20
 1028 0115 06       		.byte	0x6
 1029 0116 38       		.byte	0x38
 1030 0117 B9000000 		.4byte	0xb9
 1031 011b 08       		.byte	0x8
 1032 011c 00       		.byte	0
 1033 011d 03       		.uleb128 0x3
 1034 011e 6F010000 		.4byte	.LASF21
 1035 0122 06       		.byte	0x6
 1036 0123 39       		.byte	0x39
 1037 0124 F0000000 		.4byte	0xf0
 1038 0128 0A       		.uleb128 0xa
 1039 0129 F4       		.byte	0xf4
 1040 012a 07       		.byte	0x7
 1041 012b 5F       		.byte	0x5f
 1042 012c 48010000 		.4byte	0x148
 1043 0130 0B       		.uleb128 0xb
 1044 0131 C8020000 		.4byte	.LASF22
 1045 0135 07       		.byte	0x7
 1046 0136 61       		.byte	0x61
 1047 0137 AE000000 		.4byte	0xae
 1048 013b 00       		.byte	0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 24


 1049 013c 0C       		.uleb128 0xc
 1050 013d 6B7300   		.ascii	"ks\000"
 1051 0140 07       		.byte	0x7
 1052 0141 62       		.byte	0x62
 1053 0142 48010000 		.4byte	0x148
 1054 0146 04       		.byte	0x4
 1055 0147 00       		.byte	0
 1056 0148 0D       		.uleb128 0xd
 1057 0149 AE000000 		.4byte	0xae
 1058 014d 58010000 		.4byte	0x158
 1059 0151 0E       		.uleb128 0xe
 1060 0152 95000000 		.4byte	0x95
 1061 0156 3B       		.byte	0x3b
 1062 0157 00       		.byte	0
 1063 0158 03       		.uleb128 0x3
 1064 0159 F8000000 		.4byte	.LASF23
 1065 015d 07       		.byte	0x7
 1066 015e 63       		.byte	0x63
 1067 015f 28010000 		.4byte	0x128
 1068 0163 0A       		.uleb128 0xa
 1069 0164 18       		.byte	0x18
 1070 0165 08       		.byte	0x8
 1071 0166 16       		.byte	0x16
 1072 0167 90010000 		.4byte	0x190
 1073 016b 0B       		.uleb128 0xb
 1074 016c 4C010000 		.4byte	.LASF24
 1075 0170 08       		.byte	0x8
 1076 0171 18       		.byte	0x18
 1077 0172 AE000000 		.4byte	0xae
 1078 0176 00       		.byte	0
 1079 0177 0B       		.uleb128 0xb
 1080 0178 C8010000 		.4byte	.LASF25
 1081 017c 08       		.byte	0x8
 1082 017d 19       		.byte	0x19
 1083 017e 90010000 		.4byte	0x190
 1084 0182 04       		.byte	0x4
 1085 0183 0B       		.uleb128 0xb
 1086 0184 CE010000 		.4byte	.LASF26
 1087 0188 08       		.byte	0x8
 1088 0189 1A       		.byte	0x1a
 1089 018a A0010000 		.4byte	0x1a0
 1090 018e 14       		.byte	0x14
 1091 018f 00       		.byte	0
 1092 0190 0D       		.uleb128 0xd
 1093 0191 A3000000 		.4byte	0xa3
 1094 0195 A0010000 		.4byte	0x1a0
 1095 0199 0E       		.uleb128 0xe
 1096 019a 95000000 		.4byte	0x95
 1097 019e 0C       		.byte	0xc
 1098 019f 00       		.byte	0
 1099 01a0 06       		.uleb128 0x6
 1100 01a1 04       		.byte	0x4
 1101 01a2 58010000 		.4byte	0x158
 1102 01a6 03       		.uleb128 0x3
 1103 01a7 84020000 		.4byte	.LASF27
 1104 01ab 08       		.byte	0x8
 1105 01ac 1B       		.byte	0x1b
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 25


 1106 01ad 63010000 		.4byte	0x163
 1107 01b1 09       		.uleb128 0x9
 1108 01b2 1D010000 		.4byte	0x11d
 1109 01b6 0D       		.uleb128 0xd
 1110 01b7 A3000000 		.4byte	0xa3
 1111 01bb C6010000 		.4byte	0x1c6
 1112 01bf 0E       		.uleb128 0xe
 1113 01c0 95000000 		.4byte	0x95
 1114 01c4 0F       		.byte	0xf
 1115 01c5 00       		.byte	0
 1116 01c6 0F       		.uleb128 0xf
 1117 01c7 63020000 		.4byte	.LASF52
 1118 01cb 01       		.byte	0x1
 1119 01cc 3D       		.byte	0x3d
 1120 01cd 00000000 		.4byte	.LFB1
 1121 01d1 24000000 		.4byte	.LFE1-.LFB1
 1122 01d5 01       		.uleb128 0x1
 1123 01d6 9C       		.byte	0x9c
 1124 01d7 F6010000 		.4byte	0x1f6
 1125 01db 10       		.uleb128 0x10
 1126 01dc 7600     		.ascii	"v\000"
 1127 01de 01       		.byte	0x1
 1128 01df 3D       		.byte	0x3d
 1129 01e0 F6010000 		.4byte	0x1f6
 1130 01e4 02       		.uleb128 0x2
 1131 01e5 91       		.byte	0x91
 1132 01e6 74       		.sleb128 -12
 1133 01e7 10       		.uleb128 0x10
 1134 01e8 6C656E00 		.ascii	"len\000"
 1135 01ec 01       		.byte	0x1
 1136 01ed 3D       		.byte	0x3d
 1137 01ee 81000000 		.4byte	0x81
 1138 01f2 02       		.uleb128 0x2
 1139 01f3 91       		.byte	0x91
 1140 01f4 70       		.sleb128 -16
 1141 01f5 00       		.byte	0
 1142 01f6 06       		.uleb128 0x6
 1143 01f7 04       		.byte	0x4
 1144 01f8 FC010000 		.4byte	0x1fc
 1145 01fc 11       		.uleb128 0x11
 1146 01fd 12       		.uleb128 0x12
 1147 01fe E0000000 		.4byte	.LASF28
 1148 0202 02       		.byte	0x2
 1149 0203 10       		.byte	0x10
 1150 0204 00000000 		.4byte	.LFB3
 1151 0208 44000000 		.4byte	.LFE3-.LFB3
 1152 020c 01       		.uleb128 0x1
 1153 020d 9C       		.byte	0x9c
 1154 020e 3D020000 		.4byte	0x23d
 1155 0212 13       		.uleb128 0x13
 1156 0213 C8010000 		.4byte	.LASF25
 1157 0217 02       		.byte	0x2
 1158 0218 10       		.byte	0x10
 1159 0219 EA000000 		.4byte	0xea
 1160 021d 02       		.uleb128 0x2
 1161 021e 91       		.byte	0x91
 1162 021f 6C       		.sleb128 -20
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 26


 1163 0220 13       		.uleb128 0x13
 1164 0221 4C010000 		.4byte	.LASF24
 1165 0225 02       		.byte	0x2
 1166 0226 10       		.byte	0x10
 1167 0227 AE000000 		.4byte	0xae
 1168 022b 02       		.uleb128 0x2
 1169 022c 91       		.byte	0x91
 1170 022d 68       		.sleb128 -24
 1171 022e 14       		.uleb128 0x14
 1172 022f BE020000 		.4byte	.LASF31
 1173 0233 02       		.byte	0x2
 1174 0234 11       		.byte	0x11
 1175 0235 3D020000 		.4byte	0x23d
 1176 0239 02       		.uleb128 0x2
 1177 023a 91       		.byte	0x91
 1178 023b 74       		.sleb128 -12
 1179 023c 00       		.byte	0
 1180 023d 0D       		.uleb128 0xd
 1181 023e A3000000 		.4byte	0xa3
 1182 0242 4D020000 		.4byte	0x24d
 1183 0246 0E       		.uleb128 0xe
 1184 0247 95000000 		.4byte	0x95
 1185 024b 03       		.byte	0x3
 1186 024c 00       		.byte	0
 1187 024d 12       		.uleb128 0x12
 1188 024e B6020000 		.4byte	.LASF29
 1189 0252 02       		.byte	0x2
 1190 0253 1A       		.byte	0x1a
 1191 0254 00000000 		.4byte	.LFB4
 1192 0258 4C000000 		.4byte	.LFE4-.LFB4
 1193 025c 01       		.uleb128 0x1
 1194 025d 9C       		.byte	0x9c
 1195 025e 95020000 		.4byte	0x295
 1196 0262 10       		.uleb128 0x10
 1197 0263 766C6900 		.ascii	"vli\000"
 1198 0267 02       		.byte	0x2
 1199 0268 1A       		.byte	0x1a
 1200 0269 EA000000 		.4byte	0xea
 1201 026d 02       		.uleb128 0x2
 1202 026e 91       		.byte	0x91
 1203 026f 6C       		.sleb128 -20
 1204 0270 13       		.uleb128 0x13
 1205 0271 6A010000 		.4byte	.LASF30
 1206 0275 02       		.byte	0x2
 1207 0276 1A       		.byte	0x1a
 1208 0277 7A000000 		.4byte	0x7a
 1209 027b 02       		.uleb128 0x2
 1210 027c 91       		.byte	0x91
 1211 027d 68       		.sleb128 -24
 1212 027e 15       		.uleb128 0x15
 1213 027f 0E000000 		.4byte	.LBB2
 1214 0283 28000000 		.4byte	.LBE2-.LBB2
 1215 0287 16       		.uleb128 0x16
 1216 0288 6900     		.ascii	"i\000"
 1217 028a 02       		.byte	0x2
 1218 028b 1C       		.byte	0x1c
 1219 028c 7A000000 		.4byte	0x7a
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 27


 1220 0290 02       		.uleb128 0x2
 1221 0291 91       		.byte	0x91
 1222 0292 74       		.sleb128 -12
 1223 0293 00       		.byte	0
 1224 0294 00       		.byte	0
 1225 0295 12       		.uleb128 0x12
 1226 0296 D4000000 		.4byte	.LASF32
 1227 029a 02       		.byte	0x2
 1228 029b 24       		.byte	0x24
 1229 029c 00000000 		.4byte	.LFB5
 1230 02a0 B0000000 		.4byte	.LFE5-.LFB5
 1231 02a4 01       		.uleb128 0x1
 1232 02a5 9C       		.byte	0x9c
 1233 02a6 F1020000 		.4byte	0x2f1
 1234 02aa 10       		.uleb128 0x10
 1235 02ab 63747800 		.ascii	"ctx\000"
 1236 02af 02       		.byte	0x2
 1237 02b0 24       		.byte	0x24
 1238 02b1 F1020000 		.4byte	0x2f1
 1239 02b5 02       		.uleb128 0x2
 1240 02b6 91       		.byte	0x91
 1241 02b7 5C       		.sleb128 -36
 1242 02b8 13       		.uleb128 0x13
 1243 02b9 22010000 		.4byte	.LASF33
 1244 02bd 02       		.byte	0x2
 1245 02be 25       		.byte	0x25
 1246 02bf DF000000 		.4byte	0xdf
 1247 02c3 02       		.uleb128 0x2
 1248 02c4 91       		.byte	0x91
 1249 02c5 58       		.sleb128 -40
 1250 02c6 13       		.uleb128 0x13
 1251 02c7 07010000 		.4byte	.LASF34
 1252 02cb 02       		.byte	0x2
 1253 02cc 26       		.byte	0x26
 1254 02cd 81000000 		.4byte	0x81
 1255 02d1 02       		.uleb128 0x2
 1256 02d2 91       		.byte	0x91
 1257 02d3 54       		.sleb128 -44
 1258 02d4 14       		.uleb128 0x14
 1259 02d5 06020000 		.4byte	.LASF35
 1260 02d9 02       		.byte	0x2
 1261 02da 38       		.byte	0x38
 1262 02db A0010000 		.4byte	0x1a0
 1263 02df 02       		.uleb128 0x2
 1264 02e0 91       		.byte	0x91
 1265 02e1 74       		.sleb128 -12
 1266 02e2 14       		.uleb128 0x14
 1267 02e3 4D020000 		.4byte	.LASF36
 1268 02e7 02       		.byte	0x2
 1269 02e8 3B       		.byte	0x3b
 1270 02e9 B6010000 		.4byte	0x1b6
 1271 02ed 02       		.uleb128 0x2
 1272 02ee 91       		.byte	0x91
 1273 02ef 64       		.sleb128 -28
 1274 02f0 00       		.byte	0
 1275 02f1 06       		.uleb128 0x6
 1276 02f2 04       		.byte	0x4
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 28


 1277 02f3 A6010000 		.4byte	0x1a6
 1278 02f7 12       		.uleb128 0x12
 1279 02f8 85030000 		.4byte	.LASF37
 1280 02fc 02       		.byte	0x2
 1281 02fd 46       		.byte	0x46
 1282 02fe 00000000 		.4byte	.LFB6
 1283 0302 2A000000 		.4byte	.LFE6-.LFB6
 1284 0306 01       		.uleb128 0x1
 1285 0307 9C       		.byte	0x9c
 1286 0308 1B030000 		.4byte	0x31b
 1287 030c 10       		.uleb128 0x10
 1288 030d 63747800 		.ascii	"ctx\000"
 1289 0311 02       		.byte	0x2
 1290 0312 46       		.byte	0x46
 1291 0313 F1020000 		.4byte	0x2f1
 1292 0317 02       		.uleb128 0x2
 1293 0318 91       		.byte	0x91
 1294 0319 74       		.sleb128 -12
 1295 031a 00       		.byte	0
 1296 031b 12       		.uleb128 0x12
 1297 031c 54010000 		.4byte	.LASF38
 1298 0320 02       		.byte	0x2
 1299 0321 4F       		.byte	0x4f
 1300 0322 00000000 		.4byte	.LFB7
 1301 0326 90000000 		.4byte	.LFE7-.LFB7
 1302 032a 01       		.uleb128 0x1
 1303 032b 9C       		.byte	0x9c
 1304 032c 85030000 		.4byte	0x385
 1305 0330 10       		.uleb128 0x10
 1306 0331 63747800 		.ascii	"ctx\000"
 1307 0335 02       		.byte	0x2
 1308 0336 4F       		.byte	0x4f
 1309 0337 F1020000 		.4byte	0x2f1
 1310 033b 02       		.uleb128 0x2
 1311 033c 91       		.byte	0x91
 1312 033d 6C       		.sleb128 -20
 1313 033e 13       		.uleb128 0x13
 1314 033f 58020000 		.4byte	.LASF39
 1315 0343 02       		.byte	0x2
 1316 0344 50       		.byte	0x50
 1317 0345 DF000000 		.4byte	0xdf
 1318 0349 02       		.uleb128 0x2
 1319 034a 91       		.byte	0x91
 1320 034b 68       		.sleb128 -24
 1321 034c 13       		.uleb128 0x13
 1322 034d E1010000 		.4byte	.LASF40
 1323 0351 02       		.byte	0x2
 1324 0352 50       		.byte	0x50
 1325 0353 81000000 		.4byte	0x81
 1326 0357 02       		.uleb128 0x2
 1327 0358 91       		.byte	0x91
 1328 0359 64       		.sleb128 -28
 1329 035a 13       		.uleb128 0x13
 1330 035b 3E020000 		.4byte	.LASF41
 1331 035f 02       		.byte	0x2
 1332 0360 51       		.byte	0x51
 1333 0361 EA000000 		.4byte	0xea
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 29


 1334 0365 02       		.uleb128 0x2
 1335 0366 91       		.byte	0x91
 1336 0367 60       		.sleb128 -32
 1337 0368 10       		.uleb128 0x10
 1338 0369 74616700 		.ascii	"tag\000"
 1339 036d 02       		.byte	0x2
 1340 036e 52       		.byte	0x52
 1341 036f EA000000 		.4byte	0xea
 1342 0373 02       		.uleb128 0x2
 1343 0374 91       		.byte	0x91
 1344 0375 00       		.sleb128 0
 1345 0376 13       		.uleb128 0x13
 1346 0377 00000000 		.4byte	.LASF42
 1347 037b 02       		.byte	0x2
 1348 037c 52       		.byte	0x52
 1349 037d 81000000 		.4byte	0x81
 1350 0381 02       		.uleb128 0x2
 1351 0382 91       		.byte	0x91
 1352 0383 04       		.sleb128 4
 1353 0384 00       		.byte	0
 1354 0385 17       		.uleb128 0x17
 1355 0386 3D010000 		.4byte	.LASF47
 1356 038a 02       		.byte	0x2
 1357 038b 67       		.byte	0x67
 1358 038c 73000000 		.4byte	0x73
 1359 0390 00000000 		.4byte	.LFB8
 1360 0394 98000000 		.4byte	.LFE8-.LFB8
 1361 0398 01       		.uleb128 0x1
 1362 0399 9C       		.byte	0x9c
 1363 039a 01040000 		.4byte	0x401
 1364 039e 10       		.uleb128 0x10
 1365 039f 63747800 		.ascii	"ctx\000"
 1366 03a3 02       		.byte	0x2
 1367 03a4 67       		.byte	0x67
 1368 03a5 F1020000 		.4byte	0x2f1
 1369 03a9 02       		.uleb128 0x2
 1370 03aa 91       		.byte	0x91
 1371 03ab 64       		.sleb128 -28
 1372 03ac 13       		.uleb128 0x13
 1373 03ad 3E020000 		.4byte	.LASF41
 1374 03b1 02       		.byte	0x2
 1375 03b2 68       		.byte	0x68
 1376 03b3 DF000000 		.4byte	0xdf
 1377 03b7 02       		.uleb128 0x2
 1378 03b8 91       		.byte	0x91
 1379 03b9 60       		.sleb128 -32
 1380 03ba 13       		.uleb128 0x13
 1381 03bb 98020000 		.4byte	.LASF43
 1382 03bf 02       		.byte	0x2
 1383 03c0 68       		.byte	0x68
 1384 03c1 81000000 		.4byte	0x81
 1385 03c5 02       		.uleb128 0x2
 1386 03c6 91       		.byte	0x91
 1387 03c7 5C       		.sleb128 -36
 1388 03c8 10       		.uleb128 0x10
 1389 03c9 74616700 		.ascii	"tag\000"
 1390 03cd 02       		.byte	0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 30


 1391 03ce 69       		.byte	0x69
 1392 03cf DF000000 		.4byte	0xdf
 1393 03d3 02       		.uleb128 0x2
 1394 03d4 91       		.byte	0x91
 1395 03d5 58       		.sleb128 -40
 1396 03d6 13       		.uleb128 0x13
 1397 03d7 00000000 		.4byte	.LASF42
 1398 03db 02       		.byte	0x2
 1399 03dc 69       		.byte	0x69
 1400 03dd 81000000 		.4byte	0x81
 1401 03e1 02       		.uleb128 0x2
 1402 03e2 91       		.byte	0x91
 1403 03e3 00       		.sleb128 0
 1404 03e4 13       		.uleb128 0x13
 1405 03e5 58020000 		.4byte	.LASF39
 1406 03e9 02       		.byte	0x2
 1407 03ea 6A       		.byte	0x6a
 1408 03eb EA000000 		.4byte	0xea
 1409 03ef 02       		.uleb128 0x2
 1410 03f0 91       		.byte	0x91
 1411 03f1 04       		.sleb128 4
 1412 03f2 16       		.uleb128 0x16
 1413 03f3 65727200 		.ascii	"err\000"
 1414 03f7 02       		.byte	0x2
 1415 03f8 72       		.byte	0x72
 1416 03f9 73000000 		.4byte	0x73
 1417 03fd 02       		.uleb128 0x2
 1418 03fe 91       		.byte	0x91
 1419 03ff 6C       		.sleb128 -20
 1420 0400 00       		.byte	0
 1421 0401 12       		.uleb128 0x12
 1422 0402 93030000 		.4byte	.LASF44
 1423 0406 02       		.byte	0x2
 1424 0407 82       		.byte	0x82
 1425 0408 00000000 		.4byte	.LFB9
 1426 040c 08010000 		.4byte	.LFE9-.LFB9
 1427 0410 01       		.uleb128 0x1
 1428 0411 9C       		.byte	0x9c
 1429 0412 7A040000 		.4byte	0x47a
 1430 0416 10       		.uleb128 0x10
 1431 0417 63747800 		.ascii	"ctx\000"
 1432 041b 02       		.byte	0x2
 1433 041c 82       		.byte	0x82
 1434 041d F1020000 		.4byte	0x2f1
 1435 0421 02       		.uleb128 0x2
 1436 0422 91       		.byte	0x91
 1437 0423 4C       		.sleb128 -52
 1438 0424 13       		.uleb128 0x13
 1439 0425 58020000 		.4byte	.LASF39
 1440 0429 02       		.byte	0x2
 1441 042a 83       		.byte	0x83
 1442 042b DF000000 		.4byte	0xdf
 1443 042f 02       		.uleb128 0x2
 1444 0430 91       		.byte	0x91
 1445 0431 48       		.sleb128 -56
 1446 0432 13       		.uleb128 0x13
 1447 0433 E1010000 		.4byte	.LASF40
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 31


 1448 0437 02       		.byte	0x2
 1449 0438 83       		.byte	0x83
 1450 0439 81000000 		.4byte	0x81
 1451 043d 02       		.uleb128 0x2
 1452 043e 91       		.byte	0x91
 1453 043f 44       		.sleb128 -60
 1454 0440 13       		.uleb128 0x13
 1455 0441 A2010000 		.4byte	.LASF45
 1456 0445 02       		.byte	0x2
 1457 0446 84       		.byte	0x84
 1458 0447 EA000000 		.4byte	0xea
 1459 044b 02       		.uleb128 0x2
 1460 044c 91       		.byte	0x91
 1461 044d 40       		.sleb128 -64
 1462 044e 13       		.uleb128 0x13
 1463 044f 30010000 		.4byte	.LASF46
 1464 0453 02       		.byte	0x2
 1465 0454 84       		.byte	0x84
 1466 0455 EA000000 		.4byte	0xea
 1467 0459 02       		.uleb128 0x2
 1468 045a 91       		.byte	0x91
 1469 045b 00       		.sleb128 0
 1470 045c 14       		.uleb128 0x14
 1471 045d 3E020000 		.4byte	.LASF41
 1472 0461 02       		.byte	0x2
 1473 0462 85       		.byte	0x85
 1474 0463 7A040000 		.4byte	0x47a
 1475 0467 03       		.uleb128 0x3
 1476 0468 91       		.byte	0x91
 1477 0469 60       		.sleb128 -32
 1478 046a 06       		.byte	0x6
 1479 046b 16       		.uleb128 0x16
 1480 046c 74616700 		.ascii	"tag\000"
 1481 0470 02       		.byte	0x2
 1482 0471 85       		.byte	0x85
 1483 0472 B6010000 		.4byte	0x1b6
 1484 0476 02       		.uleb128 0x2
 1485 0477 91       		.byte	0x91
 1486 0478 50       		.sleb128 -48
 1487 0479 00       		.byte	0
 1488 047a 0D       		.uleb128 0xd
 1489 047b A3000000 		.4byte	0xa3
 1490 047f 8D040000 		.4byte	0x48d
 1491 0483 18       		.uleb128 0x18
 1492 0484 95000000 		.4byte	0x95
 1493 0488 03       		.uleb128 0x3
 1494 0489 91       		.byte	0x91
 1495 048a 64       		.sleb128 -28
 1496 048b 06       		.byte	0x6
 1497 048c 00       		.byte	0
 1498 048d 17       		.uleb128 0x17
 1499 048e B2000000 		.4byte	.LASF48
 1500 0492 02       		.byte	0x2
 1501 0493 99       		.byte	0x99
 1502 0494 73000000 		.4byte	0x73
 1503 0498 00000000 		.4byte	.LFB10
 1504 049c 0C010000 		.4byte	.LFE10-.LFB10
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 32


 1505 04a0 01       		.uleb128 0x1
 1506 04a1 9C       		.byte	0x9c
 1507 04a2 0C050000 		.4byte	0x50c
 1508 04a6 10       		.uleb128 0x10
 1509 04a7 63747800 		.ascii	"ctx\000"
 1510 04ab 02       		.byte	0x2
 1511 04ac 99       		.byte	0x99
 1512 04ad F1020000 		.4byte	0x2f1
 1513 04b1 02       		.uleb128 0x2
 1514 04b2 91       		.byte	0x91
 1515 04b3 44       		.sleb128 -60
 1516 04b4 13       		.uleb128 0x13
 1517 04b5 A2010000 		.4byte	.LASF45
 1518 04b9 02       		.byte	0x2
 1519 04ba 9A       		.byte	0x9a
 1520 04bb DF000000 		.4byte	0xdf
 1521 04bf 02       		.uleb128 0x2
 1522 04c0 91       		.byte	0x91
 1523 04c1 40       		.sleb128 -64
 1524 04c2 13       		.uleb128 0x13
 1525 04c3 30010000 		.4byte	.LASF46
 1526 04c7 02       		.byte	0x2
 1527 04c8 9A       		.byte	0x9a
 1528 04c9 81000000 		.4byte	0x81
 1529 04cd 03       		.uleb128 0x3
 1530 04ce 91       		.byte	0x91
 1531 04cf BC7F     		.sleb128 -68
 1532 04d1 13       		.uleb128 0x13
 1533 04d2 58020000 		.4byte	.LASF39
 1534 04d6 02       		.byte	0x2
 1535 04d7 9B       		.byte	0x9b
 1536 04d8 EA000000 		.4byte	0xea
 1537 04dc 03       		.uleb128 0x3
 1538 04dd 91       		.byte	0x91
 1539 04de B87F     		.sleb128 -72
 1540 04e0 14       		.uleb128 0x14
 1541 04e1 98020000 		.4byte	.LASF43
 1542 04e5 02       		.byte	0x2
 1543 04e6 9C       		.byte	0x9c
 1544 04e7 81000000 		.4byte	0x81
 1545 04eb 02       		.uleb128 0x2
 1546 04ec 91       		.byte	0x91
 1547 04ed 64       		.sleb128 -28
 1548 04ee 14       		.uleb128 0x14
 1549 04ef 3E020000 		.4byte	.LASF41
 1550 04f3 02       		.byte	0x2
 1551 04f4 9D       		.byte	0x9d
 1552 04f5 0C050000 		.4byte	0x50c
 1553 04f9 03       		.uleb128 0x3
 1554 04fa 91       		.byte	0x91
 1555 04fb 5C       		.sleb128 -36
 1556 04fc 06       		.byte	0x6
 1557 04fd 16       		.uleb128 0x16
 1558 04fe 74616700 		.ascii	"tag\000"
 1559 0502 02       		.byte	0x2
 1560 0503 9D       		.byte	0x9d
 1561 0504 B6010000 		.4byte	0x1b6
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 33


 1562 0508 02       		.uleb128 0x2
 1563 0509 91       		.byte	0x91
 1564 050a 4C       		.sleb128 -52
 1565 050b 00       		.byte	0
 1566 050c 0D       		.uleb128 0xd
 1567 050d A3000000 		.4byte	0xa3
 1568 0511 1F050000 		.4byte	0x51f
 1569 0515 18       		.uleb128 0x18
 1570 0516 95000000 		.4byte	0x95
 1571 051a 03       		.uleb128 0x3
 1572 051b 91       		.byte	0x91
 1573 051c 60       		.sleb128 -32
 1574 051d 06       		.byte	0x6
 1575 051e 00       		.byte	0
 1576 051f 19       		.uleb128 0x19
 1577 0520 63010000 		.4byte	.LASF53
 1578 0524 07       		.byte	0x7
 1579 0525 96       		.byte	0x96
 1580 0526 B1010000 		.4byte	0x1b1
 1581 052a 00       		.byte	0
 1582              		.section	.debug_abbrev,"",%progbits
 1583              	.Ldebug_abbrev0:
 1584 0000 01       		.uleb128 0x1
 1585 0001 11       		.uleb128 0x11
 1586 0002 01       		.byte	0x1
 1587 0003 25       		.uleb128 0x25
 1588 0004 0E       		.uleb128 0xe
 1589 0005 13       		.uleb128 0x13
 1590 0006 0B       		.uleb128 0xb
 1591 0007 03       		.uleb128 0x3
 1592 0008 0E       		.uleb128 0xe
 1593 0009 1B       		.uleb128 0x1b
 1594 000a 0E       		.uleb128 0xe
 1595 000b 55       		.uleb128 0x55
 1596 000c 17       		.uleb128 0x17
 1597 000d 11       		.uleb128 0x11
 1598 000e 01       		.uleb128 0x1
 1599 000f 10       		.uleb128 0x10
 1600 0010 17       		.uleb128 0x17
 1601 0011 00       		.byte	0
 1602 0012 00       		.byte	0
 1603 0013 02       		.uleb128 0x2
 1604 0014 24       		.uleb128 0x24
 1605 0015 00       		.byte	0
 1606 0016 0B       		.uleb128 0xb
 1607 0017 0B       		.uleb128 0xb
 1608 0018 3E       		.uleb128 0x3e
 1609 0019 0B       		.uleb128 0xb
 1610 001a 03       		.uleb128 0x3
 1611 001b 0E       		.uleb128 0xe
 1612 001c 00       		.byte	0
 1613 001d 00       		.byte	0
 1614 001e 03       		.uleb128 0x3
 1615 001f 16       		.uleb128 0x16
 1616 0020 00       		.byte	0
 1617 0021 03       		.uleb128 0x3
 1618 0022 0E       		.uleb128 0xe
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 34


 1619 0023 3A       		.uleb128 0x3a
 1620 0024 0B       		.uleb128 0xb
 1621 0025 3B       		.uleb128 0x3b
 1622 0026 0B       		.uleb128 0xb
 1623 0027 49       		.uleb128 0x49
 1624 0028 13       		.uleb128 0x13
 1625 0029 00       		.byte	0
 1626 002a 00       		.byte	0
 1627 002b 04       		.uleb128 0x4
 1628 002c 24       		.uleb128 0x24
 1629 002d 00       		.byte	0
 1630 002e 0B       		.uleb128 0xb
 1631 002f 0B       		.uleb128 0xb
 1632 0030 3E       		.uleb128 0x3e
 1633 0031 0B       		.uleb128 0xb
 1634 0032 03       		.uleb128 0x3
 1635 0033 08       		.uleb128 0x8
 1636 0034 00       		.byte	0
 1637 0035 00       		.byte	0
 1638 0036 05       		.uleb128 0x5
 1639 0037 0F       		.uleb128 0xf
 1640 0038 00       		.byte	0
 1641 0039 0B       		.uleb128 0xb
 1642 003a 0B       		.uleb128 0xb
 1643 003b 00       		.byte	0
 1644 003c 00       		.byte	0
 1645 003d 06       		.uleb128 0x6
 1646 003e 0F       		.uleb128 0xf
 1647 003f 00       		.byte	0
 1648 0040 0B       		.uleb128 0xb
 1649 0041 0B       		.uleb128 0xb
 1650 0042 49       		.uleb128 0x49
 1651 0043 13       		.uleb128 0x13
 1652 0044 00       		.byte	0
 1653 0045 00       		.byte	0
 1654 0046 07       		.uleb128 0x7
 1655 0047 15       		.uleb128 0x15
 1656 0048 01       		.byte	0x1
 1657 0049 27       		.uleb128 0x27
 1658 004a 19       		.uleb128 0x19
 1659 004b 01       		.uleb128 0x1
 1660 004c 13       		.uleb128 0x13
 1661 004d 00       		.byte	0
 1662 004e 00       		.byte	0
 1663 004f 08       		.uleb128 0x8
 1664 0050 05       		.uleb128 0x5
 1665 0051 00       		.byte	0
 1666 0052 49       		.uleb128 0x49
 1667 0053 13       		.uleb128 0x13
 1668 0054 00       		.byte	0
 1669 0055 00       		.byte	0
 1670 0056 09       		.uleb128 0x9
 1671 0057 26       		.uleb128 0x26
 1672 0058 00       		.byte	0
 1673 0059 49       		.uleb128 0x49
 1674 005a 13       		.uleb128 0x13
 1675 005b 00       		.byte	0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 35


 1676 005c 00       		.byte	0
 1677 005d 0A       		.uleb128 0xa
 1678 005e 13       		.uleb128 0x13
 1679 005f 01       		.byte	0x1
 1680 0060 0B       		.uleb128 0xb
 1681 0061 0B       		.uleb128 0xb
 1682 0062 3A       		.uleb128 0x3a
 1683 0063 0B       		.uleb128 0xb
 1684 0064 3B       		.uleb128 0x3b
 1685 0065 0B       		.uleb128 0xb
 1686 0066 01       		.uleb128 0x1
 1687 0067 13       		.uleb128 0x13
 1688 0068 00       		.byte	0
 1689 0069 00       		.byte	0
 1690 006a 0B       		.uleb128 0xb
 1691 006b 0D       		.uleb128 0xd
 1692 006c 00       		.byte	0
 1693 006d 03       		.uleb128 0x3
 1694 006e 0E       		.uleb128 0xe
 1695 006f 3A       		.uleb128 0x3a
 1696 0070 0B       		.uleb128 0xb
 1697 0071 3B       		.uleb128 0x3b
 1698 0072 0B       		.uleb128 0xb
 1699 0073 49       		.uleb128 0x49
 1700 0074 13       		.uleb128 0x13
 1701 0075 38       		.uleb128 0x38
 1702 0076 0B       		.uleb128 0xb
 1703 0077 00       		.byte	0
 1704 0078 00       		.byte	0
 1705 0079 0C       		.uleb128 0xc
 1706 007a 0D       		.uleb128 0xd
 1707 007b 00       		.byte	0
 1708 007c 03       		.uleb128 0x3
 1709 007d 08       		.uleb128 0x8
 1710 007e 3A       		.uleb128 0x3a
 1711 007f 0B       		.uleb128 0xb
 1712 0080 3B       		.uleb128 0x3b
 1713 0081 0B       		.uleb128 0xb
 1714 0082 49       		.uleb128 0x49
 1715 0083 13       		.uleb128 0x13
 1716 0084 38       		.uleb128 0x38
 1717 0085 0B       		.uleb128 0xb
 1718 0086 00       		.byte	0
 1719 0087 00       		.byte	0
 1720 0088 0D       		.uleb128 0xd
 1721 0089 01       		.uleb128 0x1
 1722 008a 01       		.byte	0x1
 1723 008b 49       		.uleb128 0x49
 1724 008c 13       		.uleb128 0x13
 1725 008d 01       		.uleb128 0x1
 1726 008e 13       		.uleb128 0x13
 1727 008f 00       		.byte	0
 1728 0090 00       		.byte	0
 1729 0091 0E       		.uleb128 0xe
 1730 0092 21       		.uleb128 0x21
 1731 0093 00       		.byte	0
 1732 0094 49       		.uleb128 0x49
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 36


 1733 0095 13       		.uleb128 0x13
 1734 0096 2F       		.uleb128 0x2f
 1735 0097 0B       		.uleb128 0xb
 1736 0098 00       		.byte	0
 1737 0099 00       		.byte	0
 1738 009a 0F       		.uleb128 0xf
 1739 009b 2E       		.uleb128 0x2e
 1740 009c 01       		.byte	0x1
 1741 009d 03       		.uleb128 0x3
 1742 009e 0E       		.uleb128 0xe
 1743 009f 3A       		.uleb128 0x3a
 1744 00a0 0B       		.uleb128 0xb
 1745 00a1 3B       		.uleb128 0x3b
 1746 00a2 0B       		.uleb128 0xb
 1747 00a3 27       		.uleb128 0x27
 1748 00a4 19       		.uleb128 0x19
 1749 00a5 11       		.uleb128 0x11
 1750 00a6 01       		.uleb128 0x1
 1751 00a7 12       		.uleb128 0x12
 1752 00a8 06       		.uleb128 0x6
 1753 00a9 40       		.uleb128 0x40
 1754 00aa 18       		.uleb128 0x18
 1755 00ab 9642     		.uleb128 0x2116
 1756 00ad 19       		.uleb128 0x19
 1757 00ae 01       		.uleb128 0x1
 1758 00af 13       		.uleb128 0x13
 1759 00b0 00       		.byte	0
 1760 00b1 00       		.byte	0
 1761 00b2 10       		.uleb128 0x10
 1762 00b3 05       		.uleb128 0x5
 1763 00b4 00       		.byte	0
 1764 00b5 03       		.uleb128 0x3
 1765 00b6 08       		.uleb128 0x8
 1766 00b7 3A       		.uleb128 0x3a
 1767 00b8 0B       		.uleb128 0xb
 1768 00b9 3B       		.uleb128 0x3b
 1769 00ba 0B       		.uleb128 0xb
 1770 00bb 49       		.uleb128 0x49
 1771 00bc 13       		.uleb128 0x13
 1772 00bd 02       		.uleb128 0x2
 1773 00be 18       		.uleb128 0x18
 1774 00bf 00       		.byte	0
 1775 00c0 00       		.byte	0
 1776 00c1 11       		.uleb128 0x11
 1777 00c2 35       		.uleb128 0x35
 1778 00c3 00       		.byte	0
 1779 00c4 00       		.byte	0
 1780 00c5 00       		.byte	0
 1781 00c6 12       		.uleb128 0x12
 1782 00c7 2E       		.uleb128 0x2e
 1783 00c8 01       		.byte	0x1
 1784 00c9 3F       		.uleb128 0x3f
 1785 00ca 19       		.uleb128 0x19
 1786 00cb 03       		.uleb128 0x3
 1787 00cc 0E       		.uleb128 0xe
 1788 00cd 3A       		.uleb128 0x3a
 1789 00ce 0B       		.uleb128 0xb
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 37


 1790 00cf 3B       		.uleb128 0x3b
 1791 00d0 0B       		.uleb128 0xb
 1792 00d1 27       		.uleb128 0x27
 1793 00d2 19       		.uleb128 0x19
 1794 00d3 11       		.uleb128 0x11
 1795 00d4 01       		.uleb128 0x1
 1796 00d5 12       		.uleb128 0x12
 1797 00d6 06       		.uleb128 0x6
 1798 00d7 40       		.uleb128 0x40
 1799 00d8 18       		.uleb128 0x18
 1800 00d9 9642     		.uleb128 0x2116
 1801 00db 19       		.uleb128 0x19
 1802 00dc 01       		.uleb128 0x1
 1803 00dd 13       		.uleb128 0x13
 1804 00de 00       		.byte	0
 1805 00df 00       		.byte	0
 1806 00e0 13       		.uleb128 0x13
 1807 00e1 05       		.uleb128 0x5
 1808 00e2 00       		.byte	0
 1809 00e3 03       		.uleb128 0x3
 1810 00e4 0E       		.uleb128 0xe
 1811 00e5 3A       		.uleb128 0x3a
 1812 00e6 0B       		.uleb128 0xb
 1813 00e7 3B       		.uleb128 0x3b
 1814 00e8 0B       		.uleb128 0xb
 1815 00e9 49       		.uleb128 0x49
 1816 00ea 13       		.uleb128 0x13
 1817 00eb 02       		.uleb128 0x2
 1818 00ec 18       		.uleb128 0x18
 1819 00ed 00       		.byte	0
 1820 00ee 00       		.byte	0
 1821 00ef 14       		.uleb128 0x14
 1822 00f0 34       		.uleb128 0x34
 1823 00f1 00       		.byte	0
 1824 00f2 03       		.uleb128 0x3
 1825 00f3 0E       		.uleb128 0xe
 1826 00f4 3A       		.uleb128 0x3a
 1827 00f5 0B       		.uleb128 0xb
 1828 00f6 3B       		.uleb128 0x3b
 1829 00f7 0B       		.uleb128 0xb
 1830 00f8 49       		.uleb128 0x49
 1831 00f9 13       		.uleb128 0x13
 1832 00fa 02       		.uleb128 0x2
 1833 00fb 18       		.uleb128 0x18
 1834 00fc 00       		.byte	0
 1835 00fd 00       		.byte	0
 1836 00fe 15       		.uleb128 0x15
 1837 00ff 0B       		.uleb128 0xb
 1838 0100 01       		.byte	0x1
 1839 0101 11       		.uleb128 0x11
 1840 0102 01       		.uleb128 0x1
 1841 0103 12       		.uleb128 0x12
 1842 0104 06       		.uleb128 0x6
 1843 0105 00       		.byte	0
 1844 0106 00       		.byte	0
 1845 0107 16       		.uleb128 0x16
 1846 0108 34       		.uleb128 0x34
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 38


 1847 0109 00       		.byte	0
 1848 010a 03       		.uleb128 0x3
 1849 010b 08       		.uleb128 0x8
 1850 010c 3A       		.uleb128 0x3a
 1851 010d 0B       		.uleb128 0xb
 1852 010e 3B       		.uleb128 0x3b
 1853 010f 0B       		.uleb128 0xb
 1854 0110 49       		.uleb128 0x49
 1855 0111 13       		.uleb128 0x13
 1856 0112 02       		.uleb128 0x2
 1857 0113 18       		.uleb128 0x18
 1858 0114 00       		.byte	0
 1859 0115 00       		.byte	0
 1860 0116 17       		.uleb128 0x17
 1861 0117 2E       		.uleb128 0x2e
 1862 0118 01       		.byte	0x1
 1863 0119 3F       		.uleb128 0x3f
 1864 011a 19       		.uleb128 0x19
 1865 011b 03       		.uleb128 0x3
 1866 011c 0E       		.uleb128 0xe
 1867 011d 3A       		.uleb128 0x3a
 1868 011e 0B       		.uleb128 0xb
 1869 011f 3B       		.uleb128 0x3b
 1870 0120 0B       		.uleb128 0xb
 1871 0121 27       		.uleb128 0x27
 1872 0122 19       		.uleb128 0x19
 1873 0123 49       		.uleb128 0x49
 1874 0124 13       		.uleb128 0x13
 1875 0125 11       		.uleb128 0x11
 1876 0126 01       		.uleb128 0x1
 1877 0127 12       		.uleb128 0x12
 1878 0128 06       		.uleb128 0x6
 1879 0129 40       		.uleb128 0x40
 1880 012a 18       		.uleb128 0x18
 1881 012b 9642     		.uleb128 0x2116
 1882 012d 19       		.uleb128 0x19
 1883 012e 01       		.uleb128 0x1
 1884 012f 13       		.uleb128 0x13
 1885 0130 00       		.byte	0
 1886 0131 00       		.byte	0
 1887 0132 18       		.uleb128 0x18
 1888 0133 21       		.uleb128 0x21
 1889 0134 00       		.byte	0
 1890 0135 49       		.uleb128 0x49
 1891 0136 13       		.uleb128 0x13
 1892 0137 2F       		.uleb128 0x2f
 1893 0138 18       		.uleb128 0x18
 1894 0139 00       		.byte	0
 1895 013a 00       		.byte	0
 1896 013b 19       		.uleb128 0x19
 1897 013c 34       		.uleb128 0x34
 1898 013d 00       		.byte	0
 1899 013e 03       		.uleb128 0x3
 1900 013f 0E       		.uleb128 0xe
 1901 0140 3A       		.uleb128 0x3a
 1902 0141 0B       		.uleb128 0xb
 1903 0142 3B       		.uleb128 0x3b
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 39


 1904 0143 0B       		.uleb128 0xb
 1905 0144 49       		.uleb128 0x49
 1906 0145 13       		.uleb128 0x13
 1907 0146 3F       		.uleb128 0x3f
 1908 0147 19       		.uleb128 0x19
 1909 0148 3C       		.uleb128 0x3c
 1910 0149 19       		.uleb128 0x19
 1911 014a 00       		.byte	0
 1912 014b 00       		.byte	0
 1913 014c 00       		.byte	0
 1914              		.section	.debug_aranges,"",%progbits
 1915 0000 5C000000 		.4byte	0x5c
 1916 0004 0200     		.2byte	0x2
 1917 0006 00000000 		.4byte	.Ldebug_info0
 1918 000a 04       		.byte	0x4
 1919 000b 00       		.byte	0
 1920 000c 0000     		.2byte	0
 1921 000e 0000     		.2byte	0
 1922 0010 00000000 		.4byte	.LFB1
 1923 0014 24000000 		.4byte	.LFE1-.LFB1
 1924 0018 00000000 		.4byte	.LFB3
 1925 001c 44000000 		.4byte	.LFE3-.LFB3
 1926 0020 00000000 		.4byte	.LFB4
 1927 0024 4C000000 		.4byte	.LFE4-.LFB4
 1928 0028 00000000 		.4byte	.LFB5
 1929 002c B0000000 		.4byte	.LFE5-.LFB5
 1930 0030 00000000 		.4byte	.LFB6
 1931 0034 2A000000 		.4byte	.LFE6-.LFB6
 1932 0038 00000000 		.4byte	.LFB7
 1933 003c 90000000 		.4byte	.LFE7-.LFB7
 1934 0040 00000000 		.4byte	.LFB8
 1935 0044 98000000 		.4byte	.LFE8-.LFB8
 1936 0048 00000000 		.4byte	.LFB9
 1937 004c 08010000 		.4byte	.LFE9-.LFB9
 1938 0050 00000000 		.4byte	.LFB10
 1939 0054 0C010000 		.4byte	.LFE10-.LFB10
 1940 0058 00000000 		.4byte	0
 1941 005c 00000000 		.4byte	0
 1942              		.section	.debug_ranges,"",%progbits
 1943              	.Ldebug_ranges0:
 1944 0000 00000000 		.4byte	.LFB1
 1945 0004 24000000 		.4byte	.LFE1
 1946 0008 00000000 		.4byte	.LFB3
 1947 000c 44000000 		.4byte	.LFE3
 1948 0010 00000000 		.4byte	.LFB4
 1949 0014 4C000000 		.4byte	.LFE4
 1950 0018 00000000 		.4byte	.LFB5
 1951 001c B0000000 		.4byte	.LFE5
 1952 0020 00000000 		.4byte	.LFB6
 1953 0024 2A000000 		.4byte	.LFE6
 1954 0028 00000000 		.4byte	.LFB7
 1955 002c 90000000 		.4byte	.LFE7
 1956 0030 00000000 		.4byte	.LFB8
 1957 0034 98000000 		.4byte	.LFE8
 1958 0038 00000000 		.4byte	.LFB9
 1959 003c 08010000 		.4byte	.LFE9
 1960 0040 00000000 		.4byte	.LFB10
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 40


 1961 0044 0C010000 		.4byte	.LFE10
 1962 0048 00000000 		.4byte	0
 1963 004c 00000000 		.4byte	0
 1964              		.section	.debug_line,"",%progbits
 1965              	.Ldebug_line0:
 1966 0000 DD020000 		.section	.debug_str,"MS",%progbits,1
 1966      0200D501 
 1966      00000201 
 1966      FB0E0D00 
 1966      01010101 
 1967              	.LASF42:
 1968 0000 6E746167 		.ascii	"ntag\000"
 1968      00
 1969              	.LASF5:
 1970 0005 5F5F7569 		.ascii	"__uint8_t\000"
 1970      6E74385F 
 1970      7400
 1971              	.LASF49:
 1972 000f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1972      43313120 
 1972      352E342E 
 1972      31203230 
 1972      31363036 
 1973 0042 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 1973      20726576 
 1973      6973696F 
 1973      6E203233 
 1973      37373135 
 1974 0075 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects -fomit-fram"
 1974      66756E63 
 1974      74696F6E 
 1974      2D736563 
 1974      74696F6E 
 1975 00a8 652D706F 		.ascii	"e-pointer\000"
 1975      696E7465 
 1975      7200
 1976              	.LASF48:
 1977 00b2 616B5F61 		.ascii	"ak_aes_unpack_and_decrypt\000"
 1977      65735F75 
 1977      6E706163 
 1977      6B5F616E 
 1977      645F6465 
 1978              	.LASF19:
 1979 00cc 656E6372 		.ascii	"encrypt\000"
 1979      79707400 
 1980              	.LASF32:
 1981 00d4 616B5F61 		.ascii	"ak_aes_init\000"
 1981      65735F69 
 1981      6E697400 
 1982              	.LASF28:
 1983 00e0 61707065 		.ascii	"append_counter_to_nonce\000"
 1983      6E645F63 
 1983      6F756E74 
 1983      65725F74 
 1983      6F5F6E6F 
 1984              	.LASF23:
 1985 00f8 63665F61 		.ascii	"cf_aes_context\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 41


 1985      65735F63 
 1985      6F6E7465 
 1985      787400
 1986              	.LASF34:
 1987 0107 73686172 		.ascii	"shared_secret_size\000"
 1987      65645F73 
 1987      65637265 
 1987      745F7369 
 1987      7A6500
 1988              	.LASF20:
 1989 011a 64656372 		.ascii	"decrypt\000"
 1989      79707400 
 1990              	.LASF33:
 1991 0122 73686172 		.ascii	"shared_secret\000"
 1991      65645F73 
 1991      65637265 
 1991      7400
 1992              	.LASF46:
 1993 0130 7061636B 		.ascii	"package_size\000"
 1993      6167655F 
 1993      73697A65 
 1993      00
 1994              	.LASF47:
 1995 013d 616B5F61 		.ascii	"ak_aes_decrypt\000"
 1995      65735F64 
 1995      65637279 
 1995      707400
 1996              	.LASF24:
 1997 014c 636F756E 		.ascii	"counter\000"
 1997      74657200 
 1998              	.LASF38:
 1999 0154 616B5F61 		.ascii	"ak_aes_encrypt\000"
 1999      65735F65 
 1999      6E637279 
 1999      707400
 2000              	.LASF53:
 2001 0163 63665F61 		.ascii	"cf_aes\000"
 2001      657300
 2002              	.LASF30:
 2003 016a 73697A65 		.ascii	"size\000"
 2003      00
 2004              	.LASF21:
 2005 016f 63665F70 		.ascii	"cf_prp\000"
 2005      727000
 2006              	.LASF7:
 2007 0176 6C6F6E67 		.ascii	"long unsigned int\000"
 2007      20756E73 
 2007      69676E65 
 2007      6420696E 
 2007      7400
 2008              	.LASF3:
 2009 0188 73686F72 		.ascii	"short unsigned int\000"
 2009      7420756E 
 2009      7369676E 
 2009      65642069 
 2009      6E7400
 2010              	.LASF11:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 42


 2011 019b 73697A65 		.ascii	"size_t\000"
 2011      5F7400
 2012              	.LASF45:
 2013 01a2 7061636B 		.ascii	"package\000"
 2013      61676500 
 2014              	.LASF50:
 2015 01aa 616B5F61 		.ascii	"ak_aes_crypto.c\000"
 2015      65735F63 
 2015      72797074 
 2015      6F2E6300 
 2016              	.LASF1:
 2017 01ba 756E7369 		.ascii	"unsigned char\000"
 2017      676E6564 
 2017      20636861 
 2017      7200
 2018              	.LASF25:
 2019 01c8 6E6F6E63 		.ascii	"nonce\000"
 2019      6500
 2020              	.LASF26:
 2021 01ce 63636D5F 		.ascii	"ccm_ctx\000"
 2021      63747800 
 2022              	.LASF6:
 2023 01d6 5F5F7569 		.ascii	"__uint32_t\000"
 2023      6E743332 
 2023      5F7400
 2024              	.LASF40:
 2025 01e1 706C6169 		.ascii	"plain_data_size\000"
 2025      6E5F6461 
 2025      74615F73 
 2025      697A6500 
 2026              	.LASF18:
 2027 01f1 626C6F63 		.ascii	"blocksz\000"
 2027      6B737A00 
 2028              	.LASF17:
 2029 01f9 63665F70 		.ascii	"cf_prp_block\000"
 2029      72705F62 
 2029      6C6F636B 
 2029      00
 2030              	.LASF35:
 2031 0206 63636D5F 		.ascii	"ccm_context\000"
 2031      636F6E74 
 2031      65787400 
 2032              	.LASF10:
 2033 0212 756E7369 		.ascii	"unsigned int\000"
 2033      676E6564 
 2033      20696E74 
 2033      00
 2034              	.LASF9:
 2035 021f 6C6F6E67 		.ascii	"long long unsigned int\000"
 2035      206C6F6E 
 2035      6720756E 
 2035      7369676E 
 2035      65642069 
 2036              	.LASF15:
 2037 0236 75696E74 		.ascii	"uint8_t\000"
 2037      385F7400 
 2038              	.LASF41:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 43


 2039 023e 656E6372 		.ascii	"encrypted_data\000"
 2039      79707465 
 2039      645F6461 
 2039      746100
 2040              	.LASF36:
 2041 024d 73656372 		.ascii	"secret_key\000"
 2041      65745F6B 
 2041      657900
 2042              	.LASF39:
 2043 0258 706C6169 		.ascii	"plain_data\000"
 2043      6E5F6461 
 2043      746100
 2044              	.LASF52:
 2045 0263 6D656D5F 		.ascii	"mem_clean\000"
 2045      636C6561 
 2045      6E00
 2046              	.LASF13:
 2047 026d 73697A65 		.ascii	"sizetype\000"
 2047      74797065 
 2047      00
 2048              	.LASF8:
 2049 0276 6C6F6E67 		.ascii	"long long int\000"
 2049      206C6F6E 
 2049      6720696E 
 2049      7400
 2050              	.LASF27:
 2051 0284 616B5F61 		.ascii	"ak_aes_context\000"
 2051      65735F63 
 2051      6F6E7465 
 2051      787400
 2052              	.LASF14:
 2053 0293 63686172 		.ascii	"char\000"
 2053      00
 2054              	.LASF43:
 2055 0298 656E6372 		.ascii	"encrypted_data_size\000"
 2055      79707465 
 2055      645F6461 
 2055      74615F73 
 2055      697A6500 
 2056              	.LASF2:
 2057 02ac 73686F72 		.ascii	"short int\000"
 2057      7420696E 
 2057      7400
 2058              	.LASF29:
 2059 02b6 635F7072 		.ascii	"c_print\000"
 2059      696E7400 
 2060              	.LASF31:
 2061 02be 6374725F 		.ascii	"ctr_array\000"
 2061      61727261 
 2061      7900
 2062              	.LASF22:
 2063 02c8 726F756E 		.ascii	"rounds\000"
 2063      647300
 2064              	.LASF16:
 2065 02cf 75696E74 		.ascii	"uint32_t\000"
 2065      33325F74 
 2065      00
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccBJlqrP.s 			page 44


 2066              	.LASF4:
 2067 02d8 6C6F6E67 		.ascii	"long int\000"
 2067      20696E74 
 2067      00
 2068              	.LASF51:
 2069 02e1 443A5C44 		.ascii	"D:\\Dropbox\\6_kurs\\diploma\\crypto_miscocontrolle"
 2069      726F7062 
 2069      6F785C36 
 2069      5F6B7572 
 2069      735C6469 
 2070 0310 725F5354 		.ascii	"r_STABLE\\BLE_Dynamic_GATT_Service_Configuration\\B"
 2070      41424C45 
 2070      5C424C45 
 2070      5F44796E 
 2070      616D6963 
 2071 0341 4C455F44 		.ascii	"LE_Dynamic_GATT_Service_Configuration.cydsn\000"
 2071      796E616D 
 2071      69635F47 
 2071      4154545F 
 2071      53657276 
 2072              	.LASF12:
 2073 036d 6C6F6E67 		.ascii	"long double\000"
 2073      20646F75 
 2073      626C6500 
 2074              	.LASF0:
 2075 0379 7369676E 		.ascii	"signed char\000"
 2075      65642063 
 2075      68617200 
 2076              	.LASF37:
 2077 0385 616B5F61 		.ascii	"ak_aes_finish\000"
 2077      65735F66 
 2077      696E6973 
 2077      6800
 2078              	.LASF44:
 2079 0393 616B5F61 		.ascii	"ak_aes_encrypt_and_pack\000"
 2079      65735F65 
 2079      6E637279 
 2079      70745F61 
 2079      6E645F70 
 2080              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
