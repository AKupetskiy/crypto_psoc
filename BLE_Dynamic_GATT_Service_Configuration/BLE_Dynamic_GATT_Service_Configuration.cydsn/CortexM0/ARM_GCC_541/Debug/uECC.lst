ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"uECC.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.uECC_vli_add,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	uECC_vli_add, %function
  24              	uECC_vli_add:
  25              	.LFB0:
  26              		.file 1 "asm_arm.inc"
   1:asm_arm.inc   **** /* Copyright 2015, Kenneth MacKay. Licensed under the BSD 2-clause license. */
   2:asm_arm.inc   **** 
   3:asm_arm.inc   **** #ifndef _UECC_ASM_ARM_H_
   4:asm_arm.inc   **** #define _UECC_ASM_ARM_H_
   5:asm_arm.inc   **** 
   6:asm_arm.inc   **** #if (uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1)
   7:asm_arm.inc   ****     #define uECC_MIN_WORDS 8
   8:asm_arm.inc   **** #endif
   9:asm_arm.inc   **** #if uECC_SUPPORTS_secp224r1
  10:asm_arm.inc   ****     #undef uECC_MIN_WORDS
  11:asm_arm.inc   ****     #define uECC_MIN_WORDS 7
  12:asm_arm.inc   **** #endif
  13:asm_arm.inc   **** #if uECC_SUPPORTS_secp192r1
  14:asm_arm.inc   ****     #undef uECC_MIN_WORDS
  15:asm_arm.inc   ****     #define uECC_MIN_WORDS 6
  16:asm_arm.inc   **** #endif
  17:asm_arm.inc   **** #if uECC_SUPPORTS_secp160r1
  18:asm_arm.inc   ****     #undef uECC_MIN_WORDS
  19:asm_arm.inc   ****     #define uECC_MIN_WORDS 5
  20:asm_arm.inc   **** #endif
  21:asm_arm.inc   **** 
  22:asm_arm.inc   **** #if (uECC_PLATFORM == uECC_arm_thumb)
  23:asm_arm.inc   ****     #define REG_RW "+l"
  24:asm_arm.inc   ****     #define REG_WRITE "=l"
  25:asm_arm.inc   **** #else
  26:asm_arm.inc   ****     #define REG_RW "+r"
  27:asm_arm.inc   ****     #define REG_WRITE "=r"
  28:asm_arm.inc   **** #endif
  29:asm_arm.inc   **** 
  30:asm_arm.inc   **** #if (uECC_PLATFORM == uECC_arm_thumb || uECC_PLATFORM == uECC_arm_thumb2)
  31:asm_arm.inc   ****     #define REG_RW_LO "+l"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 2


  32:asm_arm.inc   ****     #define REG_WRITE_LO "=l"
  33:asm_arm.inc   **** #else
  34:asm_arm.inc   ****     #define REG_RW_LO "+r"
  35:asm_arm.inc   ****     #define REG_WRITE_LO "=r"
  36:asm_arm.inc   **** #endif
  37:asm_arm.inc   **** 
  38:asm_arm.inc   **** #if (uECC_PLATFORM == uECC_arm_thumb2)
  39:asm_arm.inc   ****     #define RESUME_SYNTAX
  40:asm_arm.inc   **** #else
  41:asm_arm.inc   ****     #define RESUME_SYNTAX ".syntax divided \n\t"
  42:asm_arm.inc   **** #endif
  43:asm_arm.inc   **** 
  44:asm_arm.inc   **** #if (uECC_OPTIMIZATION_LEVEL >= 2)
  45:asm_arm.inc   **** 
  46:asm_arm.inc   **** uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
  47:asm_arm.inc   ****                                       const uECC_word_t *left,
  48:asm_arm.inc   ****                                       const uECC_word_t *right,
  49:asm_arm.inc   ****                                       wordcount_t num_words) {
  27              		.loc 1 49 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 4, -16
  34              		.cfi_offset 5, -12
  35              		.cfi_offset 6, -8
  36              		.cfi_offset 14, -4
  37 0002 88B0     		sub	sp, sp, #32
  38              		.cfi_def_cfa_offset 48
  39 0004 0390     		str	r0, [sp, #12]
  40 0006 0291     		str	r1, [sp, #8]
  41 0008 0192     		str	r2, [sp, #4]
  42 000a 1A00     		movs	r2, r3
  43 000c 6B46     		mov	r3, sp
  44 000e 0333     		adds	r3, r3, #3
  45 0010 1A70     		strb	r2, [r3]
  50:asm_arm.inc   **** #if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  51:asm_arm.inc   ****   #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
  52:asm_arm.inc   ****     uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
  46              		.loc 1 52 0
  47 0012 6B46     		mov	r3, sp
  48 0014 0333     		adds	r3, r3, #3
  49 0016 1B78     		ldrb	r3, [r3]
  50 0018 5BB2     		sxtb	r3, r3
  51 001a 0822     		movs	r2, #8
  52 001c D31A     		subs	r3, r2, r3
  53 001e DB00     		lsls	r3, r3, #3
  54 0020 0133     		adds	r3, r3, #1
  55 0022 0793     		str	r3, [sp, #28]
  53:asm_arm.inc   ****   #else /* ARM */
  54:asm_arm.inc   ****     uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 4;
  55:asm_arm.inc   ****   #endif
  56:asm_arm.inc   **** #endif
  57:asm_arm.inc   ****     uint32_t carry;
  58:asm_arm.inc   ****     uint32_t left_word;
  59:asm_arm.inc   ****     uint32_t right_word;
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 3


  60:asm_arm.inc   ****     
  61:asm_arm.inc   ****     __asm__ volatile (
  56              		.loc 1 61 0
  57 0024 0398     		ldr	r0, [sp, #12]
  58 0026 0299     		ldr	r1, [sp, #8]
  59 0028 019A     		ldr	r2, [sp, #4]
  60 002a 079B     		ldr	r3, [sp, #28]
  61              		.syntax divided
  62              	@ 61 "asm_arm.inc" 1
  63              		.syntax unified 
  64 002c 0026     		movs r6, #0 
  65 002e 03A5     		adr r5, 1f 
  66              		.align 4 
  67 0030 5B19     		adds r3, r5 
  68 0032 20C9     		ldmia r1!, {r5} 
  69 0034 10CA     		ldmia r2!, {r4} 
  70 0036 2D19     		adds r5, r4 
  71 0038 20C0     		stmia r0!, {r5} 
  72 003a 1847     		bx r3 
  73              		1: 
  74 003c 20C9     		ldmia r1!, {r5} 
  75 003e 10CA     		ldmia r2!, {r4} 
  76 0040 6541     		adcs r5, r4 
  77 0042 20C0     		stmia r0!, {r5} 
  78 0044 20C9     		ldmia r1!, {r5} 
  79 0046 10CA     		ldmia r2!, {r4} 
  80 0048 6541     		adcs r5, r4 
  81 004a 20C0     		stmia r0!, {r5} 
  82 004c 20C9     		ldmia r1!, {r5} 
  83 004e 10CA     		ldmia r2!, {r4} 
  84 0050 6541     		adcs r5, r4 
  85 0052 20C0     		stmia r0!, {r5} 
  86 0054 20C9     		ldmia r1!, {r5} 
  87 0056 10CA     		ldmia r2!, {r4} 
  88 0058 6541     		adcs r5, r4 
  89 005a 20C0     		stmia r0!, {r5} 
  90 005c 20C9     		ldmia r1!, {r5} 
  91 005e 10CA     		ldmia r2!, {r4} 
  92 0060 6541     		adcs r5, r4 
  93 0062 20C0     		stmia r0!, {r5} 
  94 0064 20C9     		ldmia r1!, {r5} 
  95 0066 10CA     		ldmia r2!, {r4} 
  96 0068 6541     		adcs r5, r4 
  97 006a 20C0     		stmia r0!, {r5} 
  98 006c 20C9     		ldmia r1!, {r5} 
  99 006e 10CA     		ldmia r2!, {r4} 
 100 0070 6541     		adcs r5, r4 
 101 0072 20C0     		stmia r0!, {r5} 
 102 0074 7641     		adcs r6, r6 
 103              		.syntax divided 
 104              		
 105              	@ 0 "" 2
 106              		.thumb
 107              		.syntax unified
 108 0076 0390     		str	r0, [sp, #12]
 109 0078 0291     		str	r1, [sp, #8]
 110 007a 0192     		str	r2, [sp, #4]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 4


 111 007c 0793     		str	r3, [sp, #28]
 112 007e 0696     		str	r6, [sp, #24]
 113 0080 0595     		str	r5, [sp, #20]
 114 0082 0494     		str	r4, [sp, #16]
  62:asm_arm.inc   ****         ".syntax unified \n\t"
  63:asm_arm.inc   ****         "movs %[carry], #0 \n\t"
  64:asm_arm.inc   ****     #if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  65:asm_arm.inc   ****         "adr %[left], 1f \n\t"
  66:asm_arm.inc   ****         ".align 4 \n\t"
  67:asm_arm.inc   ****         "adds %[jump], %[left] \n\t"
  68:asm_arm.inc   ****     #endif
  69:asm_arm.inc   ****         
  70:asm_arm.inc   ****         "ldmia %[lptr]!, {%[left]} \n\t"
  71:asm_arm.inc   ****         "ldmia %[rptr]!, {%[right]} \n\t"
  72:asm_arm.inc   ****         "adds %[left], %[right] \n\t"
  73:asm_arm.inc   ****         "stmia %[dptr]!, {%[left]} \n\t"
  74:asm_arm.inc   ****         
  75:asm_arm.inc   ****     #if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  76:asm_arm.inc   ****         "bx %[jump] \n\t"
  77:asm_arm.inc   ****     #endif
  78:asm_arm.inc   ****         "1: \n\t"
  79:asm_arm.inc   ****         REPEAT(DEC(uECC_MAX_WORDS),
  80:asm_arm.inc   ****             "ldmia %[lptr]!, {%[left]} \n\t"
  81:asm_arm.inc   ****             "ldmia %[rptr]!, {%[right]} \n\t"
  82:asm_arm.inc   ****             "adcs %[left], %[right] \n\t"
  83:asm_arm.inc   ****             "stmia %[dptr]!, {%[left]} \n\t")
  84:asm_arm.inc   ****         
  85:asm_arm.inc   ****         "adcs %[carry], %[carry] \n\t"
  86:asm_arm.inc   ****         RESUME_SYNTAX
  87:asm_arm.inc   ****         : [dptr] REG_RW_LO (result), [lptr] REG_RW_LO (left), [rptr] REG_RW_LO (right),
  88:asm_arm.inc   ****     #if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  89:asm_arm.inc   ****           [jump] REG_RW_LO (jump),
  90:asm_arm.inc   ****     #endif
  91:asm_arm.inc   ****           [carry] REG_WRITE_LO (carry), [left] REG_WRITE_LO (left_word),
  92:asm_arm.inc   ****           [right] REG_WRITE_LO (right_word)
  93:asm_arm.inc   ****         :
  94:asm_arm.inc   ****         : "cc", "memory"
  95:asm_arm.inc   ****     );
  96:asm_arm.inc   ****     return carry;
 115              		.loc 1 96 0
 116 0084 069B     		ldr	r3, [sp, #24]
  97:asm_arm.inc   **** }
 117              		.loc 1 97 0
 118 0086 1800     		movs	r0, r3
 119 0088 08B0     		add	sp, sp, #32
 120              		@ sp needed
 121 008a 70BD     		pop	{r4, r5, r6, pc}
 122              		.cfi_endproc
 123              	.LFE0:
 124              		.size	uECC_vli_add, .-uECC_vli_add
 125              		.section	.text.uECC_vli_sub,"ax",%progbits
 126              		.align	2
 127              		.code	16
 128              		.thumb_func
 129              		.type	uECC_vli_sub, %function
 130              	uECC_vli_sub:
 131              	.LFB1:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 5


  98:asm_arm.inc   **** #define asm_add 1
  99:asm_arm.inc   **** 
 100:asm_arm.inc   **** uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
 101:asm_arm.inc   ****                                       const uECC_word_t *left,
 102:asm_arm.inc   ****                                       const uECC_word_t *right,
 103:asm_arm.inc   ****                                       wordcount_t num_words) {
 132              		.loc 1 103 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 32
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136 0000 70B5     		push	{r4, r5, r6, lr}
 137              		.cfi_def_cfa_offset 16
 138              		.cfi_offset 4, -16
 139              		.cfi_offset 5, -12
 140              		.cfi_offset 6, -8
 141              		.cfi_offset 14, -4
 142 0002 88B0     		sub	sp, sp, #32
 143              		.cfi_def_cfa_offset 48
 144 0004 0390     		str	r0, [sp, #12]
 145 0006 0291     		str	r1, [sp, #8]
 146 0008 0192     		str	r2, [sp, #4]
 147 000a 1A00     		movs	r2, r3
 148 000c 6B46     		mov	r3, sp
 149 000e 0333     		adds	r3, r3, #3
 150 0010 1A70     		strb	r2, [r3]
 104:asm_arm.inc   **** #if (uECC_MAX_WORDS != uECC_MIN_WORDS)
 105:asm_arm.inc   ****   #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
 106:asm_arm.inc   ****     uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
 151              		.loc 1 106 0
 152 0012 6B46     		mov	r3, sp
 153 0014 0333     		adds	r3, r3, #3
 154 0016 1B78     		ldrb	r3, [r3]
 155 0018 5BB2     		sxtb	r3, r3
 156 001a 0822     		movs	r2, #8
 157 001c D31A     		subs	r3, r2, r3
 158 001e DB00     		lsls	r3, r3, #3
 159 0020 0133     		adds	r3, r3, #1
 160 0022 0793     		str	r3, [sp, #28]
 107:asm_arm.inc   ****   #else /* ARM */
 108:asm_arm.inc   ****     uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 4;
 109:asm_arm.inc   ****   #endif
 110:asm_arm.inc   **** #endif
 111:asm_arm.inc   ****     uint32_t carry;
 112:asm_arm.inc   ****     uint32_t left_word;
 113:asm_arm.inc   ****     uint32_t right_word;
 114:asm_arm.inc   ****     
 115:asm_arm.inc   ****     __asm__ volatile (
 161              		.loc 1 115 0
 162 0024 0398     		ldr	r0, [sp, #12]
 163 0026 0299     		ldr	r1, [sp, #8]
 164 0028 019A     		ldr	r2, [sp, #4]
 165 002a 079B     		ldr	r3, [sp, #28]
 166              		.syntax divided
 167              	@ 115 "asm_arm.inc" 1
 168              		.syntax unified 
 169 002c 0026     		movs r6, #0 
 170 002e 03A5     		adr r5, 1f 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 6


 171              		.align 4 
 172 0030 5B19     		adds r3, r5 
 173 0032 20C9     		ldmia r1!, {r5} 
 174 0034 10CA     		ldmia r2!, {r4} 
 175 0036 2D1B     		subs r5, r4 
 176 0038 20C0     		stmia r0!, {r5} 
 177 003a 1847     		bx r3 
 178              		1: 
 179 003c 20C9     		ldmia r1!, {r5} 
 180 003e 10CA     		ldmia r2!, {r4} 
 181 0040 A541     		sbcs r5, r4 
 182 0042 20C0     		stmia r0!, {r5} 
 183 0044 20C9     		ldmia r1!, {r5} 
 184 0046 10CA     		ldmia r2!, {r4} 
 185 0048 A541     		sbcs r5, r4 
 186 004a 20C0     		stmia r0!, {r5} 
 187 004c 20C9     		ldmia r1!, {r5} 
 188 004e 10CA     		ldmia r2!, {r4} 
 189 0050 A541     		sbcs r5, r4 
 190 0052 20C0     		stmia r0!, {r5} 
 191 0054 20C9     		ldmia r1!, {r5} 
 192 0056 10CA     		ldmia r2!, {r4} 
 193 0058 A541     		sbcs r5, r4 
 194 005a 20C0     		stmia r0!, {r5} 
 195 005c 20C9     		ldmia r1!, {r5} 
 196 005e 10CA     		ldmia r2!, {r4} 
 197 0060 A541     		sbcs r5, r4 
 198 0062 20C0     		stmia r0!, {r5} 
 199 0064 20C9     		ldmia r1!, {r5} 
 200 0066 10CA     		ldmia r2!, {r4} 
 201 0068 A541     		sbcs r5, r4 
 202 006a 20C0     		stmia r0!, {r5} 
 203 006c 20C9     		ldmia r1!, {r5} 
 204 006e 10CA     		ldmia r2!, {r4} 
 205 0070 A541     		sbcs r5, r4 
 206 0072 20C0     		stmia r0!, {r5} 
 207 0074 7641     		adcs r6, r6 
 208              		.syntax divided 
 209              		
 210              	@ 0 "" 2
 211              		.thumb
 212              		.syntax unified
 213 0076 0390     		str	r0, [sp, #12]
 214 0078 0291     		str	r1, [sp, #8]
 215 007a 0192     		str	r2, [sp, #4]
 216 007c 0793     		str	r3, [sp, #28]
 217 007e 0696     		str	r6, [sp, #24]
 218 0080 0595     		str	r5, [sp, #20]
 219 0082 0494     		str	r4, [sp, #16]
 116:asm_arm.inc   ****         ".syntax unified \n\t"
 117:asm_arm.inc   ****         "movs %[carry], #0 \n\t"
 118:asm_arm.inc   ****     #if (uECC_MAX_WORDS != uECC_MIN_WORDS)
 119:asm_arm.inc   ****         "adr %[left], 1f \n\t"
 120:asm_arm.inc   ****         ".align 4 \n\t"
 121:asm_arm.inc   ****         "adds %[jump], %[left] \n\t"
 122:asm_arm.inc   ****     #endif
 123:asm_arm.inc   ****         
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 7


 124:asm_arm.inc   ****         "ldmia %[lptr]!, {%[left]} \n\t"
 125:asm_arm.inc   ****         "ldmia %[rptr]!, {%[right]} \n\t"
 126:asm_arm.inc   ****         "subs %[left], %[right] \n\t"
 127:asm_arm.inc   ****         "stmia %[dptr]!, {%[left]} \n\t"
 128:asm_arm.inc   ****         
 129:asm_arm.inc   ****     #if (uECC_MAX_WORDS != uECC_MIN_WORDS)
 130:asm_arm.inc   ****         "bx %[jump] \n\t"
 131:asm_arm.inc   ****     #endif
 132:asm_arm.inc   ****         "1: \n\t"
 133:asm_arm.inc   ****         REPEAT(DEC(uECC_MAX_WORDS),
 134:asm_arm.inc   ****             "ldmia %[lptr]!, {%[left]} \n\t"
 135:asm_arm.inc   ****             "ldmia %[rptr]!, {%[right]} \n\t"
 136:asm_arm.inc   ****             "sbcs %[left], %[right] \n\t"
 137:asm_arm.inc   ****             "stmia %[dptr]!, {%[left]} \n\t")
 138:asm_arm.inc   ****         
 139:asm_arm.inc   ****         "adcs %[carry], %[carry] \n\t"
 140:asm_arm.inc   ****         RESUME_SYNTAX
 141:asm_arm.inc   ****         : [dptr] REG_RW_LO (result), [lptr] REG_RW_LO (left), [rptr] REG_RW_LO (right),
 142:asm_arm.inc   ****     #if (uECC_MAX_WORDS != uECC_MIN_WORDS)
 143:asm_arm.inc   ****           [jump] REG_RW_LO (jump),
 144:asm_arm.inc   ****     #endif
 145:asm_arm.inc   ****           [carry] REG_WRITE_LO (carry), [left] REG_WRITE_LO (left_word),
 146:asm_arm.inc   ****           [right] REG_WRITE_LO (right_word)
 147:asm_arm.inc   ****         :
 148:asm_arm.inc   ****         : "cc", "memory"
 149:asm_arm.inc   ****     );
 150:asm_arm.inc   ****     return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
 220              		.loc 1 150 0
 221 0084 069B     		ldr	r3, [sp, #24]
 222 0086 5A42     		rsbs	r2, r3, #0
 223 0088 5341     		adcs	r3, r3, r2
 224 008a DBB2     		uxtb	r3, r3
 151:asm_arm.inc   ****                       (for some reason...) */
 152:asm_arm.inc   **** }
 225              		.loc 1 152 0
 226 008c 1800     		movs	r0, r3
 227 008e 08B0     		add	sp, sp, #32
 228              		@ sp needed
 229 0090 70BD     		pop	{r4, r5, r6, pc}
 230              		.cfi_endproc
 231              	.LFE1:
 232              		.size	uECC_vli_sub, .-uECC_vli_sub
 233 0092 C046     		.section	.text.uECC_vli_mult,"ax",%progbits
 234              		.align	2
 235              		.code	16
 236              		.thumb_func
 237              		.type	uECC_vli_mult, %function
 238              	uECC_vli_mult:
 239              	.LFB2:
 153:asm_arm.inc   **** #define asm_sub 1
 154:asm_arm.inc   **** 
 155:asm_arm.inc   **** #endif /* (uECC_OPTIMIZATION_LEVEL >= 2) */
 156:asm_arm.inc   **** 
 157:asm_arm.inc   **** #if (uECC_OPTIMIZATION_LEVEL >= 3)
 158:asm_arm.inc   **** 
 159:asm_arm.inc   **** #if (uECC_PLATFORM != uECC_arm_thumb)
 160:asm_arm.inc   **** 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 8


 161:asm_arm.inc   **** #if uECC_ARM_USE_UMAAL
 162:asm_arm.inc   ****     #include "asm_arm_mult_square_umaal.inc"
 163:asm_arm.inc   **** #else
 164:asm_arm.inc   ****     #include "asm_arm_mult_square.inc"
 165:asm_arm.inc   **** #endif
 166:asm_arm.inc   **** 
 167:asm_arm.inc   **** #if (uECC_OPTIMIZATION_LEVEL == 3)
 168:asm_arm.inc   **** 
 169:asm_arm.inc   **** uECC_VLI_API void uECC_vli_mult(uint32_t *result,
 170:asm_arm.inc   ****                                 const uint32_t *left,
 171:asm_arm.inc   ****                                 const uint32_t *right,
 172:asm_arm.inc   ****                                 wordcount_t num_words) {
 173:asm_arm.inc   ****     register uint32_t *r0 __asm__("r0") = result;
 174:asm_arm.inc   ****     register const uint32_t *r1 __asm__("r1") = left;
 175:asm_arm.inc   ****     register const uint32_t *r2 __asm__("r2") = right;
 176:asm_arm.inc   ****     register uint32_t r3 __asm__("r3") = num_words;
 177:asm_arm.inc   ****     
 178:asm_arm.inc   ****     __asm__ volatile (
 179:asm_arm.inc   ****         ".syntax unified \n\t"
 180:asm_arm.inc   **** #if (uECC_MIN_WORDS == 5)
 181:asm_arm.inc   ****         FAST_MULT_ASM_5
 182:asm_arm.inc   ****     #if (uECC_MAX_WORDS > 5)
 183:asm_arm.inc   ****         FAST_MULT_ASM_5_TO_6
 184:asm_arm.inc   ****     #endif
 185:asm_arm.inc   ****     #if (uECC_MAX_WORDS > 6)
 186:asm_arm.inc   ****         FAST_MULT_ASM_6_TO_7
 187:asm_arm.inc   ****     #endif
 188:asm_arm.inc   ****     #if (uECC_MAX_WORDS > 7)
 189:asm_arm.inc   ****         FAST_MULT_ASM_7_TO_8
 190:asm_arm.inc   ****     #endif
 191:asm_arm.inc   **** #elif (uECC_MIN_WORDS == 6)
 192:asm_arm.inc   ****         FAST_MULT_ASM_6
 193:asm_arm.inc   ****     #if (uECC_MAX_WORDS > 6)
 194:asm_arm.inc   ****         FAST_MULT_ASM_6_TO_7
 195:asm_arm.inc   ****     #endif
 196:asm_arm.inc   ****     #if (uECC_MAX_WORDS > 7)
 197:asm_arm.inc   ****         FAST_MULT_ASM_7_TO_8
 198:asm_arm.inc   ****     #endif
 199:asm_arm.inc   **** #elif (uECC_MIN_WORDS == 7)
 200:asm_arm.inc   ****         FAST_MULT_ASM_7
 201:asm_arm.inc   ****     #if (uECC_MAX_WORDS > 7)
 202:asm_arm.inc   ****         FAST_MULT_ASM_7_TO_8
 203:asm_arm.inc   ****     #endif
 204:asm_arm.inc   **** #elif (uECC_MIN_WORDS == 8)
 205:asm_arm.inc   ****         FAST_MULT_ASM_8
 206:asm_arm.inc   **** #endif
 207:asm_arm.inc   ****         "1: \n\t"
 208:asm_arm.inc   ****         RESUME_SYNTAX
 209:asm_arm.inc   ****         : "+r" (r0), "+r" (r1), "+r" (r2)
 210:asm_arm.inc   ****         : "r" (r3)
 211:asm_arm.inc   ****         : "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
 212:asm_arm.inc   ****     );
 213:asm_arm.inc   **** }
 214:asm_arm.inc   **** #define asm_mult 1
 215:asm_arm.inc   **** 
 216:asm_arm.inc   **** #if uECC_SQUARE_FUNC
 217:asm_arm.inc   **** uECC_VLI_API void uECC_vli_square(uECC_word_t *result,
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 9


 218:asm_arm.inc   ****                                   const uECC_word_t *left,
 219:asm_arm.inc   ****                                   wordcount_t num_words) {
 220:asm_arm.inc   ****     register uint32_t *r0 __asm__("r0") = result;
 221:asm_arm.inc   ****     register const uint32_t *r1 __asm__("r1") = left;
 222:asm_arm.inc   ****     register uint32_t r2 __asm__("r2") = num_words;
 223:asm_arm.inc   ****     
 224:asm_arm.inc   ****     __asm__ volatile (
 225:asm_arm.inc   ****         ".syntax unified \n\t"
 226:asm_arm.inc   **** #if (uECC_MIN_WORDS == 5)
 227:asm_arm.inc   ****         FAST_SQUARE_ASM_5
 228:asm_arm.inc   ****     #if (uECC_MAX_WORDS > 5)
 229:asm_arm.inc   ****         FAST_SQUARE_ASM_5_TO_6
 230:asm_arm.inc   ****     #endif
 231:asm_arm.inc   ****     #if (uECC_MAX_WORDS > 6)
 232:asm_arm.inc   ****         FAST_SQUARE_ASM_6_TO_7
 233:asm_arm.inc   ****     #endif
 234:asm_arm.inc   ****     #if (uECC_MAX_WORDS > 7)
 235:asm_arm.inc   ****         FAST_SQUARE_ASM_7_TO_8
 236:asm_arm.inc   ****     #endif
 237:asm_arm.inc   **** #elif (uECC_MIN_WORDS == 6)
 238:asm_arm.inc   ****         FAST_SQUARE_ASM_6
 239:asm_arm.inc   ****     #if (uECC_MAX_WORDS > 6)
 240:asm_arm.inc   ****         FAST_SQUARE_ASM_6_TO_7
 241:asm_arm.inc   ****     #endif
 242:asm_arm.inc   ****     #if (uECC_MAX_WORDS > 7)
 243:asm_arm.inc   ****         FAST_SQUARE_ASM_7_TO_8
 244:asm_arm.inc   ****     #endif
 245:asm_arm.inc   **** #elif (uECC_MIN_WORDS == 7)
 246:asm_arm.inc   ****         FAST_SQUARE_ASM_7
 247:asm_arm.inc   ****     #if (uECC_MAX_WORDS > 7)
 248:asm_arm.inc   ****         FAST_SQUARE_ASM_7_TO_8
 249:asm_arm.inc   ****     #endif
 250:asm_arm.inc   **** #elif (uECC_MIN_WORDS == 8)
 251:asm_arm.inc   ****         FAST_SQUARE_ASM_8
 252:asm_arm.inc   **** #endif
 253:asm_arm.inc   **** 
 254:asm_arm.inc   ****         "1: \n\t"
 255:asm_arm.inc   ****         RESUME_SYNTAX
 256:asm_arm.inc   ****         : "+r" (r0), "+r" (r1)
 257:asm_arm.inc   ****         : "r" (r2)
 258:asm_arm.inc   ****         : "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
 259:asm_arm.inc   ****     );
 260:asm_arm.inc   **** }
 261:asm_arm.inc   **** #define asm_square 1
 262:asm_arm.inc   **** #endif /* uECC_SQUARE_FUNC */
 263:asm_arm.inc   **** 
 264:asm_arm.inc   **** #else /* (uECC_OPTIMIZATION_LEVEL > 3) */
 265:asm_arm.inc   **** 
 266:asm_arm.inc   **** uECC_VLI_API void uECC_vli_mult(uint32_t *result,
 267:asm_arm.inc   ****                                 const uint32_t *left,
 268:asm_arm.inc   ****                                 const uint32_t *right,
 269:asm_arm.inc   ****                                 wordcount_t num_words) {
 270:asm_arm.inc   ****     register uint32_t *r0 __asm__("r0") = result;
 271:asm_arm.inc   ****     register const uint32_t *r1 __asm__("r1") = left;
 272:asm_arm.inc   ****     register const uint32_t *r2 __asm__("r2") = right;
 273:asm_arm.inc   ****     register uint32_t r3 __asm__("r3") = num_words;
 274:asm_arm.inc   ****     
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 10


 275:asm_arm.inc   **** #if uECC_SUPPORTS_secp160r1
 276:asm_arm.inc   ****     if (num_words == 5) {
 277:asm_arm.inc   ****         __asm__ volatile (
 278:asm_arm.inc   ****             ".syntax unified \n\t"
 279:asm_arm.inc   ****             FAST_MULT_ASM_5
 280:asm_arm.inc   ****             RESUME_SYNTAX
 281:asm_arm.inc   ****             : "+r" (r0), "+r" (r1), "+r" (r2)
 282:asm_arm.inc   ****             : "r" (r3)
 283:asm_arm.inc   ****             : "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
 284:asm_arm.inc   ****         );
 285:asm_arm.inc   ****         return;
 286:asm_arm.inc   ****     }
 287:asm_arm.inc   **** #endif
 288:asm_arm.inc   **** #if uECC_SUPPORTS_secp192r1
 289:asm_arm.inc   ****     if (num_words == 6) {
 290:asm_arm.inc   ****         __asm__ volatile (
 291:asm_arm.inc   ****             ".syntax unified \n\t"
 292:asm_arm.inc   ****             FAST_MULT_ASM_6
 293:asm_arm.inc   ****             RESUME_SYNTAX
 294:asm_arm.inc   ****             : "+r" (r0), "+r" (r1), "+r" (r2)
 295:asm_arm.inc   ****             : "r" (r3)
 296:asm_arm.inc   ****             : "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
 297:asm_arm.inc   ****         );
 298:asm_arm.inc   ****         return;
 299:asm_arm.inc   ****     }
 300:asm_arm.inc   **** #endif
 301:asm_arm.inc   **** #if uECC_SUPPORTS_secp224r1
 302:asm_arm.inc   ****     if (num_words == 7) {
 303:asm_arm.inc   ****         __asm__ volatile (
 304:asm_arm.inc   ****             ".syntax unified \n\t"
 305:asm_arm.inc   ****             FAST_MULT_ASM_7
 306:asm_arm.inc   ****             RESUME_SYNTAX
 307:asm_arm.inc   ****             : "+r" (r0), "+r" (r1), "+r" (r2)
 308:asm_arm.inc   ****             : "r" (r3)
 309:asm_arm.inc   ****             : "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
 310:asm_arm.inc   ****         );
 311:asm_arm.inc   ****         return;
 312:asm_arm.inc   ****     }
 313:asm_arm.inc   **** #endif
 314:asm_arm.inc   **** #if (uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1)
 315:asm_arm.inc   ****     if (num_words == 8) {
 316:asm_arm.inc   ****         __asm__ volatile (
 317:asm_arm.inc   ****             ".syntax unified \n\t"
 318:asm_arm.inc   ****             FAST_MULT_ASM_8
 319:asm_arm.inc   ****             RESUME_SYNTAX
 320:asm_arm.inc   ****             : "+r" (r0), "+r" (r1), "+r" (r2)
 321:asm_arm.inc   ****             : "r" (r3)
 322:asm_arm.inc   ****             : "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
 323:asm_arm.inc   ****         );
 324:asm_arm.inc   ****         return;
 325:asm_arm.inc   ****     }
 326:asm_arm.inc   **** #endif
 327:asm_arm.inc   **** }
 328:asm_arm.inc   **** #define asm_mult 1
 329:asm_arm.inc   **** 
 330:asm_arm.inc   **** #if uECC_SQUARE_FUNC
 331:asm_arm.inc   **** uECC_VLI_API void uECC_vli_square(uECC_word_t *result,
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 11


 332:asm_arm.inc   ****                                   const uECC_word_t *left,
 333:asm_arm.inc   ****                                   wordcount_t num_words) {
 334:asm_arm.inc   ****     register uint32_t *r0 __asm__("r0") = result;
 335:asm_arm.inc   ****     register const uint32_t *r1 __asm__("r1") = left;
 336:asm_arm.inc   ****     register uint32_t r2 __asm__("r2") = num_words;
 337:asm_arm.inc   ****     
 338:asm_arm.inc   **** #if uECC_SUPPORTS_secp160r1
 339:asm_arm.inc   ****     if (num_words == 5) {
 340:asm_arm.inc   ****         __asm__ volatile (
 341:asm_arm.inc   ****             ".syntax unified \n\t"
 342:asm_arm.inc   ****             FAST_SQUARE_ASM_5
 343:asm_arm.inc   ****             RESUME_SYNTAX
 344:asm_arm.inc   ****             : "+r" (r0), "+r" (r1)
 345:asm_arm.inc   ****             : "r" (r2)
 346:asm_arm.inc   ****             : "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
 347:asm_arm.inc   ****         );
 348:asm_arm.inc   ****         return;
 349:asm_arm.inc   ****     }
 350:asm_arm.inc   **** #endif
 351:asm_arm.inc   **** #if uECC_SUPPORTS_secp192r1
 352:asm_arm.inc   ****     if (num_words == 6) {
 353:asm_arm.inc   ****         __asm__ volatile (
 354:asm_arm.inc   ****             ".syntax unified \n\t"
 355:asm_arm.inc   ****             FAST_SQUARE_ASM_6
 356:asm_arm.inc   ****             RESUME_SYNTAX
 357:asm_arm.inc   ****             : "+r" (r0), "+r" (r1)
 358:asm_arm.inc   ****             : "r" (r2)
 359:asm_arm.inc   ****             : "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
 360:asm_arm.inc   ****         );
 361:asm_arm.inc   ****         return;
 362:asm_arm.inc   ****     }
 363:asm_arm.inc   **** #endif
 364:asm_arm.inc   **** #if uECC_SUPPORTS_secp224r1
 365:asm_arm.inc   ****     if (num_words == 7) {
 366:asm_arm.inc   ****         __asm__ volatile (
 367:asm_arm.inc   ****             ".syntax unified \n\t"
 368:asm_arm.inc   ****             FAST_SQUARE_ASM_7
 369:asm_arm.inc   ****             RESUME_SYNTAX
 370:asm_arm.inc   ****             : "+r" (r0), "+r" (r1)
 371:asm_arm.inc   ****             : "r" (r2)
 372:asm_arm.inc   ****             : "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
 373:asm_arm.inc   ****         );
 374:asm_arm.inc   ****         return;
 375:asm_arm.inc   ****     }
 376:asm_arm.inc   **** #endif
 377:asm_arm.inc   **** #if (uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1)
 378:asm_arm.inc   ****     if (num_words == 8) {
 379:asm_arm.inc   ****         __asm__ volatile (
 380:asm_arm.inc   ****             ".syntax unified \n\t"
 381:asm_arm.inc   ****             FAST_SQUARE_ASM_8
 382:asm_arm.inc   ****             RESUME_SYNTAX
 383:asm_arm.inc   ****             : "+r" (r0), "+r" (r1)
 384:asm_arm.inc   ****             : "r" (r2)
 385:asm_arm.inc   ****             : "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
 386:asm_arm.inc   ****         );
 387:asm_arm.inc   ****         return;
 388:asm_arm.inc   ****     }
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 12


 389:asm_arm.inc   **** #endif
 390:asm_arm.inc   **** }
 391:asm_arm.inc   **** #define asm_square 1
 392:asm_arm.inc   **** #endif /* uECC_SQUARE_FUNC */
 393:asm_arm.inc   **** 
 394:asm_arm.inc   **** #endif /* (uECC_OPTIMIZATION_LEVEL > 3) */
 395:asm_arm.inc   **** 
 396:asm_arm.inc   **** #endif /* uECC_PLATFORM != uECC_arm_thumb */
 397:asm_arm.inc   **** 
 398:asm_arm.inc   **** #endif /* (uECC_OPTIMIZATION_LEVEL >= 3) */
 399:asm_arm.inc   **** 
 400:asm_arm.inc   **** /* ---- "Small" implementations ---- */
 401:asm_arm.inc   **** 
 402:asm_arm.inc   **** #if !asm_add
 403:asm_arm.inc   **** uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
 404:asm_arm.inc   ****                                       const uECC_word_t *left,
 405:asm_arm.inc   ****                                       const uECC_word_t *right,
 406:asm_arm.inc   ****                                       wordcount_t num_words) {
 407:asm_arm.inc   ****     uint32_t carry = 0;
 408:asm_arm.inc   ****     uint32_t left_word;
 409:asm_arm.inc   ****     uint32_t right_word;
 410:asm_arm.inc   ****     
 411:asm_arm.inc   ****     __asm__ volatile (
 412:asm_arm.inc   ****         ".syntax unified \n\t"
 413:asm_arm.inc   ****         "1: \n\t"
 414:asm_arm.inc   ****         "ldmia %[lptr]!, {%[left]} \n\t"  /* Load left word. */
 415:asm_arm.inc   ****         "ldmia %[rptr]!, {%[right]} \n\t" /* Load right word. */
 416:asm_arm.inc   ****         "lsrs %[carry], #1 \n\t"          /* Set up carry flag (carry = 0 after this). */
 417:asm_arm.inc   ****         "adcs %[left], %[left], %[right] \n\t"   /* Add with carry. */
 418:asm_arm.inc   ****         "adcs %[carry], %[carry], %[carry] \n\t" /* Store carry bit. */
 419:asm_arm.inc   ****         "stmia %[dptr]!, {%[left]} \n\t"  /* Store result word. */
 420:asm_arm.inc   ****         "subs %[ctr], #1 \n\t"            /* Decrement counter. */
 421:asm_arm.inc   ****         "bne 1b \n\t"                     /* Loop until counter == 0. */
 422:asm_arm.inc   ****         RESUME_SYNTAX
 423:asm_arm.inc   ****         : [dptr] REG_RW (result), [lptr] REG_RW (left), [rptr] REG_RW (right),
 424:asm_arm.inc   ****           [ctr] REG_RW (num_words), [carry] REG_RW (carry),
 425:asm_arm.inc   ****           [left] REG_WRITE (left_word), [right] REG_WRITE (right_word)
 426:asm_arm.inc   ****         :
 427:asm_arm.inc   ****         : "cc", "memory"
 428:asm_arm.inc   ****     );
 429:asm_arm.inc   ****     return carry;
 430:asm_arm.inc   **** }
 431:asm_arm.inc   **** #define asm_add 1
 432:asm_arm.inc   **** #endif
 433:asm_arm.inc   **** 
 434:asm_arm.inc   **** #if !asm_sub
 435:asm_arm.inc   **** uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
 436:asm_arm.inc   ****                                       const uECC_word_t *left,
 437:asm_arm.inc   ****                                       const uECC_word_t *right,
 438:asm_arm.inc   ****                                       wordcount_t num_words) {
 439:asm_arm.inc   ****     uint32_t carry = 1; /* carry = 1 initially (means don't borrow) */
 440:asm_arm.inc   ****     uint32_t left_word;
 441:asm_arm.inc   ****     uint32_t right_word;
 442:asm_arm.inc   ****     
 443:asm_arm.inc   ****     __asm__ volatile (
 444:asm_arm.inc   ****         ".syntax unified \n\t"
 445:asm_arm.inc   ****         "1: \n\t"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 13


 446:asm_arm.inc   ****         "ldmia %[lptr]!, {%[left]} \n\t"  /* Load left word. */
 447:asm_arm.inc   ****         "ldmia %[rptr]!, {%[right]} \n\t" /* Load right word. */
 448:asm_arm.inc   ****         "lsrs %[carry], #1 \n\t"          /* Set up carry flag (carry = 0 after this). */
 449:asm_arm.inc   ****         "sbcs %[left], %[left], %[right] \n\t"   /* Subtract with borrow. */
 450:asm_arm.inc   ****         "adcs %[carry], %[carry], %[carry] \n\t" /* Store carry bit. */
 451:asm_arm.inc   ****         "stmia %[dptr]!, {%[left]} \n\t"  /* Store result word. */
 452:asm_arm.inc   ****         "subs %[ctr], #1 \n\t"            /* Decrement counter. */
 453:asm_arm.inc   ****         "bne 1b \n\t"                     /* Loop until counter == 0. */
 454:asm_arm.inc   ****         RESUME_SYNTAX
 455:asm_arm.inc   ****         : [dptr] REG_RW (result), [lptr] REG_RW (left), [rptr] REG_RW (right),
 456:asm_arm.inc   ****           [ctr] REG_RW (num_words), [carry] REG_RW (carry),
 457:asm_arm.inc   ****           [left] REG_WRITE (left_word), [right] REG_WRITE (right_word)
 458:asm_arm.inc   ****         :
 459:asm_arm.inc   ****         : "cc", "memory"
 460:asm_arm.inc   ****     );
 461:asm_arm.inc   ****     return !carry;
 462:asm_arm.inc   **** }
 463:asm_arm.inc   **** #define asm_sub 1
 464:asm_arm.inc   **** #endif
 465:asm_arm.inc   **** 
 466:asm_arm.inc   **** #if !asm_mult
 467:asm_arm.inc   **** uECC_VLI_API void uECC_vli_mult(uECC_word_t *result,
 468:asm_arm.inc   ****                                 const uECC_word_t *left,
 469:asm_arm.inc   ****                                 const uECC_word_t *right,
 470:asm_arm.inc   ****                                 wordcount_t num_words) {
 240              		.loc 1 470 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 32
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 245              		.cfi_def_cfa_offset 20
 246              		.cfi_offset 4, -20
 247              		.cfi_offset 5, -16
 248              		.cfi_offset 6, -12
 249              		.cfi_offset 7, -8
 250              		.cfi_offset 14, -4
 251 0002 5F46     		mov	r7, fp
 252 0004 5646     		mov	r6, r10
 253 0006 4D46     		mov	r5, r9
 254 0008 4446     		mov	r4, r8
 255 000a F0B4     		push	{r4, r5, r6, r7}
 256              		.cfi_def_cfa_offset 36
 257              		.cfi_offset 8, -36
 258              		.cfi_offset 9, -32
 259              		.cfi_offset 10, -28
 260              		.cfi_offset 11, -24
 261 000c 89B0     		sub	sp, sp, #36
 262              		.cfi_def_cfa_offset 72
 263 000e 0390     		str	r0, [sp, #12]
 264 0010 0291     		str	r1, [sp, #8]
 265 0012 0192     		str	r2, [sp, #4]
 266 0014 1A00     		movs	r2, r3
 267 0016 6B46     		mov	r3, sp
 268 0018 0333     		adds	r3, r3, #3
 269 001a 1A70     		strb	r2, [r3]
 471:asm_arm.inc   **** #if (uECC_PLATFORM != uECC_arm_thumb)
 472:asm_arm.inc   ****     uint32_t c0 = 0;
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 14


 473:asm_arm.inc   ****     uint32_t c1 = 0;
 474:asm_arm.inc   ****     uint32_t c2 = 0;
 475:asm_arm.inc   ****     uint32_t k = 0;
 476:asm_arm.inc   ****     uint32_t i;
 477:asm_arm.inc   ****     uint32_t t0, t1;
 478:asm_arm.inc   ****     
 479:asm_arm.inc   ****     __asm__ volatile (
 480:asm_arm.inc   ****         ".syntax unified \n\t"
 481:asm_arm.inc   ****         
 482:asm_arm.inc   ****         "1: \n\t" /* outer loop (k < num_words) */
 483:asm_arm.inc   ****         "movs %[i], #0 \n\t" /* i = 0 */
 484:asm_arm.inc   ****         "b 3f \n\t"
 485:asm_arm.inc   ****         
 486:asm_arm.inc   ****         "2: \n\t" /* outer loop (k >= num_words) */
 487:asm_arm.inc   ****         "movs %[i], %[k] \n\t"         /* i = k */
 488:asm_arm.inc   ****         "subs %[i], %[last_word] \n\t" /* i = k - (num_words - 1) (times 4) */
 489:asm_arm.inc   ****         
 490:asm_arm.inc   ****         "3: \n\t" /* inner loop */
 491:asm_arm.inc   ****         "subs %[t0], %[k], %[i] \n\t" /* t0 = k-i */
 492:asm_arm.inc   ****         
 493:asm_arm.inc   ****         "ldr %[t1], [%[right], %[t0]] \n\t" /* t1 = right[k - i] */
 494:asm_arm.inc   ****         "ldr %[t0], [%[left], %[i]] \n\t"   /* t0 = left[i] */
 495:asm_arm.inc   ****         
 496:asm_arm.inc   ****         "umull %[t0], %[t1], %[t0], %[t1] \n\t" /* (t0, t1) = left[i] * right[k - i] */
 497:asm_arm.inc   ****         
 498:asm_arm.inc   ****         "adds %[c0], %[c0], %[t0] \n\t" /* add low word to c0 */
 499:asm_arm.inc   ****         "adcs %[c1], %[c1], %[t1] \n\t" /* add high word to c1, including carry */
 500:asm_arm.inc   ****         "adcs %[c2], %[c2], #0 \n\t"    /* add carry to c2 */
 501:asm_arm.inc   **** 
 502:asm_arm.inc   ****         "adds %[i], #4 \n\t"          /* i += 4 */
 503:asm_arm.inc   ****         "cmp %[i], %[last_word] \n\t" /* i > (num_words - 1) (times 4)? */
 504:asm_arm.inc   ****         "bgt 4f \n\t"                 /*   if so, exit the loop */
 505:asm_arm.inc   ****         "cmp %[i], %[k] \n\t"         /* i <= k? */
 506:asm_arm.inc   ****         "ble 3b \n\t"                 /*   if so, continue looping */
 507:asm_arm.inc   ****         
 508:asm_arm.inc   ****         "4: \n\t" /* end inner loop */
 509:asm_arm.inc   ****         
 510:asm_arm.inc   ****         "str %[c0], [%[result], %[k]] \n\t" /* result[k] = c0 */
 511:asm_arm.inc   ****         "mov %[c0], %[c1] \n\t"       /* c0 = c1 */
 512:asm_arm.inc   ****         "mov %[c1], %[c2] \n\t"       /* c1 = c2 */
 513:asm_arm.inc   ****         "movs %[c2], #0 \n\t"         /* c2 = 0 */
 514:asm_arm.inc   ****         "adds %[k], #4 \n\t"          /* k += 4 */
 515:asm_arm.inc   ****         "cmp %[k], %[last_word] \n\t" /* k <= (num_words - 1) (times 4) ? */
 516:asm_arm.inc   ****         "ble 1b \n\t"                 /*   if so, loop back, start with i = 0 */
 517:asm_arm.inc   ****         "cmp %[k], %[last_word], lsl #1 \n\t" /* k <= (num_words * 2 - 2) (times 4) ? */
 518:asm_arm.inc   ****         "ble 2b \n\t"                 /*   if so, loop back, start with i = (k + 1) - num_words */
 519:asm_arm.inc   ****         /* end outer loop */
 520:asm_arm.inc   ****         
 521:asm_arm.inc   ****         "str %[c0], [%[result], %[k]] \n\t" /* result[num_words * 2 - 1] = c0 */
 522:asm_arm.inc   ****         RESUME_SYNTAX
 523:asm_arm.inc   ****         : [c0] "+r" (c0), [c1] "+r" (c1), [c2] "+r" (c2),
 524:asm_arm.inc   ****           [k] "+r" (k), [i] "=&r" (i), [t0] "=&r" (t0), [t1] "=&r" (t1)
 525:asm_arm.inc   ****         : [result] "r" (result), [left] "r" (left), [right] "r" (right),
 526:asm_arm.inc   ****           [last_word] "r" ((num_words - 1) * 4)
 527:asm_arm.inc   ****         : "cc", "memory"
 528:asm_arm.inc   ****     );
 529:asm_arm.inc   ****     
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 15


 530:asm_arm.inc   **** #else /* Thumb-1 */
 531:asm_arm.inc   ****     uint32_t r4, r5, r6, r7;
 532:asm_arm.inc   **** 
 533:asm_arm.inc   ****     __asm__ volatile (
 270              		.loc 1 533 0
 271 001c 039A     		ldr	r2, [sp, #12]
 272 001e 0299     		ldr	r1, [sp, #8]
 273 0020 0198     		ldr	r0, [sp, #4]
 274 0022 6B46     		mov	r3, sp
 275 0024 0333     		adds	r3, r3, #3
 276 0026 1B78     		ldrb	r3, [r3]
 277              		.syntax divided
 278              	@ 533 "asm_arm.inc" 1
 279              		.syntax unified 
 280 0028 013B     		subs r3, #1 
 281 002a 9B00     		lsls r3, #2 
 282 002c 9846     		mov r8, r3 
 283 002e 5B00     		lsls r3, #1 
 284 0030 9946     		mov r9, r3 
 285 0032 0023     		movs r3, #0 
 286 0034 0027     		movs r7, #0 
 287 0036 0026     		movs r6, #0 
 288 0038 0025     		movs r5, #0 
 289 003a 04B4     		push {r2} 
 290              		1: 
 291 003c 0024     		movs r4, #0 
 292 003e 02E0     		b 3f 
 293              		2: 
 294 0040 2C00     		movs r4, r5 
 295 0042 4246     		mov r2, r8 
 296 0044 A41A     		subs r4, r2 
 297              		3: 
 298 0046 9A46     		mov r10, r3 
 299 0048 BB46     		mov r11, r7 
 300 004a B446     		mov r12, r6 
 301 004c AE46     		mov r14, r5 
 302 004e 2A1B     		subs r2, r5, r4 
 303 0050 8758     		ldr r7, [r0, r2] 
 304 0052 0A59     		ldr r2, [r1, r4] 
 305 0054 130C     		lsrs r3, r2, #16 
 306 0056 92B2     		uxth r2, r2 
 307 0058 3E0C     		lsrs r6, r7, #16 
 308 005a BFB2     		uxth r7, r7 
 309 005c 1D00     		movs r5, r3 
 310 005e 7543     		muls r5, r6, r5 
 311 0060 7B43     		muls r3, r7, r3 
 312 0062 5643     		muls r6, r2, r6 
 313 0064 7A43     		muls r2, r7, r2 
 314 0066 1F04     		lsls r7, r3, #16 
 315 0068 1B0C     		lsrs r3, r3, #16 
 316 006a D219     		adds r2, r7 
 317 006c 5D41     		adcs r5, r3 
 318 006e 3704     		lsls r7, r6, #16 
 319 0070 360C     		lsrs r6, r6, #16 
 320 0072 D219     		adds r2, r7 
 321 0074 7541     		adcs r5, r6 
 322 0076 5346     		mov r3, r10
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 16


 323 0078 5F46     		mov r7, r11
 324 007a 6646     		mov r6, r12
 325 007c 9B18     		adds r3, r2 
 326 007e 6F41     		adcs r7, r5 
 327 0080 0022     		movs r2, #0 
 328 0082 5641     		adcs r6, r2 
 329 0084 7546     		mov r5, r14
 330 0086 0434     		adds r4, #4 
 331 0088 4445     		cmp r4, r8 
 332 008a 01DC     		bgt 4f 
 333 008c AC42     		cmp r4, r5 
 334 008e DADD     		ble 3b 
 335              		4: 
 336 0090 009A     		ldr r2, [sp, #0] 
 337 0092 5351     		str r3, [r2, r5] 
 338 0094 3B46     		mov r3, r7 
 339 0096 3746     		mov r7, r6 
 340 0098 0026     		movs r6, #0 
 341 009a 0435     		adds r5, #4 
 342 009c 4545     		cmp r5, r8 
 343 009e CDDD     		ble 1b 
 344 00a0 4D45     		cmp r5, r9 
 345 00a2 CDDD     		ble 2b 
 346 00a4 5351     		str r3, [r2, r5] 
 347 00a6 04BC     		pop {r2} 
 348              		.syntax divided 
 349              		
 350              	@ 0 "" 2
 351              		.thumb
 352              		.syntax unified
 353 00a8 6A46     		mov	r2, sp
 354 00aa 0332     		adds	r2, r2, #3
 355 00ac 1370     		strb	r3, [r2]
 356 00ae 0797     		str	r7, [sp, #28]
 357 00b0 0696     		str	r6, [sp, #24]
 358 00b2 0595     		str	r5, [sp, #20]
 359 00b4 0494     		str	r4, [sp, #16]
 534:asm_arm.inc   ****         ".syntax unified \n\t"
 535:asm_arm.inc   ****         "subs %[r3], #1 \n\t" /* r3 = num_words - 1 */
 536:asm_arm.inc   ****         "lsls %[r3], #2 \n\t" /* r3 = (num_words - 1) * 4 */
 537:asm_arm.inc   ****         "mov r8, %[r3] \n\t"  /* r8 = (num_words - 1) * 4 */
 538:asm_arm.inc   ****         "lsls %[r3], #1 \n\t" /* r3 = (num_words - 1) * 8 */
 539:asm_arm.inc   ****         "mov r9, %[r3] \n\t"  /* r9 = (num_words - 1) * 8 */
 540:asm_arm.inc   ****         "movs %[r3], #0 \n\t" /* c0 = 0 */
 541:asm_arm.inc   ****         "movs %[r4], #0 \n\t" /* c1 = 0 */
 542:asm_arm.inc   ****         "movs %[r5], #0 \n\t" /* c2 = 0 */
 543:asm_arm.inc   ****         "movs %[r6], #0 \n\t" /* k = 0 */
 544:asm_arm.inc   ****         
 545:asm_arm.inc   ****         "push {%[r0]} \n\t" /* keep result on the stack */
 546:asm_arm.inc   ****         
 547:asm_arm.inc   ****         "1: \n\t" /* outer loop (k < num_words) */
 548:asm_arm.inc   ****         "movs %[r7], #0 \n\t" /* r7 = i = 0 */
 549:asm_arm.inc   ****         "b 3f \n\t"
 550:asm_arm.inc   ****         
 551:asm_arm.inc   ****         "2: \n\t" /* outer loop (k >= num_words) */
 552:asm_arm.inc   ****         "movs %[r7], %[r6] \n\t" /* r7 = k */
 553:asm_arm.inc   ****         "mov %[r0], r8 \n\t"     /* r0 = (num_words - 1) * 4 */
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 17


 554:asm_arm.inc   ****         "subs %[r7], %[r0] \n\t" /* r7 = i = k - (num_words - 1) (times 4) */
 555:asm_arm.inc   ****         
 556:asm_arm.inc   ****         "3: \n\t" /* inner loop */
 557:asm_arm.inc   ****         "mov r10, %[r3] \n\t"
 558:asm_arm.inc   ****         "mov r11, %[r4] \n\t"
 559:asm_arm.inc   ****         "mov r12, %[r5] \n\t"
 560:asm_arm.inc   ****         "mov r14, %[r6] \n\t"
 561:asm_arm.inc   ****         "subs %[r0], %[r6], %[r7] \n\t"          /* r0 = k - i */
 562:asm_arm.inc   ****         
 563:asm_arm.inc   ****         "ldr %[r4], [%[r2], %[r0]] \n\t" /* r4 = right[k - i] */
 564:asm_arm.inc   ****         "ldr %[r0], [%[r1], %[r7]] \n\t" /* r0 = left[i] */
 565:asm_arm.inc   ****         
 566:asm_arm.inc   ****         "lsrs %[r3], %[r0], #16 \n\t" /* r3 = a1 */
 567:asm_arm.inc   ****         "uxth %[r0], %[r0] \n\t"      /* r0 = a0 */
 568:asm_arm.inc   ****         
 569:asm_arm.inc   ****         "lsrs %[r5], %[r4], #16 \n\t" /* r5 = b1 */
 570:asm_arm.inc   ****         "uxth %[r4], %[r4] \n\t"      /* r4 = b0 */
 571:asm_arm.inc   ****         
 572:asm_arm.inc   ****         "movs %[r6], %[r3] \n\t"        /* r6 = a1 */
 573:asm_arm.inc   ****         "muls %[r6], %[r5], %[r6] \n\t" /* r6 = a1 * b1 */
 574:asm_arm.inc   ****         "muls %[r3], %[r4], %[r3] \n\t" /* r3 = b0 * a1 */
 575:asm_arm.inc   ****         "muls %[r5], %[r0], %[r5] \n\t" /* r5 = a0 * b1 */
 576:asm_arm.inc   ****         "muls %[r0], %[r4], %[r0] \n\t" /* r0 = a0 * b0 */
 577:asm_arm.inc   ****         
 578:asm_arm.inc   ****         /* Add middle terms */
 579:asm_arm.inc   ****         "lsls %[r4], %[r3], #16 \n\t"
 580:asm_arm.inc   ****         "lsrs %[r3], %[r3], #16 \n\t"
 581:asm_arm.inc   ****         "adds %[r0], %[r4] \n\t"
 582:asm_arm.inc   ****         "adcs %[r6], %[r3] \n\t"
 583:asm_arm.inc   ****         
 584:asm_arm.inc   ****         "lsls %[r4], %[r5], #16 \n\t"
 585:asm_arm.inc   ****         "lsrs %[r5], %[r5], #16 \n\t"
 586:asm_arm.inc   ****         "adds %[r0], %[r4] \n\t"
 587:asm_arm.inc   ****         "adcs %[r6], %[r5] \n\t"
 588:asm_arm.inc   ****         
 589:asm_arm.inc   ****         "mov %[r3], r10\n\t"
 590:asm_arm.inc   ****         "mov %[r4], r11\n\t"
 591:asm_arm.inc   ****         "mov %[r5], r12\n\t"
 592:asm_arm.inc   ****         "adds %[r3], %[r0] \n\t"         /* add low word to c0 */
 593:asm_arm.inc   ****         "adcs %[r4], %[r6] \n\t"         /* add high word to c1, including carry */
 594:asm_arm.inc   ****         "movs %[r0], #0 \n\t"            /* r0 = 0 (does not affect carry bit) */
 595:asm_arm.inc   ****         "adcs %[r5], %[r0] \n\t"         /* add carry to c2 */
 596:asm_arm.inc   ****         
 597:asm_arm.inc   ****         "mov %[r6], r14\n\t" /* r6 = k */
 598:asm_arm.inc   **** 
 599:asm_arm.inc   ****         "adds %[r7], #4 \n\t"   /* i += 4 */
 600:asm_arm.inc   ****         "cmp %[r7], r8 \n\t"    /* i > (num_words - 1) (times 4)? */
 601:asm_arm.inc   ****         "bgt 4f \n\t"           /*   if so, exit the loop */
 602:asm_arm.inc   ****         "cmp %[r7], %[r6] \n\t" /* i <= k? */
 603:asm_arm.inc   ****         "ble 3b \n\t"           /*   if so, continue looping */
 604:asm_arm.inc   ****         
 605:asm_arm.inc   ****         "4: \n\t" /* end inner loop */
 606:asm_arm.inc   ****         
 607:asm_arm.inc   ****         "ldr %[r0], [sp, #0] \n\t" /* r0 = result */
 608:asm_arm.inc   ****         
 609:asm_arm.inc   ****         "str %[r3], [%[r0], %[r6]] \n\t" /* result[k] = c0 */
 610:asm_arm.inc   ****         "mov %[r3], %[r4] \n\t"          /* c0 = c1 */
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 18


 611:asm_arm.inc   ****         "mov %[r4], %[r5] \n\t"          /* c1 = c2 */
 612:asm_arm.inc   ****         "movs %[r5], #0 \n\t"            /* c2 = 0 */
 613:asm_arm.inc   ****         "adds %[r6], #4 \n\t"            /* k += 4 */
 614:asm_arm.inc   ****         "cmp %[r6], r8 \n\t"             /* k <= (num_words - 1) (times 4) ? */
 615:asm_arm.inc   ****         "ble 1b \n\t"                    /*   if so, loop back, start with i = 0 */
 616:asm_arm.inc   ****         "cmp %[r6], r9 \n\t"             /* k <= (num_words * 2 - 2) (times 4) ? */
 617:asm_arm.inc   ****         "ble 2b \n\t"                    /*   if so, loop back, with i = (k + 1) - num_words */
 618:asm_arm.inc   ****         /* end outer loop */
 619:asm_arm.inc   ****         
 620:asm_arm.inc   ****         "str %[r3], [%[r0], %[r6]] \n\t" /* result[num_words * 2 - 1] = c0 */
 621:asm_arm.inc   ****         "pop {%[r0]} \n\t"               /* pop result off the stack */
 622:asm_arm.inc   ****         
 623:asm_arm.inc   ****         ".syntax divided \n\t"
 624:asm_arm.inc   ****         : [r3] "+l" (num_words), [r4] "=&l" (r4),
 625:asm_arm.inc   ****           [r5] "=&l" (r5), [r6] "=&l" (r6), [r7] "=&l" (r7)
 626:asm_arm.inc   ****         : [r0] "l" (result), [r1] "l" (left), [r2] "l" (right)
 627:asm_arm.inc   ****         : "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
 628:asm_arm.inc   ****     );
 629:asm_arm.inc   **** #endif
 630:asm_arm.inc   **** }
 360              		.loc 1 630 0
 361 00b6 C046     		nop
 362 00b8 09B0     		add	sp, sp, #36
 363              		@ sp needed
 364 00ba 3CBC     		pop	{r2, r3, r4, r5}
 365 00bc 9046     		mov	r8, r2
 366 00be 9946     		mov	r9, r3
 367 00c0 A246     		mov	r10, r4
 368 00c2 AB46     		mov	fp, r5
 369 00c4 F0BD     		pop	{r4, r5, r6, r7, pc}
 370              		.cfi_endproc
 371              	.LFE2:
 372              		.size	uECC_vli_mult, .-uECC_vli_mult
 373 00c6 C046     		.bss
 374              		.align	2
 375              	g_rng_function:
 376 0000 00000000 		.space	4
 377              		.section	.text.uECC_set_rng,"ax",%progbits
 378              		.align	2
 379              		.global	uECC_set_rng
 380              		.code	16
 381              		.thumb_func
 382              		.type	uECC_set_rng, %function
 383              	uECC_set_rng:
 384              	.LFB3:
 385              		.file 2 "uECC.c"
   1:uECC.c        **** /* Copyright 2014, Kenneth MacKay. Licensed under the BSD 2-clause license. */
   2:uECC.c        **** 
   3:uECC.c        **** #include "uECC.h"
   4:uECC.c        **** #include "uECC_vli.h"
   5:uECC.c        **** 
   6:uECC.c        **** extern void vli_print(uint8_t *vli, unsigned int size);
   7:uECC.c        **** 
   8:uECC.c        **** #ifndef uECC_RNG_MAX_TRIES
   9:uECC.c        ****     #define uECC_RNG_MAX_TRIES 64
  10:uECC.c        **** #endif
  11:uECC.c        **** 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 19


  12:uECC.c        **** #if uECC_ENABLE_VLI_API
  13:uECC.c        ****     #define uECC_VLI_API
  14:uECC.c        **** #else
  15:uECC.c        ****     #define uECC_VLI_API static
  16:uECC.c        **** #endif
  17:uECC.c        **** 
  18:uECC.c        **** #define CONCATX(a, ...) a ## __VA_ARGS__
  19:uECC.c        **** #define CONCAT(a, ...) CONCATX(a, __VA_ARGS__)
  20:uECC.c        **** 
  21:uECC.c        **** #define STRX(a) #a
  22:uECC.c        **** #define STR(a) STRX(a)
  23:uECC.c        **** 
  24:uECC.c        **** #define EVAL(...)  EVAL1(EVAL1(EVAL1(EVAL1(__VA_ARGS__))))
  25:uECC.c        **** #define EVAL1(...) EVAL2(EVAL2(EVAL2(EVAL2(__VA_ARGS__))))
  26:uECC.c        **** #define EVAL2(...) EVAL3(EVAL3(EVAL3(EVAL3(__VA_ARGS__))))
  27:uECC.c        **** #define EVAL3(...) EVAL4(EVAL4(EVAL4(EVAL4(__VA_ARGS__))))
  28:uECC.c        **** #define EVAL4(...) __VA_ARGS__
  29:uECC.c        **** 
  30:uECC.c        **** #define DEC_1  0
  31:uECC.c        **** #define DEC_2  1
  32:uECC.c        **** #define DEC_3  2
  33:uECC.c        **** #define DEC_4  3
  34:uECC.c        **** #define DEC_5  4
  35:uECC.c        **** #define DEC_6  5
  36:uECC.c        **** #define DEC_7  6
  37:uECC.c        **** #define DEC_8  7
  38:uECC.c        **** #define DEC_9  8
  39:uECC.c        **** #define DEC_10 9
  40:uECC.c        **** #define DEC_11 10
  41:uECC.c        **** #define DEC_12 11
  42:uECC.c        **** #define DEC_13 12
  43:uECC.c        **** #define DEC_14 13
  44:uECC.c        **** #define DEC_15 14
  45:uECC.c        **** #define DEC_16 15
  46:uECC.c        **** #define DEC_17 16
  47:uECC.c        **** #define DEC_18 17
  48:uECC.c        **** #define DEC_19 18
  49:uECC.c        **** #define DEC_20 19
  50:uECC.c        **** #define DEC_21 20
  51:uECC.c        **** #define DEC_22 21
  52:uECC.c        **** #define DEC_23 22
  53:uECC.c        **** #define DEC_24 23
  54:uECC.c        **** #define DEC_25 24
  55:uECC.c        **** #define DEC_26 25
  56:uECC.c        **** #define DEC_27 26
  57:uECC.c        **** #define DEC_28 27
  58:uECC.c        **** #define DEC_29 28
  59:uECC.c        **** #define DEC_30 29
  60:uECC.c        **** #define DEC_31 30
  61:uECC.c        **** #define DEC_32 31
  62:uECC.c        **** 
  63:uECC.c        **** #define DEC(N) CONCAT(DEC_, N)
  64:uECC.c        **** 
  65:uECC.c        **** #define SECOND_ARG(_, val, ...) val
  66:uECC.c        **** #define SOME_CHECK_0 ~, 0
  67:uECC.c        **** #define GET_SECOND_ARG(...) SECOND_ARG(__VA_ARGS__, SOME,)
  68:uECC.c        **** #define SOME_OR_0(N) GET_SECOND_ARG(CONCAT(SOME_CHECK_, N))
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 20


  69:uECC.c        **** 
  70:uECC.c        **** #define EMPTY(...)
  71:uECC.c        **** #define DEFER(...) __VA_ARGS__ EMPTY()
  72:uECC.c        **** 
  73:uECC.c        **** #define REPEAT_NAME_0() REPEAT_0
  74:uECC.c        **** #define REPEAT_NAME_SOME() REPEAT_SOME
  75:uECC.c        **** #define REPEAT_0(...)
  76:uECC.c        **** #define REPEAT_SOME(N, stuff) DEFER(CONCAT(REPEAT_NAME_, SOME_OR_0(DEC(N))))()(DEC(N), stuff) stuff
  77:uECC.c        **** #define REPEAT(N, stuff) EVAL(REPEAT_SOME(N, stuff))
  78:uECC.c        **** 
  79:uECC.c        **** #define REPEATM_NAME_0() REPEATM_0
  80:uECC.c        **** #define REPEATM_NAME_SOME() REPEATM_SOME
  81:uECC.c        **** #define REPEATM_0(...)
  82:uECC.c        **** #define REPEATM_SOME(N, macro) macro(N) \
  83:uECC.c        ****     DEFER(CONCAT(REPEATM_NAME_, SOME_OR_0(DEC(N))))()(DEC(N), macro)
  84:uECC.c        **** #define REPEATM(N, macro) EVAL(REPEATM_SOME(N, macro))
  85:uECC.c        **** 
  86:uECC.c        **** #include "platform-specific.inc"
  87:uECC.c        **** 
  88:uECC.c        **** #if (uECC_WORD_SIZE == 1)
  89:uECC.c        ****     #if uECC_SUPPORTS_secp160r1
  90:uECC.c        ****         #define uECC_MAX_WORDS 21 /* Due to the size of curve_n. */
  91:uECC.c        ****     #endif
  92:uECC.c        ****     #if uECC_SUPPORTS_secp192r1
  93:uECC.c        ****         #undef uECC_MAX_WORDS
  94:uECC.c        ****         #define uECC_MAX_WORDS 24
  95:uECC.c        ****     #endif
  96:uECC.c        ****     #if uECC_SUPPORTS_secp224r1
  97:uECC.c        ****         #undef uECC_MAX_WORDS
  98:uECC.c        ****         #define uECC_MAX_WORDS 28
  99:uECC.c        ****     #endif
 100:uECC.c        ****     #if (uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1)
 101:uECC.c        ****         #undef uECC_MAX_WORDS
 102:uECC.c        ****         #define uECC_MAX_WORDS 32
 103:uECC.c        ****     #endif
 104:uECC.c        **** #elif (uECC_WORD_SIZE == 4)
 105:uECC.c        ****     #if uECC_SUPPORTS_secp160r1
 106:uECC.c        ****         #define uECC_MAX_WORDS 6 /* Due to the size of curve_n. */
 107:uECC.c        ****     #endif
 108:uECC.c        ****     #if uECC_SUPPORTS_secp192r1
 109:uECC.c        ****         #undef uECC_MAX_WORDS
 110:uECC.c        ****         #define uECC_MAX_WORDS 6
 111:uECC.c        ****     #endif
 112:uECC.c        ****     #if uECC_SUPPORTS_secp224r1
 113:uECC.c        ****         #undef uECC_MAX_WORDS
 114:uECC.c        ****         #define uECC_MAX_WORDS 7
 115:uECC.c        ****     #endif
 116:uECC.c        ****     #if (uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1)
 117:uECC.c        ****         #undef uECC_MAX_WORDS
 118:uECC.c        ****         #define uECC_MAX_WORDS 8
 119:uECC.c        ****     #endif
 120:uECC.c        **** #elif (uECC_WORD_SIZE == 8)
 121:uECC.c        ****     #if uECC_SUPPORTS_secp160r1
 122:uECC.c        ****         #define uECC_MAX_WORDS 3
 123:uECC.c        ****     #endif
 124:uECC.c        ****     #if uECC_SUPPORTS_secp192r1
 125:uECC.c        ****         #undef uECC_MAX_WORDS
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 21


 126:uECC.c        ****         #define uECC_MAX_WORDS 3
 127:uECC.c        ****     #endif
 128:uECC.c        ****     #if uECC_SUPPORTS_secp224r1
 129:uECC.c        ****         #undef uECC_MAX_WORDS
 130:uECC.c        ****         #define uECC_MAX_WORDS 4
 131:uECC.c        ****     #endif
 132:uECC.c        ****     #if (uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1)
 133:uECC.c        ****         #undef uECC_MAX_WORDS
 134:uECC.c        ****         #define uECC_MAX_WORDS 4
 135:uECC.c        ****     #endif
 136:uECC.c        **** #endif /* uECC_WORD_SIZE */
 137:uECC.c        **** 
 138:uECC.c        **** #define BITS_TO_WORDS(num_bits) ((num_bits + ((uECC_WORD_SIZE * 8) - 1)) / (uECC_WORD_SIZE * 8))
 139:uECC.c        **** #define BITS_TO_BYTES(num_bits) ((num_bits + 7) / 8)
 140:uECC.c        **** 
 141:uECC.c        **** struct uECC_Curve_t {
 142:uECC.c        ****     wordcount_t num_words;
 143:uECC.c        ****     wordcount_t num_bytes;
 144:uECC.c        ****     bitcount_t num_n_bits;
 145:uECC.c        ****     uECC_word_t p[uECC_MAX_WORDS];
 146:uECC.c        ****     uECC_word_t n[uECC_MAX_WORDS];
 147:uECC.c        ****     uECC_word_t G[uECC_MAX_WORDS * 2];
 148:uECC.c        ****     uECC_word_t b[uECC_MAX_WORDS];
 149:uECC.c        ****     void (*double_jacobian)(uECC_word_t * X1,
 150:uECC.c        ****                             uECC_word_t * Y1,
 151:uECC.c        ****                             uECC_word_t * Z1,
 152:uECC.c        ****                             uECC_Curve curve);
 153:uECC.c        **** #if uECC_SUPPORT_COMPRESSED_POINT
 154:uECC.c        ****     void (*mod_sqrt)(uECC_word_t *a, uECC_Curve curve);
 155:uECC.c        **** #endif
 156:uECC.c        ****     void (*x_side)(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve);
 157:uECC.c        **** #if (uECC_OPTIMIZATION_LEVEL > 0)
 158:uECC.c        ****     void (*mmod_fast)(uECC_word_t *result, uECC_word_t *product);
 159:uECC.c        **** #endif
 160:uECC.c        **** };
 161:uECC.c        **** 
 162:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
 163:uECC.c        **** static void bcopy(uint8_t *dst,
 164:uECC.c        ****                   const uint8_t *src,
 165:uECC.c        ****                   unsigned num_bytes) {
 166:uECC.c        ****     while (0 != num_bytes) {
 167:uECC.c        ****         num_bytes--;
 168:uECC.c        ****         dst[num_bytes] = src[num_bytes];
 169:uECC.c        ****     }
 170:uECC.c        **** }
 171:uECC.c        **** #endif
 172:uECC.c        **** 
 173:uECC.c        **** static cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,
 174:uECC.c        ****                                        const uECC_word_t *right,
 175:uECC.c        ****                                        wordcount_t num_words);
 176:uECC.c        **** 
 177:uECC.c        **** #if (uECC_PLATFORM == uECC_arm || uECC_PLATFORM == uECC_arm_thumb || \
 178:uECC.c        ****         uECC_PLATFORM == uECC_arm_thumb2)
 179:uECC.c        ****     #include "asm_arm.inc"
 180:uECC.c        **** #endif
 181:uECC.c        **** 
 182:uECC.c        **** #if (uECC_PLATFORM == uECC_avr)
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 22


 183:uECC.c        ****     #include "asm_avr.inc"
 184:uECC.c        **** #endif
 185:uECC.c        **** 
 186:uECC.c        **** #if default_RNG_defined
 187:uECC.c        **** static uECC_RNG_Function g_rng_function = &default_RNG;
 188:uECC.c        **** #else
 189:uECC.c        **** static uECC_RNG_Function g_rng_function = 0;
 190:uECC.c        **** #endif
 191:uECC.c        **** 
 192:uECC.c        **** void uECC_set_rng(uECC_RNG_Function rng_function) {
 386              		.loc 2 192 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 8
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390              		@ link register save eliminated.
 391 0000 82B0     		sub	sp, sp, #8
 392              		.cfi_def_cfa_offset 8
 393 0002 0190     		str	r0, [sp, #4]
 193:uECC.c        ****     g_rng_function = rng_function;
 394              		.loc 2 193 0
 395 0004 024B     		ldr	r3, .L7
 396 0006 019A     		ldr	r2, [sp, #4]
 397 0008 1A60     		str	r2, [r3]
 194:uECC.c        **** }
 398              		.loc 2 194 0
 399 000a C046     		nop
 400 000c 02B0     		add	sp, sp, #8
 401              		@ sp needed
 402 000e 7047     		bx	lr
 403              	.L8:
 404              		.align	2
 405              	.L7:
 406 0010 00000000 		.word	g_rng_function
 407              		.cfi_endproc
 408              	.LFE3:
 409              		.size	uECC_set_rng, .-uECC_set_rng
 410              		.section	.text.uECC_get_rng,"ax",%progbits
 411              		.align	2
 412              		.global	uECC_get_rng
 413              		.code	16
 414              		.thumb_func
 415              		.type	uECC_get_rng, %function
 416              	uECC_get_rng:
 417              	.LFB4:
 195:uECC.c        **** 
 196:uECC.c        **** uECC_RNG_Function uECC_get_rng(void) {
 418              		.loc 2 196 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422              		@ link register save eliminated.
 197:uECC.c        ****     return g_rng_function;
 423              		.loc 2 197 0
 424 0000 014B     		ldr	r3, .L11
 425 0002 1B68     		ldr	r3, [r3]
 198:uECC.c        **** }
 426              		.loc 2 198 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 23


 427 0004 1800     		movs	r0, r3
 428              		@ sp needed
 429 0006 7047     		bx	lr
 430              	.L12:
 431              		.align	2
 432              	.L11:
 433 0008 00000000 		.word	g_rng_function
 434              		.cfi_endproc
 435              	.LFE4:
 436              		.size	uECC_get_rng, .-uECC_get_rng
 437              		.section	.text.uECC_curve_private_key_size,"ax",%progbits
 438              		.align	2
 439              		.global	uECC_curve_private_key_size
 440              		.code	16
 441              		.thumb_func
 442              		.type	uECC_curve_private_key_size, %function
 443              	uECC_curve_private_key_size:
 444              	.LFB5:
 199:uECC.c        **** 
 200:uECC.c        **** int uECC_curve_private_key_size(uECC_Curve curve) {
 445              		.loc 2 200 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 8
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              		@ link register save eliminated.
 450 0000 82B0     		sub	sp, sp, #8
 451              		.cfi_def_cfa_offset 8
 452 0002 0190     		str	r0, [sp, #4]
 201:uECC.c        ****     return BITS_TO_BYTES(curve->num_n_bits);
 453              		.loc 2 201 0
 454 0004 019B     		ldr	r3, [sp, #4]
 455 0006 0222     		movs	r2, #2
 456 0008 9B5E     		ldrsh	r3, [r3, r2]
 457 000a 0733     		adds	r3, r3, #7
 458 000c 002B     		cmp	r3, #0
 459 000e 00DA     		bge	.L14
 460 0010 0733     		adds	r3, r3, #7
 461              	.L14:
 462 0012 DB10     		asrs	r3, r3, #3
 202:uECC.c        **** }
 463              		.loc 2 202 0
 464 0014 1800     		movs	r0, r3
 465 0016 02B0     		add	sp, sp, #8
 466              		@ sp needed
 467 0018 7047     		bx	lr
 468              		.cfi_endproc
 469              	.LFE5:
 470              		.size	uECC_curve_private_key_size, .-uECC_curve_private_key_size
 471 001a C046     		.section	.text.uECC_curve_public_key_size,"ax",%progbits
 472              		.align	2
 473              		.global	uECC_curve_public_key_size
 474              		.code	16
 475              		.thumb_func
 476              		.type	uECC_curve_public_key_size, %function
 477              	uECC_curve_public_key_size:
 478              	.LFB6:
 203:uECC.c        **** 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 24


 204:uECC.c        **** int uECC_curve_public_key_size(uECC_Curve curve) {
 479              		.loc 2 204 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 8
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 484 0000 82B0     		sub	sp, sp, #8
 485              		.cfi_def_cfa_offset 8
 486 0002 0190     		str	r0, [sp, #4]
 205:uECC.c        ****     return 2 * curve->num_bytes;
 487              		.loc 2 205 0
 488 0004 019B     		ldr	r3, [sp, #4]
 489 0006 5B78     		ldrb	r3, [r3, #1]
 490 0008 5BB2     		sxtb	r3, r3
 491 000a 5B00     		lsls	r3, r3, #1
 206:uECC.c        **** }
 492              		.loc 2 206 0
 493 000c 1800     		movs	r0, r3
 494 000e 02B0     		add	sp, sp, #8
 495              		@ sp needed
 496 0010 7047     		bx	lr
 497              		.cfi_endproc
 498              	.LFE6:
 499              		.size	uECC_curve_public_key_size, .-uECC_curve_public_key_size
 500 0012 C046     		.section	.text.uECC_vli_clear,"ax",%progbits
 501              		.align	2
 502              		.code	16
 503              		.thumb_func
 504              		.type	uECC_vli_clear, %function
 505              	uECC_vli_clear:
 506              	.LFB7:
 207:uECC.c        **** 
 208:uECC.c        **** #if !asm_clear
 209:uECC.c        **** uECC_VLI_API void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words) {
 507              		.loc 2 209 0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 16
 510              		@ frame_needed = 0, uses_anonymous_args = 0
 511              		@ link register save eliminated.
 512 0000 84B0     		sub	sp, sp, #16
 513              		.cfi_def_cfa_offset 16
 514 0002 0190     		str	r0, [sp, #4]
 515 0004 0A00     		movs	r2, r1
 516 0006 6B46     		mov	r3, sp
 517 0008 0333     		adds	r3, r3, #3
 518 000a 1A70     		strb	r2, [r3]
 210:uECC.c        ****     wordcount_t i;
 211:uECC.c        ****     for (i = 0; i < num_words; ++i) {
 519              		.loc 2 211 0
 520 000c 0F23     		movs	r3, #15
 521 000e 6B44     		add	r3, r3, sp
 522 0010 0022     		movs	r2, #0
 523 0012 1A70     		strb	r2, [r3]
 524 0014 10E0     		b	.L19
 525              	.L20:
 212:uECC.c        ****         vli[i] = 0;
 526              		.loc 2 212 0 discriminator 3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 25


 527 0016 0F23     		movs	r3, #15
 528 0018 6B44     		add	r3, r3, sp
 529 001a 1B78     		ldrb	r3, [r3]
 530 001c 5BB2     		sxtb	r3, r3
 531 001e 9B00     		lsls	r3, r3, #2
 532 0020 019A     		ldr	r2, [sp, #4]
 533 0022 D318     		adds	r3, r2, r3
 534 0024 0022     		movs	r2, #0
 535 0026 1A60     		str	r2, [r3]
 211:uECC.c        ****         vli[i] = 0;
 536              		.loc 2 211 0 discriminator 3
 537 0028 0F23     		movs	r3, #15
 538 002a 6B44     		add	r3, r3, sp
 539 002c 1B78     		ldrb	r3, [r3]
 540 002e 0133     		adds	r3, r3, #1
 541 0030 DAB2     		uxtb	r2, r3
 542 0032 0F23     		movs	r3, #15
 543 0034 6B44     		add	r3, r3, sp
 544 0036 1A70     		strb	r2, [r3]
 545              	.L19:
 211:uECC.c        ****         vli[i] = 0;
 546              		.loc 2 211 0 is_stmt 0 discriminator 1
 547 0038 0F22     		movs	r2, #15
 548 003a 6A44     		add	r2, r2, sp
 549 003c 6B46     		mov	r3, sp
 550 003e 0333     		adds	r3, r3, #3
 551 0040 1278     		ldrb	r2, [r2]
 552 0042 52B2     		sxtb	r2, r2
 553 0044 1B78     		ldrb	r3, [r3]
 554 0046 5BB2     		sxtb	r3, r3
 555 0048 9A42     		cmp	r2, r3
 556 004a E4DB     		blt	.L20
 213:uECC.c        ****     }
 214:uECC.c        **** }
 557              		.loc 2 214 0 is_stmt 1
 558 004c C046     		nop
 559 004e 04B0     		add	sp, sp, #16
 560              		@ sp needed
 561 0050 7047     		bx	lr
 562              		.cfi_endproc
 563              	.LFE7:
 564              		.size	uECC_vli_clear, .-uECC_vli_clear
 565 0052 C046     		.section	.text.uECC_vli_isZero,"ax",%progbits
 566              		.align	2
 567              		.code	16
 568              		.thumb_func
 569              		.type	uECC_vli_isZero, %function
 570              	uECC_vli_isZero:
 571              	.LFB8:
 215:uECC.c        **** #endif /* !asm_clear */
 216:uECC.c        **** 
 217:uECC.c        **** /* Constant-time comparison to zero - secure way to compare long integers */
 218:uECC.c        **** /* Returns 1 if vli == 0, 0 otherwise. */
 219:uECC.c        **** uECC_VLI_API uECC_word_t uECC_vli_isZero(const uECC_word_t *vli, wordcount_t num_words) {
 572              		.loc 2 219 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 26


 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577 0000 84B0     		sub	sp, sp, #16
 578              		.cfi_def_cfa_offset 16
 579 0002 0190     		str	r0, [sp, #4]
 580 0004 0A00     		movs	r2, r1
 581 0006 6B46     		mov	r3, sp
 582 0008 0333     		adds	r3, r3, #3
 583 000a 1A70     		strb	r2, [r3]
 220:uECC.c        ****     uECC_word_t bits = 0;
 584              		.loc 2 220 0
 585 000c 0023     		movs	r3, #0
 586 000e 0393     		str	r3, [sp, #12]
 221:uECC.c        ****     wordcount_t i;
 222:uECC.c        ****     for (i = 0; i < num_words; ++i) {
 587              		.loc 2 222 0
 588 0010 0B23     		movs	r3, #11
 589 0012 6B44     		add	r3, r3, sp
 590 0014 0022     		movs	r2, #0
 591 0016 1A70     		strb	r2, [r3]
 592 0018 12E0     		b	.L22
 593              	.L23:
 223:uECC.c        ****         bits |= vli[i];
 594              		.loc 2 223 0 discriminator 3
 595 001a 0B23     		movs	r3, #11
 596 001c 6B44     		add	r3, r3, sp
 597 001e 1B78     		ldrb	r3, [r3]
 598 0020 5BB2     		sxtb	r3, r3
 599 0022 9B00     		lsls	r3, r3, #2
 600 0024 019A     		ldr	r2, [sp, #4]
 601 0026 D318     		adds	r3, r2, r3
 602 0028 1B68     		ldr	r3, [r3]
 603 002a 039A     		ldr	r2, [sp, #12]
 604 002c 1343     		orrs	r3, r2
 605 002e 0393     		str	r3, [sp, #12]
 222:uECC.c        ****         bits |= vli[i];
 606              		.loc 2 222 0 discriminator 3
 607 0030 0B23     		movs	r3, #11
 608 0032 6B44     		add	r3, r3, sp
 609 0034 1B78     		ldrb	r3, [r3]
 610 0036 0133     		adds	r3, r3, #1
 611 0038 DAB2     		uxtb	r2, r3
 612 003a 0B23     		movs	r3, #11
 613 003c 6B44     		add	r3, r3, sp
 614 003e 1A70     		strb	r2, [r3]
 615              	.L22:
 222:uECC.c        ****         bits |= vli[i];
 616              		.loc 2 222 0 is_stmt 0 discriminator 1
 617 0040 0B22     		movs	r2, #11
 618 0042 6A44     		add	r2, r2, sp
 619 0044 6B46     		mov	r3, sp
 620 0046 0333     		adds	r3, r3, #3
 621 0048 1278     		ldrb	r2, [r2]
 622 004a 52B2     		sxtb	r2, r2
 623 004c 1B78     		ldrb	r3, [r3]
 624 004e 5BB2     		sxtb	r3, r3
 625 0050 9A42     		cmp	r2, r3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 27


 626 0052 E2DB     		blt	.L23
 224:uECC.c        ****     }
 225:uECC.c        ****     return (bits == 0);
 627              		.loc 2 225 0 is_stmt 1
 628 0054 039B     		ldr	r3, [sp, #12]
 629 0056 5A42     		rsbs	r2, r3, #0
 630 0058 5341     		adcs	r3, r3, r2
 631 005a DBB2     		uxtb	r3, r3
 226:uECC.c        **** }
 632              		.loc 2 226 0
 633 005c 1800     		movs	r0, r3
 634 005e 04B0     		add	sp, sp, #16
 635              		@ sp needed
 636 0060 7047     		bx	lr
 637              		.cfi_endproc
 638              	.LFE8:
 639              		.size	uECC_vli_isZero, .-uECC_vli_isZero
 640 0062 C046     		.section	.text.uECC_vli_testBit,"ax",%progbits
 641              		.align	2
 642              		.code	16
 643              		.thumb_func
 644              		.type	uECC_vli_testBit, %function
 645              	uECC_vli_testBit:
 646              	.LFB9:
 227:uECC.c        **** 
 228:uECC.c        **** /* Returns nonzero if bit 'bit' of vli is set. */
 229:uECC.c        **** uECC_VLI_API uECC_word_t uECC_vli_testBit(const uECC_word_t *vli, bitcount_t bit) {
 647              		.loc 2 229 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 8
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 652 0000 82B0     		sub	sp, sp, #8
 653              		.cfi_def_cfa_offset 8
 654 0002 0190     		str	r0, [sp, #4]
 655 0004 0A00     		movs	r2, r1
 656 0006 6B46     		mov	r3, sp
 657 0008 0233     		adds	r3, r3, #2
 658 000a 1A80     		strh	r2, [r3]
 230:uECC.c        ****     return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 659              		.loc 2 230 0
 660 000c 6B46     		mov	r3, sp
 661 000e 0233     		adds	r3, r3, #2
 662 0010 0022     		movs	r2, #0
 663 0012 9B5E     		ldrsh	r3, [r3, r2]
 664 0014 5B11     		asrs	r3, r3, #5
 665 0016 1BB2     		sxth	r3, r3
 666 0018 9B00     		lsls	r3, r3, #2
 667 001a 019A     		ldr	r2, [sp, #4]
 668 001c D318     		adds	r3, r2, r3
 669 001e 1B68     		ldr	r3, [r3]
 670 0020 6A46     		mov	r2, sp
 671 0022 0232     		adds	r2, r2, #2
 672 0024 1288     		ldrh	r2, [r2]
 673 0026 1100     		movs	r1, r2
 674 0028 1F22     		movs	r2, #31
 675 002a 0A40     		ands	r2, r1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 28


 676 002c 0121     		movs	r1, #1
 677 002e 9140     		lsls	r1, r1, r2
 678 0030 0A00     		movs	r2, r1
 679 0032 1340     		ands	r3, r2
 231:uECC.c        **** }
 680              		.loc 2 231 0
 681 0034 1800     		movs	r0, r3
 682 0036 02B0     		add	sp, sp, #8
 683              		@ sp needed
 684 0038 7047     		bx	lr
 685              		.cfi_endproc
 686              	.LFE9:
 687              		.size	uECC_vli_testBit, .-uECC_vli_testBit
 688 003a C046     		.section	.text.vli_numDigits,"ax",%progbits
 689              		.align	2
 690              		.code	16
 691              		.thumb_func
 692              		.type	vli_numDigits, %function
 693              	vli_numDigits:
 694              	.LFB10:
 232:uECC.c        **** 
 233:uECC.c        **** /* Counts the number of words in vli. */
 234:uECC.c        **** static wordcount_t vli_numDigits(const uECC_word_t *vli, const wordcount_t max_words) {
 695              		.loc 2 234 0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 16
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699              		@ link register save eliminated.
 700 0000 84B0     		sub	sp, sp, #16
 701              		.cfi_def_cfa_offset 16
 702 0002 0190     		str	r0, [sp, #4]
 703 0004 0A00     		movs	r2, r1
 704 0006 6B46     		mov	r3, sp
 705 0008 0333     		adds	r3, r3, #3
 706 000a 1A70     		strb	r2, [r3]
 235:uECC.c        ****     wordcount_t i;
 236:uECC.c        ****     /* Search from the end until we find a non-zero digit.
 237:uECC.c        ****        We do it in reverse because we expect that most digits will be nonzero. */
 238:uECC.c        ****     for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 707              		.loc 2 238 0
 708 000c 6B46     		mov	r3, sp
 709 000e 0333     		adds	r3, r3, #3
 710 0010 1B78     		ldrb	r3, [r3]
 711 0012 013B     		subs	r3, r3, #1
 712 0014 DAB2     		uxtb	r2, r3
 713 0016 0F23     		movs	r3, #15
 714 0018 6B44     		add	r3, r3, sp
 715 001a 1A70     		strb	r2, [r3]
 716 001c 07E0     		b	.L28
 717              	.L30:
 718              		.loc 2 238 0 is_stmt 0 discriminator 4
 719 001e 0F23     		movs	r3, #15
 720 0020 6B44     		add	r3, r3, sp
 721 0022 1B78     		ldrb	r3, [r3]
 722 0024 013B     		subs	r3, r3, #1
 723 0026 DAB2     		uxtb	r2, r3
 724 0028 0F23     		movs	r3, #15
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 29


 725 002a 6B44     		add	r3, r3, sp
 726 002c 1A70     		strb	r2, [r3]
 727              	.L28:
 728              		.loc 2 238 0 discriminator 1
 729 002e 0F23     		movs	r3, #15
 730 0030 6B44     		add	r3, r3, sp
 731 0032 1B78     		ldrb	r3, [r3]
 732 0034 7F2B     		cmp	r3, #127
 733 0036 09D8     		bhi	.L29
 734              		.loc 2 238 0 discriminator 3
 735 0038 0F23     		movs	r3, #15
 736 003a 6B44     		add	r3, r3, sp
 737 003c 1B78     		ldrb	r3, [r3]
 738 003e 5BB2     		sxtb	r3, r3
 739 0040 9B00     		lsls	r3, r3, #2
 740 0042 019A     		ldr	r2, [sp, #4]
 741 0044 D318     		adds	r3, r2, r3
 742 0046 1B68     		ldr	r3, [r3]
 743 0048 002B     		cmp	r3, #0
 744 004a E8D0     		beq	.L30
 745              	.L29:
 239:uECC.c        ****     }
 240:uECC.c        **** 
 241:uECC.c        ****     return (i + 1);
 746              		.loc 2 241 0 is_stmt 1
 747 004c 0F23     		movs	r3, #15
 748 004e 6B44     		add	r3, r3, sp
 749 0050 1B78     		ldrb	r3, [r3]
 750 0052 0133     		adds	r3, r3, #1
 751 0054 DBB2     		uxtb	r3, r3
 752 0056 5BB2     		sxtb	r3, r3
 242:uECC.c        **** }
 753              		.loc 2 242 0
 754 0058 1800     		movs	r0, r3
 755 005a 04B0     		add	sp, sp, #16
 756              		@ sp needed
 757 005c 7047     		bx	lr
 758              		.cfi_endproc
 759              	.LFE10:
 760              		.size	vli_numDigits, .-vli_numDigits
 761 005e C046     		.section	.text.uECC_vli_numBits,"ax",%progbits
 762              		.align	2
 763              		.code	16
 764              		.thumb_func
 765              		.type	uECC_vli_numBits, %function
 766              	uECC_vli_numBits:
 767              	.LFB11:
 243:uECC.c        **** 
 244:uECC.c        **** /* Counts the number of bits required to represent vli. */
 245:uECC.c        **** uECC_VLI_API bitcount_t uECC_vli_numBits(const uECC_word_t *vli, const wordcount_t max_words) {
 768              		.loc 2 245 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 24
 771              		@ frame_needed = 0, uses_anonymous_args = 0
 772 0000 10B5     		push	{r4, lr}
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 4, -8
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 30


 775              		.cfi_offset 14, -4
 776 0002 86B0     		sub	sp, sp, #24
 777              		.cfi_def_cfa_offset 32
 778 0004 0190     		str	r0, [sp, #4]
 779 0006 0A00     		movs	r2, r1
 780 0008 6B46     		mov	r3, sp
 781 000a 0333     		adds	r3, r3, #3
 782 000c 1A70     		strb	r2, [r3]
 246:uECC.c        ****     uECC_word_t i;
 247:uECC.c        ****     uECC_word_t digit;
 248:uECC.c        **** 
 249:uECC.c        ****     wordcount_t num_digits = vli_numDigits(vli, max_words);
 783              		.loc 2 249 0
 784 000e 0F24     		movs	r4, #15
 785 0010 6C44     		add	r4, r4, sp
 786 0012 6B46     		mov	r3, sp
 787 0014 0333     		adds	r3, r3, #3
 788 0016 0022     		movs	r2, #0
 789 0018 9A56     		ldrsb	r2, [r3, r2]
 790 001a 019B     		ldr	r3, [sp, #4]
 791 001c 1100     		movs	r1, r2
 792 001e 1800     		movs	r0, r3
 793 0020 FFF7FEFF 		bl	vli_numDigits
 794 0024 0300     		movs	r3, r0
 795 0026 2370     		strb	r3, [r4]
 250:uECC.c        ****     if (num_digits == 0) {
 796              		.loc 2 250 0
 797 0028 0F23     		movs	r3, #15
 798 002a 6B44     		add	r3, r3, sp
 799 002c 1B78     		ldrb	r3, [r3]
 800 002e 5BB2     		sxtb	r3, r3
 801 0030 002B     		cmp	r3, #0
 802 0032 01D1     		bne	.L33
 251:uECC.c        ****         return 0;
 803              		.loc 2 251 0
 804 0034 0023     		movs	r3, #0
 805 0036 25E0     		b	.L34
 806              	.L33:
 252:uECC.c        ****     }
 253:uECC.c        **** 
 254:uECC.c        ****     digit = vli[num_digits - 1];
 807              		.loc 2 254 0
 808 0038 0F23     		movs	r3, #15
 809 003a 6B44     		add	r3, r3, sp
 810 003c 1B78     		ldrb	r3, [r3]
 811 003e 5BB2     		sxtb	r3, r3
 812 0040 124A     		ldr	r2, .L37
 813 0042 9446     		mov	ip, r2
 814 0044 6344     		add	r3, r3, ip
 815 0046 9B00     		lsls	r3, r3, #2
 816 0048 019A     		ldr	r2, [sp, #4]
 817 004a D318     		adds	r3, r2, r3
 818 004c 1B68     		ldr	r3, [r3]
 819 004e 0493     		str	r3, [sp, #16]
 255:uECC.c        ****     for (i = 0; digit; ++i) {
 820              		.loc 2 255 0
 821 0050 0023     		movs	r3, #0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 31


 822 0052 0593     		str	r3, [sp, #20]
 823 0054 05E0     		b	.L35
 824              	.L36:
 256:uECC.c        ****         digit >>= 1;
 825              		.loc 2 256 0 discriminator 3
 826 0056 049B     		ldr	r3, [sp, #16]
 827 0058 5B08     		lsrs	r3, r3, #1
 828 005a 0493     		str	r3, [sp, #16]
 255:uECC.c        ****     for (i = 0; digit; ++i) {
 829              		.loc 2 255 0 discriminator 3
 830 005c 059B     		ldr	r3, [sp, #20]
 831 005e 0133     		adds	r3, r3, #1
 832 0060 0593     		str	r3, [sp, #20]
 833              	.L35:
 255:uECC.c        ****     for (i = 0; digit; ++i) {
 834              		.loc 2 255 0 is_stmt 0 discriminator 1
 835 0062 049B     		ldr	r3, [sp, #16]
 836 0064 002B     		cmp	r3, #0
 837 0066 F6D1     		bne	.L36
 257:uECC.c        ****     }
 258:uECC.c        **** 
 259:uECC.c        ****     return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 838              		.loc 2 259 0 is_stmt 1
 839 0068 0F23     		movs	r3, #15
 840 006a 6B44     		add	r3, r3, sp
 841 006c 1B78     		ldrb	r3, [r3]
 842 006e 5BB2     		sxtb	r3, r3
 843 0070 9BB2     		uxth	r3, r3
 844 0072 013B     		subs	r3, r3, #1
 845 0074 9BB2     		uxth	r3, r3
 846 0076 5B01     		lsls	r3, r3, #5
 847 0078 9AB2     		uxth	r2, r3
 848 007a 059B     		ldr	r3, [sp, #20]
 849 007c 9BB2     		uxth	r3, r3
 850 007e D318     		adds	r3, r2, r3
 851 0080 9BB2     		uxth	r3, r3
 852 0082 1BB2     		sxth	r3, r3
 853              	.L34:
 260:uECC.c        **** }
 854              		.loc 2 260 0
 855 0084 1800     		movs	r0, r3
 856 0086 06B0     		add	sp, sp, #24
 857              		@ sp needed
 858 0088 10BD     		pop	{r4, pc}
 859              	.L38:
 860 008a C046     		.align	2
 861              	.L37:
 862 008c FFFFFF3F 		.word	1073741823
 863              		.cfi_endproc
 864              	.LFE11:
 865              		.size	uECC_vli_numBits, .-uECC_vli_numBits
 866              		.section	.text.uECC_vli_set,"ax",%progbits
 867              		.align	2
 868              		.code	16
 869              		.thumb_func
 870              		.type	uECC_vli_set, %function
 871              	uECC_vli_set:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 32


 872              	.LFB12:
 261:uECC.c        **** 
 262:uECC.c        **** /* Sets dest = src. */
 263:uECC.c        **** #if !asm_set
 264:uECC.c        **** uECC_VLI_API void uECC_vli_set(uECC_word_t *dest, const uECC_word_t *src, wordcount_t num_words) {
 873              		.loc 2 264 0
 874              		.cfi_startproc
 875              		@ args = 0, pretend = 0, frame = 24
 876              		@ frame_needed = 0, uses_anonymous_args = 0
 877              		@ link register save eliminated.
 878 0000 86B0     		sub	sp, sp, #24
 879              		.cfi_def_cfa_offset 24
 880 0002 0390     		str	r0, [sp, #12]
 881 0004 0291     		str	r1, [sp, #8]
 882 0006 6B46     		mov	r3, sp
 883 0008 0733     		adds	r3, r3, #7
 884 000a 1A70     		strb	r2, [r3]
 265:uECC.c        ****     wordcount_t i;
 266:uECC.c        ****     for (i = 0; i < num_words; ++i) {
 885              		.loc 2 266 0
 886 000c 1723     		movs	r3, #23
 887 000e 6B44     		add	r3, r3, sp
 888 0010 0022     		movs	r2, #0
 889 0012 1A70     		strb	r2, [r3]
 890 0014 17E0     		b	.L40
 891              	.L41:
 267:uECC.c        ****         dest[i] = src[i];
 892              		.loc 2 267 0 discriminator 3
 893 0016 1723     		movs	r3, #23
 894 0018 6B44     		add	r3, r3, sp
 895 001a 1B78     		ldrb	r3, [r3]
 896 001c 5BB2     		sxtb	r3, r3
 897 001e 9B00     		lsls	r3, r3, #2
 898 0020 039A     		ldr	r2, [sp, #12]
 899 0022 D318     		adds	r3, r2, r3
 900 0024 1722     		movs	r2, #23
 901 0026 6A44     		add	r2, r2, sp
 902 0028 1278     		ldrb	r2, [r2]
 903 002a 52B2     		sxtb	r2, r2
 904 002c 9200     		lsls	r2, r2, #2
 905 002e 0299     		ldr	r1, [sp, #8]
 906 0030 8A18     		adds	r2, r1, r2
 907 0032 1268     		ldr	r2, [r2]
 908 0034 1A60     		str	r2, [r3]
 266:uECC.c        ****         dest[i] = src[i];
 909              		.loc 2 266 0 discriminator 3
 910 0036 1723     		movs	r3, #23
 911 0038 6B44     		add	r3, r3, sp
 912 003a 1B78     		ldrb	r3, [r3]
 913 003c 0133     		adds	r3, r3, #1
 914 003e DAB2     		uxtb	r2, r3
 915 0040 1723     		movs	r3, #23
 916 0042 6B44     		add	r3, r3, sp
 917 0044 1A70     		strb	r2, [r3]
 918              	.L40:
 266:uECC.c        ****         dest[i] = src[i];
 919              		.loc 2 266 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 33


 920 0046 1722     		movs	r2, #23
 921 0048 6A44     		add	r2, r2, sp
 922 004a 6B46     		mov	r3, sp
 923 004c 0733     		adds	r3, r3, #7
 924 004e 1278     		ldrb	r2, [r2]
 925 0050 52B2     		sxtb	r2, r2
 926 0052 1B78     		ldrb	r3, [r3]
 927 0054 5BB2     		sxtb	r3, r3
 928 0056 9A42     		cmp	r2, r3
 929 0058 DDDB     		blt	.L41
 268:uECC.c        ****     }
 269:uECC.c        **** }
 930              		.loc 2 269 0 is_stmt 1
 931 005a C046     		nop
 932 005c 06B0     		add	sp, sp, #24
 933              		@ sp needed
 934 005e 7047     		bx	lr
 935              		.cfi_endproc
 936              	.LFE12:
 937              		.size	uECC_vli_set, .-uECC_vli_set
 938              		.section	.text.uECC_vli_cmp_unsafe,"ax",%progbits
 939              		.align	2
 940              		.code	16
 941              		.thumb_func
 942              		.type	uECC_vli_cmp_unsafe, %function
 943              	uECC_vli_cmp_unsafe:
 944              	.LFB13:
 270:uECC.c        **** #endif /* !asm_set */
 271:uECC.c        **** 
 272:uECC.c        **** /* Returns sign of left - right. */
 273:uECC.c        **** static cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,
 274:uECC.c        ****                                        const uECC_word_t *right,
 275:uECC.c        ****                                        wordcount_t num_words) {
 945              		.loc 2 275 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 24
 948              		@ frame_needed = 0, uses_anonymous_args = 0
 949              		@ link register save eliminated.
 950 0000 86B0     		sub	sp, sp, #24
 951              		.cfi_def_cfa_offset 24
 952 0002 0390     		str	r0, [sp, #12]
 953 0004 0291     		str	r1, [sp, #8]
 954 0006 6B46     		mov	r3, sp
 955 0008 0733     		adds	r3, r3, #7
 956 000a 1A70     		strb	r2, [r3]
 276:uECC.c        ****     wordcount_t i;
 277:uECC.c        ****     for (i = num_words - 1; i >= 0; --i) {
 957              		.loc 2 277 0
 958 000c 6B46     		mov	r3, sp
 959 000e 0733     		adds	r3, r3, #7
 960 0010 1B78     		ldrb	r3, [r3]
 961 0012 013B     		subs	r3, r3, #1
 962 0014 DAB2     		uxtb	r2, r3
 963 0016 1723     		movs	r3, #23
 964 0018 6B44     		add	r3, r3, sp
 965 001a 1A70     		strb	r2, [r3]
 966 001c 30E0     		b	.L43
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 34


 967              	.L47:
 278:uECC.c        ****         if (left[i] > right[i]) {
 968              		.loc 2 278 0
 969 001e 1723     		movs	r3, #23
 970 0020 6B44     		add	r3, r3, sp
 971 0022 1B78     		ldrb	r3, [r3]
 972 0024 5BB2     		sxtb	r3, r3
 973 0026 9B00     		lsls	r3, r3, #2
 974 0028 039A     		ldr	r2, [sp, #12]
 975 002a D318     		adds	r3, r2, r3
 976 002c 1A68     		ldr	r2, [r3]
 977 002e 1723     		movs	r3, #23
 978 0030 6B44     		add	r3, r3, sp
 979 0032 1B78     		ldrb	r3, [r3]
 980 0034 5BB2     		sxtb	r3, r3
 981 0036 9B00     		lsls	r3, r3, #2
 982 0038 0299     		ldr	r1, [sp, #8]
 983 003a CB18     		adds	r3, r1, r3
 984 003c 1B68     		ldr	r3, [r3]
 985 003e 9A42     		cmp	r2, r3
 986 0040 01D9     		bls	.L44
 279:uECC.c        ****             return 1;
 987              		.loc 2 279 0
 988 0042 0123     		movs	r3, #1
 989 0044 22E0     		b	.L45
 990              	.L44:
 280:uECC.c        ****         } else if (left[i] < right[i]) {
 991              		.loc 2 280 0
 992 0046 1723     		movs	r3, #23
 993 0048 6B44     		add	r3, r3, sp
 994 004a 1B78     		ldrb	r3, [r3]
 995 004c 5BB2     		sxtb	r3, r3
 996 004e 9B00     		lsls	r3, r3, #2
 997 0050 039A     		ldr	r2, [sp, #12]
 998 0052 D318     		adds	r3, r2, r3
 999 0054 1A68     		ldr	r2, [r3]
 1000 0056 1723     		movs	r3, #23
 1001 0058 6B44     		add	r3, r3, sp
 1002 005a 1B78     		ldrb	r3, [r3]
 1003 005c 5BB2     		sxtb	r3, r3
 1004 005e 9B00     		lsls	r3, r3, #2
 1005 0060 0299     		ldr	r1, [sp, #8]
 1006 0062 CB18     		adds	r3, r1, r3
 1007 0064 1B68     		ldr	r3, [r3]
 1008 0066 9A42     		cmp	r2, r3
 1009 0068 02D2     		bcs	.L46
 281:uECC.c        ****             return -1;
 1010              		.loc 2 281 0
 1011 006a 0123     		movs	r3, #1
 1012 006c 5B42     		rsbs	r3, r3, #0
 1013 006e 0DE0     		b	.L45
 1014              	.L46:
 277:uECC.c        ****         if (left[i] > right[i]) {
 1015              		.loc 2 277 0 discriminator 2
 1016 0070 1723     		movs	r3, #23
 1017 0072 6B44     		add	r3, r3, sp
 1018 0074 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 35


 1019 0076 013B     		subs	r3, r3, #1
 1020 0078 DAB2     		uxtb	r2, r3
 1021 007a 1723     		movs	r3, #23
 1022 007c 6B44     		add	r3, r3, sp
 1023 007e 1A70     		strb	r2, [r3]
 1024              	.L43:
 277:uECC.c        ****         if (left[i] > right[i]) {
 1025              		.loc 2 277 0 is_stmt 0 discriminator 1
 1026 0080 1723     		movs	r3, #23
 1027 0082 6B44     		add	r3, r3, sp
 1028 0084 1B78     		ldrb	r3, [r3]
 1029 0086 7F2B     		cmp	r3, #127
 1030 0088 C9D9     		bls	.L47
 282:uECC.c        ****         }
 283:uECC.c        ****     }
 284:uECC.c        ****     return 0;
 1031              		.loc 2 284 0 is_stmt 1
 1032 008a 0023     		movs	r3, #0
 1033              	.L45:
 285:uECC.c        **** }
 1034              		.loc 2 285 0
 1035 008c 1800     		movs	r0, r3
 1036 008e 06B0     		add	sp, sp, #24
 1037              		@ sp needed
 1038 0090 7047     		bx	lr
 1039              		.cfi_endproc
 1040              	.LFE13:
 1041              		.size	uECC_vli_cmp_unsafe, .-uECC_vli_cmp_unsafe
 1042 0092 C046     		.section	.text.uECC_vli_equal,"ax",%progbits
 1043              		.align	2
 1044              		.code	16
 1045              		.thumb_func
 1046              		.type	uECC_vli_equal, %function
 1047              	uECC_vli_equal:
 1048              	.LFB14:
 286:uECC.c        **** 
 287:uECC.c        **** /* Constant-time comparison function - secure way to compare long integers */
 288:uECC.c        **** /* Returns one if left == right, zero otherwise. */
 289:uECC.c        **** uECC_VLI_API uECC_word_t uECC_vli_equal(const uECC_word_t *left,
 290:uECC.c        ****                                         const uECC_word_t *right,
 291:uECC.c        ****                                         wordcount_t num_words) {
 1049              		.loc 2 291 0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 32
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 1053              		@ link register save eliminated.
 1054 0000 88B0     		sub	sp, sp, #32
 1055              		.cfi_def_cfa_offset 32
 1056 0002 0390     		str	r0, [sp, #12]
 1057 0004 0291     		str	r1, [sp, #8]
 1058 0006 6B46     		mov	r3, sp
 1059 0008 0733     		adds	r3, r3, #7
 1060 000a 1A70     		strb	r2, [r3]
 292:uECC.c        ****     uECC_word_t diff = 0;
 1061              		.loc 2 292 0
 1062 000c 0023     		movs	r3, #0
 1063 000e 0793     		str	r3, [sp, #28]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 36


 293:uECC.c        ****     wordcount_t i;
 294:uECC.c        ****     for (i = num_words - 1; i >= 0; --i) {
 1064              		.loc 2 294 0
 1065 0010 6B46     		mov	r3, sp
 1066 0012 0733     		adds	r3, r3, #7
 1067 0014 1B78     		ldrb	r3, [r3]
 1068 0016 013B     		subs	r3, r3, #1
 1069 0018 DAB2     		uxtb	r2, r3
 1070 001a 1B23     		movs	r3, #27
 1071 001c 6B44     		add	r3, r3, sp
 1072 001e 1A70     		strb	r2, [r3]
 1073 0020 1FE0     		b	.L49
 1074              	.L50:
 1075              	.LBB2:
 295:uECC.c        ****         uECC_word_t l = left[i];
 1076              		.loc 2 295 0 discriminator 3
 1077 0022 1B23     		movs	r3, #27
 1078 0024 6B44     		add	r3, r3, sp
 1079 0026 1B78     		ldrb	r3, [r3]
 1080 0028 5BB2     		sxtb	r3, r3
 1081 002a 9B00     		lsls	r3, r3, #2
 1082 002c 039A     		ldr	r2, [sp, #12]
 1083 002e D318     		adds	r3, r2, r3
 1084 0030 1B68     		ldr	r3, [r3]
 1085 0032 0593     		str	r3, [sp, #20]
 296:uECC.c        ****         uECC_word_t r = right[i];
 1086              		.loc 2 296 0 discriminator 3
 1087 0034 1B23     		movs	r3, #27
 1088 0036 6B44     		add	r3, r3, sp
 1089 0038 1B78     		ldrb	r3, [r3]
 1090 003a 5BB2     		sxtb	r3, r3
 1091 003c 9B00     		lsls	r3, r3, #2
 1092 003e 029A     		ldr	r2, [sp, #8]
 1093 0040 D318     		adds	r3, r2, r3
 1094 0042 1B68     		ldr	r3, [r3]
 1095 0044 0493     		str	r3, [sp, #16]
 297:uECC.c        ****               
 298:uECC.c        ****         diff |= (l ^ r);
 1096              		.loc 2 298 0 discriminator 3
 1097 0046 059A     		ldr	r2, [sp, #20]
 1098 0048 049B     		ldr	r3, [sp, #16]
 1099 004a 5340     		eors	r3, r2
 1100 004c 079A     		ldr	r2, [sp, #28]
 1101 004e 1343     		orrs	r3, r2
 1102 0050 0793     		str	r3, [sp, #28]
 1103              	.LBE2:
 294:uECC.c        ****         uECC_word_t l = left[i];
 1104              		.loc 2 294 0 discriminator 3
 1105 0052 1B23     		movs	r3, #27
 1106 0054 6B44     		add	r3, r3, sp
 1107 0056 1B78     		ldrb	r3, [r3]
 1108 0058 013B     		subs	r3, r3, #1
 1109 005a DAB2     		uxtb	r2, r3
 1110 005c 1B23     		movs	r3, #27
 1111 005e 6B44     		add	r3, r3, sp
 1112 0060 1A70     		strb	r2, [r3]
 1113              	.L49:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 37


 294:uECC.c        ****         uECC_word_t l = left[i];
 1114              		.loc 2 294 0 is_stmt 0 discriminator 1
 1115 0062 1B23     		movs	r3, #27
 1116 0064 6B44     		add	r3, r3, sp
 1117 0066 1B78     		ldrb	r3, [r3]
 1118 0068 7F2B     		cmp	r3, #127
 1119 006a DAD9     		bls	.L50
 299:uECC.c        ****     }
 300:uECC.c        ****     return (diff == 0);
 1120              		.loc 2 300 0 is_stmt 1
 1121 006c 079B     		ldr	r3, [sp, #28]
 1122 006e 5A42     		rsbs	r2, r3, #0
 1123 0070 5341     		adcs	r3, r3, r2
 1124 0072 DBB2     		uxtb	r3, r3
 301:uECC.c        **** }
 1125              		.loc 2 301 0
 1126 0074 1800     		movs	r0, r3
 1127 0076 08B0     		add	sp, sp, #32
 1128              		@ sp needed
 1129 0078 7047     		bx	lr
 1130              		.cfi_endproc
 1131              	.LFE14:
 1132              		.size	uECC_vli_equal, .-uECC_vli_equal
 1133 007a C046     		.section	.text.uECC_vli_cmp,"ax",%progbits
 1134              		.align	2
 1135              		.code	16
 1136              		.thumb_func
 1137              		.type	uECC_vli_cmp, %function
 1138              	uECC_vli_cmp:
 1139              	.LFB15:
 302:uECC.c        **** 
 303:uECC.c        **** uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
 304:uECC.c        ****                                       const uECC_word_t *left,
 305:uECC.c        ****                                       const uECC_word_t *right,
 306:uECC.c        ****                                       wordcount_t num_words);
 307:uECC.c        **** 
 308:uECC.c        **** /* Returns sign of left - right, in constant time. */
 309:uECC.c        **** uECC_VLI_API cmpresult_t uECC_vli_cmp(const uECC_word_t *left,
 310:uECC.c        ****                                       const uECC_word_t *right,
 311:uECC.c        ****                                       wordcount_t num_words) {
 1140              		.loc 2 311 0
 1141              		.cfi_startproc
 1142              		@ args = 0, pretend = 0, frame = 56
 1143              		@ frame_needed = 0, uses_anonymous_args = 0
 1144 0000 00B5     		push	{lr}
 1145              		.cfi_def_cfa_offset 4
 1146              		.cfi_offset 14, -4
 1147 0002 8FB0     		sub	sp, sp, #60
 1148              		.cfi_def_cfa_offset 64
 1149 0004 0390     		str	r0, [sp, #12]
 1150 0006 0291     		str	r1, [sp, #8]
 1151 0008 6B46     		mov	r3, sp
 1152 000a 0733     		adds	r3, r3, #7
 1153 000c 1A70     		strb	r2, [r3]
 312:uECC.c        ****     uECC_word_t tmp[uECC_MAX_WORDS];
 313:uECC.c        ****     uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
 1154              		.loc 2 313 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 38


 1155 000e 6B46     		mov	r3, sp
 1156 0010 0733     		adds	r3, r3, #7
 1157 0012 1B78     		ldrb	r3, [r3]
 1158 0014 5BB2     		sxtb	r3, r3
 1159 0016 029A     		ldr	r2, [sp, #8]
 1160 0018 0399     		ldr	r1, [sp, #12]
 1161 001a 04A8     		add	r0, sp, #16
 1162 001c FFF7FEFF 		bl	uECC_vli_sub
 1163 0020 0300     		movs	r3, r0
 1164 0022 5A1E     		subs	r2, r3, #1
 1165 0024 9341     		sbcs	r3, r3, r2
 1166 0026 DBB2     		uxtb	r3, r3
 1167 0028 0D93     		str	r3, [sp, #52]
 314:uECC.c        ****     uECC_word_t equal = uECC_vli_isZero(tmp, num_words);
 1168              		.loc 2 314 0
 1169 002a 6B46     		mov	r3, sp
 1170 002c 0733     		adds	r3, r3, #7
 1171 002e 0022     		movs	r2, #0
 1172 0030 9A56     		ldrsb	r2, [r3, r2]
 1173 0032 04AB     		add	r3, sp, #16
 1174 0034 1100     		movs	r1, r2
 1175 0036 1800     		movs	r0, r3
 1176 0038 FFF7FEFF 		bl	uECC_vli_isZero
 1177 003c 0300     		movs	r3, r0
 1178 003e 0C93     		str	r3, [sp, #48]
 315:uECC.c        ****     return (!equal - 2 * neg);
 1179              		.loc 2 315 0
 1180 0040 0C9B     		ldr	r3, [sp, #48]
 1181 0042 5A42     		rsbs	r2, r3, #0
 1182 0044 5341     		adcs	r3, r3, r2
 1183 0046 DBB2     		uxtb	r3, r3
 1184 0048 1A00     		movs	r2, r3
 1185 004a 0D9B     		ldr	r3, [sp, #52]
 1186 004c DBB2     		uxtb	r3, r3
 1187 004e DB18     		adds	r3, r3, r3
 1188 0050 DBB2     		uxtb	r3, r3
 1189 0052 D31A     		subs	r3, r2, r3
 1190 0054 DBB2     		uxtb	r3, r3
 1191 0056 5BB2     		sxtb	r3, r3
 316:uECC.c        **** }
 1192              		.loc 2 316 0
 1193 0058 1800     		movs	r0, r3
 1194 005a 0FB0     		add	sp, sp, #60
 1195              		@ sp needed
 1196 005c 00BD     		pop	{pc}
 1197              		.cfi_endproc
 1198              	.LFE15:
 1199              		.size	uECC_vli_cmp, .-uECC_vli_cmp
 1200 005e C046     		.section	.text.uECC_vli_rshift1,"ax",%progbits
 1201              		.align	2
 1202              		.code	16
 1203              		.thumb_func
 1204              		.type	uECC_vli_rshift1, %function
 1205              	uECC_vli_rshift1:
 1206              	.LFB16:
 317:uECC.c        **** 
 318:uECC.c        **** /* Computes vli = vli >> 1. */
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 39


 319:uECC.c        **** #if !asm_rshift1
 320:uECC.c        **** uECC_VLI_API void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words) {
 1207              		.loc 2 320 0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 24
 1210              		@ frame_needed = 0, uses_anonymous_args = 0
 1211              		@ link register save eliminated.
 1212 0000 86B0     		sub	sp, sp, #24
 1213              		.cfi_def_cfa_offset 24
 1214 0002 0190     		str	r0, [sp, #4]
 1215 0004 0A00     		movs	r2, r1
 1216 0006 6B46     		mov	r3, sp
 1217 0008 0333     		adds	r3, r3, #3
 1218 000a 1A70     		strb	r2, [r3]
 321:uECC.c        ****     uECC_word_t *end = vli;
 1219              		.loc 2 321 0
 1220 000c 019B     		ldr	r3, [sp, #4]
 1221 000e 0493     		str	r3, [sp, #16]
 322:uECC.c        ****     uECC_word_t carry = 0;
 1222              		.loc 2 322 0
 1223 0010 0023     		movs	r3, #0
 1224 0012 0593     		str	r3, [sp, #20]
 323:uECC.c        **** 
 324:uECC.c        ****     vli += num_words;
 1225              		.loc 2 324 0
 1226 0014 6B46     		mov	r3, sp
 1227 0016 0333     		adds	r3, r3, #3
 1228 0018 1B78     		ldrb	r3, [r3]
 1229 001a 5BB2     		sxtb	r3, r3
 1230 001c 9B00     		lsls	r3, r3, #2
 1231 001e 019A     		ldr	r2, [sp, #4]
 1232 0020 D318     		adds	r3, r2, r3
 1233 0022 0193     		str	r3, [sp, #4]
 325:uECC.c        ****     while (vli-- > end) {
 1234              		.loc 2 325 0
 1235 0024 0BE0     		b	.L55
 1236              	.L56:
 1237              	.LBB3:
 326:uECC.c        ****         uECC_word_t temp = *vli;
 1238              		.loc 2 326 0
 1239 0026 019B     		ldr	r3, [sp, #4]
 1240 0028 1B68     		ldr	r3, [r3]
 1241 002a 0393     		str	r3, [sp, #12]
 327:uECC.c        ****         *vli = (temp >> 1) | carry;
 1242              		.loc 2 327 0
 1243 002c 039B     		ldr	r3, [sp, #12]
 1244 002e 5A08     		lsrs	r2, r3, #1
 1245 0030 059B     		ldr	r3, [sp, #20]
 1246 0032 1A43     		orrs	r2, r3
 1247 0034 019B     		ldr	r3, [sp, #4]
 1248 0036 1A60     		str	r2, [r3]
 328:uECC.c        ****         carry = temp << (uECC_WORD_BITS - 1);
 1249              		.loc 2 328 0
 1250 0038 039B     		ldr	r3, [sp, #12]
 1251 003a DB07     		lsls	r3, r3, #31
 1252 003c 0593     		str	r3, [sp, #20]
 1253              	.L55:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 40


 1254              	.LBE3:
 325:uECC.c        ****         uECC_word_t temp = *vli;
 1255              		.loc 2 325 0
 1256 003e 019B     		ldr	r3, [sp, #4]
 1257 0040 1A1F     		subs	r2, r3, #4
 1258 0042 0192     		str	r2, [sp, #4]
 1259 0044 049A     		ldr	r2, [sp, #16]
 1260 0046 9342     		cmp	r3, r2
 1261 0048 EDD8     		bhi	.L56
 329:uECC.c        ****     }
 330:uECC.c        **** }
 1262              		.loc 2 330 0
 1263 004a C046     		nop
 1264 004c 06B0     		add	sp, sp, #24
 1265              		@ sp needed
 1266 004e 7047     		bx	lr
 1267              		.cfi_endproc
 1268              	.LFE16:
 1269              		.size	uECC_vli_rshift1, .-uECC_vli_rshift1
 1270              		.section	.text.uECC_vli_modAdd,"ax",%progbits
 1271              		.align	2
 1272              		.code	16
 1273              		.thumb_func
 1274              		.type	uECC_vli_modAdd, %function
 1275              	uECC_vli_modAdd:
 1276              	.LFB17:
 331:uECC.c        **** #endif /* !asm_rshift1 */
 332:uECC.c        **** 
 333:uECC.c        **** /* Computes result = left + right, returning carry. Can modify in place. */
 334:uECC.c        **** #if !asm_add
 335:uECC.c        **** uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
 336:uECC.c        ****                                       const uECC_word_t *left,
 337:uECC.c        ****                                       const uECC_word_t *right,
 338:uECC.c        ****                                       wordcount_t num_words) {
 339:uECC.c        ****     uECC_word_t carry = 0;
 340:uECC.c        ****     wordcount_t i;
 341:uECC.c        ****     for (i = 0; i < num_words; ++i) {
 342:uECC.c        ****         uECC_word_t sum = left[i] + right[i] + carry;
 343:uECC.c        ****         if (sum != left[i]) {
 344:uECC.c        ****             carry = (sum < left[i]);
 345:uECC.c        ****         }
 346:uECC.c        ****         result[i] = sum;
 347:uECC.c        ****     }
 348:uECC.c        ****     return carry;
 349:uECC.c        **** }
 350:uECC.c        **** #endif /* !asm_add */
 351:uECC.c        **** 
 352:uECC.c        **** /* Computes result = left - right, returning borrow. Can modify in place. */
 353:uECC.c        **** #if !asm_sub
 354:uECC.c        **** uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
 355:uECC.c        ****                                       const uECC_word_t *left,
 356:uECC.c        ****                                       const uECC_word_t *right,
 357:uECC.c        ****                                       wordcount_t num_words) {
 358:uECC.c        ****     uECC_word_t borrow = 0;
 359:uECC.c        ****     wordcount_t i;
 360:uECC.c        ****     for (i = 0; i < num_words; ++i) {
 361:uECC.c        ****         uECC_word_t diff = left[i] - right[i] - borrow;
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 41


 362:uECC.c        ****         if (diff != left[i]) {
 363:uECC.c        ****             borrow = (diff > left[i]);
 364:uECC.c        ****         }
 365:uECC.c        ****         result[i] = diff;
 366:uECC.c        ****     }
 367:uECC.c        ****     return borrow;
 368:uECC.c        **** }
 369:uECC.c        **** #endif /* !asm_sub */
 370:uECC.c        **** 
 371:uECC.c        **** #if !asm_mult || (uECC_SQUARE_FUNC && !asm_square) || \
 372:uECC.c        ****     (uECC_SUPPORTS_secp256k1 && (uECC_OPTIMIZATION_LEVEL > 0) && \
 373:uECC.c        ****         ((uECC_WORD_SIZE == 1) || (uECC_WORD_SIZE == 8)))
 374:uECC.c        **** static void muladd(uECC_word_t a,
 375:uECC.c        ****                    uECC_word_t b,
 376:uECC.c        ****                    uECC_word_t *r0,
 377:uECC.c        ****                    uECC_word_t *r1,
 378:uECC.c        ****                    uECC_word_t *r2) {
 379:uECC.c        **** #if uECC_WORD_SIZE == 8 && !SUPPORTS_INT128
 380:uECC.c        ****     uint64_t a0 = a & 0xffffffffull;
 381:uECC.c        ****     uint64_t a1 = a >> 32;
 382:uECC.c        ****     uint64_t b0 = b & 0xffffffffull;
 383:uECC.c        ****     uint64_t b1 = b >> 32;
 384:uECC.c        **** 
 385:uECC.c        ****     uint64_t i0 = a0 * b0;
 386:uECC.c        ****     uint64_t i1 = a0 * b1;
 387:uECC.c        ****     uint64_t i2 = a1 * b0;
 388:uECC.c        ****     uint64_t i3 = a1 * b1;
 389:uECC.c        **** 
 390:uECC.c        ****     uint64_t p0, p1;
 391:uECC.c        **** 
 392:uECC.c        ****     i2 += (i0 >> 32);
 393:uECC.c        ****     i2 += i1;
 394:uECC.c        ****     if (i2 < i1) { /* overflow */
 395:uECC.c        ****         i3 += 0x100000000ull;
 396:uECC.c        ****     }
 397:uECC.c        **** 
 398:uECC.c        ****     p0 = (i0 & 0xffffffffull) | (i2 << 32);
 399:uECC.c        ****     p1 = i3 + (i2 >> 32);
 400:uECC.c        **** 
 401:uECC.c        ****     *r0 += p0;
 402:uECC.c        ****     *r1 += (p1 + (*r0 < p0));
 403:uECC.c        ****     *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
 404:uECC.c        **** #else
 405:uECC.c        ****     uECC_dword_t p = (uECC_dword_t)a * b;
 406:uECC.c        ****     uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 407:uECC.c        ****     r01 += p;
 408:uECC.c        ****     *r2 += (r01 < p);
 409:uECC.c        ****     *r1 = r01 >> uECC_WORD_BITS;
 410:uECC.c        ****     *r0 = (uECC_word_t)r01;
 411:uECC.c        **** #endif
 412:uECC.c        **** }
 413:uECC.c        **** #endif /* muladd needed */
 414:uECC.c        **** 
 415:uECC.c        **** #if !asm_mult
 416:uECC.c        **** uECC_VLI_API void uECC_vli_mult(uECC_word_t *result,
 417:uECC.c        ****                                 const uECC_word_t *left,
 418:uECC.c        ****                                 const uECC_word_t *right,
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 42


 419:uECC.c        ****                                 wordcount_t num_words) {
 420:uECC.c        ****     uECC_word_t r0 = 0;
 421:uECC.c        ****     uECC_word_t r1 = 0;
 422:uECC.c        ****     uECC_word_t r2 = 0;
 423:uECC.c        ****     wordcount_t i, k;
 424:uECC.c        **** 
 425:uECC.c        ****     /* Compute each digit of result in sequence, maintaining the carries. */
 426:uECC.c        ****     for (k = 0; k < num_words; ++k) {
 427:uECC.c        ****         for (i = 0; i <= k; ++i) {
 428:uECC.c        ****             muladd(left[i], right[k - i], &r0, &r1, &r2);
 429:uECC.c        ****         }
 430:uECC.c        ****         result[k] = r0;
 431:uECC.c        ****         r0 = r1;
 432:uECC.c        ****         r1 = r2;
 433:uECC.c        ****         r2 = 0;
 434:uECC.c        ****     }
 435:uECC.c        ****     for (k = num_words; k < num_words * 2 - 1; ++k) {
 436:uECC.c        ****         for (i = (k + 1) - num_words; i < num_words; ++i) {
 437:uECC.c        ****             muladd(left[i], right[k - i], &r0, &r1, &r2);
 438:uECC.c        ****         }
 439:uECC.c        ****         result[k] = r0;
 440:uECC.c        ****         r0 = r1;
 441:uECC.c        ****         r1 = r2;
 442:uECC.c        ****         r2 = 0;
 443:uECC.c        ****     }
 444:uECC.c        ****     result[num_words * 2 - 1] = r0;
 445:uECC.c        **** }
 446:uECC.c        **** #endif /* !asm_mult */
 447:uECC.c        **** 
 448:uECC.c        **** #if uECC_SQUARE_FUNC
 449:uECC.c        **** 
 450:uECC.c        **** #if !asm_square
 451:uECC.c        **** static void mul2add(uECC_word_t a,
 452:uECC.c        ****                     uECC_word_t b,
 453:uECC.c        ****                     uECC_word_t *r0,
 454:uECC.c        ****                     uECC_word_t *r1,
 455:uECC.c        ****                     uECC_word_t *r2) {
 456:uECC.c        **** #if uECC_WORD_SIZE == 8 && !SUPPORTS_INT128
 457:uECC.c        ****     uint64_t a0 = a & 0xffffffffull;
 458:uECC.c        ****     uint64_t a1 = a >> 32;
 459:uECC.c        ****     uint64_t b0 = b & 0xffffffffull;
 460:uECC.c        ****     uint64_t b1 = b >> 32;
 461:uECC.c        **** 
 462:uECC.c        ****     uint64_t i0 = a0 * b0;
 463:uECC.c        ****     uint64_t i1 = a0 * b1;
 464:uECC.c        ****     uint64_t i2 = a1 * b0;
 465:uECC.c        ****     uint64_t i3 = a1 * b1;
 466:uECC.c        **** 
 467:uECC.c        ****     uint64_t p0, p1;
 468:uECC.c        **** 
 469:uECC.c        ****     i2 += (i0 >> 32);
 470:uECC.c        ****     i2 += i1;
 471:uECC.c        ****     if (i2 < i1)
 472:uECC.c        ****     { /* overflow */
 473:uECC.c        ****         i3 += 0x100000000ull;
 474:uECC.c        ****     }
 475:uECC.c        **** 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 43


 476:uECC.c        ****     p0 = (i0 & 0xffffffffull) | (i2 << 32);
 477:uECC.c        ****     p1 = i3 + (i2 >> 32);
 478:uECC.c        **** 
 479:uECC.c        ****     *r2 += (p1 >> 63);
 480:uECC.c        ****     p1 = (p1 << 1) | (p0 >> 63);
 481:uECC.c        ****     p0 <<= 1;
 482:uECC.c        **** 
 483:uECC.c        ****     *r0 += p0;
 484:uECC.c        ****     *r1 += (p1 + (*r0 < p0));
 485:uECC.c        ****     *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
 486:uECC.c        **** #else
 487:uECC.c        ****     uECC_dword_t p = (uECC_dword_t)a * b;
 488:uECC.c        ****     uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 489:uECC.c        ****     *r2 += (p >> (uECC_WORD_BITS * 2 - 1));
 490:uECC.c        ****     p *= 2;
 491:uECC.c        ****     r01 += p;
 492:uECC.c        ****     *r2 += (r01 < p);
 493:uECC.c        ****     *r1 = r01 >> uECC_WORD_BITS;
 494:uECC.c        ****     *r0 = (uECC_word_t)r01;
 495:uECC.c        **** #endif
 496:uECC.c        **** }
 497:uECC.c        **** 
 498:uECC.c        **** uECC_VLI_API void uECC_vli_square(uECC_word_t *result,
 499:uECC.c        ****                                   const uECC_word_t *left,
 500:uECC.c        ****                                   wordcount_t num_words) {
 501:uECC.c        ****     uECC_word_t r0 = 0;
 502:uECC.c        ****     uECC_word_t r1 = 0;
 503:uECC.c        ****     uECC_word_t r2 = 0;
 504:uECC.c        **** 
 505:uECC.c        ****     wordcount_t i, k;
 506:uECC.c        **** 
 507:uECC.c        ****     for (k = 0; k < num_words * 2 - 1; ++k) {
 508:uECC.c        ****         uECC_word_t min = (k < num_words ? 0 : (k + 1) - num_words);
 509:uECC.c        ****         for (i = min; i <= k && i <= k - i; ++i) {
 510:uECC.c        ****             if (i < k-i) {
 511:uECC.c        ****                 mul2add(left[i], left[k - i], &r0, &r1, &r2);
 512:uECC.c        ****             } else {
 513:uECC.c        ****                 muladd(left[i], left[k - i], &r0, &r1, &r2);
 514:uECC.c        ****             }
 515:uECC.c        ****         }
 516:uECC.c        ****         result[k] = r0;
 517:uECC.c        ****         r0 = r1;
 518:uECC.c        ****         r1 = r2;
 519:uECC.c        ****         r2 = 0;
 520:uECC.c        ****     }
 521:uECC.c        **** 
 522:uECC.c        ****     result[num_words * 2 - 1] = r0;
 523:uECC.c        **** }
 524:uECC.c        **** #endif /* !asm_square */
 525:uECC.c        **** 
 526:uECC.c        **** #else /* uECC_SQUARE_FUNC */
 527:uECC.c        **** 
 528:uECC.c        **** #if uECC_ENABLE_VLI_API
 529:uECC.c        **** uECC_VLI_API void uECC_vli_square(uECC_word_t *result,
 530:uECC.c        ****                                   const uECC_word_t *left,
 531:uECC.c        ****                                   wordcount_t num_words) {
 532:uECC.c        ****     uECC_vli_mult(result, left, left, num_words);
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 44


 533:uECC.c        **** }
 534:uECC.c        **** #endif /* uECC_ENABLE_VLI_API */
 535:uECC.c        **** 
 536:uECC.c        **** #endif /* uECC_SQUARE_FUNC */
 537:uECC.c        **** 
 538:uECC.c        **** /* Computes result = (left + right) % mod.
 539:uECC.c        ****    Assumes that left < mod and right < mod, and that result does not overlap mod. */
 540:uECC.c        **** uECC_VLI_API void uECC_vli_modAdd(uECC_word_t *result,
 541:uECC.c        ****                                   const uECC_word_t *left,
 542:uECC.c        ****                                   const uECC_word_t *right,
 543:uECC.c        ****                                   const uECC_word_t *mod,
 544:uECC.c        ****                                   wordcount_t num_words) {
 1277              		.loc 2 544 0
 1278              		.cfi_startproc
 1279              		@ args = 4, pretend = 0, frame = 24
 1280              		@ frame_needed = 0, uses_anonymous_args = 0
 1281 0000 00B5     		push	{lr}
 1282              		.cfi_def_cfa_offset 4
 1283              		.cfi_offset 14, -4
 1284 0002 87B0     		sub	sp, sp, #28
 1285              		.cfi_def_cfa_offset 32
 1286 0004 0390     		str	r0, [sp, #12]
 1287 0006 0291     		str	r1, [sp, #8]
 1288 0008 0192     		str	r2, [sp, #4]
 1289 000a 0093     		str	r3, [sp]
 545:uECC.c        ****     uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 1290              		.loc 2 545 0
 1291 000c 08AB     		add	r3, sp, #32
 1292 000e 1B78     		ldrb	r3, [r3]
 1293 0010 5BB2     		sxtb	r3, r3
 1294 0012 019A     		ldr	r2, [sp, #4]
 1295 0014 0299     		ldr	r1, [sp, #8]
 1296 0016 0398     		ldr	r0, [sp, #12]
 1297 0018 FFF7FEFF 		bl	uECC_vli_add
 1298 001c 0300     		movs	r3, r0
 1299 001e 0593     		str	r3, [sp, #20]
 546:uECC.c        ****     if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 1300              		.loc 2 546 0
 1301 0020 059B     		ldr	r3, [sp, #20]
 1302 0022 002B     		cmp	r3, #0
 1303 0024 0AD1     		bne	.L58
 1304              		.loc 2 546 0 is_stmt 0 discriminator 1
 1305 0026 08AB     		add	r3, sp, #32
 1306 0028 0022     		movs	r2, #0
 1307 002a 9A56     		ldrsb	r2, [r3, r2]
 1308 002c 0399     		ldr	r1, [sp, #12]
 1309 002e 009B     		ldr	r3, [sp]
 1310 0030 1800     		movs	r0, r3
 1311 0032 FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 1312 0036 0300     		movs	r3, r0
 1313 0038 012B     		cmp	r3, #1
 1314 003a 07D0     		beq	.L60
 1315              	.L58:
 547:uECC.c        ****         /* result > mod (result = mod + remainder), so subtract mod to get remainder. */
 548:uECC.c        ****         uECC_vli_sub(result, result, mod, num_words);
 1316              		.loc 2 548 0 is_stmt 1
 1317 003c 08AB     		add	r3, sp, #32
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 45


 1318 003e 1B78     		ldrb	r3, [r3]
 1319 0040 5BB2     		sxtb	r3, r3
 1320 0042 009A     		ldr	r2, [sp]
 1321 0044 0399     		ldr	r1, [sp, #12]
 1322 0046 0398     		ldr	r0, [sp, #12]
 1323 0048 FFF7FEFF 		bl	uECC_vli_sub
 1324              	.L60:
 549:uECC.c        ****     }
 550:uECC.c        **** }
 1325              		.loc 2 550 0
 1326 004c C046     		nop
 1327 004e 07B0     		add	sp, sp, #28
 1328              		@ sp needed
 1329 0050 00BD     		pop	{pc}
 1330              		.cfi_endproc
 1331              	.LFE17:
 1332              		.size	uECC_vli_modAdd, .-uECC_vli_modAdd
 1333 0052 C046     		.section	.text.uECC_vli_modSub,"ax",%progbits
 1334              		.align	2
 1335              		.code	16
 1336              		.thumb_func
 1337              		.type	uECC_vli_modSub, %function
 1338              	uECC_vli_modSub:
 1339              	.LFB18:
 551:uECC.c        **** 
 552:uECC.c        **** /* Computes result = (left - right) % mod.
 553:uECC.c        ****    Assumes that left < mod and right < mod, and that result does not overlap mod. */
 554:uECC.c        **** uECC_VLI_API void uECC_vli_modSub(uECC_word_t *result,
 555:uECC.c        ****                                   const uECC_word_t *left,
 556:uECC.c        ****                                   const uECC_word_t *right,
 557:uECC.c        ****                                   const uECC_word_t *mod,
 558:uECC.c        ****                                   wordcount_t num_words) {
 1340              		.loc 2 558 0
 1341              		.cfi_startproc
 1342              		@ args = 4, pretend = 0, frame = 24
 1343              		@ frame_needed = 0, uses_anonymous_args = 0
 1344 0000 00B5     		push	{lr}
 1345              		.cfi_def_cfa_offset 4
 1346              		.cfi_offset 14, -4
 1347 0002 87B0     		sub	sp, sp, #28
 1348              		.cfi_def_cfa_offset 32
 1349 0004 0390     		str	r0, [sp, #12]
 1350 0006 0291     		str	r1, [sp, #8]
 1351 0008 0192     		str	r2, [sp, #4]
 1352 000a 0093     		str	r3, [sp]
 559:uECC.c        ****     uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 1353              		.loc 2 559 0
 1354 000c 08AB     		add	r3, sp, #32
 1355 000e 1B78     		ldrb	r3, [r3]
 1356 0010 5BB2     		sxtb	r3, r3
 1357 0012 019A     		ldr	r2, [sp, #4]
 1358 0014 0299     		ldr	r1, [sp, #8]
 1359 0016 0398     		ldr	r0, [sp, #12]
 1360 0018 FFF7FEFF 		bl	uECC_vli_sub
 1361 001c 0300     		movs	r3, r0
 1362 001e 0593     		str	r3, [sp, #20]
 560:uECC.c        ****     if (l_borrow) {
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 46


 1363              		.loc 2 560 0
 1364 0020 059B     		ldr	r3, [sp, #20]
 1365 0022 002B     		cmp	r3, #0
 1366 0024 07D0     		beq	.L63
 561:uECC.c        ****         /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
 562:uECC.c        ****            we can get the correct result from result + mod (with overflow). */
 563:uECC.c        ****         uECC_vli_add(result, result, mod, num_words);
 1367              		.loc 2 563 0
 1368 0026 08AB     		add	r3, sp, #32
 1369 0028 1B78     		ldrb	r3, [r3]
 1370 002a 5BB2     		sxtb	r3, r3
 1371 002c 009A     		ldr	r2, [sp]
 1372 002e 0399     		ldr	r1, [sp, #12]
 1373 0030 0398     		ldr	r0, [sp, #12]
 1374 0032 FFF7FEFF 		bl	uECC_vli_add
 1375              	.L63:
 564:uECC.c        ****     }
 565:uECC.c        **** }
 1376              		.loc 2 565 0
 1377 0036 C046     		nop
 1378 0038 07B0     		add	sp, sp, #28
 1379              		@ sp needed
 1380 003a 00BD     		pop	{pc}
 1381              		.cfi_endproc
 1382              	.LFE18:
 1383              		.size	uECC_vli_modSub, .-uECC_vli_modSub
 1384              		.section	.text.uECC_vli_mmod,"ax",%progbits
 1385              		.align	2
 1386              		.code	16
 1387              		.thumb_func
 1388              		.type	uECC_vli_mmod, %function
 1389              	uECC_vli_mmod:
 1390              	.LFB19:
 566:uECC.c        **** 
 567:uECC.c        **** /* Computes result = product % mod, where product is 2N words long. */
 568:uECC.c        **** /* Currently only designed to work for curve_p or curve_n. */
 569:uECC.c        **** uECC_VLI_API void uECC_vli_mmod(uECC_word_t *result,
 570:uECC.c        ****                                 uECC_word_t *product,
 571:uECC.c        ****                                 const uECC_word_t *mod,
 572:uECC.c        ****                                 wordcount_t num_words) {
 1391              		.loc 2 572 0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 176
 1394              		@ frame_needed = 0, uses_anonymous_args = 0
 1395 0000 10B5     		push	{r4, lr}
 1396              		.cfi_def_cfa_offset 8
 1397              		.cfi_offset 4, -8
 1398              		.cfi_offset 14, -4
 1399 0002 ACB0     		sub	sp, sp, #176
 1400              		.cfi_def_cfa_offset 184
 1401 0004 0390     		str	r0, [sp, #12]
 1402 0006 0291     		str	r1, [sp, #8]
 1403 0008 0192     		str	r2, [sp, #4]
 1404 000a 1A00     		movs	r2, r3
 1405 000c 6B46     		mov	r3, sp
 1406 000e 0333     		adds	r3, r3, #3
 1407 0010 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 47


 573:uECC.c        ****     uECC_word_t mod_multiple[2 * uECC_MAX_WORDS];
 574:uECC.c        ****     uECC_word_t tmp[2 * uECC_MAX_WORDS];
 575:uECC.c        ****     uECC_word_t *v[2] = {tmp, product};
 1408              		.loc 2 575 0
 1409 0012 04AB     		add	r3, sp, #16
 1410 0014 06AA     		add	r2, sp, #24
 1411 0016 1A60     		str	r2, [r3]
 1412 0018 04AB     		add	r3, sp, #16
 1413 001a 029A     		ldr	r2, [sp, #8]
 1414 001c 5A60     		str	r2, [r3, #4]
 576:uECC.c        ****     uECC_word_t index;
 577:uECC.c        **** 
 578:uECC.c        ****     /* Shift mod so its highest set bit is at the maximum position. */
 579:uECC.c        ****     bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
 1415              		.loc 2 579 0
 1416 001e 6B46     		mov	r3, sp
 1417 0020 0333     		adds	r3, r3, #3
 1418 0022 1B78     		ldrb	r3, [r3]
 1419 0024 5BB2     		sxtb	r3, r3
 1420 0026 9BB2     		uxth	r3, r3
 1421 0028 9B01     		lsls	r3, r3, #6
 1422 002a 9CB2     		uxth	r4, r3
 1423 002c 6B46     		mov	r3, sp
 1424 002e 0333     		adds	r3, r3, #3
 1425 0030 0022     		movs	r2, #0
 1426 0032 9A56     		ldrsb	r2, [r3, r2]
 1427 0034 019B     		ldr	r3, [sp, #4]
 1428 0036 1100     		movs	r1, r2
 1429 0038 1800     		movs	r0, r3
 1430 003a FFF7FEFF 		bl	uECC_vli_numBits
 1431 003e 0300     		movs	r3, r0
 1432 0040 9BB2     		uxth	r3, r3
 1433 0042 E31A     		subs	r3, r4, r3
 1434 0044 9AB2     		uxth	r2, r3
 1435 0046 AA23     		movs	r3, #170
 1436 0048 6B44     		add	r3, r3, sp
 1437 004a 1A80     		strh	r2, [r3]
 580:uECC.c        ****     wordcount_t word_shift = shift / uECC_WORD_BITS;
 1438              		.loc 2 580 0
 1439 004c AA23     		movs	r3, #170
 1440 004e 6B44     		add	r3, r3, sp
 1441 0050 0022     		movs	r2, #0
 1442 0052 9B5E     		ldrsh	r3, [r3, r2]
 1443 0054 002B     		cmp	r3, #0
 1444 0056 00DA     		bge	.L65
 1445 0058 1F33     		adds	r3, r3, #31
 1446              	.L65:
 1447 005a 5B11     		asrs	r3, r3, #5
 1448 005c 1AB2     		sxth	r2, r3
 1449 005e 9E23     		movs	r3, #158
 1450 0060 6B44     		add	r3, r3, sp
 1451 0062 1A70     		strb	r2, [r3]
 581:uECC.c        ****     wordcount_t bit_shift = shift % uECC_WORD_BITS;
 1452              		.loc 2 581 0
 1453 0064 AA23     		movs	r3, #170
 1454 0066 6B44     		add	r3, r3, sp
 1455 0068 0022     		movs	r2, #0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 48


 1456 006a 9B5E     		ldrsh	r3, [r3, r2]
 1457 006c 894A     		ldr	r2, .L76
 1458 006e 1340     		ands	r3, r2
 1459 0070 04D5     		bpl	.L66
 1460 0072 013B     		subs	r3, r3, #1
 1461 0074 2022     		movs	r2, #32
 1462 0076 5242     		rsbs	r2, r2, #0
 1463 0078 1343     		orrs	r3, r2
 1464 007a 0133     		adds	r3, r3, #1
 1465              	.L66:
 1466 007c 1AB2     		sxth	r2, r3
 1467 007e 9D23     		movs	r3, #157
 1468 0080 6B44     		add	r3, r3, sp
 1469 0082 1A70     		strb	r2, [r3]
 582:uECC.c        ****     uECC_word_t carry = 0;
 1470              		.loc 2 582 0
 1471 0084 0023     		movs	r3, #0
 1472 0086 2993     		str	r3, [sp, #164]
 583:uECC.c        ****     uECC_vli_clear(mod_multiple, word_shift);
 1473              		.loc 2 583 0
 1474 0088 9E23     		movs	r3, #158
 1475 008a 6B44     		add	r3, r3, sp
 1476 008c 0022     		movs	r2, #0
 1477 008e 9A56     		ldrsb	r2, [r3, r2]
 1478 0090 16AB     		add	r3, sp, #88
 1479 0092 1100     		movs	r1, r2
 1480 0094 1800     		movs	r0, r3
 1481 0096 FFF7FEFF 		bl	uECC_vli_clear
 584:uECC.c        ****     if (bit_shift > 0) {
 1482              		.loc 2 584 0
 1483 009a 9D23     		movs	r3, #157
 1484 009c 6B44     		add	r3, r3, sp
 1485 009e 1B78     		ldrb	r3, [r3]
 1486 00a0 5BB2     		sxtb	r3, r3
 1487 00a2 002B     		cmp	r3, #0
 1488 00a4 30DD     		ble	.L67
 585:uECC.c        ****         for(index = 0; index < (uECC_word_t)num_words; ++index) {
 1489              		.loc 2 585 0
 1490 00a6 0023     		movs	r3, #0
 1491 00a8 2B93     		str	r3, [sp, #172]
 1492 00aa 25E0     		b	.L68
 1493              	.L69:
 586:uECC.c        ****             mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
 1494              		.loc 2 586 0 discriminator 3
 1495 00ac 9E23     		movs	r3, #158
 1496 00ae 6B44     		add	r3, r3, sp
 1497 00b0 0022     		movs	r2, #0
 1498 00b2 9A56     		ldrsb	r2, [r3, r2]
 1499 00b4 2B9B     		ldr	r3, [sp, #172]
 1500 00b6 D218     		adds	r2, r2, r3
 1501 00b8 2B9B     		ldr	r3, [sp, #172]
 1502 00ba 9B00     		lsls	r3, r3, #2
 1503 00bc 0199     		ldr	r1, [sp, #4]
 1504 00be CB18     		adds	r3, r1, r3
 1505 00c0 1968     		ldr	r1, [r3]
 1506 00c2 9D23     		movs	r3, #157
 1507 00c4 6B44     		add	r3, r3, sp
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 49


 1508 00c6 1B78     		ldrb	r3, [r3]
 1509 00c8 5BB2     		sxtb	r3, r3
 1510 00ca 9940     		lsls	r1, r1, r3
 1511 00cc 299B     		ldr	r3, [sp, #164]
 1512 00ce 1943     		orrs	r1, r3
 1513 00d0 16AB     		add	r3, sp, #88
 1514 00d2 9200     		lsls	r2, r2, #2
 1515 00d4 D150     		str	r1, [r2, r3]
 587:uECC.c        ****             carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 1516              		.loc 2 587 0 discriminator 3
 1517 00d6 2B9B     		ldr	r3, [sp, #172]
 1518 00d8 9B00     		lsls	r3, r3, #2
 1519 00da 019A     		ldr	r2, [sp, #4]
 1520 00dc D318     		adds	r3, r2, r3
 1521 00de 1A68     		ldr	r2, [r3]
 1522 00e0 9D23     		movs	r3, #157
 1523 00e2 6B44     		add	r3, r3, sp
 1524 00e4 1B78     		ldrb	r3, [r3]
 1525 00e6 5BB2     		sxtb	r3, r3
 1526 00e8 2021     		movs	r1, #32
 1527 00ea CB1A     		subs	r3, r1, r3
 1528 00ec DA40     		lsrs	r2, r2, r3
 1529 00ee 1300     		movs	r3, r2
 1530 00f0 2993     		str	r3, [sp, #164]
 585:uECC.c        ****         for(index = 0; index < (uECC_word_t)num_words; ++index) {
 1531              		.loc 2 585 0 discriminator 3
 1532 00f2 2B9B     		ldr	r3, [sp, #172]
 1533 00f4 0133     		adds	r3, r3, #1
 1534 00f6 2B93     		str	r3, [sp, #172]
 1535              	.L68:
 585:uECC.c        ****         for(index = 0; index < (uECC_word_t)num_words; ++index) {
 1536              		.loc 2 585 0 is_stmt 0 discriminator 1
 1537 00f8 6B46     		mov	r3, sp
 1538 00fa 0333     		adds	r3, r3, #3
 1539 00fc 0022     		movs	r2, #0
 1540 00fe 9A56     		ldrsb	r2, [r3, r2]
 1541 0100 2B9B     		ldr	r3, [sp, #172]
 1542 0102 9A42     		cmp	r2, r3
 1543 0104 D2D8     		bhi	.L69
 1544 0106 0EE0     		b	.L70
 1545              	.L67:
 588:uECC.c        ****         }
 589:uECC.c        ****     } else {
 590:uECC.c        ****         uECC_vli_set(mod_multiple + word_shift, mod, num_words);
 1546              		.loc 2 590 0 is_stmt 1
 1547 0108 9E23     		movs	r3, #158
 1548 010a 6B44     		add	r3, r3, sp
 1549 010c 1B78     		ldrb	r3, [r3]
 1550 010e 5BB2     		sxtb	r3, r3
 1551 0110 9B00     		lsls	r3, r3, #2
 1552 0112 16AA     		add	r2, sp, #88
 1553 0114 D018     		adds	r0, r2, r3
 1554 0116 6B46     		mov	r3, sp
 1555 0118 0333     		adds	r3, r3, #3
 1556 011a 0022     		movs	r2, #0
 1557 011c 9A56     		ldrsb	r2, [r3, r2]
 1558 011e 019B     		ldr	r3, [sp, #4]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 50


 1559 0120 1900     		movs	r1, r3
 1560 0122 FFF7FEFF 		bl	uECC_vli_set
 1561              	.L70:
 591:uECC.c        ****     }
 592:uECC.c        **** 
 593:uECC.c        ****     for (index = 1; shift >= 0; --shift) {
 1562              		.loc 2 593 0
 1563 0126 0123     		movs	r3, #1
 1564 0128 2B93     		str	r3, [sp, #172]
 1565 012a 9CE0     		b	.L71
 1566              	.L75:
 1567              	.LBB4:
 594:uECC.c        ****         uECC_word_t borrow = 0;
 1568              		.loc 2 594 0
 1569 012c 0023     		movs	r3, #0
 1570 012e 2893     		str	r3, [sp, #160]
 595:uECC.c        ****         wordcount_t i;
 596:uECC.c        ****         for (i = 0; i < num_words * 2; ++i) {
 1571              		.loc 2 596 0
 1572 0130 9F23     		movs	r3, #159
 1573 0132 6B44     		add	r3, r3, sp
 1574 0134 0022     		movs	r2, #0
 1575 0136 1A70     		strb	r2, [r3]
 1576 0138 4AE0     		b	.L72
 1577              	.L74:
 1578              	.LBB5:
 597:uECC.c        ****             uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 1579              		.loc 2 597 0
 1580 013a 04AB     		add	r3, sp, #16
 1581 013c 2B9A     		ldr	r2, [sp, #172]
 1582 013e 9200     		lsls	r2, r2, #2
 1583 0140 D258     		ldr	r2, [r2, r3]
 1584 0142 9F23     		movs	r3, #159
 1585 0144 6B44     		add	r3, r3, sp
 1586 0146 1B78     		ldrb	r3, [r3]
 1587 0148 5BB2     		sxtb	r3, r3
 1588 014a 9B00     		lsls	r3, r3, #2
 1589 014c D318     		adds	r3, r2, r3
 1590 014e 1A68     		ldr	r2, [r3]
 1591 0150 9F23     		movs	r3, #159
 1592 0152 6B44     		add	r3, r3, sp
 1593 0154 0021     		movs	r1, #0
 1594 0156 5956     		ldrsb	r1, [r3, r1]
 1595 0158 16AB     		add	r3, sp, #88
 1596 015a 8900     		lsls	r1, r1, #2
 1597 015c CB58     		ldr	r3, [r1, r3]
 1598 015e D21A     		subs	r2, r2, r3
 1599 0160 289B     		ldr	r3, [sp, #160]
 1600 0162 D31A     		subs	r3, r2, r3
 1601 0164 2693     		str	r3, [sp, #152]
 598:uECC.c        ****             if (diff != v[index][i]) {
 1602              		.loc 2 598 0
 1603 0166 04AB     		add	r3, sp, #16
 1604 0168 2B9A     		ldr	r2, [sp, #172]
 1605 016a 9200     		lsls	r2, r2, #2
 1606 016c D258     		ldr	r2, [r2, r3]
 1607 016e 9F23     		movs	r3, #159
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 51


 1608 0170 6B44     		add	r3, r3, sp
 1609 0172 1B78     		ldrb	r3, [r3]
 1610 0174 5BB2     		sxtb	r3, r3
 1611 0176 9B00     		lsls	r3, r3, #2
 1612 0178 D318     		adds	r3, r2, r3
 1613 017a 1A68     		ldr	r2, [r3]
 1614 017c 269B     		ldr	r3, [sp, #152]
 1615 017e 9A42     		cmp	r2, r3
 1616 0180 10D0     		beq	.L73
 599:uECC.c        ****                 borrow = (diff > v[index][i]);
 1617              		.loc 2 599 0
 1618 0182 04AB     		add	r3, sp, #16
 1619 0184 2B9A     		ldr	r2, [sp, #172]
 1620 0186 9200     		lsls	r2, r2, #2
 1621 0188 D258     		ldr	r2, [r2, r3]
 1622 018a 9F23     		movs	r3, #159
 1623 018c 6B44     		add	r3, r3, sp
 1624 018e 1B78     		ldrb	r3, [r3]
 1625 0190 5BB2     		sxtb	r3, r3
 1626 0192 9B00     		lsls	r3, r3, #2
 1627 0194 D318     		adds	r3, r2, r3
 1628 0196 1A68     		ldr	r2, [r3]
 1629 0198 269B     		ldr	r3, [sp, #152]
 1630 019a 9A42     		cmp	r2, r3
 1631 019c 9B41     		sbcs	r3, r3, r3
 1632 019e 5B42     		rsbs	r3, r3, #0
 1633 01a0 DBB2     		uxtb	r3, r3
 1634 01a2 2893     		str	r3, [sp, #160]
 1635              	.L73:
 600:uECC.c        ****             }
 601:uECC.c        ****             v[1 - index][i] = diff;
 1636              		.loc 2 601 0 discriminator 2
 1637 01a4 2B9B     		ldr	r3, [sp, #172]
 1638 01a6 0122     		movs	r2, #1
 1639 01a8 D21A     		subs	r2, r2, r3
 1640 01aa 04AB     		add	r3, sp, #16
 1641 01ac 9200     		lsls	r2, r2, #2
 1642 01ae D258     		ldr	r2, [r2, r3]
 1643 01b0 9F23     		movs	r3, #159
 1644 01b2 6B44     		add	r3, r3, sp
 1645 01b4 1B78     		ldrb	r3, [r3]
 1646 01b6 5BB2     		sxtb	r3, r3
 1647 01b8 9B00     		lsls	r3, r3, #2
 1648 01ba D318     		adds	r3, r2, r3
 1649 01bc 269A     		ldr	r2, [sp, #152]
 1650 01be 1A60     		str	r2, [r3]
 1651              	.LBE5:
 596:uECC.c        ****             uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 1652              		.loc 2 596 0 discriminator 2
 1653 01c0 9F23     		movs	r3, #159
 1654 01c2 6B44     		add	r3, r3, sp
 1655 01c4 1B78     		ldrb	r3, [r3]
 1656 01c6 0133     		adds	r3, r3, #1
 1657 01c8 DAB2     		uxtb	r2, r3
 1658 01ca 9F23     		movs	r3, #159
 1659 01cc 6B44     		add	r3, r3, sp
 1660 01ce 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 52


 1661              	.L72:
 596:uECC.c        ****             uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 1662              		.loc 2 596 0 is_stmt 0 discriminator 1
 1663 01d0 9F23     		movs	r3, #159
 1664 01d2 6B44     		add	r3, r3, sp
 1665 01d4 0022     		movs	r2, #0
 1666 01d6 9A56     		ldrsb	r2, [r3, r2]
 1667 01d8 6B46     		mov	r3, sp
 1668 01da 0333     		adds	r3, r3, #3
 1669 01dc 1B78     		ldrb	r3, [r3]
 1670 01de 5BB2     		sxtb	r3, r3
 1671 01e0 5B00     		lsls	r3, r3, #1
 1672 01e2 9A42     		cmp	r2, r3
 1673 01e4 A9DB     		blt	.L74
 602:uECC.c        ****         }
 603:uECC.c        ****         index = !(index ^ borrow); /* Swap the index if there was no borrow */
 1674              		.loc 2 603 0 is_stmt 1 discriminator 2
 1675 01e6 2B9A     		ldr	r2, [sp, #172]
 1676 01e8 289B     		ldr	r3, [sp, #160]
 1677 01ea D31A     		subs	r3, r2, r3
 1678 01ec 5A42     		rsbs	r2, r3, #0
 1679 01ee 5341     		adcs	r3, r3, r2
 1680 01f0 DBB2     		uxtb	r3, r3
 1681 01f2 2B93     		str	r3, [sp, #172]
 604:uECC.c        ****         uECC_vli_rshift1(mod_multiple, num_words);
 1682              		.loc 2 604 0 discriminator 2
 1683 01f4 6B46     		mov	r3, sp
 1684 01f6 0333     		adds	r3, r3, #3
 1685 01f8 0022     		movs	r2, #0
 1686 01fa 9A56     		ldrsb	r2, [r3, r2]
 1687 01fc 16AB     		add	r3, sp, #88
 1688 01fe 1100     		movs	r1, r2
 1689 0200 1800     		movs	r0, r3
 1690 0202 FFF7FEFF 		bl	uECC_vli_rshift1
 605:uECC.c        ****         mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
 1691              		.loc 2 605 0 discriminator 2
 1692 0206 6B46     		mov	r3, sp
 1693 0208 0333     		adds	r3, r3, #3
 1694 020a 1B78     		ldrb	r3, [r3]
 1695 020c 5BB2     		sxtb	r3, r3
 1696 020e 5A1E     		subs	r2, r3, #1
 1697 0210 6B46     		mov	r3, sp
 1698 0212 0333     		adds	r3, r3, #3
 1699 0214 1B78     		ldrb	r3, [r3]
 1700 0216 5BB2     		sxtb	r3, r3
 1701 0218 591E     		subs	r1, r3, #1
 1702 021a 16AB     		add	r3, sp, #88
 1703 021c 8900     		lsls	r1, r1, #2
 1704 021e C958     		ldr	r1, [r1, r3]
 1705 0220 6B46     		mov	r3, sp
 1706 0222 0333     		adds	r3, r3, #3
 1707 0224 0020     		movs	r0, #0
 1708 0226 1856     		ldrsb	r0, [r3, r0]
 1709 0228 16AB     		add	r3, sp, #88
 1710 022a 8000     		lsls	r0, r0, #2
 1711 022c C358     		ldr	r3, [r0, r3]
 1712 022e DB07     		lsls	r3, r3, #31
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 53


 1713 0230 1943     		orrs	r1, r3
 1714 0232 16AB     		add	r3, sp, #88
 1715 0234 9200     		lsls	r2, r2, #2
 1716 0236 D150     		str	r1, [r2, r3]
 606:uECC.c        ****         uECC_vli_rshift1(mod_multiple + num_words, num_words);
 1717              		.loc 2 606 0 discriminator 2
 1718 0238 6B46     		mov	r3, sp
 1719 023a 0333     		adds	r3, r3, #3
 1720 023c 1B78     		ldrb	r3, [r3]
 1721 023e 5BB2     		sxtb	r3, r3
 1722 0240 9B00     		lsls	r3, r3, #2
 1723 0242 16AA     		add	r2, sp, #88
 1724 0244 D218     		adds	r2, r2, r3
 1725 0246 6B46     		mov	r3, sp
 1726 0248 0333     		adds	r3, r3, #3
 1727 024a 1B78     		ldrb	r3, [r3]
 1728 024c 5BB2     		sxtb	r3, r3
 1729 024e 1900     		movs	r1, r3
 1730 0250 1000     		movs	r0, r2
 1731 0252 FFF7FEFF 		bl	uECC_vli_rshift1
 1732              	.LBE4:
 593:uECC.c        ****         uECC_word_t borrow = 0;
 1733              		.loc 2 593 0 discriminator 2
 1734 0256 AA23     		movs	r3, #170
 1735 0258 6B44     		add	r3, r3, sp
 1736 025a 1B88     		ldrh	r3, [r3]
 1737 025c 013B     		subs	r3, r3, #1
 1738 025e 9AB2     		uxth	r2, r3
 1739 0260 AA23     		movs	r3, #170
 1740 0262 6B44     		add	r3, r3, sp
 1741 0264 1A80     		strh	r2, [r3]
 1742              	.L71:
 593:uECC.c        ****         uECC_word_t borrow = 0;
 1743              		.loc 2 593 0 is_stmt 0 discriminator 1
 1744 0266 AA23     		movs	r3, #170
 1745 0268 6B44     		add	r3, r3, sp
 1746 026a 0022     		movs	r2, #0
 1747 026c 9B5E     		ldrsh	r3, [r3, r2]
 1748 026e 002B     		cmp	r3, #0
 1749 0270 00DB     		blt	.LCB1379
 1750 0272 5BE7     		b	.L75	@long jump
 1751              	.LCB1379:
 607:uECC.c        ****     }
 608:uECC.c        ****     uECC_vli_set(result, v[index], num_words);
 1752              		.loc 2 608 0 is_stmt 1
 1753 0274 04AB     		add	r3, sp, #16
 1754 0276 2B9A     		ldr	r2, [sp, #172]
 1755 0278 9200     		lsls	r2, r2, #2
 1756 027a D158     		ldr	r1, [r2, r3]
 1757 027c 6B46     		mov	r3, sp
 1758 027e 0333     		adds	r3, r3, #3
 1759 0280 0022     		movs	r2, #0
 1760 0282 9A56     		ldrsb	r2, [r3, r2]
 1761 0284 039B     		ldr	r3, [sp, #12]
 1762 0286 1800     		movs	r0, r3
 1763 0288 FFF7FEFF 		bl	uECC_vli_set
 609:uECC.c        **** }
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 54


 1764              		.loc 2 609 0
 1765 028c C046     		nop
 1766 028e 2CB0     		add	sp, sp, #176
 1767              		@ sp needed
 1768 0290 10BD     		pop	{r4, pc}
 1769              	.L77:
 1770 0292 C046     		.align	2
 1771              	.L76:
 1772 0294 1F000080 		.word	-2147483617
 1773              		.cfi_endproc
 1774              	.LFE19:
 1775              		.size	uECC_vli_mmod, .-uECC_vli_mmod
 1776              		.section	.text.uECC_vli_modMult,"ax",%progbits
 1777              		.align	2
 1778              		.code	16
 1779              		.thumb_func
 1780              		.type	uECC_vli_modMult, %function
 1781              	uECC_vli_modMult:
 1782              	.LFB20:
 610:uECC.c        **** 
 611:uECC.c        **** /* Computes result = (left * right) % mod. */
 612:uECC.c        **** uECC_VLI_API void uECC_vli_modMult(uECC_word_t *result,
 613:uECC.c        ****                                    const uECC_word_t *left,
 614:uECC.c        ****                                    const uECC_word_t *right,
 615:uECC.c        ****                                    const uECC_word_t *mod,
 616:uECC.c        ****                                    wordcount_t num_words) {
 1783              		.loc 2 616 0
 1784              		.cfi_startproc
 1785              		@ args = 4, pretend = 0, frame = 80
 1786              		@ frame_needed = 0, uses_anonymous_args = 0
 1787 0000 00B5     		push	{lr}
 1788              		.cfi_def_cfa_offset 4
 1789              		.cfi_offset 14, -4
 1790 0002 95B0     		sub	sp, sp, #84
 1791              		.cfi_def_cfa_offset 88
 1792 0004 0390     		str	r0, [sp, #12]
 1793 0006 0291     		str	r1, [sp, #8]
 1794 0008 0192     		str	r2, [sp, #4]
 1795 000a 0093     		str	r3, [sp]
 617:uECC.c        ****     uECC_word_t product[2 * uECC_MAX_WORDS];
 618:uECC.c        ****     uECC_vli_mult(product, left, right, num_words);
 1796              		.loc 2 618 0
 1797 000c 16AB     		add	r3, sp, #88
 1798 000e 1B78     		ldrb	r3, [r3]
 1799 0010 5BB2     		sxtb	r3, r3
 1800 0012 019A     		ldr	r2, [sp, #4]
 1801 0014 0299     		ldr	r1, [sp, #8]
 1802 0016 04A8     		add	r0, sp, #16
 1803 0018 FFF7FEFF 		bl	uECC_vli_mult
 619:uECC.c        ****     uECC_vli_mmod(result, product, mod, num_words);
 1804              		.loc 2 619 0
 1805 001c 16AB     		add	r3, sp, #88
 1806 001e 1B78     		ldrb	r3, [r3]
 1807 0020 5BB2     		sxtb	r3, r3
 1808 0022 009A     		ldr	r2, [sp]
 1809 0024 04A9     		add	r1, sp, #16
 1810 0026 0398     		ldr	r0, [sp, #12]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 55


 1811 0028 FFF7FEFF 		bl	uECC_vli_mmod
 620:uECC.c        **** }
 1812              		.loc 2 620 0
 1813 002c C046     		nop
 1814 002e 15B0     		add	sp, sp, #84
 1815              		@ sp needed
 1816 0030 00BD     		pop	{pc}
 1817              		.cfi_endproc
 1818              	.LFE20:
 1819              		.size	uECC_vli_modMult, .-uECC_vli_modMult
 1820 0032 C046     		.section	.text.uECC_vli_modMult_fast,"ax",%progbits
 1821              		.align	2
 1822              		.code	16
 1823              		.thumb_func
 1824              		.type	uECC_vli_modMult_fast, %function
 1825              	uECC_vli_modMult_fast:
 1826              	.LFB21:
 621:uECC.c        **** 
 622:uECC.c        **** uECC_VLI_API void uECC_vli_modMult_fast(uECC_word_t *result,
 623:uECC.c        ****                                         const uECC_word_t *left,
 624:uECC.c        ****                                         const uECC_word_t *right,
 625:uECC.c        ****                                         uECC_Curve curve) {
 1827              		.loc 2 625 0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 80
 1830              		@ frame_needed = 0, uses_anonymous_args = 0
 1831 0000 00B5     		push	{lr}
 1832              		.cfi_def_cfa_offset 4
 1833              		.cfi_offset 14, -4
 1834 0002 95B0     		sub	sp, sp, #84
 1835              		.cfi_def_cfa_offset 88
 1836 0004 0390     		str	r0, [sp, #12]
 1837 0006 0291     		str	r1, [sp, #8]
 1838 0008 0192     		str	r2, [sp, #4]
 1839 000a 0093     		str	r3, [sp]
 626:uECC.c        ****     uECC_word_t product[2 * uECC_MAX_WORDS];
 627:uECC.c        ****     uECC_vli_mult(product, left, right, curve->num_words);
 1840              		.loc 2 627 0
 1841 000c 009B     		ldr	r3, [sp]
 1842 000e 1B78     		ldrb	r3, [r3]
 1843 0010 5BB2     		sxtb	r3, r3
 1844 0012 019A     		ldr	r2, [sp, #4]
 1845 0014 0299     		ldr	r1, [sp, #8]
 1846 0016 04A8     		add	r0, sp, #16
 1847 0018 FFF7FEFF 		bl	uECC_vli_mult
 628:uECC.c        **** #if (uECC_OPTIMIZATION_LEVEL > 0)
 629:uECC.c        ****     curve->mmod_fast(result, product);
 1848              		.loc 2 629 0
 1849 001c 009B     		ldr	r3, [sp]
 1850 001e B022     		movs	r2, #176
 1851 0020 9B58     		ldr	r3, [r3, r2]
 1852 0022 04A9     		add	r1, sp, #16
 1853 0024 039A     		ldr	r2, [sp, #12]
 1854 0026 1000     		movs	r0, r2
 1855 0028 9847     		blx	r3
 630:uECC.c        **** #else
 631:uECC.c        ****     uECC_vli_mmod(result, product, curve->p, curve->num_words);
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 56


 632:uECC.c        **** #endif
 633:uECC.c        **** }
 1856              		.loc 2 633 0
 1857 002a C046     		nop
 1858 002c 15B0     		add	sp, sp, #84
 1859              		@ sp needed
 1860 002e 00BD     		pop	{pc}
 1861              		.cfi_endproc
 1862              	.LFE21:
 1863              		.size	uECC_vli_modMult_fast, .-uECC_vli_modMult_fast
 1864              		.section	.text.uECC_vli_modSquare_fast,"ax",%progbits
 1865              		.align	2
 1866              		.code	16
 1867              		.thumb_func
 1868              		.type	uECC_vli_modSquare_fast, %function
 1869              	uECC_vli_modSquare_fast:
 1870              	.LFB22:
 634:uECC.c        **** 
 635:uECC.c        **** #if uECC_SQUARE_FUNC
 636:uECC.c        **** 
 637:uECC.c        **** #if uECC_ENABLE_VLI_API
 638:uECC.c        **** /* Computes result = left^2 % mod. */
 639:uECC.c        **** uECC_VLI_API void uECC_vli_modSquare(uECC_word_t *result,
 640:uECC.c        ****                                      const uECC_word_t *left,
 641:uECC.c        ****                                      const uECC_word_t *mod,
 642:uECC.c        ****                                      wordcount_t num_words) {
 643:uECC.c        ****     uECC_word_t product[2 * uECC_MAX_WORDS];
 644:uECC.c        ****     uECC_vli_square(product, left, num_words);
 645:uECC.c        ****     uECC_vli_mmod(result, product, mod, num_words);
 646:uECC.c        **** }
 647:uECC.c        **** #endif /* uECC_ENABLE_VLI_API */
 648:uECC.c        **** 
 649:uECC.c        **** uECC_VLI_API void uECC_vli_modSquare_fast(uECC_word_t *result,
 650:uECC.c        ****                                           const uECC_word_t *left,
 651:uECC.c        ****                                           uECC_Curve curve) {
 652:uECC.c        ****     uECC_word_t product[2 * uECC_MAX_WORDS];
 653:uECC.c        ****     uECC_vli_square(product, left, curve->num_words);
 654:uECC.c        **** #if (uECC_OPTIMIZATION_LEVEL > 0)
 655:uECC.c        ****     curve->mmod_fast(result, product);
 656:uECC.c        **** #else
 657:uECC.c        ****     uECC_vli_mmod(result, product, curve->p, curve->num_words);
 658:uECC.c        **** #endif
 659:uECC.c        **** }
 660:uECC.c        **** 
 661:uECC.c        **** #else /* uECC_SQUARE_FUNC */
 662:uECC.c        **** 
 663:uECC.c        **** #if uECC_ENABLE_VLI_API
 664:uECC.c        **** uECC_VLI_API void uECC_vli_modSquare(uECC_word_t *result,
 665:uECC.c        ****                                      const uECC_word_t *left,
 666:uECC.c        ****                                      const uECC_word_t *mod,
 667:uECC.c        ****                                      wordcount_t num_words) {
 668:uECC.c        ****     uECC_vli_modMult(result, left, left, mod, num_words);
 669:uECC.c        **** }
 670:uECC.c        **** #endif /* uECC_ENABLE_VLI_API */
 671:uECC.c        **** 
 672:uECC.c        **** uECC_VLI_API void uECC_vli_modSquare_fast(uECC_word_t *result,
 673:uECC.c        ****                                           const uECC_word_t *left,
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 57


 674:uECC.c        ****                                           uECC_Curve curve) {
 1871              		.loc 2 674 0
 1872              		.cfi_startproc
 1873              		@ args = 0, pretend = 0, frame = 16
 1874              		@ frame_needed = 0, uses_anonymous_args = 0
 1875 0000 00B5     		push	{lr}
 1876              		.cfi_def_cfa_offset 4
 1877              		.cfi_offset 14, -4
 1878 0002 85B0     		sub	sp, sp, #20
 1879              		.cfi_def_cfa_offset 24
 1880 0004 0390     		str	r0, [sp, #12]
 1881 0006 0291     		str	r1, [sp, #8]
 1882 0008 0192     		str	r2, [sp, #4]
 675:uECC.c        ****     uECC_vli_modMult_fast(result, left, left, curve);
 1883              		.loc 2 675 0
 1884 000a 019B     		ldr	r3, [sp, #4]
 1885 000c 029A     		ldr	r2, [sp, #8]
 1886 000e 0299     		ldr	r1, [sp, #8]
 1887 0010 0398     		ldr	r0, [sp, #12]
 1888 0012 FFF7FEFF 		bl	uECC_vli_modMult_fast
 676:uECC.c        **** }
 1889              		.loc 2 676 0
 1890 0016 C046     		nop
 1891 0018 05B0     		add	sp, sp, #20
 1892              		@ sp needed
 1893 001a 00BD     		pop	{pc}
 1894              		.cfi_endproc
 1895              	.LFE22:
 1896              		.size	uECC_vli_modSquare_fast, .-uECC_vli_modSquare_fast
 1897              		.section	.text.vli_modInv_update,"ax",%progbits
 1898              		.align	2
 1899              		.code	16
 1900              		.thumb_func
 1901              		.type	vli_modInv_update, %function
 1902              	vli_modInv_update:
 1903              	.LFB23:
 677:uECC.c        **** 
 678:uECC.c        **** #endif /* uECC_SQUARE_FUNC */
 679:uECC.c        **** 
 680:uECC.c        **** #define EVEN(vli) (!(vli[0] & 1))
 681:uECC.c        **** static void vli_modInv_update(uECC_word_t *uv,
 682:uECC.c        ****                               const uECC_word_t *mod,
 683:uECC.c        ****                               wordcount_t num_words) {
 1904              		.loc 2 683 0
 1905              		.cfi_startproc
 1906              		@ args = 0, pretend = 0, frame = 24
 1907              		@ frame_needed = 0, uses_anonymous_args = 0
 1908 0000 00B5     		push	{lr}
 1909              		.cfi_def_cfa_offset 4
 1910              		.cfi_offset 14, -4
 1911 0002 87B0     		sub	sp, sp, #28
 1912              		.cfi_def_cfa_offset 32
 1913 0004 0390     		str	r0, [sp, #12]
 1914 0006 0291     		str	r1, [sp, #8]
 1915 0008 6B46     		mov	r3, sp
 1916 000a 0733     		adds	r3, r3, #7
 1917 000c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 58


 684:uECC.c        ****     uECC_word_t carry = 0;
 1918              		.loc 2 684 0
 1919 000e 0023     		movs	r3, #0
 1920 0010 0593     		str	r3, [sp, #20]
 685:uECC.c        ****     if (!EVEN(uv)) {
 1921              		.loc 2 685 0
 1922 0012 039B     		ldr	r3, [sp, #12]
 1923 0014 1B68     		ldr	r3, [r3]
 1924 0016 0122     		movs	r2, #1
 1925 0018 1340     		ands	r3, r2
 1926 001a 0AD0     		beq	.L82
 686:uECC.c        ****         carry = uECC_vli_add(uv, uv, mod, num_words);
 1927              		.loc 2 686 0
 1928 001c 6B46     		mov	r3, sp
 1929 001e 0733     		adds	r3, r3, #7
 1930 0020 1B78     		ldrb	r3, [r3]
 1931 0022 5BB2     		sxtb	r3, r3
 1932 0024 029A     		ldr	r2, [sp, #8]
 1933 0026 0399     		ldr	r1, [sp, #12]
 1934 0028 0398     		ldr	r0, [sp, #12]
 1935 002a FFF7FEFF 		bl	uECC_vli_add
 1936 002e 0300     		movs	r3, r0
 1937 0030 0593     		str	r3, [sp, #20]
 1938              	.L82:
 687:uECC.c        ****     }
 688:uECC.c        ****     uECC_vli_rshift1(uv, num_words);
 1939              		.loc 2 688 0
 1940 0032 6B46     		mov	r3, sp
 1941 0034 0733     		adds	r3, r3, #7
 1942 0036 0022     		movs	r2, #0
 1943 0038 9A56     		ldrsb	r2, [r3, r2]
 1944 003a 039B     		ldr	r3, [sp, #12]
 1945 003c 1100     		movs	r1, r2
 1946 003e 1800     		movs	r0, r3
 1947 0040 FFF7FEFF 		bl	uECC_vli_rshift1
 689:uECC.c        ****     if (carry) {
 1948              		.loc 2 689 0
 1949 0044 059B     		ldr	r3, [sp, #20]
 1950 0046 002B     		cmp	r3, #0
 1951 0048 18D0     		beq	.L84
 690:uECC.c        ****         uv[num_words - 1] |= HIGH_BIT_SET;
 1952              		.loc 2 690 0
 1953 004a 6B46     		mov	r3, sp
 1954 004c 0733     		adds	r3, r3, #7
 1955 004e 1B78     		ldrb	r3, [r3]
 1956 0050 5BB2     		sxtb	r3, r3
 1957 0052 0C4A     		ldr	r2, .L85
 1958 0054 9446     		mov	ip, r2
 1959 0056 6344     		add	r3, r3, ip
 1960 0058 9B00     		lsls	r3, r3, #2
 1961 005a 039A     		ldr	r2, [sp, #12]
 1962 005c D318     		adds	r3, r2, r3
 1963 005e 6A46     		mov	r2, sp
 1964 0060 0732     		adds	r2, r2, #7
 1965 0062 1278     		ldrb	r2, [r2]
 1966 0064 52B2     		sxtb	r2, r2
 1967 0066 0749     		ldr	r1, .L85
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 59


 1968 0068 8C46     		mov	ip, r1
 1969 006a 6244     		add	r2, r2, ip
 1970 006c 9200     		lsls	r2, r2, #2
 1971 006e 0399     		ldr	r1, [sp, #12]
 1972 0070 8A18     		adds	r2, r1, r2
 1973 0072 1268     		ldr	r2, [r2]
 1974 0074 8021     		movs	r1, #128
 1975 0076 0906     		lsls	r1, r1, #24
 1976 0078 0A43     		orrs	r2, r1
 1977 007a 1A60     		str	r2, [r3]
 1978              	.L84:
 691:uECC.c        ****     }
 692:uECC.c        **** }
 1979              		.loc 2 692 0
 1980 007c C046     		nop
 1981 007e 07B0     		add	sp, sp, #28
 1982              		@ sp needed
 1983 0080 00BD     		pop	{pc}
 1984              	.L86:
 1985 0082 C046     		.align	2
 1986              	.L85:
 1987 0084 FFFFFF3F 		.word	1073741823
 1988              		.cfi_endproc
 1989              	.LFE23:
 1990              		.size	vli_modInv_update, .-vli_modInv_update
 1991              		.section	.text.uECC_vli_modInv,"ax",%progbits
 1992              		.align	2
 1993              		.code	16
 1994              		.thumb_func
 1995              		.type	uECC_vli_modInv, %function
 1996              	uECC_vli_modInv:
 1997              	.LFB24:
 693:uECC.c        **** 
 694:uECC.c        **** /* Computes result = (1 / input) % mod. All VLIs are the same size.
 695:uECC.c        ****    See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
 696:uECC.c        **** uECC_VLI_API void uECC_vli_modInv(uECC_word_t *result,
 697:uECC.c        ****                                   const uECC_word_t *input,
 698:uECC.c        ****                                   const uECC_word_t *mod,
 699:uECC.c        ****                                   wordcount_t num_words) {
 1998              		.loc 2 699 0
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 152
 2001              		@ frame_needed = 0, uses_anonymous_args = 0
 2002 0000 10B5     		push	{r4, lr}
 2003              		.cfi_def_cfa_offset 8
 2004              		.cfi_offset 4, -8
 2005              		.cfi_offset 14, -4
 2006 0002 A6B0     		sub	sp, sp, #152
 2007              		.cfi_def_cfa_offset 160
 2008 0004 0390     		str	r0, [sp, #12]
 2009 0006 0291     		str	r1, [sp, #8]
 2010 0008 0192     		str	r2, [sp, #4]
 2011 000a 1A00     		movs	r2, r3
 2012 000c 6B46     		mov	r3, sp
 2013 000e 0333     		adds	r3, r3, #3
 2014 0010 1A70     		strb	r2, [r3]
 700:uECC.c        ****     uECC_word_t a[uECC_MAX_WORDS], b[uECC_MAX_WORDS], u[uECC_MAX_WORDS], v[uECC_MAX_WORDS];
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 60


 701:uECC.c        ****     cmpresult_t cmpResult;
 702:uECC.c        **** 
 703:uECC.c        ****     if (uECC_vli_isZero(input, num_words)) {
 2015              		.loc 2 703 0
 2016 0012 6B46     		mov	r3, sp
 2017 0014 0333     		adds	r3, r3, #3
 2018 0016 0022     		movs	r2, #0
 2019 0018 9A56     		ldrsb	r2, [r3, r2]
 2020 001a 029B     		ldr	r3, [sp, #8]
 2021 001c 1100     		movs	r1, r2
 2022 001e 1800     		movs	r0, r3
 2023 0020 FFF7FEFF 		bl	uECC_vli_isZero
 2024 0024 031E     		subs	r3, r0, #0
 2025 0026 09D0     		beq	.L88
 704:uECC.c        ****         uECC_vli_clear(result, num_words);
 2026              		.loc 2 704 0
 2027 0028 6B46     		mov	r3, sp
 2028 002a 0333     		adds	r3, r3, #3
 2029 002c 0022     		movs	r2, #0
 2030 002e 9A56     		ldrsb	r2, [r3, r2]
 2031 0030 039B     		ldr	r3, [sp, #12]
 2032 0032 1100     		movs	r1, r2
 2033 0034 1800     		movs	r0, r3
 2034 0036 FFF7FEFF 		bl	uECC_vli_clear
 2035 003a EBE0     		b	.L87
 2036              	.L88:
 705:uECC.c        ****         return;
 706:uECC.c        ****     }
 707:uECC.c        **** 
 708:uECC.c        ****     uECC_vli_set(a, input, num_words);
 2037              		.loc 2 708 0
 2038 003c 6B46     		mov	r3, sp
 2039 003e 0333     		adds	r3, r3, #3
 2040 0040 0022     		movs	r2, #0
 2041 0042 9A56     		ldrsb	r2, [r3, r2]
 2042 0044 0299     		ldr	r1, [sp, #8]
 2043 0046 1DAB     		add	r3, sp, #116
 2044 0048 1800     		movs	r0, r3
 2045 004a FFF7FEFF 		bl	uECC_vli_set
 709:uECC.c        ****     uECC_vli_set(b, mod, num_words);
 2046              		.loc 2 709 0
 2047 004e 6B46     		mov	r3, sp
 2048 0050 0333     		adds	r3, r3, #3
 2049 0052 0022     		movs	r2, #0
 2050 0054 9A56     		ldrsb	r2, [r3, r2]
 2051 0056 0199     		ldr	r1, [sp, #4]
 2052 0058 15AB     		add	r3, sp, #84
 2053 005a 1800     		movs	r0, r3
 2054 005c FFF7FEFF 		bl	uECC_vli_set
 710:uECC.c        ****     uECC_vli_clear(u, num_words);
 2055              		.loc 2 710 0
 2056 0060 6B46     		mov	r3, sp
 2057 0062 0333     		adds	r3, r3, #3
 2058 0064 0022     		movs	r2, #0
 2059 0066 9A56     		ldrsb	r2, [r3, r2]
 2060 0068 0DAB     		add	r3, sp, #52
 2061 006a 1100     		movs	r1, r2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 61


 2062 006c 1800     		movs	r0, r3
 2063 006e FFF7FEFF 		bl	uECC_vli_clear
 711:uECC.c        ****     u[0] = 1;
 2064              		.loc 2 711 0
 2065 0072 0DAB     		add	r3, sp, #52
 2066 0074 0122     		movs	r2, #1
 2067 0076 1A60     		str	r2, [r3]
 712:uECC.c        ****     uECC_vli_clear(v, num_words);
 2068              		.loc 2 712 0
 2069 0078 6B46     		mov	r3, sp
 2070 007a 0333     		adds	r3, r3, #3
 2071 007c 0022     		movs	r2, #0
 2072 007e 9A56     		ldrsb	r2, [r3, r2]
 2073 0080 05AB     		add	r3, sp, #20
 2074 0082 1100     		movs	r1, r2
 2075 0084 1800     		movs	r0, r3
 2076 0086 FFF7FEFF 		bl	uECC_vli_clear
 713:uECC.c        ****     while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 2077              		.loc 2 713 0
 2078 008a A6E0     		b	.L90
 2079              	.L96:
 714:uECC.c        ****         if (EVEN(a)) {
 2080              		.loc 2 714 0
 2081 008c 1DAB     		add	r3, sp, #116
 2082 008e 1B68     		ldr	r3, [r3]
 2083 0090 0122     		movs	r2, #1
 2084 0092 1340     		ands	r3, r2
 2085 0094 12D1     		bne	.L91
 715:uECC.c        ****             uECC_vli_rshift1(a, num_words);
 2086              		.loc 2 715 0
 2087 0096 6B46     		mov	r3, sp
 2088 0098 0333     		adds	r3, r3, #3
 2089 009a 0022     		movs	r2, #0
 2090 009c 9A56     		ldrsb	r2, [r3, r2]
 2091 009e 1DAB     		add	r3, sp, #116
 2092 00a0 1100     		movs	r1, r2
 2093 00a2 1800     		movs	r0, r3
 2094 00a4 FFF7FEFF 		bl	uECC_vli_rshift1
 716:uECC.c        ****             vli_modInv_update(u, mod, num_words);
 2095              		.loc 2 716 0
 2096 00a8 6B46     		mov	r3, sp
 2097 00aa 0333     		adds	r3, r3, #3
 2098 00ac 0022     		movs	r2, #0
 2099 00ae 9A56     		ldrsb	r2, [r3, r2]
 2100 00b0 0199     		ldr	r1, [sp, #4]
 2101 00b2 0DAB     		add	r3, sp, #52
 2102 00b4 1800     		movs	r0, r3
 2103 00b6 FFF7FEFF 		bl	vli_modInv_update
 2104 00ba 8EE0     		b	.L90
 2105              	.L91:
 717:uECC.c        ****         } else if (EVEN(b)) {
 2106              		.loc 2 717 0
 2107 00bc 15AB     		add	r3, sp, #84
 2108 00be 1B68     		ldr	r3, [r3]
 2109 00c0 0122     		movs	r2, #1
 2110 00c2 1340     		ands	r3, r2
 2111 00c4 12D1     		bne	.L92
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 62


 718:uECC.c        ****             uECC_vli_rshift1(b, num_words);
 2112              		.loc 2 718 0
 2113 00c6 6B46     		mov	r3, sp
 2114 00c8 0333     		adds	r3, r3, #3
 2115 00ca 0022     		movs	r2, #0
 2116 00cc 9A56     		ldrsb	r2, [r3, r2]
 2117 00ce 15AB     		add	r3, sp, #84
 2118 00d0 1100     		movs	r1, r2
 2119 00d2 1800     		movs	r0, r3
 2120 00d4 FFF7FEFF 		bl	uECC_vli_rshift1
 719:uECC.c        ****             vli_modInv_update(v, mod, num_words);
 2121              		.loc 2 719 0
 2122 00d8 6B46     		mov	r3, sp
 2123 00da 0333     		adds	r3, r3, #3
 2124 00dc 0022     		movs	r2, #0
 2125 00de 9A56     		ldrsb	r2, [r3, r2]
 2126 00e0 0199     		ldr	r1, [sp, #4]
 2127 00e2 05AB     		add	r3, sp, #20
 2128 00e4 1800     		movs	r0, r3
 2129 00e6 FFF7FEFF 		bl	vli_modInv_update
 2130 00ea 76E0     		b	.L90
 2131              	.L92:
 720:uECC.c        ****         } else if (cmpResult > 0) {
 2132              		.loc 2 720 0
 2133 00ec 9723     		movs	r3, #151
 2134 00ee 6B44     		add	r3, r3, sp
 2135 00f0 1B78     		ldrb	r3, [r3]
 2136 00f2 5BB2     		sxtb	r3, r3
 2137 00f4 002B     		cmp	r3, #0
 2138 00f6 38DD     		ble	.L93
 721:uECC.c        ****             uECC_vli_sub(a, a, b, num_words);
 2139              		.loc 2 721 0
 2140 00f8 6B46     		mov	r3, sp
 2141 00fa 0333     		adds	r3, r3, #3
 2142 00fc 1B78     		ldrb	r3, [r3]
 2143 00fe 5BB2     		sxtb	r3, r3
 2144 0100 15AA     		add	r2, sp, #84
 2145 0102 1DA9     		add	r1, sp, #116
 2146 0104 1DA8     		add	r0, sp, #116
 2147 0106 FFF7FEFF 		bl	uECC_vli_sub
 722:uECC.c        ****             uECC_vli_rshift1(a, num_words);
 2148              		.loc 2 722 0
 2149 010a 6B46     		mov	r3, sp
 2150 010c 0333     		adds	r3, r3, #3
 2151 010e 0022     		movs	r2, #0
 2152 0110 9A56     		ldrsb	r2, [r3, r2]
 2153 0112 1DAB     		add	r3, sp, #116
 2154 0114 1100     		movs	r1, r2
 2155 0116 1800     		movs	r0, r3
 2156 0118 FFF7FEFF 		bl	uECC_vli_rshift1
 723:uECC.c        ****             if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 2157              		.loc 2 723 0
 2158 011c 6B46     		mov	r3, sp
 2159 011e 0333     		adds	r3, r3, #3
 2160 0120 0022     		movs	r2, #0
 2161 0122 9A56     		ldrsb	r2, [r3, r2]
 2162 0124 05A9     		add	r1, sp, #20
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 63


 2163 0126 0DAB     		add	r3, sp, #52
 2164 0128 1800     		movs	r0, r3
 2165 012a FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 2166 012e 031E     		subs	r3, r0, #0
 2167 0130 08DA     		bge	.L94
 724:uECC.c        ****                 uECC_vli_add(u, u, mod, num_words);
 2168              		.loc 2 724 0
 2169 0132 6B46     		mov	r3, sp
 2170 0134 0333     		adds	r3, r3, #3
 2171 0136 1B78     		ldrb	r3, [r3]
 2172 0138 5BB2     		sxtb	r3, r3
 2173 013a 019A     		ldr	r2, [sp, #4]
 2174 013c 0DA9     		add	r1, sp, #52
 2175 013e 0DA8     		add	r0, sp, #52
 2176 0140 FFF7FEFF 		bl	uECC_vli_add
 2177              	.L94:
 725:uECC.c        ****             }
 726:uECC.c        ****             uECC_vli_sub(u, u, v, num_words);
 2178              		.loc 2 726 0
 2179 0144 6B46     		mov	r3, sp
 2180 0146 0333     		adds	r3, r3, #3
 2181 0148 1B78     		ldrb	r3, [r3]
 2182 014a 5BB2     		sxtb	r3, r3
 2183 014c 05AA     		add	r2, sp, #20
 2184 014e 0DA9     		add	r1, sp, #52
 2185 0150 0DA8     		add	r0, sp, #52
 2186 0152 FFF7FEFF 		bl	uECC_vli_sub
 727:uECC.c        ****             vli_modInv_update(u, mod, num_words);
 2187              		.loc 2 727 0
 2188 0156 6B46     		mov	r3, sp
 2189 0158 0333     		adds	r3, r3, #3
 2190 015a 0022     		movs	r2, #0
 2191 015c 9A56     		ldrsb	r2, [r3, r2]
 2192 015e 0199     		ldr	r1, [sp, #4]
 2193 0160 0DAB     		add	r3, sp, #52
 2194 0162 1800     		movs	r0, r3
 2195 0164 FFF7FEFF 		bl	vli_modInv_update
 2196 0168 37E0     		b	.L90
 2197              	.L93:
 728:uECC.c        ****         } else {
 729:uECC.c        ****             uECC_vli_sub(b, b, a, num_words);
 2198              		.loc 2 729 0
 2199 016a 6B46     		mov	r3, sp
 2200 016c 0333     		adds	r3, r3, #3
 2201 016e 1B78     		ldrb	r3, [r3]
 2202 0170 5BB2     		sxtb	r3, r3
 2203 0172 1DAA     		add	r2, sp, #116
 2204 0174 15A9     		add	r1, sp, #84
 2205 0176 15A8     		add	r0, sp, #84
 2206 0178 FFF7FEFF 		bl	uECC_vli_sub
 730:uECC.c        ****             uECC_vli_rshift1(b, num_words);
 2207              		.loc 2 730 0
 2208 017c 6B46     		mov	r3, sp
 2209 017e 0333     		adds	r3, r3, #3
 2210 0180 0022     		movs	r2, #0
 2211 0182 9A56     		ldrsb	r2, [r3, r2]
 2212 0184 15AB     		add	r3, sp, #84
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 64


 2213 0186 1100     		movs	r1, r2
 2214 0188 1800     		movs	r0, r3
 2215 018a FFF7FEFF 		bl	uECC_vli_rshift1
 731:uECC.c        ****             if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 2216              		.loc 2 731 0
 2217 018e 6B46     		mov	r3, sp
 2218 0190 0333     		adds	r3, r3, #3
 2219 0192 0022     		movs	r2, #0
 2220 0194 9A56     		ldrsb	r2, [r3, r2]
 2221 0196 0DA9     		add	r1, sp, #52
 2222 0198 05AB     		add	r3, sp, #20
 2223 019a 1800     		movs	r0, r3
 2224 019c FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 2225 01a0 031E     		subs	r3, r0, #0
 2226 01a2 08DA     		bge	.L95
 732:uECC.c        ****                 uECC_vli_add(v, v, mod, num_words);
 2227              		.loc 2 732 0
 2228 01a4 6B46     		mov	r3, sp
 2229 01a6 0333     		adds	r3, r3, #3
 2230 01a8 1B78     		ldrb	r3, [r3]
 2231 01aa 5BB2     		sxtb	r3, r3
 2232 01ac 019A     		ldr	r2, [sp, #4]
 2233 01ae 05A9     		add	r1, sp, #20
 2234 01b0 05A8     		add	r0, sp, #20
 2235 01b2 FFF7FEFF 		bl	uECC_vli_add
 2236              	.L95:
 733:uECC.c        ****             }
 734:uECC.c        ****             uECC_vli_sub(v, v, u, num_words);
 2237              		.loc 2 734 0
 2238 01b6 6B46     		mov	r3, sp
 2239 01b8 0333     		adds	r3, r3, #3
 2240 01ba 1B78     		ldrb	r3, [r3]
 2241 01bc 5BB2     		sxtb	r3, r3
 2242 01be 0DAA     		add	r2, sp, #52
 2243 01c0 05A9     		add	r1, sp, #20
 2244 01c2 05A8     		add	r0, sp, #20
 2245 01c4 FFF7FEFF 		bl	uECC_vli_sub
 735:uECC.c        ****             vli_modInv_update(v, mod, num_words);
 2246              		.loc 2 735 0
 2247 01c8 6B46     		mov	r3, sp
 2248 01ca 0333     		adds	r3, r3, #3
 2249 01cc 0022     		movs	r2, #0
 2250 01ce 9A56     		ldrsb	r2, [r3, r2]
 2251 01d0 0199     		ldr	r1, [sp, #4]
 2252 01d2 05AB     		add	r3, sp, #20
 2253 01d4 1800     		movs	r0, r3
 2254 01d6 FFF7FEFF 		bl	vli_modInv_update
 2255              	.L90:
 713:uECC.c        ****         if (EVEN(a)) {
 2256              		.loc 2 713 0
 2257 01da 9724     		movs	r4, #151
 2258 01dc 6C44     		add	r4, r4, sp
 2259 01de 6B46     		mov	r3, sp
 2260 01e0 0333     		adds	r3, r3, #3
 2261 01e2 0022     		movs	r2, #0
 2262 01e4 9A56     		ldrsb	r2, [r3, r2]
 2263 01e6 15A9     		add	r1, sp, #84
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 65


 2264 01e8 1DAB     		add	r3, sp, #116
 2265 01ea 1800     		movs	r0, r3
 2266 01ec FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 2267 01f0 0300     		movs	r3, r0
 2268 01f2 2370     		strb	r3, [r4]
 2269 01f4 9723     		movs	r3, #151
 2270 01f6 6B44     		add	r3, r3, sp
 2271 01f8 1B78     		ldrb	r3, [r3]
 2272 01fa 5BB2     		sxtb	r3, r3
 2273 01fc 002B     		cmp	r3, #0
 2274 01fe 00D0     		beq	.LCB1853
 2275 0200 44E7     		b	.L96	@long jump
 2276              	.LCB1853:
 736:uECC.c        ****         }
 737:uECC.c        ****     }
 738:uECC.c        ****     uECC_vli_set(result, u, num_words);
 2277              		.loc 2 738 0
 2278 0202 6B46     		mov	r3, sp
 2279 0204 0333     		adds	r3, r3, #3
 2280 0206 0022     		movs	r2, #0
 2281 0208 9A56     		ldrsb	r2, [r3, r2]
 2282 020a 0DA9     		add	r1, sp, #52
 2283 020c 039B     		ldr	r3, [sp, #12]
 2284 020e 1800     		movs	r0, r3
 2285 0210 FFF7FEFF 		bl	uECC_vli_set
 2286              	.L87:
 739:uECC.c        **** }
 2287              		.loc 2 739 0
 2288 0214 26B0     		add	sp, sp, #152
 2289              		@ sp needed
 2290 0216 10BD     		pop	{r4, pc}
 2291              		.cfi_endproc
 2292              	.LFE24:
 2293              		.size	uECC_vli_modInv, .-uECC_vli_modInv
 2294              		.section	.text.double_jacobian_default,"ax",%progbits
 2295              		.align	2
 2296              		.code	16
 2297              		.thumb_func
 2298              		.type	double_jacobian_default, %function
 2299              	double_jacobian_default:
 2300              	.LFB25:
 2301              		.file 3 "curve-specific.inc"
   1:curve-specific.inc **** /* Copyright 2015, Kenneth MacKay. Licensed under the BSD 2-clause license. */
   2:curve-specific.inc **** 
   3:curve-specific.inc **** #ifndef _UECC_CURVE_SPECIFIC_H_
   4:curve-specific.inc **** #define _UECC_CURVE_SPECIFIC_H_
   5:curve-specific.inc **** 
   6:curve-specific.inc **** #define num_bytes_secp160r1 20
   7:curve-specific.inc **** #define num_bytes_secp192r1 24
   8:curve-specific.inc **** #define num_bytes_secp224r1 28
   9:curve-specific.inc **** #define num_bytes_secp256r1 32
  10:curve-specific.inc **** #define num_bytes_secp256k1 32
  11:curve-specific.inc **** 
  12:curve-specific.inc **** #if (uECC_WORD_SIZE == 1)
  13:curve-specific.inc **** 
  14:curve-specific.inc **** #define num_words_secp160r1 20
  15:curve-specific.inc **** #define num_words_secp192r1 24
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 66


  16:curve-specific.inc **** #define num_words_secp224r1 28
  17:curve-specific.inc **** #define num_words_secp256r1 32
  18:curve-specific.inc **** #define num_words_secp256k1 32
  19:curve-specific.inc **** 
  20:curve-specific.inc **** #define BYTES_TO_WORDS_8(a, b, c, d, e, f, g, h) \
  21:curve-specific.inc ****     0x##a, 0x##b, 0x##c, 0x##d, 0x##e, 0x##f, 0x##g, 0x##h
  22:curve-specific.inc **** #define BYTES_TO_WORDS_4(a, b, c, d) 0x##a, 0x##b, 0x##c, 0x##d
  23:curve-specific.inc **** 
  24:curve-specific.inc **** #elif (uECC_WORD_SIZE == 4)
  25:curve-specific.inc **** 
  26:curve-specific.inc **** #define num_words_secp160r1 5
  27:curve-specific.inc **** #define num_words_secp192r1 6
  28:curve-specific.inc **** #define num_words_secp224r1 7
  29:curve-specific.inc **** #define num_words_secp256r1 8
  30:curve-specific.inc **** #define num_words_secp256k1 8
  31:curve-specific.inc **** 
  32:curve-specific.inc **** #define BYTES_TO_WORDS_8(a, b, c, d, e, f, g, h) 0x##d##c##b##a, 0x##h##g##f##e
  33:curve-specific.inc **** #define BYTES_TO_WORDS_4(a, b, c, d) 0x##d##c##b##a
  34:curve-specific.inc **** 
  35:curve-specific.inc **** #elif (uECC_WORD_SIZE == 8)
  36:curve-specific.inc **** 
  37:curve-specific.inc **** #define num_words_secp160r1 3
  38:curve-specific.inc **** #define num_words_secp192r1 3
  39:curve-specific.inc **** #define num_words_secp224r1 4
  40:curve-specific.inc **** #define num_words_secp256r1 4
  41:curve-specific.inc **** #define num_words_secp256k1 4
  42:curve-specific.inc **** 
  43:curve-specific.inc **** #define BYTES_TO_WORDS_8(a, b, c, d, e, f, g, h) 0x##h##g##f##e##d##c##b##a##ull
  44:curve-specific.inc **** #define BYTES_TO_WORDS_4(a, b, c, d) 0x##d##c##b##a##ull
  45:curve-specific.inc **** 
  46:curve-specific.inc **** #endif /* uECC_WORD_SIZE */
  47:curve-specific.inc **** 
  48:curve-specific.inc **** #if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
  49:curve-specific.inc ****     uECC_SUPPORTS_secp224r1 || uECC_SUPPORTS_secp256r1
  50:curve-specific.inc **** static void double_jacobian_default(uECC_word_t * X1,
  51:curve-specific.inc ****                                     uECC_word_t * Y1,
  52:curve-specific.inc ****                                     uECC_word_t * Z1,
  53:curve-specific.inc ****                                     uECC_Curve curve) {
 2302              		.loc 3 53 0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 88
 2305              		@ frame_needed = 0, uses_anonymous_args = 0
 2306 0000 10B5     		push	{r4, lr}
 2307              		.cfi_def_cfa_offset 8
 2308              		.cfi_offset 4, -8
 2309              		.cfi_offset 14, -4
 2310 0002 98B0     		sub	sp, sp, #96
 2311              		.cfi_def_cfa_offset 104
 2312 0004 0590     		str	r0, [sp, #20]
 2313 0006 0491     		str	r1, [sp, #16]
 2314 0008 0392     		str	r2, [sp, #12]
 2315 000a 0293     		str	r3, [sp, #8]
  54:curve-specific.inc ****     /* t1 = X, t2 = Y, t3 = Z */
  55:curve-specific.inc ****     uECC_word_t t4[uECC_MAX_WORDS];
  56:curve-specific.inc ****     uECC_word_t t5[uECC_MAX_WORDS];
  57:curve-specific.inc ****     wordcount_t num_words = curve->num_words;
 2316              		.loc 3 57 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 67


 2317 000c 5F23     		movs	r3, #95
 2318 000e 6B44     		add	r3, r3, sp
 2319 0010 029A     		ldr	r2, [sp, #8]
 2320 0012 1278     		ldrb	r2, [r2]
 2321 0014 1A70     		strb	r2, [r3]
  58:curve-specific.inc **** 
  59:curve-specific.inc ****     if (uECC_vli_isZero(Z1, num_words)) {
 2322              		.loc 3 59 0
 2323 0016 5F23     		movs	r3, #95
 2324 0018 6B44     		add	r3, r3, sp
 2325 001a 0022     		movs	r2, #0
 2326 001c 9A56     		ldrsb	r2, [r3, r2]
 2327 001e 039B     		ldr	r3, [sp, #12]
 2328 0020 1100     		movs	r1, r2
 2329 0022 1800     		movs	r0, r3
 2330 0024 FFF7FEFF 		bl	uECC_vli_isZero
 2331 0028 031E     		subs	r3, r0, #0
 2332 002a 00D0     		beq	.LCB1901
 2333 002c FFE0     		b	.L102	@long jump
 2334              	.LCB1901:
  60:curve-specific.inc ****         return;
  61:curve-specific.inc ****     }
  62:curve-specific.inc **** 
  63:curve-specific.inc ****     uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 2335              		.loc 3 63 0
 2336 002e 029A     		ldr	r2, [sp, #8]
 2337 0030 0499     		ldr	r1, [sp, #16]
 2338 0032 0EAB     		add	r3, sp, #56
 2339 0034 1800     		movs	r0, r3
 2340 0036 FFF7FEFF 		bl	uECC_vli_modSquare_fast
  64:curve-specific.inc ****     uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 2341              		.loc 3 64 0
 2342 003a 029B     		ldr	r3, [sp, #8]
 2343 003c 0EAA     		add	r2, sp, #56
 2344 003e 0599     		ldr	r1, [sp, #20]
 2345 0040 06A8     		add	r0, sp, #24
 2346 0042 FFF7FEFF 		bl	uECC_vli_modMult_fast
  65:curve-specific.inc ****     uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 2347              		.loc 3 65 0
 2348 0046 029A     		ldr	r2, [sp, #8]
 2349 0048 0EA9     		add	r1, sp, #56
 2350 004a 0EAB     		add	r3, sp, #56
 2351 004c 1800     		movs	r0, r3
 2352 004e FFF7FEFF 		bl	uECC_vli_modSquare_fast
  66:curve-specific.inc ****     uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 2353              		.loc 3 66 0
 2354 0052 029B     		ldr	r3, [sp, #8]
 2355 0054 039A     		ldr	r2, [sp, #12]
 2356 0056 0499     		ldr	r1, [sp, #16]
 2357 0058 0498     		ldr	r0, [sp, #16]
 2358 005a FFF7FEFF 		bl	uECC_vli_modMult_fast
  67:curve-specific.inc ****     uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 2359              		.loc 3 67 0
 2360 005e 029A     		ldr	r2, [sp, #8]
 2361 0060 0399     		ldr	r1, [sp, #12]
 2362 0062 039B     		ldr	r3, [sp, #12]
 2363 0064 1800     		movs	r0, r3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 68


 2364 0066 FFF7FEFF 		bl	uECC_vli_modSquare_fast
  68:curve-specific.inc **** 
  69:curve-specific.inc ****     uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 2365              		.loc 3 69 0
 2366 006a 029B     		ldr	r3, [sp, #8]
 2367 006c 1C1D     		adds	r4, r3, #4
 2368 006e 039A     		ldr	r2, [sp, #12]
 2369 0070 0599     		ldr	r1, [sp, #20]
 2370 0072 0598     		ldr	r0, [sp, #20]
 2371 0074 5F23     		movs	r3, #95
 2372 0076 6B44     		add	r3, r3, sp
 2373 0078 1B78     		ldrb	r3, [r3]
 2374 007a 5BB2     		sxtb	r3, r3
 2375 007c 0093     		str	r3, [sp]
 2376 007e 2300     		movs	r3, r4
 2377 0080 FFF7FEFF 		bl	uECC_vli_modAdd
  70:curve-specific.inc ****     uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 2378              		.loc 3 70 0
 2379 0084 029B     		ldr	r3, [sp, #8]
 2380 0086 1C1D     		adds	r4, r3, #4
 2381 0088 039A     		ldr	r2, [sp, #12]
 2382 008a 0399     		ldr	r1, [sp, #12]
 2383 008c 0398     		ldr	r0, [sp, #12]
 2384 008e 5F23     		movs	r3, #95
 2385 0090 6B44     		add	r3, r3, sp
 2386 0092 1B78     		ldrb	r3, [r3]
 2387 0094 5BB2     		sxtb	r3, r3
 2388 0096 0093     		str	r3, [sp]
 2389 0098 2300     		movs	r3, r4
 2390 009a FFF7FEFF 		bl	uECC_vli_modAdd
  71:curve-specific.inc ****     uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 2391              		.loc 3 71 0
 2392 009e 029B     		ldr	r3, [sp, #8]
 2393 00a0 1C1D     		adds	r4, r3, #4
 2394 00a2 039A     		ldr	r2, [sp, #12]
 2395 00a4 0599     		ldr	r1, [sp, #20]
 2396 00a6 0398     		ldr	r0, [sp, #12]
 2397 00a8 5F23     		movs	r3, #95
 2398 00aa 6B44     		add	r3, r3, sp
 2399 00ac 1B78     		ldrb	r3, [r3]
 2400 00ae 5BB2     		sxtb	r3, r3
 2401 00b0 0093     		str	r3, [sp]
 2402 00b2 2300     		movs	r3, r4
 2403 00b4 FFF7FEFF 		bl	uECC_vli_modSub
  72:curve-specific.inc ****     uECC_vli_modMult_fast(X1, X1, Z1, curve);                /* t1 = x1^2 - z1^4 */
 2404              		.loc 3 72 0
 2405 00b8 029B     		ldr	r3, [sp, #8]
 2406 00ba 039A     		ldr	r2, [sp, #12]
 2407 00bc 0599     		ldr	r1, [sp, #20]
 2408 00be 0598     		ldr	r0, [sp, #20]
 2409 00c0 FFF7FEFF 		bl	uECC_vli_modMult_fast
  73:curve-specific.inc **** 
  74:curve-specific.inc ****     uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
 2410              		.loc 3 74 0
 2411 00c4 029B     		ldr	r3, [sp, #8]
 2412 00c6 1C1D     		adds	r4, r3, #4
 2413 00c8 059A     		ldr	r2, [sp, #20]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 69


 2414 00ca 0599     		ldr	r1, [sp, #20]
 2415 00cc 0398     		ldr	r0, [sp, #12]
 2416 00ce 5F23     		movs	r3, #95
 2417 00d0 6B44     		add	r3, r3, sp
 2418 00d2 1B78     		ldrb	r3, [r3]
 2419 00d4 5BB2     		sxtb	r3, r3
 2420 00d6 0093     		str	r3, [sp]
 2421 00d8 2300     		movs	r3, r4
 2422 00da FFF7FEFF 		bl	uECC_vli_modAdd
  75:curve-specific.inc ****     uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
 2423              		.loc 3 75 0
 2424 00de 029B     		ldr	r3, [sp, #8]
 2425 00e0 1C1D     		adds	r4, r3, #4
 2426 00e2 039A     		ldr	r2, [sp, #12]
 2427 00e4 0599     		ldr	r1, [sp, #20]
 2428 00e6 0598     		ldr	r0, [sp, #20]
 2429 00e8 5F23     		movs	r3, #95
 2430 00ea 6B44     		add	r3, r3, sp
 2431 00ec 1B78     		ldrb	r3, [r3]
 2432 00ee 5BB2     		sxtb	r3, r3
 2433 00f0 0093     		str	r3, [sp]
 2434 00f2 2300     		movs	r3, r4
 2435 00f4 FFF7FEFF 		bl	uECC_vli_modAdd
  76:curve-specific.inc ****     if (uECC_vli_testBit(X1, 0)) {
 2436              		.loc 3 76 0
 2437 00f8 059B     		ldr	r3, [sp, #20]
 2438 00fa 0021     		movs	r1, #0
 2439 00fc 1800     		movs	r0, r3
 2440 00fe FFF7FEFF 		bl	uECC_vli_testBit
 2441 0102 031E     		subs	r3, r0, #0
 2442 0104 2ED0     		beq	.L100
 2443              	.LBB6:
  77:curve-specific.inc ****         uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 2444              		.loc 3 77 0
 2445 0106 029B     		ldr	r3, [sp, #8]
 2446 0108 1A1D     		adds	r2, r3, #4
 2447 010a 5F23     		movs	r3, #95
 2448 010c 6B44     		add	r3, r3, sp
 2449 010e 1B78     		ldrb	r3, [r3]
 2450 0110 5BB2     		sxtb	r3, r3
 2451 0112 0599     		ldr	r1, [sp, #20]
 2452 0114 0598     		ldr	r0, [sp, #20]
 2453 0116 FFF7FEFF 		bl	uECC_vli_add
 2454 011a 0300     		movs	r3, r0
 2455 011c 1693     		str	r3, [sp, #88]
  78:curve-specific.inc ****         uECC_vli_rshift1(X1, num_words);
 2456              		.loc 3 78 0
 2457 011e 5F23     		movs	r3, #95
 2458 0120 6B44     		add	r3, r3, sp
 2459 0122 0022     		movs	r2, #0
 2460 0124 9A56     		ldrsb	r2, [r3, r2]
 2461 0126 059B     		ldr	r3, [sp, #20]
 2462 0128 1100     		movs	r1, r2
 2463 012a 1800     		movs	r0, r3
 2464 012c FFF7FEFF 		bl	uECC_vli_rshift1
  79:curve-specific.inc ****         X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
 2465              		.loc 3 79 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 70


 2466 0130 5F23     		movs	r3, #95
 2467 0132 6B44     		add	r3, r3, sp
 2468 0134 1B78     		ldrb	r3, [r3]
 2469 0136 5BB2     		sxtb	r3, r3
 2470 0138 3E4A     		ldr	r2, .L103
 2471 013a 9446     		mov	ip, r2
 2472 013c 6344     		add	r3, r3, ip
 2473 013e 9B00     		lsls	r3, r3, #2
 2474 0140 059A     		ldr	r2, [sp, #20]
 2475 0142 D318     		adds	r3, r2, r3
 2476 0144 5F22     		movs	r2, #95
 2477 0146 6A44     		add	r2, r2, sp
 2478 0148 1278     		ldrb	r2, [r2]
 2479 014a 52B2     		sxtb	r2, r2
 2480 014c 3949     		ldr	r1, .L103
 2481 014e 8C46     		mov	ip, r1
 2482 0150 6244     		add	r2, r2, ip
 2483 0152 9200     		lsls	r2, r2, #2
 2484 0154 0599     		ldr	r1, [sp, #20]
 2485 0156 8A18     		adds	r2, r1, r2
 2486 0158 1168     		ldr	r1, [r2]
 2487 015a 169A     		ldr	r2, [sp, #88]
 2488 015c D207     		lsls	r2, r2, #31
 2489 015e 0A43     		orrs	r2, r1
 2490 0160 1A60     		str	r2, [r3]
 2491              	.LBE6:
 2492 0162 08E0     		b	.L101
 2493              	.L100:
  80:curve-specific.inc ****     } else {
  81:curve-specific.inc ****         uECC_vli_rshift1(X1, num_words);
 2494              		.loc 3 81 0
 2495 0164 5F23     		movs	r3, #95
 2496 0166 6B44     		add	r3, r3, sp
 2497 0168 0022     		movs	r2, #0
 2498 016a 9A56     		ldrsb	r2, [r3, r2]
 2499 016c 059B     		ldr	r3, [sp, #20]
 2500 016e 1100     		movs	r1, r2
 2501 0170 1800     		movs	r0, r3
 2502 0172 FFF7FEFF 		bl	uECC_vli_rshift1
 2503              	.L101:
  82:curve-specific.inc ****     }
  83:curve-specific.inc ****     /* t1 = 3/2*(x1^2 - z1^4) = B */
  84:curve-specific.inc **** 
  85:curve-specific.inc ****     uECC_vli_modSquare_fast(Z1, X1, curve);                  /* t3 = B^2 */
 2504              		.loc 3 85 0
 2505 0176 029A     		ldr	r2, [sp, #8]
 2506 0178 0599     		ldr	r1, [sp, #20]
 2507 017a 039B     		ldr	r3, [sp, #12]
 2508 017c 1800     		movs	r0, r3
 2509 017e FFF7FEFF 		bl	uECC_vli_modSquare_fast
  86:curve-specific.inc ****     uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 2510              		.loc 3 86 0
 2511 0182 029B     		ldr	r3, [sp, #8]
 2512 0184 1C1D     		adds	r4, r3, #4
 2513 0186 06AA     		add	r2, sp, #24
 2514 0188 0399     		ldr	r1, [sp, #12]
 2515 018a 0398     		ldr	r0, [sp, #12]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 71


 2516 018c 5F23     		movs	r3, #95
 2517 018e 6B44     		add	r3, r3, sp
 2518 0190 1B78     		ldrb	r3, [r3]
 2519 0192 5BB2     		sxtb	r3, r3
 2520 0194 0093     		str	r3, [sp]
 2521 0196 2300     		movs	r3, r4
 2522 0198 FFF7FEFF 		bl	uECC_vli_modSub
  87:curve-specific.inc ****     uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 2523              		.loc 3 87 0
 2524 019c 029B     		ldr	r3, [sp, #8]
 2525 019e 1C1D     		adds	r4, r3, #4
 2526 01a0 06AA     		add	r2, sp, #24
 2527 01a2 0399     		ldr	r1, [sp, #12]
 2528 01a4 0398     		ldr	r0, [sp, #12]
 2529 01a6 5F23     		movs	r3, #95
 2530 01a8 6B44     		add	r3, r3, sp
 2531 01aa 1B78     		ldrb	r3, [r3]
 2532 01ac 5BB2     		sxtb	r3, r3
 2533 01ae 0093     		str	r3, [sp]
 2534 01b0 2300     		movs	r3, r4
 2535 01b2 FFF7FEFF 		bl	uECC_vli_modSub
  88:curve-specific.inc ****     uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 2536              		.loc 3 88 0
 2537 01b6 029B     		ldr	r3, [sp, #8]
 2538 01b8 1C1D     		adds	r4, r3, #4
 2539 01ba 039A     		ldr	r2, [sp, #12]
 2540 01bc 06A9     		add	r1, sp, #24
 2541 01be 06A8     		add	r0, sp, #24
 2542 01c0 5F23     		movs	r3, #95
 2543 01c2 6B44     		add	r3, r3, sp
 2544 01c4 1B78     		ldrb	r3, [r3]
 2545 01c6 5BB2     		sxtb	r3, r3
 2546 01c8 0093     		str	r3, [sp]
 2547 01ca 2300     		movs	r3, r4
 2548 01cc FFF7FEFF 		bl	uECC_vli_modSub
  89:curve-specific.inc ****     uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = B * (A - x3) */
 2549              		.loc 3 89 0
 2550 01d0 029B     		ldr	r3, [sp, #8]
 2551 01d2 06AA     		add	r2, sp, #24
 2552 01d4 0599     		ldr	r1, [sp, #20]
 2553 01d6 0598     		ldr	r0, [sp, #20]
 2554 01d8 FFF7FEFF 		bl	uECC_vli_modMult_fast
  90:curve-specific.inc ****     uECC_vli_modSub(t4, X1, t4, curve->p, num_words); /* t4 = B * (A - x3) - y1^4 = y3 */
 2555              		.loc 3 90 0
 2556 01dc 029B     		ldr	r3, [sp, #8]
 2557 01de 1C1D     		adds	r4, r3, #4
 2558 01e0 0EAA     		add	r2, sp, #56
 2559 01e2 0599     		ldr	r1, [sp, #20]
 2560 01e4 0EA8     		add	r0, sp, #56
 2561 01e6 5F23     		movs	r3, #95
 2562 01e8 6B44     		add	r3, r3, sp
 2563 01ea 1B78     		ldrb	r3, [r3]
 2564 01ec 5BB2     		sxtb	r3, r3
 2565 01ee 0093     		str	r3, [sp]
 2566 01f0 2300     		movs	r3, r4
 2567 01f2 FFF7FEFF 		bl	uECC_vli_modSub
  91:curve-specific.inc **** 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 72


  92:curve-specific.inc ****     uECC_vli_set(X1, Z1, num_words);
 2568              		.loc 3 92 0
 2569 01f6 5F23     		movs	r3, #95
 2570 01f8 6B44     		add	r3, r3, sp
 2571 01fa 0022     		movs	r2, #0
 2572 01fc 9A56     		ldrsb	r2, [r3, r2]
 2573 01fe 0399     		ldr	r1, [sp, #12]
 2574 0200 059B     		ldr	r3, [sp, #20]
 2575 0202 1800     		movs	r0, r3
 2576 0204 FFF7FEFF 		bl	uECC_vli_set
  93:curve-specific.inc ****     uECC_vli_set(Z1, Y1, num_words);
 2577              		.loc 3 93 0
 2578 0208 5F23     		movs	r3, #95
 2579 020a 6B44     		add	r3, r3, sp
 2580 020c 0022     		movs	r2, #0
 2581 020e 9A56     		ldrsb	r2, [r3, r2]
 2582 0210 0499     		ldr	r1, [sp, #16]
 2583 0212 039B     		ldr	r3, [sp, #12]
 2584 0214 1800     		movs	r0, r3
 2585 0216 FFF7FEFF 		bl	uECC_vli_set
  94:curve-specific.inc ****     uECC_vli_set(Y1, t4, num_words);
 2586              		.loc 3 94 0
 2587 021a 5F23     		movs	r3, #95
 2588 021c 6B44     		add	r3, r3, sp
 2589 021e 0022     		movs	r2, #0
 2590 0220 9A56     		ldrsb	r2, [r3, r2]
 2591 0222 0EA9     		add	r1, sp, #56
 2592 0224 049B     		ldr	r3, [sp, #16]
 2593 0226 1800     		movs	r0, r3
 2594 0228 FFF7FEFF 		bl	uECC_vli_set
 2595 022c 00E0     		b	.L97
 2596              	.L102:
  60:curve-specific.inc ****     }
 2597              		.loc 3 60 0
 2598 022e C046     		nop
 2599              	.L97:
  95:curve-specific.inc **** }
 2600              		.loc 3 95 0
 2601 0230 18B0     		add	sp, sp, #96
 2602              		@ sp needed
 2603 0232 10BD     		pop	{r4, pc}
 2604              	.L104:
 2605              		.align	2
 2606              	.L103:
 2607 0234 FFFFFF3F 		.word	1073741823
 2608              		.cfi_endproc
 2609              	.LFE25:
 2610              		.size	double_jacobian_default, .-double_jacobian_default
 2611              		.section	.text.x_side_default,"ax",%progbits
 2612              		.align	2
 2613              		.code	16
 2614              		.thumb_func
 2615              		.type	x_side_default, %function
 2616              	x_side_default:
 2617              	.LFB26:
  96:curve-specific.inc **** 
  97:curve-specific.inc **** /* Computes result = x^3 + ax + b. result must not overlap x. */
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 73


  98:curve-specific.inc **** static void x_side_default(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
 2618              		.loc 3 98 0
 2619              		.cfi_startproc
 2620              		@ args = 0, pretend = 0, frame = 56
 2621              		@ frame_needed = 0, uses_anonymous_args = 0
 2622 0000 10B5     		push	{r4, lr}
 2623              		.cfi_def_cfa_offset 8
 2624              		.cfi_offset 4, -8
 2625              		.cfi_offset 14, -4
 2626 0002 90B0     		sub	sp, sp, #64
 2627              		.cfi_def_cfa_offset 72
 2628 0004 0590     		str	r0, [sp, #20]
 2629 0006 0491     		str	r1, [sp, #16]
 2630 0008 0392     		str	r2, [sp, #12]
  99:curve-specific.inc ****     uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 2631              		.loc 3 99 0
 2632 000a 07AB     		add	r3, sp, #28
 2633 000c 1800     		movs	r0, r3
 2634 000e 2023     		movs	r3, #32
 2635 0010 1A00     		movs	r2, r3
 2636 0012 0021     		movs	r1, #0
 2637 0014 FFF7FEFF 		bl	memset
 2638 0018 07AB     		add	r3, sp, #28
 2639 001a 0322     		movs	r2, #3
 2640 001c 1A60     		str	r2, [r3]
 100:curve-specific.inc ****     wordcount_t num_words = curve->num_words;
 2641              		.loc 3 100 0
 2642 001e 3F23     		movs	r3, #63
 2643 0020 6B44     		add	r3, r3, sp
 2644 0022 039A     		ldr	r2, [sp, #12]
 2645 0024 1278     		ldrb	r2, [r2]
 2646 0026 1A70     		strb	r2, [r3]
 101:curve-specific.inc **** 
 102:curve-specific.inc ****     uECC_vli_modSquare_fast(result, x, curve);                             /* r = x^2 */
 2647              		.loc 3 102 0
 2648 0028 039A     		ldr	r2, [sp, #12]
 2649 002a 0499     		ldr	r1, [sp, #16]
 2650 002c 059B     		ldr	r3, [sp, #20]
 2651 002e 1800     		movs	r0, r3
 2652 0030 FFF7FEFF 		bl	uECC_vli_modSquare_fast
 103:curve-specific.inc ****     uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
 2653              		.loc 3 103 0
 2654 0034 039B     		ldr	r3, [sp, #12]
 2655 0036 1C1D     		adds	r4, r3, #4
 2656 0038 07AA     		add	r2, sp, #28
 2657 003a 0599     		ldr	r1, [sp, #20]
 2658 003c 0598     		ldr	r0, [sp, #20]
 2659 003e 3F23     		movs	r3, #63
 2660 0040 6B44     		add	r3, r3, sp
 2661 0042 1B78     		ldrb	r3, [r3]
 2662 0044 5BB2     		sxtb	r3, r3
 2663 0046 0093     		str	r3, [sp]
 2664 0048 2300     		movs	r3, r4
 2665 004a FFF7FEFF 		bl	uECC_vli_modSub
 104:curve-specific.inc ****     uECC_vli_modMult_fast(result, result, x, curve);                       /* r = x^3 - 3x */
 2666              		.loc 3 104 0
 2667 004e 039B     		ldr	r3, [sp, #12]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 74


 2668 0050 049A     		ldr	r2, [sp, #16]
 2669 0052 0599     		ldr	r1, [sp, #20]
 2670 0054 0598     		ldr	r0, [sp, #20]
 2671 0056 FFF7FEFF 		bl	uECC_vli_modMult_fast
 105:curve-specific.inc ****     uECC_vli_modAdd(result, result, curve->b, curve->p, num_words); /* r = x^3 - 3x + b */
 2672              		.loc 3 105 0
 2673 005a 039B     		ldr	r3, [sp, #12]
 2674 005c 8433     		adds	r3, r3, #132
 2675 005e 1A00     		movs	r2, r3
 2676 0060 039B     		ldr	r3, [sp, #12]
 2677 0062 1C1D     		adds	r4, r3, #4
 2678 0064 0599     		ldr	r1, [sp, #20]
 2679 0066 0598     		ldr	r0, [sp, #20]
 2680 0068 3F23     		movs	r3, #63
 2681 006a 6B44     		add	r3, r3, sp
 2682 006c 1B78     		ldrb	r3, [r3]
 2683 006e 5BB2     		sxtb	r3, r3
 2684 0070 0093     		str	r3, [sp]
 2685 0072 2300     		movs	r3, r4
 2686 0074 FFF7FEFF 		bl	uECC_vli_modAdd
 106:curve-specific.inc **** }
 2687              		.loc 3 106 0
 2688 0078 C046     		nop
 2689 007a 10B0     		add	sp, sp, #64
 2690              		@ sp needed
 2691 007c 10BD     		pop	{r4, pc}
 2692              		.cfi_endproc
 2693              	.LFE26:
 2694              		.size	x_side_default, .-x_side_default
 2695 007e C046     		.section	.text.mod_sqrt_default,"ax",%progbits
 2696              		.align	2
 2697              		.code	16
 2698              		.thumb_func
 2699              		.type	mod_sqrt_default, %function
 2700              	mod_sqrt_default:
 2701              	.LFB27:
 107:curve-specific.inc **** #endif /* uECC_SUPPORTS_secp... */
 108:curve-specific.inc **** 
 109:curve-specific.inc **** #if uECC_SUPPORT_COMPRESSED_POINT
 110:curve-specific.inc **** #if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
 111:curve-specific.inc ****     uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1
 112:curve-specific.inc **** /* Compute a = sqrt(a) (mod curve_p). */
 113:curve-specific.inc **** static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 2702              		.loc 3 113 0
 2703              		.cfi_startproc
 2704              		@ args = 0, pretend = 0, frame = 80
 2705              		@ frame_needed = 0, uses_anonymous_args = 0
 2706 0000 00B5     		push	{lr}
 2707              		.cfi_def_cfa_offset 4
 2708              		.cfi_offset 14, -4
 2709 0002 95B0     		sub	sp, sp, #84
 2710              		.cfi_def_cfa_offset 88
 2711 0004 0190     		str	r0, [sp, #4]
 2712 0006 0091     		str	r1, [sp]
 114:curve-specific.inc ****     bitcount_t i;
 115:curve-specific.inc ****     uECC_word_t p1[uECC_MAX_WORDS] = {1};
 2713              		.loc 3 115 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 75


 2714 0008 0BAB     		add	r3, sp, #44
 2715 000a 1800     		movs	r0, r3
 2716 000c 2023     		movs	r3, #32
 2717 000e 1A00     		movs	r2, r3
 2718 0010 0021     		movs	r1, #0
 2719 0012 FFF7FEFF 		bl	memset
 2720 0016 0BAB     		add	r3, sp, #44
 2721 0018 0122     		movs	r2, #1
 2722 001a 1A60     		str	r2, [r3]
 116:curve-specific.inc ****     uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 2723              		.loc 3 116 0
 2724 001c 03AB     		add	r3, sp, #12
 2725 001e 1800     		movs	r0, r3
 2726 0020 2023     		movs	r3, #32
 2727 0022 1A00     		movs	r2, r3
 2728 0024 0021     		movs	r1, #0
 2729 0026 FFF7FEFF 		bl	memset
 2730 002a 03AB     		add	r3, sp, #12
 2731 002c 0122     		movs	r2, #1
 2732 002e 1A60     		str	r2, [r3]
 117:curve-specific.inc ****     wordcount_t num_words = curve->num_words;
 2733              		.loc 3 117 0
 2734 0030 4D23     		movs	r3, #77
 2735 0032 6B44     		add	r3, r3, sp
 2736 0034 009A     		ldr	r2, [sp]
 2737 0036 1278     		ldrb	r2, [r2]
 2738 0038 1A70     		strb	r2, [r3]
 118:curve-specific.inc ****     
 119:curve-specific.inc ****     /* When curve->p == 3 (mod 4), we can compute
 120:curve-specific.inc ****        sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
 121:curve-specific.inc ****     uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 2739              		.loc 3 121 0
 2740 003a 009B     		ldr	r3, [sp]
 2741 003c 191D     		adds	r1, r3, #4
 2742 003e 4D23     		movs	r3, #77
 2743 0040 6B44     		add	r3, r3, sp
 2744 0042 1B78     		ldrb	r3, [r3]
 2745 0044 5BB2     		sxtb	r3, r3
 2746 0046 0BAA     		add	r2, sp, #44
 2747 0048 0BA8     		add	r0, sp, #44
 2748 004a FFF7FEFF 		bl	uECC_vli_add
 122:curve-specific.inc ****     for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 2749              		.loc 3 122 0
 2750 004e 4D23     		movs	r3, #77
 2751 0050 6B44     		add	r3, r3, sp
 2752 0052 0022     		movs	r2, #0
 2753 0054 9A56     		ldrsb	r2, [r3, r2]
 2754 0056 0BAB     		add	r3, sp, #44
 2755 0058 1100     		movs	r1, r2
 2756 005a 1800     		movs	r0, r3
 2757 005c FFF7FEFF 		bl	uECC_vli_numBits
 2758 0060 0300     		movs	r3, r0
 2759 0062 9BB2     		uxth	r3, r3
 2760 0064 013B     		subs	r3, r3, #1
 2761 0066 9AB2     		uxth	r2, r3
 2762 0068 4E23     		movs	r3, #78
 2763 006a 6B44     		add	r3, r3, sp
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 76


 2764 006c 1A80     		strh	r2, [r3]
 2765 006e 1EE0     		b	.L107
 2766              	.L109:
 123:curve-specific.inc ****         uECC_vli_modSquare_fast(l_result, l_result, curve);
 2767              		.loc 3 123 0
 2768 0070 009A     		ldr	r2, [sp]
 2769 0072 03A9     		add	r1, sp, #12
 2770 0074 03AB     		add	r3, sp, #12
 2771 0076 1800     		movs	r0, r3
 2772 0078 FFF7FEFF 		bl	uECC_vli_modSquare_fast
 124:curve-specific.inc ****         if (uECC_vli_testBit(p1, i)) {
 2773              		.loc 3 124 0
 2774 007c 4E23     		movs	r3, #78
 2775 007e 6B44     		add	r3, r3, sp
 2776 0080 0022     		movs	r2, #0
 2777 0082 9A5E     		ldrsh	r2, [r3, r2]
 2778 0084 0BAB     		add	r3, sp, #44
 2779 0086 1100     		movs	r1, r2
 2780 0088 1800     		movs	r0, r3
 2781 008a FFF7FEFF 		bl	uECC_vli_testBit
 2782 008e 031E     		subs	r3, r0, #0
 2783 0090 05D0     		beq	.L108
 125:curve-specific.inc ****             uECC_vli_modMult_fast(l_result, l_result, a, curve);
 2784              		.loc 3 125 0
 2785 0092 009B     		ldr	r3, [sp]
 2786 0094 019A     		ldr	r2, [sp, #4]
 2787 0096 03A9     		add	r1, sp, #12
 2788 0098 03A8     		add	r0, sp, #12
 2789 009a FFF7FEFF 		bl	uECC_vli_modMult_fast
 2790              	.L108:
 122:curve-specific.inc ****         uECC_vli_modSquare_fast(l_result, l_result, curve);
 2791              		.loc 3 122 0 discriminator 2
 2792 009e 4E23     		movs	r3, #78
 2793 00a0 6B44     		add	r3, r3, sp
 2794 00a2 1B88     		ldrh	r3, [r3]
 2795 00a4 013B     		subs	r3, r3, #1
 2796 00a6 9AB2     		uxth	r2, r3
 2797 00a8 4E23     		movs	r3, #78
 2798 00aa 6B44     		add	r3, r3, sp
 2799 00ac 1A80     		strh	r2, [r3]
 2800              	.L107:
 122:curve-specific.inc ****         uECC_vli_modSquare_fast(l_result, l_result, curve);
 2801              		.loc 3 122 0 is_stmt 0 discriminator 1
 2802 00ae 4E23     		movs	r3, #78
 2803 00b0 6B44     		add	r3, r3, sp
 2804 00b2 0022     		movs	r2, #0
 2805 00b4 9B5E     		ldrsh	r3, [r3, r2]
 2806 00b6 012B     		cmp	r3, #1
 2807 00b8 DADC     		bgt	.L109
 126:curve-specific.inc ****         }
 127:curve-specific.inc ****     }
 128:curve-specific.inc ****     uECC_vli_set(a, l_result, num_words);
 2808              		.loc 3 128 0 is_stmt 1
 2809 00ba 4D23     		movs	r3, #77
 2810 00bc 6B44     		add	r3, r3, sp
 2811 00be 0022     		movs	r2, #0
 2812 00c0 9A56     		ldrsb	r2, [r3, r2]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 77


 2813 00c2 03A9     		add	r1, sp, #12
 2814 00c4 019B     		ldr	r3, [sp, #4]
 2815 00c6 1800     		movs	r0, r3
 2816 00c8 FFF7FEFF 		bl	uECC_vli_set
 129:curve-specific.inc **** }
 2817              		.loc 3 129 0
 2818 00cc C046     		nop
 2819 00ce 15B0     		add	sp, sp, #84
 2820              		@ sp needed
 2821 00d0 00BD     		pop	{pc}
 2822              		.cfi_endproc
 2823              	.LFE27:
 2824              		.size	mod_sqrt_default, .-mod_sqrt_default
 2825 00d2 C046     		.section	.rodata
 2826              		.align	2
 2827              		.type	curve_secp160r1, %object
 2828              		.size	curve_secp160r1, 180
 2829              	curve_secp160r1:
 2830 0000 05       		.byte	5
 2831 0001 14       		.byte	20
 2832 0002 A100     		.short	161
 2833 0004 FFFFFF7F 		.word	2147483647
 2834 0008 FFFFFFFF 		.word	-1
 2835 000c FFFFFFFF 		.word	-1
 2836 0010 FFFFFFFF 		.word	-1
 2837 0014 FFFFFFFF 		.word	-1
 2838 0018 00000000 		.space	12
 2838      00000000 
 2838      00000000 
 2839 0024 572275CA 		.word	-898293161
 2840 0028 D3AE27F9 		.word	-114839853
 2841 002c C8F40100 		.word	128200
 2842 0030 00000000 		.word	0
 2843 0034 00000000 		.word	0
 2844 0038 01000000 		.word	1
 2845 003c 00000000 		.space	8
 2845      00000000 
 2846 0044 82FCCB13 		.word	332135554
 2847 0048 B98BC368 		.word	1757645753
 2848 004c 89696446 		.word	1180985737
 2849 0050 2873F58E 		.word	-1896516824
 2850 0054 68B5964A 		.word	1251390824
 2851 0058 32FBC57A 		.word	2059795250
 2852 005c 37512304 		.word	69423415
 2853 0060 12C9DC59 		.word	1507641618
 2854 0064 7D946831 		.word	828937341
 2855 0068 5528A623 		.word	598091861
 2856 006c 00000000 		.space	24
 2856      00000000 
 2856      00000000 
 2856      00000000 
 2856      00000000 
 2857 0084 45FA65C5 		.word	-983172539
 2858 0088 ADD4D481 		.word	-2116758355
 2859 008c 9FF8AC65 		.word	1705834655
 2860 0090 8B7ABD54 		.word	1421703819
 2861 0094 FCBE971C 		.word	479706876
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 78


 2862 0098 00000000 		.space	12
 2862      00000000 
 2862      00000000 
 2863 00a4 00000000 		.word	double_jacobian_default
 2864 00a8 00000000 		.word	mod_sqrt_default
 2865 00ac 00000000 		.word	x_side_default
 2866 00b0 00000000 		.word	vli_mmod_fast_secp160r1
 2867              		.section	.text.uECC_secp160r1,"ax",%progbits
 2868              		.align	2
 2869              		.global	uECC_secp160r1
 2870              		.code	16
 2871              		.thumb_func
 2872              		.type	uECC_secp160r1, %function
 2873              	uECC_secp160r1:
 2874              	.LFB28:
 130:curve-specific.inc **** #endif /* uECC_SUPPORTS_secp... */
 131:curve-specific.inc **** #endif /* uECC_SUPPORT_COMPRESSED_POINT */
 132:curve-specific.inc **** 
 133:curve-specific.inc **** #if uECC_SUPPORTS_secp160r1
 134:curve-specific.inc **** 
 135:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0)
 136:curve-specific.inc **** static void vli_mmod_fast_secp160r1(uECC_word_t *result, uECC_word_t *product);
 137:curve-specific.inc **** #endif
 138:curve-specific.inc **** 
 139:curve-specific.inc **** static const struct uECC_Curve_t curve_secp160r1 = {
 140:curve-specific.inc ****     num_words_secp160r1,
 141:curve-specific.inc ****     num_bytes_secp160r1,
 142:curve-specific.inc ****     161, /* num_n_bits */
 143:curve-specific.inc ****     { BYTES_TO_WORDS_8(FF, FF, FF, 7F, FF, FF, FF, FF),
 144:curve-specific.inc ****         BYTES_TO_WORDS_8(FF, FF, FF, FF, FF, FF, FF, FF),
 145:curve-specific.inc ****         BYTES_TO_WORDS_4(FF, FF, FF, FF) },
 146:curve-specific.inc ****     { BYTES_TO_WORDS_8(57, 22, 75, CA, D3, AE, 27, F9),
 147:curve-specific.inc ****         BYTES_TO_WORDS_8(C8, F4, 01, 00, 00, 00, 00, 00),
 148:curve-specific.inc ****         BYTES_TO_WORDS_8(00, 00, 00, 00, 01, 00, 00, 00) },
 149:curve-specific.inc ****     { BYTES_TO_WORDS_8(82, FC, CB, 13, B9, 8B, C3, 68),
 150:curve-specific.inc ****         BYTES_TO_WORDS_8(89, 69, 64, 46, 28, 73, F5, 8E),
 151:curve-specific.inc ****         BYTES_TO_WORDS_4(68, B5, 96, 4A),
 152:curve-specific.inc **** 
 153:curve-specific.inc ****         BYTES_TO_WORDS_8(32, FB, C5, 7A, 37, 51, 23, 04),
 154:curve-specific.inc ****         BYTES_TO_WORDS_8(12, C9, DC, 59, 7D, 94, 68, 31),
 155:curve-specific.inc ****         BYTES_TO_WORDS_4(55, 28, A6, 23) },
 156:curve-specific.inc ****     { BYTES_TO_WORDS_8(45, FA, 65, C5, AD, D4, D4, 81),
 157:curve-specific.inc ****         BYTES_TO_WORDS_8(9F, F8, AC, 65, 8B, 7A, BD, 54),
 158:curve-specific.inc ****         BYTES_TO_WORDS_4(FC, BE, 97, 1C) },
 159:curve-specific.inc ****     &double_jacobian_default,
 160:curve-specific.inc **** #if uECC_SUPPORT_COMPRESSED_POINT
 161:curve-specific.inc ****     &mod_sqrt_default,
 162:curve-specific.inc **** #endif
 163:curve-specific.inc ****     &x_side_default,
 164:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0)
 165:curve-specific.inc ****     &vli_mmod_fast_secp160r1
 166:curve-specific.inc **** #endif
 167:curve-specific.inc **** };
 168:curve-specific.inc **** 
 169:curve-specific.inc **** uECC_Curve uECC_secp160r1(void) { return &curve_secp160r1; }
 2875              		.loc 3 169 0
 2876              		.cfi_startproc
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 79


 2877              		@ args = 0, pretend = 0, frame = 0
 2878              		@ frame_needed = 0, uses_anonymous_args = 0
 2879              		@ link register save eliminated.
 2880              		.loc 3 169 0
 2881 0000 014B     		ldr	r3, .L112
 2882 0002 1800     		movs	r0, r3
 2883              		@ sp needed
 2884 0004 7047     		bx	lr
 2885              	.L113:
 2886 0006 C046     		.align	2
 2887              	.L112:
 2888 0008 00000000 		.word	curve_secp160r1
 2889              		.cfi_endproc
 2890              	.LFE28:
 2891              		.size	uECC_secp160r1, .-uECC_secp160r1
 2892              		.section	.text.vli_mmod_fast_secp160r1,"ax",%progbits
 2893              		.align	2
 2894              		.code	16
 2895              		.thumb_func
 2896              		.type	vli_mmod_fast_secp160r1, %function
 2897              	vli_mmod_fast_secp160r1:
 2898              	.LFB29:
 170:curve-specific.inc **** 
 171:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0 && !asm_mmod_fast_secp160r1)
 172:curve-specific.inc **** /* Computes result = product % curve_p
 173:curve-specific.inc ****     see http://www.isys.uni-klu.ac.at/PDF/2001-0126-MT.pdf page 354
 174:curve-specific.inc ****     
 175:curve-specific.inc ****     Note that this only works if log2(omega) < log2(p) / 2 */
 176:curve-specific.inc **** static void omega_mult_secp160r1(uECC_word_t *result, const uECC_word_t *right);
 177:curve-specific.inc **** #if uECC_WORD_SIZE == 8
 178:curve-specific.inc **** static void vli_mmod_fast_secp160r1(uECC_word_t *result, uECC_word_t *product) {
 179:curve-specific.inc ****     uECC_word_t tmp[2 * num_words_secp160r1];
 180:curve-specific.inc ****     uECC_word_t copy;
 181:curve-specific.inc ****     
 182:curve-specific.inc ****     uECC_vli_clear(tmp, num_words_secp160r1);
 183:curve-specific.inc ****     uECC_vli_clear(tmp + num_words_secp160r1, num_words_secp160r1);
 184:curve-specific.inc **** 
 185:curve-specific.inc ****     omega_mult_secp160r1(tmp, product + num_words_secp160r1 - 1); /* (Rq, q) = q * c */
 186:curve-specific.inc ****     
 187:curve-specific.inc ****     product[num_words_secp160r1 - 1] &= 0xffffffff;
 188:curve-specific.inc ****     copy = tmp[num_words_secp160r1 - 1];
 189:curve-specific.inc ****     tmp[num_words_secp160r1 - 1] &= 0xffffffff;
 190:curve-specific.inc ****     uECC_vli_add(result, product, tmp, num_words_secp160r1); /* (C, r) = r + q */
 191:curve-specific.inc ****     uECC_vli_clear(product, num_words_secp160r1);
 192:curve-specific.inc ****     tmp[num_words_secp160r1 - 1] = copy;
 193:curve-specific.inc ****     omega_mult_secp160r1(product, tmp + num_words_secp160r1 - 1); /* Rq*c */
 194:curve-specific.inc ****     uECC_vli_add(result, result, product, num_words_secp160r1); /* (C1, r) = r + Rq*c */
 195:curve-specific.inc **** 
 196:curve-specific.inc ****     while (uECC_vli_cmp_unsafe(result, curve_secp160r1.p, num_words_secp160r1) > 0) {
 197:curve-specific.inc ****         uECC_vli_sub(result, result, curve_secp160r1.p, num_words_secp160r1);
 198:curve-specific.inc ****     }
 199:curve-specific.inc **** }
 200:curve-specific.inc **** 
 201:curve-specific.inc **** static void omega_mult_secp160r1(uint64_t *result, const uint64_t *right) {
 202:curve-specific.inc ****     uint32_t carry;
 203:curve-specific.inc ****     unsigned i;
 204:curve-specific.inc ****     
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 80


 205:curve-specific.inc ****     /* Multiply by (2^31 + 1). */
 206:curve-specific.inc ****     carry = 0;
 207:curve-specific.inc ****     for (i = 0; i < num_words_secp160r1; ++i) {
 208:curve-specific.inc ****         uint64_t tmp = (right[i] >> 32) | (right[i + 1] << 32);
 209:curve-specific.inc ****         result[i] = (tmp << 31) + tmp + carry;
 210:curve-specific.inc ****         carry = (tmp >> 33) + (result[i] < tmp || (carry && result[i] == tmp));
 211:curve-specific.inc ****     }
 212:curve-specific.inc ****     result[i] = carry;
 213:curve-specific.inc **** }
 214:curve-specific.inc **** #else
 215:curve-specific.inc **** static void vli_mmod_fast_secp160r1(uECC_word_t *result, uECC_word_t *product) {
 2899              		.loc 3 215 0
 2900              		.cfi_startproc
 2901              		@ args = 0, pretend = 0, frame = 56
 2902              		@ frame_needed = 0, uses_anonymous_args = 0
 2903 0000 00B5     		push	{lr}
 2904              		.cfi_def_cfa_offset 4
 2905              		.cfi_offset 14, -4
 2906 0002 8FB0     		sub	sp, sp, #60
 2907              		.cfi_def_cfa_offset 64
 2908 0004 0190     		str	r0, [sp, #4]
 2909 0006 0091     		str	r1, [sp]
 216:curve-specific.inc ****     uECC_word_t tmp[2 * num_words_secp160r1];
 217:curve-specific.inc ****     uECC_word_t carry;
 218:curve-specific.inc ****     
 219:curve-specific.inc ****     uECC_vli_clear(tmp, num_words_secp160r1);
 2910              		.loc 3 219 0
 2911 0008 03AB     		add	r3, sp, #12
 2912 000a 0521     		movs	r1, #5
 2913 000c 1800     		movs	r0, r3
 2914 000e FFF7FEFF 		bl	uECC_vli_clear
 220:curve-specific.inc ****     uECC_vli_clear(tmp + num_words_secp160r1, num_words_secp160r1);
 2915              		.loc 3 220 0
 2916 0012 03AB     		add	r3, sp, #12
 2917 0014 1433     		adds	r3, r3, #20
 2918 0016 0521     		movs	r1, #5
 2919 0018 1800     		movs	r0, r3
 2920 001a FFF7FEFF 		bl	uECC_vli_clear
 221:curve-specific.inc **** 
 222:curve-specific.inc ****     omega_mult_secp160r1(tmp, product + num_words_secp160r1); /* (Rq, q) = q * c */
 2921              		.loc 3 222 0
 2922 001e 009B     		ldr	r3, [sp]
 2923 0020 1433     		adds	r3, r3, #20
 2924 0022 1A00     		movs	r2, r3
 2925 0024 03AB     		add	r3, sp, #12
 2926 0026 1100     		movs	r1, r2
 2927 0028 1800     		movs	r0, r3
 2928 002a FFF7FEFF 		bl	omega_mult_secp160r1
 223:curve-specific.inc ****     
 224:curve-specific.inc ****     carry = uECC_vli_add(result, product, tmp, num_words_secp160r1); /* (C, r) = r + q */
 2929              		.loc 3 224 0
 2930 002e 03AA     		add	r2, sp, #12
 2931 0030 0099     		ldr	r1, [sp]
 2932 0032 0198     		ldr	r0, [sp, #4]
 2933 0034 0523     		movs	r3, #5
 2934 0036 FFF7FEFF 		bl	uECC_vli_add
 2935 003a 0300     		movs	r3, r0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 81


 2936 003c 0D93     		str	r3, [sp, #52]
 225:curve-specific.inc ****     uECC_vli_clear(product, num_words_secp160r1);
 2937              		.loc 3 225 0
 2938 003e 009B     		ldr	r3, [sp]
 2939 0040 0521     		movs	r1, #5
 2940 0042 1800     		movs	r0, r3
 2941 0044 FFF7FEFF 		bl	uECC_vli_clear
 226:curve-specific.inc ****     omega_mult_secp160r1(product, tmp + num_words_secp160r1); /* Rq*c */
 2942              		.loc 3 226 0
 2943 0048 03AB     		add	r3, sp, #12
 2944 004a 1433     		adds	r3, r3, #20
 2945 004c 009A     		ldr	r2, [sp]
 2946 004e 1900     		movs	r1, r3
 2947 0050 1000     		movs	r0, r2
 2948 0052 FFF7FEFF 		bl	omega_mult_secp160r1
 227:curve-specific.inc ****     carry += uECC_vli_add(result, result, product, num_words_secp160r1); /* (C1, r) = r + Rq*c */
 2949              		.loc 3 227 0
 2950 0056 009A     		ldr	r2, [sp]
 2951 0058 0199     		ldr	r1, [sp, #4]
 2952 005a 0198     		ldr	r0, [sp, #4]
 2953 005c 0523     		movs	r3, #5
 2954 005e FFF7FEFF 		bl	uECC_vli_add
 2955 0062 0200     		movs	r2, r0
 2956 0064 0D9B     		ldr	r3, [sp, #52]
 2957 0066 9B18     		adds	r3, r3, r2
 2958 0068 0D93     		str	r3, [sp, #52]
 228:curve-specific.inc **** 
 229:curve-specific.inc ****     while (carry > 0) {
 2959              		.loc 3 229 0
 2960 006a 08E0     		b	.L115
 2961              	.L116:
 230:curve-specific.inc ****         --carry;
 2962              		.loc 3 230 0
 2963 006c 0D9B     		ldr	r3, [sp, #52]
 2964 006e 013B     		subs	r3, r3, #1
 2965 0070 0D93     		str	r3, [sp, #52]
 231:curve-specific.inc ****         uECC_vli_sub(result, result, curve_secp160r1.p, num_words_secp160r1);
 2966              		.loc 3 231 0
 2967 0072 0D4A     		ldr	r2, .L119
 2968 0074 0199     		ldr	r1, [sp, #4]
 2969 0076 0198     		ldr	r0, [sp, #4]
 2970 0078 0523     		movs	r3, #5
 2971 007a FFF7FEFF 		bl	uECC_vli_sub
 2972              	.L115:
 229:curve-specific.inc ****         --carry;
 2973              		.loc 3 229 0
 2974 007e 0D9B     		ldr	r3, [sp, #52]
 2975 0080 002B     		cmp	r3, #0
 2976 0082 F3D1     		bne	.L116
 232:curve-specific.inc ****     }
 233:curve-specific.inc ****     if (uECC_vli_cmp_unsafe(result, curve_secp160r1.p, num_words_secp160r1) > 0) {
 2977              		.loc 3 233 0
 2978 0084 0849     		ldr	r1, .L119
 2979 0086 019B     		ldr	r3, [sp, #4]
 2980 0088 0522     		movs	r2, #5
 2981 008a 1800     		movs	r0, r3
 2982 008c FFF7FEFF 		bl	uECC_vli_cmp_unsafe
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 82


 2983 0090 031E     		subs	r3, r0, #0
 2984 0092 05DD     		ble	.L118
 234:curve-specific.inc ****         uECC_vli_sub(result, result, curve_secp160r1.p, num_words_secp160r1);
 2985              		.loc 3 234 0
 2986 0094 044A     		ldr	r2, .L119
 2987 0096 0199     		ldr	r1, [sp, #4]
 2988 0098 0198     		ldr	r0, [sp, #4]
 2989 009a 0523     		movs	r3, #5
 2990 009c FFF7FEFF 		bl	uECC_vli_sub
 2991              	.L118:
 235:curve-specific.inc ****     }
 236:curve-specific.inc **** }
 2992              		.loc 3 236 0
 2993 00a0 C046     		nop
 2994 00a2 0FB0     		add	sp, sp, #60
 2995              		@ sp needed
 2996 00a4 00BD     		pop	{pc}
 2997              	.L120:
 2998 00a6 C046     		.align	2
 2999              	.L119:
 3000 00a8 04000000 		.word	curve_secp160r1+4
 3001              		.cfi_endproc
 3002              	.LFE29:
 3003              		.size	vli_mmod_fast_secp160r1, .-vli_mmod_fast_secp160r1
 3004              		.section	.text.omega_mult_secp160r1,"ax",%progbits
 3005              		.align	2
 3006              		.code	16
 3007              		.thumb_func
 3008              		.type	omega_mult_secp160r1, %function
 3009              	omega_mult_secp160r1:
 3010              	.LFB30:
 237:curve-specific.inc **** #endif
 238:curve-specific.inc **** 
 239:curve-specific.inc **** #if uECC_WORD_SIZE == 1
 240:curve-specific.inc **** static void omega_mult_secp160r1(uint8_t *result, const uint8_t *right) {
 241:curve-specific.inc ****     uint8_t carry;
 242:curve-specific.inc ****     uint8_t i;
 243:curve-specific.inc ****     
 244:curve-specific.inc ****     /* Multiply by (2^31 + 1). */
 245:curve-specific.inc ****     uECC_vli_set(result + 4, right, num_words_secp160r1); /* 2^32 */
 246:curve-specific.inc ****     uECC_vli_rshift1(result + 4, num_words_secp160r1); /* 2^31 */
 247:curve-specific.inc ****     result[3] = right[0] << 7; /* get last bit from shift */
 248:curve-specific.inc ****     
 249:curve-specific.inc ****     carry = uECC_vli_add(result, result, right, num_words_secp160r1); /* 2^31 + 1 */
 250:curve-specific.inc ****     for (i = num_words_secp160r1; carry; ++i) {
 251:curve-specific.inc ****         uint16_t sum = (uint16_t)result[i] + carry;
 252:curve-specific.inc ****         result[i] = (uint8_t)sum;
 253:curve-specific.inc ****         carry = sum >> 8;
 254:curve-specific.inc ****     }
 255:curve-specific.inc **** }
 256:curve-specific.inc **** #elif uECC_WORD_SIZE == 4
 257:curve-specific.inc **** static void omega_mult_secp160r1(uint32_t *result, const uint32_t *right) {
 3011              		.loc 3 257 0
 3012              		.cfi_startproc
 3013              		@ args = 0, pretend = 0, frame = 40
 3014              		@ frame_needed = 0, uses_anonymous_args = 0
 3015 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 83


 3016              		.cfi_def_cfa_offset 16
 3017              		.cfi_offset 4, -16
 3018              		.cfi_offset 5, -12
 3019              		.cfi_offset 6, -8
 3020              		.cfi_offset 14, -4
 3021 0002 8AB0     		sub	sp, sp, #40
 3022              		.cfi_def_cfa_offset 56
 3023 0004 0590     		str	r0, [sp, #20]
 3024 0006 0491     		str	r1, [sp, #16]
 258:curve-specific.inc ****     uint32_t carry;
 259:curve-specific.inc ****     unsigned i;
 260:curve-specific.inc ****     
 261:curve-specific.inc ****     /* Multiply by (2^31 + 1). */
 262:curve-specific.inc ****     uECC_vli_set(result + 1, right, num_words_secp160r1); /* 2^32 */
 3025              		.loc 3 262 0
 3026 0008 059B     		ldr	r3, [sp, #20]
 3027 000a 0433     		adds	r3, r3, #4
 3028 000c 0499     		ldr	r1, [sp, #16]
 3029 000e 0522     		movs	r2, #5
 3030 0010 1800     		movs	r0, r3
 3031 0012 FFF7FEFF 		bl	uECC_vli_set
 263:curve-specific.inc ****     uECC_vli_rshift1(result + 1, num_words_secp160r1); /* 2^31 */
 3032              		.loc 3 263 0
 3033 0016 059B     		ldr	r3, [sp, #20]
 3034 0018 0433     		adds	r3, r3, #4
 3035 001a 0521     		movs	r1, #5
 3036 001c 1800     		movs	r0, r3
 3037 001e FFF7FEFF 		bl	uECC_vli_rshift1
 264:curve-specific.inc ****     result[0] = right[0] << 31; /* get last bit from shift */
 3038              		.loc 3 264 0
 3039 0022 049B     		ldr	r3, [sp, #16]
 3040 0024 1B68     		ldr	r3, [r3]
 3041 0026 DA07     		lsls	r2, r3, #31
 3042 0028 059B     		ldr	r3, [sp, #20]
 3043 002a 1A60     		str	r2, [r3]
 265:curve-specific.inc ****     
 266:curve-specific.inc ****     carry = uECC_vli_add(result, result, right, num_words_secp160r1); /* 2^31 + 1 */
 3044              		.loc 3 266 0
 3045 002c 049A     		ldr	r2, [sp, #16]
 3046 002e 0599     		ldr	r1, [sp, #20]
 3047 0030 0598     		ldr	r0, [sp, #20]
 3048 0032 0523     		movs	r3, #5
 3049 0034 FFF7FEFF 		bl	uECC_vli_add
 3050 0038 0300     		movs	r3, r0
 3051 003a 0993     		str	r3, [sp, #36]
 267:curve-specific.inc ****     for (i = num_words_secp160r1; carry; ++i) {
 3052              		.loc 3 267 0
 3053 003c 0523     		movs	r3, #5
 3054 003e 0893     		str	r3, [sp, #32]
 3055 0040 21E0     		b	.L122
 3056              	.L123:
 3057              	.LBB7:
 268:curve-specific.inc ****         uint64_t sum = (uint64_t)result[i] + carry;
 3058              		.loc 3 268 0 discriminator 3
 3059 0042 089B     		ldr	r3, [sp, #32]
 3060 0044 9B00     		lsls	r3, r3, #2
 3061 0046 059A     		ldr	r2, [sp, #20]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 84


 3062 0048 D318     		adds	r3, r2, r3
 3063 004a 1B68     		ldr	r3, [r3]
 3064 004c 1D00     		movs	r5, r3
 3065 004e 0023     		movs	r3, #0
 3066 0050 1E00     		movs	r6, r3
 3067 0052 099B     		ldr	r3, [sp, #36]
 3068 0054 0093     		str	r3, [sp]
 3069 0056 0023     		movs	r3, #0
 3070 0058 0193     		str	r3, [sp, #4]
 3071 005a 009B     		ldr	r3, [sp]
 3072 005c 019C     		ldr	r4, [sp, #4]
 3073 005e 5B19     		adds	r3, r3, r5
 3074 0060 7441     		adcs	r4, r4, r6
 3075 0062 0693     		str	r3, [sp, #24]
 3076 0064 0794     		str	r4, [sp, #28]
 269:curve-specific.inc ****         result[i] = (uint32_t)sum;
 3077              		.loc 3 269 0 discriminator 3
 3078 0066 089B     		ldr	r3, [sp, #32]
 3079 0068 9B00     		lsls	r3, r3, #2
 3080 006a 059A     		ldr	r2, [sp, #20]
 3081 006c D318     		adds	r3, r2, r3
 3082 006e 069A     		ldr	r2, [sp, #24]
 3083 0070 1A60     		str	r2, [r3]
 270:curve-specific.inc ****         carry = sum >> 32;
 3084              		.loc 3 270 0 discriminator 3
 3085 0072 079B     		ldr	r3, [sp, #28]
 3086 0074 1B00     		lsrs	r3, r3, #0
 3087 0076 0293     		str	r3, [sp, #8]
 3088 0078 0023     		movs	r3, #0
 3089 007a 0393     		str	r3, [sp, #12]
 3090 007c 029B     		ldr	r3, [sp, #8]
 3091 007e 0993     		str	r3, [sp, #36]
 3092              	.LBE7:
 267:curve-specific.inc ****         uint64_t sum = (uint64_t)result[i] + carry;
 3093              		.loc 3 267 0 discriminator 3
 3094 0080 089B     		ldr	r3, [sp, #32]
 3095 0082 0133     		adds	r3, r3, #1
 3096 0084 0893     		str	r3, [sp, #32]
 3097              	.L122:
 267:curve-specific.inc ****         uint64_t sum = (uint64_t)result[i] + carry;
 3098              		.loc 3 267 0 is_stmt 0 discriminator 1
 3099 0086 099B     		ldr	r3, [sp, #36]
 3100 0088 002B     		cmp	r3, #0
 3101 008a DAD1     		bne	.L123
 271:curve-specific.inc ****     }
 272:curve-specific.inc **** }
 3102              		.loc 3 272 0 is_stmt 1
 3103 008c C046     		nop
 3104 008e 0AB0     		add	sp, sp, #40
 3105              		@ sp needed
 3106 0090 70BD     		pop	{r4, r5, r6, pc}
 3107              		.cfi_endproc
 3108              	.LFE30:
 3109              		.size	omega_mult_secp160r1, .-omega_mult_secp160r1
 3110 0092 C046     		.section	.rodata
 3111              		.align	2
 3112              		.type	curve_secp192r1, %object
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 85


 3113              		.size	curve_secp192r1, 180
 3114              	curve_secp192r1:
 3115 00b4 06       		.byte	6
 3116 00b5 18       		.byte	24
 3117 00b6 C000     		.short	192
 3118 00b8 FFFFFFFF 		.word	-1
 3119 00bc FFFFFFFF 		.word	-1
 3120 00c0 FEFFFFFF 		.word	-2
 3121 00c4 FFFFFFFF 		.word	-1
 3122 00c8 FFFFFFFF 		.word	-1
 3123 00cc FFFFFFFF 		.word	-1
 3124 00d0 00000000 		.space	8
 3124      00000000 
 3125 00d8 3128D2B4 		.word	-1261295567
 3126 00dc B1C96B14 		.word	342608305
 3127 00e0 36F8DE99 		.word	-1713440714
 3128 00e4 FFFFFFFF 		.word	-1
 3129 00e8 FFFFFFFF 		.word	-1
 3130 00ec FFFFFFFF 		.word	-1
 3131 00f0 00000000 		.space	8
 3131      00000000 
 3132 00f8 1210FF82 		.word	-2097213422
 3133 00fc FD0AFFF4 		.word	-184612099
 3134 0100 0088A143 		.word	1134659584
 3135 0104 EB20BF7C 		.word	2092900587
 3136 0108 F69030B0 		.word	-1338994442
 3137 010c 0EA88D18 		.word	411936782
 3138 0110 1148791E 		.word	511264785
 3139 0114 A177F973 		.word	1945728929
 3140 0118 D5CD246B 		.word	1797574101
 3141 011c ED111063 		.word	1661997549
 3142 0120 78DAC8FF 		.word	-3614088
 3143 0124 952B1907 		.word	119090069
 3144 0128 00000000 		.space	16
 3144      00000000 
 3144      00000000 
 3144      00000000 
 3145 0138 B1B946C1 		.word	-1052329551
 3146 013c ECDEB8FE 		.word	-21438740
 3147 0140 49302472 		.word	1914974281
 3148 0144 ABE9A70F 		.word	262662571
 3149 0148 E7809CE5 		.word	-442728217
 3150 014c 19052164 		.word	1679885593
 3151 0150 00000000 		.space	8
 3151      00000000 
 3152 0158 00000000 		.word	double_jacobian_default
 3153 015c 00000000 		.word	mod_sqrt_default
 3154 0160 00000000 		.word	x_side_default
 3155 0164 00000000 		.word	vli_mmod_fast_secp192r1
 3156              		.section	.text.uECC_secp192r1,"ax",%progbits
 3157              		.align	2
 3158              		.global	uECC_secp192r1
 3159              		.code	16
 3160              		.thumb_func
 3161              		.type	uECC_secp192r1, %function
 3162              	uECC_secp192r1:
 3163              	.LFB31:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 86


 273:curve-specific.inc **** #endif /* uECC_WORD_SIZE */
 274:curve-specific.inc **** #endif /* (uECC_OPTIMIZATION_LEVEL > 0 && !asm_mmod_fast_secp160r1) */
 275:curve-specific.inc **** 
 276:curve-specific.inc **** #endif /* uECC_SUPPORTS_secp160r1 */
 277:curve-specific.inc **** 
 278:curve-specific.inc **** #if uECC_SUPPORTS_secp192r1
 279:curve-specific.inc **** 
 280:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0)
 281:curve-specific.inc **** static void vli_mmod_fast_secp192r1(uECC_word_t *result, uECC_word_t *product);
 282:curve-specific.inc **** #endif
 283:curve-specific.inc **** 
 284:curve-specific.inc **** static const struct uECC_Curve_t curve_secp192r1 = {
 285:curve-specific.inc ****     num_words_secp192r1,
 286:curve-specific.inc ****     num_bytes_secp192r1,
 287:curve-specific.inc ****     192, /* num_n_bits */
 288:curve-specific.inc ****     { BYTES_TO_WORDS_8(FF, FF, FF, FF, FF, FF, FF, FF),
 289:curve-specific.inc ****         BYTES_TO_WORDS_8(FE, FF, FF, FF, FF, FF, FF, FF),
 290:curve-specific.inc ****         BYTES_TO_WORDS_8(FF, FF, FF, FF, FF, FF, FF, FF) },
 291:curve-specific.inc ****     { BYTES_TO_WORDS_8(31, 28, D2, B4, B1, C9, 6B, 14),
 292:curve-specific.inc ****         BYTES_TO_WORDS_8(36, F8, DE, 99, FF, FF, FF, FF),
 293:curve-specific.inc ****         BYTES_TO_WORDS_8(FF, FF, FF, FF, FF, FF, FF, FF) },
 294:curve-specific.inc ****     { BYTES_TO_WORDS_8(12, 10, FF, 82, FD, 0A, FF, F4),
 295:curve-specific.inc ****         BYTES_TO_WORDS_8(00, 88, A1, 43, EB, 20, BF, 7C),
 296:curve-specific.inc ****         BYTES_TO_WORDS_8(F6, 90, 30, B0, 0E, A8, 8D, 18),
 297:curve-specific.inc **** 
 298:curve-specific.inc ****         BYTES_TO_WORDS_8(11, 48, 79, 1E, A1, 77, F9, 73),
 299:curve-specific.inc ****         BYTES_TO_WORDS_8(D5, CD, 24, 6B, ED, 11, 10, 63),
 300:curve-specific.inc ****         BYTES_TO_WORDS_8(78, DA, C8, FF, 95, 2B, 19, 07) },
 301:curve-specific.inc ****     { BYTES_TO_WORDS_8(B1, B9, 46, C1, EC, DE, B8, FE),
 302:curve-specific.inc ****         BYTES_TO_WORDS_8(49, 30, 24, 72, AB, E9, A7, 0F),
 303:curve-specific.inc ****         BYTES_TO_WORDS_8(E7, 80, 9C, E5, 19, 05, 21, 64) },
 304:curve-specific.inc ****     &double_jacobian_default,
 305:curve-specific.inc **** #if uECC_SUPPORT_COMPRESSED_POINT
 306:curve-specific.inc ****     &mod_sqrt_default,
 307:curve-specific.inc **** #endif
 308:curve-specific.inc ****     &x_side_default,
 309:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0)
 310:curve-specific.inc ****     &vli_mmod_fast_secp192r1
 311:curve-specific.inc **** #endif
 312:curve-specific.inc **** };
 313:curve-specific.inc **** 
 314:curve-specific.inc **** uECC_Curve uECC_secp192r1(void) { return &curve_secp192r1; }
 3164              		.loc 3 314 0
 3165              		.cfi_startproc
 3166              		@ args = 0, pretend = 0, frame = 0
 3167              		@ frame_needed = 0, uses_anonymous_args = 0
 3168              		@ link register save eliminated.
 3169              		.loc 3 314 0
 3170 0000 014B     		ldr	r3, .L126
 3171 0002 1800     		movs	r0, r3
 3172              		@ sp needed
 3173 0004 7047     		bx	lr
 3174              	.L127:
 3175 0006 C046     		.align	2
 3176              	.L126:
 3177 0008 B4000000 		.word	curve_secp192r1
 3178              		.cfi_endproc
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 87


 3179              	.LFE31:
 3180              		.size	uECC_secp192r1, .-uECC_secp192r1
 3181              		.section	.text.vli_mmod_fast_secp192r1,"ax",%progbits
 3182              		.align	2
 3183              		.code	16
 3184              		.thumb_func
 3185              		.type	vli_mmod_fast_secp192r1, %function
 3186              	vli_mmod_fast_secp192r1:
 3187              	.LFB32:
 315:curve-specific.inc **** 
 316:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0)
 317:curve-specific.inc **** /* Computes result = product % curve_p.
 318:curve-specific.inc ****    See algorithm 5 and 6 from http://www.isys.uni-klu.ac.at/PDF/2001-0126-MT.pdf */
 319:curve-specific.inc **** #if uECC_WORD_SIZE == 1
 320:curve-specific.inc **** static void vli_mmod_fast_secp192r1(uint8_t *result, uint8_t *product) {
 321:curve-specific.inc ****     uint8_t tmp[num_words_secp192r1];
 322:curve-specific.inc ****     uint8_t carry;
 323:curve-specific.inc ****     
 324:curve-specific.inc ****     uECC_vli_set(result, product, num_words_secp192r1);
 325:curve-specific.inc ****     
 326:curve-specific.inc ****     uECC_vli_set(tmp, &product[24], num_words_secp192r1);
 327:curve-specific.inc ****     carry = uECC_vli_add(result, result, tmp, num_words_secp192r1);
 328:curve-specific.inc ****     
 329:curve-specific.inc ****     tmp[0] = tmp[1] = tmp[2] = tmp[3] = tmp[4] = tmp[5] = tmp[6] = tmp[7] = 0;
 330:curve-specific.inc ****     tmp[8] = product[24]; tmp[9] = product[25]; tmp[10] = product[26]; tmp[11] = product[27];
 331:curve-specific.inc ****     tmp[12] = product[28]; tmp[13] = product[29]; tmp[14] = product[30]; tmp[15] = product[31];
 332:curve-specific.inc ****     tmp[16] = product[32]; tmp[17] = product[33]; tmp[18] = product[34]; tmp[19] = product[35];
 333:curve-specific.inc ****     tmp[20] = product[36]; tmp[21] = product[37]; tmp[22] = product[38]; tmp[23] = product[39];
 334:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp192r1);
 335:curve-specific.inc ****     
 336:curve-specific.inc ****     tmp[0] = tmp[8] = product[40];
 337:curve-specific.inc ****     tmp[1] = tmp[9] = product[41];
 338:curve-specific.inc ****     tmp[2] = tmp[10] = product[42];
 339:curve-specific.inc ****     tmp[3] = tmp[11] = product[43];
 340:curve-specific.inc ****     tmp[4] = tmp[12] = product[44];
 341:curve-specific.inc ****     tmp[5] = tmp[13] = product[45];
 342:curve-specific.inc ****     tmp[6] = tmp[14] = product[46];
 343:curve-specific.inc ****     tmp[7] = tmp[15] = product[47];
 344:curve-specific.inc ****     tmp[16] = tmp[17] = tmp[18] = tmp[19] = tmp[20] = tmp[21] = tmp[22] = tmp[23] = 0;
 345:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp192r1);
 346:curve-specific.inc ****     
 347:curve-specific.inc ****     while (carry || uECC_vli_cmp_unsafe(curve_secp192r1.p, result, num_words_secp192r1) != 1) {
 348:curve-specific.inc ****         carry -= uECC_vli_sub(result, result, curve_secp192r1.p, num_words_secp192r1);
 349:curve-specific.inc ****     }
 350:curve-specific.inc **** }
 351:curve-specific.inc **** #elif uECC_WORD_SIZE == 4
 352:curve-specific.inc **** static void vli_mmod_fast_secp192r1(uint32_t *result, uint32_t *product) {
 3188              		.loc 3 352 0
 3189              		.cfi_startproc
 3190              		@ args = 0, pretend = 0, frame = 40
 3191              		@ frame_needed = 0, uses_anonymous_args = 0
 3192 0000 00B5     		push	{lr}
 3193              		.cfi_def_cfa_offset 4
 3194              		.cfi_offset 14, -4
 3195 0002 8BB0     		sub	sp, sp, #44
 3196              		.cfi_def_cfa_offset 48
 3197 0004 0190     		str	r0, [sp, #4]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 88


 3198 0006 0091     		str	r1, [sp]
 353:curve-specific.inc ****     uint32_t tmp[num_words_secp192r1];
 354:curve-specific.inc ****     int carry;
 355:curve-specific.inc ****     
 356:curve-specific.inc ****     uECC_vli_set(result, product, num_words_secp192r1);
 3199              		.loc 3 356 0
 3200 0008 0099     		ldr	r1, [sp]
 3201 000a 019B     		ldr	r3, [sp, #4]
 3202 000c 0622     		movs	r2, #6
 3203 000e 1800     		movs	r0, r3
 3204 0010 FFF7FEFF 		bl	uECC_vli_set
 357:curve-specific.inc ****     
 358:curve-specific.inc ****     uECC_vli_set(tmp, &product[6], num_words_secp192r1);
 3205              		.loc 3 358 0
 3206 0014 009B     		ldr	r3, [sp]
 3207 0016 1833     		adds	r3, r3, #24
 3208 0018 1900     		movs	r1, r3
 3209 001a 03AB     		add	r3, sp, #12
 3210 001c 0622     		movs	r2, #6
 3211 001e 1800     		movs	r0, r3
 3212 0020 FFF7FEFF 		bl	uECC_vli_set
 359:curve-specific.inc ****     carry = uECC_vli_add(result, result, tmp, num_words_secp192r1);
 3213              		.loc 3 359 0
 3214 0024 03AA     		add	r2, sp, #12
 3215 0026 0199     		ldr	r1, [sp, #4]
 3216 0028 0198     		ldr	r0, [sp, #4]
 3217 002a 0623     		movs	r3, #6
 3218 002c FFF7FEFF 		bl	uECC_vli_add
 3219 0030 0300     		movs	r3, r0
 3220 0032 0993     		str	r3, [sp, #36]
 360:curve-specific.inc ****     
 361:curve-specific.inc ****     tmp[0] = tmp[1] = 0;
 3221              		.loc 3 361 0
 3222 0034 03AB     		add	r3, sp, #12
 3223 0036 0022     		movs	r2, #0
 3224 0038 5A60     		str	r2, [r3, #4]
 3225 003a 03AB     		add	r3, sp, #12
 3226 003c 5A68     		ldr	r2, [r3, #4]
 3227 003e 03AB     		add	r3, sp, #12
 3228 0040 1A60     		str	r2, [r3]
 362:curve-specific.inc ****     tmp[2] = product[6];
 3229              		.loc 3 362 0
 3230 0042 009B     		ldr	r3, [sp]
 3231 0044 9A69     		ldr	r2, [r3, #24]
 3232 0046 03AB     		add	r3, sp, #12
 3233 0048 9A60     		str	r2, [r3, #8]
 363:curve-specific.inc ****     tmp[3] = product[7];
 3234              		.loc 3 363 0
 3235 004a 009B     		ldr	r3, [sp]
 3236 004c DA69     		ldr	r2, [r3, #28]
 3237 004e 03AB     		add	r3, sp, #12
 3238 0050 DA60     		str	r2, [r3, #12]
 364:curve-specific.inc ****     tmp[4] = product[8];
 3239              		.loc 3 364 0
 3240 0052 009B     		ldr	r3, [sp]
 3241 0054 1A6A     		ldr	r2, [r3, #32]
 3242 0056 03AB     		add	r3, sp, #12
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 89


 3243 0058 1A61     		str	r2, [r3, #16]
 365:curve-specific.inc ****     tmp[5] = product[9];
 3244              		.loc 3 365 0
 3245 005a 009B     		ldr	r3, [sp]
 3246 005c 5A6A     		ldr	r2, [r3, #36]
 3247 005e 03AB     		add	r3, sp, #12
 3248 0060 5A61     		str	r2, [r3, #20]
 366:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp192r1);
 3249              		.loc 3 366 0
 3250 0062 03AA     		add	r2, sp, #12
 3251 0064 0199     		ldr	r1, [sp, #4]
 3252 0066 0198     		ldr	r0, [sp, #4]
 3253 0068 0623     		movs	r3, #6
 3254 006a FFF7FEFF 		bl	uECC_vli_add
 3255 006e 0200     		movs	r2, r0
 3256 0070 099B     		ldr	r3, [sp, #36]
 3257 0072 D318     		adds	r3, r2, r3
 3258 0074 0993     		str	r3, [sp, #36]
 367:curve-specific.inc ****     
 368:curve-specific.inc ****     tmp[0] = tmp[2] = product[10];
 3259              		.loc 3 368 0
 3260 0076 009B     		ldr	r3, [sp]
 3261 0078 9A6A     		ldr	r2, [r3, #40]
 3262 007a 03AB     		add	r3, sp, #12
 3263 007c 9A60     		str	r2, [r3, #8]
 3264 007e 03AB     		add	r3, sp, #12
 3265 0080 9A68     		ldr	r2, [r3, #8]
 3266 0082 03AB     		add	r3, sp, #12
 3267 0084 1A60     		str	r2, [r3]
 369:curve-specific.inc ****     tmp[1] = tmp[3] = product[11];
 3268              		.loc 3 369 0
 3269 0086 009B     		ldr	r3, [sp]
 3270 0088 DA6A     		ldr	r2, [r3, #44]
 3271 008a 03AB     		add	r3, sp, #12
 3272 008c DA60     		str	r2, [r3, #12]
 3273 008e 03AB     		add	r3, sp, #12
 3274 0090 DA68     		ldr	r2, [r3, #12]
 3275 0092 03AB     		add	r3, sp, #12
 3276 0094 5A60     		str	r2, [r3, #4]
 370:curve-specific.inc ****     tmp[4] = tmp[5] = 0;
 3277              		.loc 3 370 0
 3278 0096 03AB     		add	r3, sp, #12
 3279 0098 0022     		movs	r2, #0
 3280 009a 5A61     		str	r2, [r3, #20]
 3281 009c 03AB     		add	r3, sp, #12
 3282 009e 5A69     		ldr	r2, [r3, #20]
 3283 00a0 03AB     		add	r3, sp, #12
 3284 00a2 1A61     		str	r2, [r3, #16]
 371:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp192r1);
 3285              		.loc 3 371 0
 3286 00a4 03AA     		add	r2, sp, #12
 3287 00a6 0199     		ldr	r1, [sp, #4]
 3288 00a8 0198     		ldr	r0, [sp, #4]
 3289 00aa 0623     		movs	r3, #6
 3290 00ac FFF7FEFF 		bl	uECC_vli_add
 3291 00b0 0200     		movs	r2, r0
 3292 00b2 099B     		ldr	r3, [sp, #36]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 90


 3293 00b4 D318     		adds	r3, r2, r3
 3294 00b6 0993     		str	r3, [sp, #36]
 372:curve-specific.inc ****     
 373:curve-specific.inc ****     while (carry || uECC_vli_cmp_unsafe(curve_secp192r1.p, result, num_words_secp192r1) != 1) {
 3295              		.loc 3 373 0
 3296 00b8 09E0     		b	.L129
 3297              	.L130:
 374:curve-specific.inc ****         carry -= uECC_vli_sub(result, result, curve_secp192r1.p, num_words_secp192r1);
 3298              		.loc 3 374 0
 3299 00ba 0C4A     		ldr	r2, .L131
 3300 00bc 0199     		ldr	r1, [sp, #4]
 3301 00be 0198     		ldr	r0, [sp, #4]
 3302 00c0 0623     		movs	r3, #6
 3303 00c2 FFF7FEFF 		bl	uECC_vli_sub
 3304 00c6 0200     		movs	r2, r0
 3305 00c8 099B     		ldr	r3, [sp, #36]
 3306 00ca 9B1A     		subs	r3, r3, r2
 3307 00cc 0993     		str	r3, [sp, #36]
 3308              	.L129:
 373:curve-specific.inc ****         carry -= uECC_vli_sub(result, result, curve_secp192r1.p, num_words_secp192r1);
 3309              		.loc 3 373 0
 3310 00ce 099B     		ldr	r3, [sp, #36]
 3311 00d0 002B     		cmp	r3, #0
 3312 00d2 F2D1     		bne	.L130
 373:curve-specific.inc ****         carry -= uECC_vli_sub(result, result, curve_secp192r1.p, num_words_secp192r1);
 3313              		.loc 3 373 0 is_stmt 0 discriminator 1
 3314 00d4 0199     		ldr	r1, [sp, #4]
 3315 00d6 054B     		ldr	r3, .L131
 3316 00d8 0622     		movs	r2, #6
 3317 00da 1800     		movs	r0, r3
 3318 00dc FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 3319 00e0 0300     		movs	r3, r0
 3320 00e2 012B     		cmp	r3, #1
 3321 00e4 E9D1     		bne	.L130
 375:curve-specific.inc ****     }
 376:curve-specific.inc **** }
 3322              		.loc 3 376 0 is_stmt 1
 3323 00e6 C046     		nop
 3324 00e8 0BB0     		add	sp, sp, #44
 3325              		@ sp needed
 3326 00ea 00BD     		pop	{pc}
 3327              	.L132:
 3328              		.align	2
 3329              	.L131:
 3330 00ec B8000000 		.word	curve_secp192r1+4
 3331              		.cfi_endproc
 3332              	.LFE32:
 3333              		.size	vli_mmod_fast_secp192r1, .-vli_mmod_fast_secp192r1
 3334              		.section	.rodata
 3335              		.align	2
 3336              		.type	curve_secp224r1, %object
 3337              		.size	curve_secp224r1, 180
 3338              	curve_secp224r1:
 3339 0168 07       		.byte	7
 3340 0169 1C       		.byte	28
 3341 016a E000     		.short	224
 3342 016c 01000000 		.word	1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 91


 3343 0170 00000000 		.word	0
 3344 0174 00000000 		.word	0
 3345 0178 FFFFFFFF 		.word	-1
 3346 017c FFFFFFFF 		.word	-1
 3347 0180 FFFFFFFF 		.word	-1
 3348 0184 FFFFFFFF 		.word	-1
 3349 0188 00000000 		.space	4
 3350 018c 3D2A5C5C 		.word	1549543997
 3351 0190 4529DD13 		.word	333261125
 3352 0194 3EF0B8E0 		.word	-524750786
 3353 0198 A216FFFF 		.word	-59742
 3354 019c FFFFFFFF 		.word	-1
 3355 01a0 FFFFFFFF 		.word	-1
 3356 01a4 FFFFFFFF 		.word	-1
 3357 01a8 00000000 		.space	4
 3358 01ac 211D5C11 		.word	291249441
 3359 01b0 D6803234 		.word	875725014
 3360 01b4 2211C256 		.word	1455558946
 3361 01b8 D3C1034A 		.word	1241760211
 3362 01bc B9901332 		.word	840143033
 3363 01c0 7FBFB46B 		.word	1807007615
 3364 01c4 BD0C0EB7 		.word	-1223816003
 3365 01c8 347E0085 		.word	-2063565260
 3366 01cc 9981D544 		.word	1154843033
 3367 01d0 6447075A 		.word	1510426468
 3368 01d4 A07543CD 		.word	-851216992
 3369 01d8 E6DF224C 		.word	1277353958
 3370 01dc FB23F7B5 		.word	-1242094597
 3371 01e0 886337BD 		.word	-1120443512
 3372 01e4 00000000 		.space	8
 3372      00000000 
 3373 01ec B4FF5523 		.word	592838580
 3374 01f0 43390B27 		.word	655046979
 3375 01f4 BAD8BFD7 		.word	-675292998
 3376 01f8 B7B04450 		.word	1346678967
 3377 01fc 563241F5 		.word	-180276650
 3378 0200 ABB3040C 		.word	201634731
 3379 0204 850A05B4 		.word	-1274738043
 3380 0208 00000000 		.space	4
 3381 020c 00000000 		.word	double_jacobian_default
 3382 0210 00000000 		.word	mod_sqrt_secp224r1
 3383 0214 00000000 		.word	x_side_default
 3384 0218 00000000 		.word	vli_mmod_fast_secp224r1
 3385              		.section	.text.uECC_secp224r1,"ax",%progbits
 3386              		.align	2
 3387              		.global	uECC_secp224r1
 3388              		.code	16
 3389              		.thumb_func
 3390              		.type	uECC_secp224r1, %function
 3391              	uECC_secp224r1:
 3392              	.LFB33:
 377:curve-specific.inc **** #else
 378:curve-specific.inc **** static void vli_mmod_fast_secp192r1(uint64_t *result, uint64_t *product) {
 379:curve-specific.inc ****     uint64_t tmp[num_words_secp192r1];
 380:curve-specific.inc ****     int carry;
 381:curve-specific.inc ****     
 382:curve-specific.inc ****     uECC_vli_set(result, product, num_words_secp192r1);
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 92


 383:curve-specific.inc ****     
 384:curve-specific.inc ****     uECC_vli_set(tmp, &product[3], num_words_secp192r1);
 385:curve-specific.inc ****     carry = (int)uECC_vli_add(result, result, tmp, num_words_secp192r1);
 386:curve-specific.inc ****     
 387:curve-specific.inc ****     tmp[0] = 0;
 388:curve-specific.inc ****     tmp[1] = product[3];
 389:curve-specific.inc ****     tmp[2] = product[4];
 390:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp192r1);
 391:curve-specific.inc ****     
 392:curve-specific.inc ****     tmp[0] = tmp[1] = product[5];
 393:curve-specific.inc ****     tmp[2] = 0;
 394:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp192r1);
 395:curve-specific.inc ****     
 396:curve-specific.inc ****     while (carry || uECC_vli_cmp_unsafe(curve_secp192r1.p, result, num_words_secp192r1) != 1) {
 397:curve-specific.inc ****         carry -= uECC_vli_sub(result, result, curve_secp192r1.p, num_words_secp192r1);
 398:curve-specific.inc ****     }
 399:curve-specific.inc **** }
 400:curve-specific.inc **** #endif /* uECC_WORD_SIZE */
 401:curve-specific.inc **** #endif /* (uECC_OPTIMIZATION_LEVEL > 0) */
 402:curve-specific.inc **** 
 403:curve-specific.inc **** #endif /* uECC_SUPPORTS_secp192r1 */
 404:curve-specific.inc **** 
 405:curve-specific.inc **** #if uECC_SUPPORTS_secp224r1
 406:curve-specific.inc **** 
 407:curve-specific.inc **** #if uECC_SUPPORT_COMPRESSED_POINT
 408:curve-specific.inc **** static void mod_sqrt_secp224r1(uECC_word_t *a, uECC_Curve curve);
 409:curve-specific.inc **** #endif
 410:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0)
 411:curve-specific.inc **** static void vli_mmod_fast_secp224r1(uECC_word_t *result, uECC_word_t *product);
 412:curve-specific.inc **** #endif
 413:curve-specific.inc **** 
 414:curve-specific.inc **** static const struct uECC_Curve_t curve_secp224r1 = {
 415:curve-specific.inc ****     num_words_secp224r1,
 416:curve-specific.inc ****     num_bytes_secp224r1,
 417:curve-specific.inc ****     224, /* num_n_bits */
 418:curve-specific.inc ****     { BYTES_TO_WORDS_8(01, 00, 00, 00, 00, 00, 00, 00),
 419:curve-specific.inc ****         BYTES_TO_WORDS_8(00, 00, 00, 00, FF, FF, FF, FF),
 420:curve-specific.inc ****         BYTES_TO_WORDS_8(FF, FF, FF, FF, FF, FF, FF, FF),
 421:curve-specific.inc ****         BYTES_TO_WORDS_4(FF, FF, FF, FF) },
 422:curve-specific.inc ****     { BYTES_TO_WORDS_8(3D, 2A, 5C, 5C, 45, 29, DD, 13),
 423:curve-specific.inc ****         BYTES_TO_WORDS_8(3E, F0, B8, E0, A2, 16, FF, FF),
 424:curve-specific.inc ****         BYTES_TO_WORDS_8(FF, FF, FF, FF, FF, FF, FF, FF),
 425:curve-specific.inc ****         BYTES_TO_WORDS_4(FF, FF, FF, FF) },
 426:curve-specific.inc ****     { BYTES_TO_WORDS_8(21, 1D, 5C, 11, D6, 80, 32, 34),
 427:curve-specific.inc ****         BYTES_TO_WORDS_8(22, 11, C2, 56, D3, C1, 03, 4A),
 428:curve-specific.inc ****         BYTES_TO_WORDS_8(B9, 90, 13, 32, 7F, BF, B4, 6B),
 429:curve-specific.inc ****         BYTES_TO_WORDS_4(BD, 0C, 0E, B7),
 430:curve-specific.inc **** 
 431:curve-specific.inc ****         BYTES_TO_WORDS_8(34, 7E, 00, 85, 99, 81, D5, 44),
 432:curve-specific.inc ****         BYTES_TO_WORDS_8(64, 47, 07, 5A, A0, 75, 43, CD),
 433:curve-specific.inc ****         BYTES_TO_WORDS_8(E6, DF, 22, 4C, FB, 23, F7, B5),
 434:curve-specific.inc ****         BYTES_TO_WORDS_4(88, 63, 37, BD) },
 435:curve-specific.inc ****     { BYTES_TO_WORDS_8(B4, FF, 55, 23, 43, 39, 0B, 27),
 436:curve-specific.inc ****         BYTES_TO_WORDS_8(BA, D8, BF, D7, B7, B0, 44, 50),
 437:curve-specific.inc ****         BYTES_TO_WORDS_8(56, 32, 41, F5, AB, B3, 04, 0C),
 438:curve-specific.inc ****         BYTES_TO_WORDS_4(85, 0A, 05, B4) },
 439:curve-specific.inc ****     &double_jacobian_default,
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 93


 440:curve-specific.inc **** #if uECC_SUPPORT_COMPRESSED_POINT
 441:curve-specific.inc ****     &mod_sqrt_secp224r1,
 442:curve-specific.inc **** #endif
 443:curve-specific.inc ****     &x_side_default,
 444:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0)
 445:curve-specific.inc ****     &vli_mmod_fast_secp224r1
 446:curve-specific.inc **** #endif
 447:curve-specific.inc **** };
 448:curve-specific.inc **** 
 449:curve-specific.inc **** uECC_Curve uECC_secp224r1(void) { return &curve_secp224r1; }
 3393              		.loc 3 449 0
 3394              		.cfi_startproc
 3395              		@ args = 0, pretend = 0, frame = 0
 3396              		@ frame_needed = 0, uses_anonymous_args = 0
 3397              		@ link register save eliminated.
 3398              		.loc 3 449 0
 3399 0000 014B     		ldr	r3, .L135
 3400 0002 1800     		movs	r0, r3
 3401              		@ sp needed
 3402 0004 7047     		bx	lr
 3403              	.L136:
 3404 0006 C046     		.align	2
 3405              	.L135:
 3406 0008 68010000 		.word	curve_secp224r1
 3407              		.cfi_endproc
 3408              	.LFE33:
 3409              		.size	uECC_secp224r1, .-uECC_secp224r1
 3410              		.section	.text.mod_sqrt_secp224r1_rs,"ax",%progbits
 3411              		.align	2
 3412              		.code	16
 3413              		.thumb_func
 3414              		.type	mod_sqrt_secp224r1_rs, %function
 3415              	mod_sqrt_secp224r1_rs:
 3416              	.LFB34:
 450:curve-specific.inc **** 
 451:curve-specific.inc **** 
 452:curve-specific.inc **** #if uECC_SUPPORT_COMPRESSED_POINT
 453:curve-specific.inc **** /* Routine 3.2.4 RS;  from http://www.nsa.gov/ia/_files/nist-routines.pdf */
 454:curve-specific.inc **** static void mod_sqrt_secp224r1_rs(uECC_word_t *d1,
 455:curve-specific.inc ****                                   uECC_word_t *e1,
 456:curve-specific.inc ****                                   uECC_word_t *f1,
 457:curve-specific.inc ****                                   const uECC_word_t *d0,
 458:curve-specific.inc ****                                   const uECC_word_t *e0,
 459:curve-specific.inc ****                                   const uECC_word_t *f0) {
 3417              		.loc 3 459 0
 3418              		.cfi_startproc
 3419              		@ args = 8, pretend = 0, frame = 48
 3420              		@ frame_needed = 0, uses_anonymous_args = 0
 3421 0000 10B5     		push	{r4, lr}
 3422              		.cfi_def_cfa_offset 8
 3423              		.cfi_offset 4, -8
 3424              		.cfi_offset 14, -4
 3425 0002 8EB0     		sub	sp, sp, #56
 3426              		.cfi_def_cfa_offset 64
 3427 0004 0590     		str	r0, [sp, #20]
 3428 0006 0491     		str	r1, [sp, #16]
 3429 0008 0392     		str	r2, [sp, #12]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 94


 3430 000a 0293     		str	r3, [sp, #8]
 460:curve-specific.inc ****     uECC_word_t t[num_words_secp224r1];
 461:curve-specific.inc **** 
 462:curve-specific.inc ****     uECC_vli_modSquare_fast(t, d0, &curve_secp224r1);                    /* t <-- d0 ^ 2 */
 3431              		.loc 3 462 0
 3432 000c 1C4A     		ldr	r2, .L138
 3433 000e 0299     		ldr	r1, [sp, #8]
 3434 0010 07AB     		add	r3, sp, #28
 3435 0012 1800     		movs	r0, r3
 3436 0014 FFF7FEFF 		bl	uECC_vli_modSquare_fast
 463:curve-specific.inc ****     uECC_vli_modMult_fast(e1, d0, e0, &curve_secp224r1);                 /* e1 <-- d0 * e0 */
 3437              		.loc 3 463 0
 3438 0018 194B     		ldr	r3, .L138
 3439 001a 109A     		ldr	r2, [sp, #64]
 3440 001c 0299     		ldr	r1, [sp, #8]
 3441 001e 0498     		ldr	r0, [sp, #16]
 3442 0020 FFF7FEFF 		bl	uECC_vli_modMult_fast
 464:curve-specific.inc ****     uECC_vli_modAdd(d1, t, f0, curve_secp224r1.p, num_words_secp224r1);  /* d1 <-- t  + f0 */
 3443              		.loc 3 464 0
 3444 0024 174C     		ldr	r4, .L138+4
 3445 0026 119A     		ldr	r2, [sp, #68]
 3446 0028 07A9     		add	r1, sp, #28
 3447 002a 0598     		ldr	r0, [sp, #20]
 3448 002c 0723     		movs	r3, #7
 3449 002e 0093     		str	r3, [sp]
 3450 0030 2300     		movs	r3, r4
 3451 0032 FFF7FEFF 		bl	uECC_vli_modAdd
 465:curve-specific.inc ****     uECC_vli_modAdd(e1, e1, e1, curve_secp224r1.p, num_words_secp224r1); /* e1 <-- e1 + e1 */
 3452              		.loc 3 465 0
 3453 0036 134C     		ldr	r4, .L138+4
 3454 0038 049A     		ldr	r2, [sp, #16]
 3455 003a 0499     		ldr	r1, [sp, #16]
 3456 003c 0498     		ldr	r0, [sp, #16]
 3457 003e 0723     		movs	r3, #7
 3458 0040 0093     		str	r3, [sp]
 3459 0042 2300     		movs	r3, r4
 3460 0044 FFF7FEFF 		bl	uECC_vli_modAdd
 466:curve-specific.inc ****     uECC_vli_modMult_fast(f1, t, f0, &curve_secp224r1);                  /* f1 <-- t  * f0 */
 3461              		.loc 3 466 0
 3462 0048 0D4B     		ldr	r3, .L138
 3463 004a 119A     		ldr	r2, [sp, #68]
 3464 004c 07A9     		add	r1, sp, #28
 3465 004e 0398     		ldr	r0, [sp, #12]
 3466 0050 FFF7FEFF 		bl	uECC_vli_modMult_fast
 467:curve-specific.inc ****     uECC_vli_modAdd(f1, f1, f1, curve_secp224r1.p, num_words_secp224r1); /* f1 <-- f1 + f1 */
 3467              		.loc 3 467 0
 3468 0054 0B4C     		ldr	r4, .L138+4
 3469 0056 039A     		ldr	r2, [sp, #12]
 3470 0058 0399     		ldr	r1, [sp, #12]
 3471 005a 0398     		ldr	r0, [sp, #12]
 3472 005c 0723     		movs	r3, #7
 3473 005e 0093     		str	r3, [sp]
 3474 0060 2300     		movs	r3, r4
 3475 0062 FFF7FEFF 		bl	uECC_vli_modAdd
 468:curve-specific.inc ****     uECC_vli_modAdd(f1, f1, f1, curve_secp224r1.p, num_words_secp224r1); /* f1 <-- f1 + f1 */
 3476              		.loc 3 468 0
 3477 0066 074C     		ldr	r4, .L138+4
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 95


 3478 0068 039A     		ldr	r2, [sp, #12]
 3479 006a 0399     		ldr	r1, [sp, #12]
 3480 006c 0398     		ldr	r0, [sp, #12]
 3481 006e 0723     		movs	r3, #7
 3482 0070 0093     		str	r3, [sp]
 3483 0072 2300     		movs	r3, r4
 3484 0074 FFF7FEFF 		bl	uECC_vli_modAdd
 469:curve-specific.inc **** }
 3485              		.loc 3 469 0
 3486 0078 C046     		nop
 3487 007a 0EB0     		add	sp, sp, #56
 3488              		@ sp needed
 3489 007c 10BD     		pop	{r4, pc}
 3490              	.L139:
 3491 007e C046     		.align	2
 3492              	.L138:
 3493 0080 68010000 		.word	curve_secp224r1
 3494 0084 6C010000 		.word	curve_secp224r1+4
 3495              		.cfi_endproc
 3496              	.LFE34:
 3497              		.size	mod_sqrt_secp224r1_rs, .-mod_sqrt_secp224r1_rs
 3498              		.section	.text.mod_sqrt_secp224r1_rss,"ax",%progbits
 3499              		.align	2
 3500              		.code	16
 3501              		.thumb_func
 3502              		.type	mod_sqrt_secp224r1_rss, %function
 3503              	mod_sqrt_secp224r1_rss:
 3504              	.LFB35:
 470:curve-specific.inc **** 
 471:curve-specific.inc **** /* Routine 3.2.5 RSS;  from http://www.nsa.gov/ia/_files/nist-routines.pdf */
 472:curve-specific.inc **** static void mod_sqrt_secp224r1_rss(uECC_word_t *d1,
 473:curve-specific.inc ****                                    uECC_word_t *e1,
 474:curve-specific.inc ****                                    uECC_word_t *f1,
 475:curve-specific.inc ****                                    const uECC_word_t *d0,
 476:curve-specific.inc ****                                    const uECC_word_t *e0,
 477:curve-specific.inc ****                                    const uECC_word_t *f0,
 478:curve-specific.inc ****                                    const bitcount_t j) {
 3505              		.loc 3 478 0
 3506              		.cfi_startproc
 3507              		@ args = 12, pretend = 0, frame = 24
 3508              		@ frame_needed = 0, uses_anonymous_args = 0
 3509 0000 10B5     		push	{r4, lr}
 3510              		.cfi_def_cfa_offset 8
 3511              		.cfi_offset 4, -8
 3512              		.cfi_offset 14, -4
 3513 0002 88B0     		sub	sp, sp, #32
 3514              		.cfi_def_cfa_offset 40
 3515 0004 0590     		str	r0, [sp, #20]
 3516 0006 0491     		str	r1, [sp, #16]
 3517 0008 0392     		str	r2, [sp, #12]
 3518 000a 0293     		str	r3, [sp, #8]
 479:curve-specific.inc ****     bitcount_t i;
 480:curve-specific.inc **** 
 481:curve-specific.inc ****     uECC_vli_set(d1, d0, num_words_secp224r1); /* d1 <-- d0 */
 3519              		.loc 3 481 0
 3520 000c 0299     		ldr	r1, [sp, #8]
 3521 000e 059B     		ldr	r3, [sp, #20]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 96


 3522 0010 0722     		movs	r2, #7
 3523 0012 1800     		movs	r0, r3
 3524 0014 FFF7FEFF 		bl	uECC_vli_set
 482:curve-specific.inc ****     uECC_vli_set(e1, e0, num_words_secp224r1); /* e1 <-- e0 */
 3525              		.loc 3 482 0
 3526 0018 0A99     		ldr	r1, [sp, #40]
 3527 001a 049B     		ldr	r3, [sp, #16]
 3528 001c 0722     		movs	r2, #7
 3529 001e 1800     		movs	r0, r3
 3530 0020 FFF7FEFF 		bl	uECC_vli_set
 483:curve-specific.inc ****     uECC_vli_set(f1, f0, num_words_secp224r1); /* f1 <-- f0 */
 3531              		.loc 3 483 0
 3532 0024 0B99     		ldr	r1, [sp, #44]
 3533 0026 039B     		ldr	r3, [sp, #12]
 3534 0028 0722     		movs	r2, #7
 3535 002a 1800     		movs	r0, r3
 3536 002c FFF7FEFF 		bl	uECC_vli_set
 484:curve-specific.inc ****     for (i = 1; i <= j; i++) {
 3537              		.loc 3 484 0
 3538 0030 1E23     		movs	r3, #30
 3539 0032 6B44     		add	r3, r3, sp
 3540 0034 0122     		movs	r2, #1
 3541 0036 1A80     		strh	r2, [r3]
 3542 0038 14E0     		b	.L141
 3543              	.L142:
 485:curve-specific.inc ****         mod_sqrt_secp224r1_rs(d1, e1, f1, d1, e1, f1); /* RS (d1,e1,f1,d1,e1,f1) */
 3544              		.loc 3 485 0 discriminator 3
 3545 003a 059C     		ldr	r4, [sp, #20]
 3546 003c 039A     		ldr	r2, [sp, #12]
 3547 003e 0499     		ldr	r1, [sp, #16]
 3548 0040 0598     		ldr	r0, [sp, #20]
 3549 0042 039B     		ldr	r3, [sp, #12]
 3550 0044 0193     		str	r3, [sp, #4]
 3551 0046 049B     		ldr	r3, [sp, #16]
 3552 0048 0093     		str	r3, [sp]
 3553 004a 2300     		movs	r3, r4
 3554 004c FFF7FEFF 		bl	mod_sqrt_secp224r1_rs
 484:curve-specific.inc ****     for (i = 1; i <= j; i++) {
 3555              		.loc 3 484 0 discriminator 3
 3556 0050 1E23     		movs	r3, #30
 3557 0052 6B44     		add	r3, r3, sp
 3558 0054 0022     		movs	r2, #0
 3559 0056 9B5E     		ldrsh	r3, [r3, r2]
 3560 0058 9BB2     		uxth	r3, r3
 3561 005a 0133     		adds	r3, r3, #1
 3562 005c 9AB2     		uxth	r2, r3
 3563 005e 1E23     		movs	r3, #30
 3564 0060 6B44     		add	r3, r3, sp
 3565 0062 1A80     		strh	r2, [r3]
 3566              	.L141:
 484:curve-specific.inc ****     for (i = 1; i <= j; i++) {
 3567              		.loc 3 484 0 is_stmt 0 discriminator 1
 3568 0064 1E22     		movs	r2, #30
 3569 0066 6A44     		add	r2, r2, sp
 3570 0068 0CAB     		add	r3, sp, #48
 3571 006a 0021     		movs	r1, #0
 3572 006c 525E     		ldrsh	r2, [r2, r1]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 97


 3573 006e 0021     		movs	r1, #0
 3574 0070 5B5E     		ldrsh	r3, [r3, r1]
 3575 0072 9A42     		cmp	r2, r3
 3576 0074 E1DD     		ble	.L142
 486:curve-specific.inc ****     }
 487:curve-specific.inc **** }
 3577              		.loc 3 487 0 is_stmt 1
 3578 0076 C046     		nop
 3579 0078 08B0     		add	sp, sp, #32
 3580              		@ sp needed
 3581 007a 10BD     		pop	{r4, pc}
 3582              		.cfi_endproc
 3583              	.LFE35:
 3584              		.size	mod_sqrt_secp224r1_rss, .-mod_sqrt_secp224r1_rss
 3585              		.section	.text.mod_sqrt_secp224r1_rm,"ax",%progbits
 3586              		.align	2
 3587              		.code	16
 3588              		.thumb_func
 3589              		.type	mod_sqrt_secp224r1_rm, %function
 3590              	mod_sqrt_secp224r1_rm:
 3591              	.LFB36:
 488:curve-specific.inc **** 
 489:curve-specific.inc **** /* Routine 3.2.6 RM;  from http://www.nsa.gov/ia/_files/nist-routines.pdf */
 490:curve-specific.inc **** static void mod_sqrt_secp224r1_rm(uECC_word_t *d2,
 491:curve-specific.inc ****                                   uECC_word_t *e2,
 492:curve-specific.inc ****                                   uECC_word_t *f2,
 493:curve-specific.inc ****                                   const uECC_word_t *c,
 494:curve-specific.inc ****                                   const uECC_word_t *d0,
 495:curve-specific.inc ****                                   const uECC_word_t *e0,
 496:curve-specific.inc ****                                   const uECC_word_t *d1,
 497:curve-specific.inc ****                                   const uECC_word_t *e1) {
 3592              		.loc 3 497 0
 3593              		.cfi_startproc
 3594              		@ args = 16, pretend = 0, frame = 72
 3595              		@ frame_needed = 0, uses_anonymous_args = 0
 3596 0000 10B5     		push	{r4, lr}
 3597              		.cfi_def_cfa_offset 8
 3598              		.cfi_offset 4, -8
 3599              		.cfi_offset 14, -4
 3600 0002 94B0     		sub	sp, sp, #80
 3601              		.cfi_def_cfa_offset 88
 3602 0004 0590     		str	r0, [sp, #20]
 3603 0006 0491     		str	r1, [sp, #16]
 3604 0008 0392     		str	r2, [sp, #12]
 3605 000a 0293     		str	r3, [sp, #8]
 498:curve-specific.inc ****     uECC_word_t t1[num_words_secp224r1];
 499:curve-specific.inc ****     uECC_word_t t2[num_words_secp224r1];
 500:curve-specific.inc **** 
 501:curve-specific.inc ****     uECC_vli_modMult_fast(t1, e0, e1, &curve_secp224r1); /* t1 <-- e0 * e1 */
 3606              		.loc 3 501 0
 3607 000c 2B4B     		ldr	r3, .L144
 3608 000e 199A     		ldr	r2, [sp, #100]
 3609 0010 1799     		ldr	r1, [sp, #92]
 3610 0012 0DA8     		add	r0, sp, #52
 3611 0014 FFF7FEFF 		bl	uECC_vli_modMult_fast
 502:curve-specific.inc ****     uECC_vli_modMult_fast(t1, t1, c, &curve_secp224r1);  /* t1 <-- t1 * c */
 3612              		.loc 3 502 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 98


 3613 0018 284B     		ldr	r3, .L144
 3614 001a 029A     		ldr	r2, [sp, #8]
 3615 001c 0DA9     		add	r1, sp, #52
 3616 001e 0DA8     		add	r0, sp, #52
 3617 0020 FFF7FEFF 		bl	uECC_vli_modMult_fast
 503:curve-specific.inc ****     /* t1 <-- p  - t1 */
 504:curve-specific.inc ****     uECC_vli_modSub(t1, curve_secp224r1.p, t1, curve_secp224r1.p, num_words_secp224r1);
 3618              		.loc 3 504 0
 3619 0024 264C     		ldr	r4, .L144+4
 3620 0026 0DAA     		add	r2, sp, #52
 3621 0028 2549     		ldr	r1, .L144+4
 3622 002a 0DA8     		add	r0, sp, #52
 3623 002c 0723     		movs	r3, #7
 3624 002e 0093     		str	r3, [sp]
 3625 0030 2300     		movs	r3, r4
 3626 0032 FFF7FEFF 		bl	uECC_vli_modSub
 505:curve-specific.inc ****     uECC_vli_modMult_fast(t2, d0, d1, &curve_secp224r1);                 /* t2 <-- d0 * d1 */
 3627              		.loc 3 505 0
 3628 0036 214B     		ldr	r3, .L144
 3629 0038 189A     		ldr	r2, [sp, #96]
 3630 003a 1699     		ldr	r1, [sp, #88]
 3631 003c 06A8     		add	r0, sp, #24
 3632 003e FFF7FEFF 		bl	uECC_vli_modMult_fast
 506:curve-specific.inc ****     uECC_vli_modAdd(t2, t2, t1, curve_secp224r1.p, num_words_secp224r1); /* t2 <-- t2 + t1 */
 3633              		.loc 3 506 0
 3634 0042 1F4C     		ldr	r4, .L144+4
 3635 0044 0DAA     		add	r2, sp, #52
 3636 0046 06A9     		add	r1, sp, #24
 3637 0048 06A8     		add	r0, sp, #24
 3638 004a 0723     		movs	r3, #7
 3639 004c 0093     		str	r3, [sp]
 3640 004e 2300     		movs	r3, r4
 3641 0050 FFF7FEFF 		bl	uECC_vli_modAdd
 507:curve-specific.inc ****     uECC_vli_modMult_fast(t1, d0, e1, &curve_secp224r1);                 /* t1 <-- d0 * e1 */
 3642              		.loc 3 507 0
 3643 0054 194B     		ldr	r3, .L144
 3644 0056 199A     		ldr	r2, [sp, #100]
 3645 0058 1699     		ldr	r1, [sp, #88]
 3646 005a 0DA8     		add	r0, sp, #52
 3647 005c FFF7FEFF 		bl	uECC_vli_modMult_fast
 508:curve-specific.inc ****     uECC_vli_modMult_fast(e2, d1, e0, &curve_secp224r1);                 /* e2 <-- d1 * e0 */
 3648              		.loc 3 508 0
 3649 0060 164B     		ldr	r3, .L144
 3650 0062 179A     		ldr	r2, [sp, #92]
 3651 0064 1899     		ldr	r1, [sp, #96]
 3652 0066 0498     		ldr	r0, [sp, #16]
 3653 0068 FFF7FEFF 		bl	uECC_vli_modMult_fast
 509:curve-specific.inc ****     uECC_vli_modAdd(e2, e2, t1, curve_secp224r1.p, num_words_secp224r1); /* e2 <-- e2 + t1 */
 3654              		.loc 3 509 0
 3655 006c 144C     		ldr	r4, .L144+4
 3656 006e 0DAA     		add	r2, sp, #52
 3657 0070 0499     		ldr	r1, [sp, #16]
 3658 0072 0498     		ldr	r0, [sp, #16]
 3659 0074 0723     		movs	r3, #7
 3660 0076 0093     		str	r3, [sp]
 3661 0078 2300     		movs	r3, r4
 3662 007a FFF7FEFF 		bl	uECC_vli_modAdd
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 99


 510:curve-specific.inc ****     uECC_vli_modSquare_fast(f2, e2, &curve_secp224r1);                   /* f2 <-- e2^2 */
 3663              		.loc 3 510 0
 3664 007e 0F4A     		ldr	r2, .L144
 3665 0080 0499     		ldr	r1, [sp, #16]
 3666 0082 039B     		ldr	r3, [sp, #12]
 3667 0084 1800     		movs	r0, r3
 3668 0086 FFF7FEFF 		bl	uECC_vli_modSquare_fast
 511:curve-specific.inc ****     uECC_vli_modMult_fast(f2, f2, c, &curve_secp224r1);                  /* f2 <-- f2 * c */
 3669              		.loc 3 511 0
 3670 008a 0C4B     		ldr	r3, .L144
 3671 008c 029A     		ldr	r2, [sp, #8]
 3672 008e 0399     		ldr	r1, [sp, #12]
 3673 0090 0398     		ldr	r0, [sp, #12]
 3674 0092 FFF7FEFF 		bl	uECC_vli_modMult_fast
 512:curve-specific.inc ****     /* f2 <-- p  - f2 */
 513:curve-specific.inc ****     uECC_vli_modSub(f2, curve_secp224r1.p, f2, curve_secp224r1.p, num_words_secp224r1);
 3675              		.loc 3 513 0
 3676 0096 0A4C     		ldr	r4, .L144+4
 3677 0098 039A     		ldr	r2, [sp, #12]
 3678 009a 0949     		ldr	r1, .L144+4
 3679 009c 0398     		ldr	r0, [sp, #12]
 3680 009e 0723     		movs	r3, #7
 3681 00a0 0093     		str	r3, [sp]
 3682 00a2 2300     		movs	r3, r4
 3683 00a4 FFF7FEFF 		bl	uECC_vli_modSub
 514:curve-specific.inc ****     uECC_vli_set(d2, t2, num_words_secp224r1); /* d2 <-- t2 */
 3684              		.loc 3 514 0
 3685 00a8 06A9     		add	r1, sp, #24
 3686 00aa 059B     		ldr	r3, [sp, #20]
 3687 00ac 0722     		movs	r2, #7
 3688 00ae 1800     		movs	r0, r3
 3689 00b0 FFF7FEFF 		bl	uECC_vli_set
 515:curve-specific.inc **** }
 3690              		.loc 3 515 0
 3691 00b4 C046     		nop
 3692 00b6 14B0     		add	sp, sp, #80
 3693              		@ sp needed
 3694 00b8 10BD     		pop	{r4, pc}
 3695              	.L145:
 3696 00ba C046     		.align	2
 3697              	.L144:
 3698 00bc 68010000 		.word	curve_secp224r1
 3699 00c0 6C010000 		.word	curve_secp224r1+4
 3700              		.cfi_endproc
 3701              	.LFE36:
 3702              		.size	mod_sqrt_secp224r1_rm, .-mod_sqrt_secp224r1_rm
 3703              		.section	.text.mod_sqrt_secp224r1_rp,"ax",%progbits
 3704              		.align	2
 3705              		.code	16
 3706              		.thumb_func
 3707              		.type	mod_sqrt_secp224r1_rp, %function
 3708              	mod_sqrt_secp224r1_rp:
 3709              	.LFB37:
 516:curve-specific.inc **** 
 517:curve-specific.inc **** /* Routine 3.2.7 RP;  from http://www.nsa.gov/ia/_files/nist-routines.pdf */
 518:curve-specific.inc **** static void mod_sqrt_secp224r1_rp(uECC_word_t *d1,
 519:curve-specific.inc ****                                   uECC_word_t *e1,
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 100


 520:curve-specific.inc ****                                   uECC_word_t *f1,
 521:curve-specific.inc ****                                   const uECC_word_t *c,
 522:curve-specific.inc ****                                   const uECC_word_t *r) {
 3710              		.loc 3 522 0
 3711              		.cfi_startproc
 3712              		@ args = 4, pretend = 0, frame = 104
 3713              		@ frame_needed = 0, uses_anonymous_args = 0
 3714 0000 10B5     		push	{r4, lr}
 3715              		.cfi_def_cfa_offset 8
 3716              		.cfi_offset 4, -8
 3717              		.cfi_offset 14, -4
 3718 0002 9EB0     		sub	sp, sp, #120
 3719              		.cfi_def_cfa_offset 128
 3720 0004 0790     		str	r0, [sp, #28]
 3721 0006 0691     		str	r1, [sp, #24]
 3722 0008 0592     		str	r2, [sp, #20]
 3723 000a 0493     		str	r3, [sp, #16]
 523:curve-specific.inc ****     wordcount_t i;
 524:curve-specific.inc ****     wordcount_t pow2i = 1;
 3724              		.loc 3 524 0
 3725 000c 7623     		movs	r3, #118
 3726 000e 6B44     		add	r3, r3, sp
 3727 0010 0122     		movs	r2, #1
 3728 0012 1A70     		strb	r2, [r3]
 525:curve-specific.inc ****     uECC_word_t d0[num_words_secp224r1];
 526:curve-specific.inc ****     uECC_word_t e0[num_words_secp224r1] = {1}; /* e0 <-- 1 */
 3729              		.loc 3 526 0
 3730 0014 0FAB     		add	r3, sp, #60
 3731 0016 1800     		movs	r0, r3
 3732 0018 1C23     		movs	r3, #28
 3733 001a 1A00     		movs	r2, r3
 3734 001c 0021     		movs	r1, #0
 3735 001e FFF7FEFF 		bl	memset
 3736 0022 0FAB     		add	r3, sp, #60
 3737 0024 0122     		movs	r2, #1
 3738 0026 1A60     		str	r2, [r3]
 527:curve-specific.inc ****     uECC_word_t f0[num_words_secp224r1];
 528:curve-specific.inc **** 
 529:curve-specific.inc ****     uECC_vli_set(d0, r, num_words_secp224r1); /* d0 <-- r */
 3739              		.loc 3 529 0
 3740 0028 2099     		ldr	r1, [sp, #128]
 3741 002a 16AB     		add	r3, sp, #88
 3742 002c 0722     		movs	r2, #7
 3743 002e 1800     		movs	r0, r3
 3744 0030 FFF7FEFF 		bl	uECC_vli_set
 530:curve-specific.inc ****     /* f0 <-- p  - c */
 531:curve-specific.inc ****     uECC_vli_modSub(f0, curve_secp224r1.p, c, curve_secp224r1.p, num_words_secp224r1);
 3745              		.loc 3 531 0
 3746 0034 2D4C     		ldr	r4, .L149
 3747 0036 049A     		ldr	r2, [sp, #16]
 3748 0038 2C49     		ldr	r1, .L149
 3749 003a 08A8     		add	r0, sp, #32
 3750 003c 0723     		movs	r3, #7
 3751 003e 0093     		str	r3, [sp]
 3752 0040 2300     		movs	r3, r4
 3753 0042 FFF7FEFF 		bl	uECC_vli_modSub
 532:curve-specific.inc ****     for (i = 0; i <= 6; i++) {
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 101


 3754              		.loc 3 532 0
 3755 0046 7723     		movs	r3, #119
 3756 0048 6B44     		add	r3, r3, sp
 3757 004a 0022     		movs	r2, #0
 3758 004c 1A70     		strb	r2, [r3]
 3759 004e 43E0     		b	.L147
 3760              	.L148:
 533:curve-specific.inc ****         mod_sqrt_secp224r1_rss(d1, e1, f1, d0, e0, f0, pow2i); /* RSS (d1,e1,f1,d0,e0,f0,2^i) */
 3761              		.loc 3 533 0 discriminator 3
 3762 0050 7623     		movs	r3, #118
 3763 0052 6B44     		add	r3, r3, sp
 3764 0054 1B78     		ldrb	r3, [r3]
 3765 0056 5BB2     		sxtb	r3, r3
 3766 0058 1BB2     		sxth	r3, r3
 3767 005a 16AC     		add	r4, sp, #88
 3768 005c 059A     		ldr	r2, [sp, #20]
 3769 005e 0699     		ldr	r1, [sp, #24]
 3770 0060 0798     		ldr	r0, [sp, #28]
 3771 0062 0293     		str	r3, [sp, #8]
 3772 0064 08AB     		add	r3, sp, #32
 3773 0066 0193     		str	r3, [sp, #4]
 3774 0068 0FAB     		add	r3, sp, #60
 3775 006a 0093     		str	r3, [sp]
 3776 006c 2300     		movs	r3, r4
 3777 006e FFF7FEFF 		bl	mod_sqrt_secp224r1_rss
 534:curve-specific.inc ****         mod_sqrt_secp224r1_rm(d1, e1, f1, c, d1, e1, d0, e0);  /* RM (d1,e1,f1,c,d1,e1,d0,e0) */
 3778              		.loc 3 534 0 discriminator 3
 3779 0072 049C     		ldr	r4, [sp, #16]
 3780 0074 059A     		ldr	r2, [sp, #20]
 3781 0076 0699     		ldr	r1, [sp, #24]
 3782 0078 0798     		ldr	r0, [sp, #28]
 3783 007a 0FAB     		add	r3, sp, #60
 3784 007c 0393     		str	r3, [sp, #12]
 3785 007e 16AB     		add	r3, sp, #88
 3786 0080 0293     		str	r3, [sp, #8]
 3787 0082 069B     		ldr	r3, [sp, #24]
 3788 0084 0193     		str	r3, [sp, #4]
 3789 0086 079B     		ldr	r3, [sp, #28]
 3790 0088 0093     		str	r3, [sp]
 3791 008a 2300     		movs	r3, r4
 3792 008c FFF7FEFF 		bl	mod_sqrt_secp224r1_rm
 535:curve-specific.inc ****         uECC_vli_set(d0, d1, num_words_secp224r1); /* d0 <-- d1 */
 3793              		.loc 3 535 0 discriminator 3
 3794 0090 0799     		ldr	r1, [sp, #28]
 3795 0092 16AB     		add	r3, sp, #88
 3796 0094 0722     		movs	r2, #7
 3797 0096 1800     		movs	r0, r3
 3798 0098 FFF7FEFF 		bl	uECC_vli_set
 536:curve-specific.inc ****         uECC_vli_set(e0, e1, num_words_secp224r1); /* e0 <-- e1 */
 3799              		.loc 3 536 0 discriminator 3
 3800 009c 0699     		ldr	r1, [sp, #24]
 3801 009e 0FAB     		add	r3, sp, #60
 3802 00a0 0722     		movs	r2, #7
 3803 00a2 1800     		movs	r0, r3
 3804 00a4 FFF7FEFF 		bl	uECC_vli_set
 537:curve-specific.inc ****         uECC_vli_set(f0, f1, num_words_secp224r1); /* f0 <-- f1 */
 3805              		.loc 3 537 0 discriminator 3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 102


 3806 00a8 0599     		ldr	r1, [sp, #20]
 3807 00aa 08AB     		add	r3, sp, #32
 3808 00ac 0722     		movs	r2, #7
 3809 00ae 1800     		movs	r0, r3
 3810 00b0 FFF7FEFF 		bl	uECC_vli_set
 538:curve-specific.inc ****         pow2i *= 2;
 3811              		.loc 3 538 0 discriminator 3
 3812 00b4 7623     		movs	r3, #118
 3813 00b6 6B44     		add	r3, r3, sp
 3814 00b8 1B78     		ldrb	r3, [r3]
 3815 00ba DB18     		adds	r3, r3, r3
 3816 00bc DAB2     		uxtb	r2, r3
 3817 00be 7623     		movs	r3, #118
 3818 00c0 6B44     		add	r3, r3, sp
 3819 00c2 1A70     		strb	r2, [r3]
 532:curve-specific.inc ****         mod_sqrt_secp224r1_rss(d1, e1, f1, d0, e0, f0, pow2i); /* RSS (d1,e1,f1,d0,e0,f0,2^i) */
 3820              		.loc 3 532 0 discriminator 3
 3821 00c4 7723     		movs	r3, #119
 3822 00c6 6B44     		add	r3, r3, sp
 3823 00c8 1B78     		ldrb	r3, [r3]
 3824 00ca 5BB2     		sxtb	r3, r3
 3825 00cc DBB2     		uxtb	r3, r3
 3826 00ce 0133     		adds	r3, r3, #1
 3827 00d0 DAB2     		uxtb	r2, r3
 3828 00d2 7723     		movs	r3, #119
 3829 00d4 6B44     		add	r3, r3, sp
 3830 00d6 1A70     		strb	r2, [r3]
 3831              	.L147:
 532:curve-specific.inc ****         mod_sqrt_secp224r1_rss(d1, e1, f1, d0, e0, f0, pow2i); /* RSS (d1,e1,f1,d0,e0,f0,2^i) */
 3832              		.loc 3 532 0 is_stmt 0 discriminator 1
 3833 00d8 7723     		movs	r3, #119
 3834 00da 6B44     		add	r3, r3, sp
 3835 00dc 1B78     		ldrb	r3, [r3]
 3836 00de 5BB2     		sxtb	r3, r3
 3837 00e0 062B     		cmp	r3, #6
 3838 00e2 B5DD     		ble	.L148
 539:curve-specific.inc ****     }
 540:curve-specific.inc **** }
 3839              		.loc 3 540 0 is_stmt 1
 3840 00e4 C046     		nop
 3841 00e6 1EB0     		add	sp, sp, #120
 3842              		@ sp needed
 3843 00e8 10BD     		pop	{r4, pc}
 3844              	.L150:
 3845 00ea C046     		.align	2
 3846              	.L149:
 3847 00ec 6C010000 		.word	curve_secp224r1+4
 3848              		.cfi_endproc
 3849              	.LFE37:
 3850              		.size	mod_sqrt_secp224r1_rp, .-mod_sqrt_secp224r1_rp
 3851              		.section	.text.mod_sqrt_secp224r1,"ax",%progbits
 3852              		.align	2
 3853              		.code	16
 3854              		.thumb_func
 3855              		.type	mod_sqrt_secp224r1, %function
 3856              	mod_sqrt_secp224r1:
 3857              	.LFB38:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 103


 541:curve-specific.inc **** 
 542:curve-specific.inc **** /* Compute a = sqrt(a) (mod curve_p). */
 543:curve-specific.inc **** /* Routine 3.2.8 mp_mod_sqrt_224; from http://www.nsa.gov/ia/_files/nist-routines.pdf */
 544:curve-specific.inc **** static void mod_sqrt_secp224r1(uECC_word_t *a, uECC_Curve curve) {
 3858              		.loc 3 544 0
 3859              		.cfi_startproc
 3860              		@ args = 0, pretend = 0, frame = 184
 3861              		@ frame_needed = 0, uses_anonymous_args = 0
 3862 0000 10B5     		push	{r4, lr}
 3863              		.cfi_def_cfa_offset 8
 3864              		.cfi_offset 4, -8
 3865              		.cfi_offset 14, -4
 3866 0002 B0B0     		sub	sp, sp, #192
 3867              		.cfi_def_cfa_offset 200
 3868 0004 0390     		str	r0, [sp, #12]
 3869 0006 0291     		str	r1, [sp, #8]
 545:curve-specific.inc ****     bitcount_t i;
 546:curve-specific.inc ****     uECC_word_t e1[num_words_secp224r1];
 547:curve-specific.inc ****     uECC_word_t f1[num_words_secp224r1];
 548:curve-specific.inc ****     uECC_word_t d0[num_words_secp224r1];
 549:curve-specific.inc ****     uECC_word_t e0[num_words_secp224r1];
 550:curve-specific.inc ****     uECC_word_t f0[num_words_secp224r1];
 551:curve-specific.inc ****     uECC_word_t d1[num_words_secp224r1];
 552:curve-specific.inc **** 
 553:curve-specific.inc ****     /* s = a; using constant instead of random value */
 554:curve-specific.inc ****     mod_sqrt_secp224r1_rp(d0, e0, f0, a, a);           /* RP (d0, e0, f0, c, s) */
 3870              		.loc 3 554 0
 3871 0008 039C     		ldr	r4, [sp, #12]
 3872 000a 0CAA     		add	r2, sp, #48
 3873 000c 13A9     		add	r1, sp, #76
 3874 000e 1AA8     		add	r0, sp, #104
 3875 0010 039B     		ldr	r3, [sp, #12]
 3876 0012 0093     		str	r3, [sp]
 3877 0014 2300     		movs	r3, r4
 3878 0016 FFF7FEFF 		bl	mod_sqrt_secp224r1_rp
 555:curve-specific.inc ****     mod_sqrt_secp224r1_rs(d1, e1, f1, d0, e0, f0);     /* RS (d1, e1, f1, d0, e0, f0) */
 3879              		.loc 3 555 0
 3880 001a 1AAC     		add	r4, sp, #104
 3881 001c 21AA     		add	r2, sp, #132
 3882 001e 28A9     		add	r1, sp, #160
 3883 0020 05A8     		add	r0, sp, #20
 3884 0022 0CAB     		add	r3, sp, #48
 3885 0024 0193     		str	r3, [sp, #4]
 3886 0026 13AB     		add	r3, sp, #76
 3887 0028 0093     		str	r3, [sp]
 3888 002a 2300     		movs	r3, r4
 3889 002c FFF7FEFF 		bl	mod_sqrt_secp224r1_rs
 556:curve-specific.inc ****     for (i = 1; i <= 95; i++) {
 3890              		.loc 3 556 0
 3891 0030 BE23     		movs	r3, #190
 3892 0032 6B44     		add	r3, r3, sp
 3893 0034 0122     		movs	r2, #1
 3894 0036 1A80     		strh	r2, [r3]
 3895 0038 2DE0     		b	.L152
 3896              	.L155:
 557:curve-specific.inc ****         uECC_vli_set(d0, d1, num_words_secp224r1);          /* d0 <-- d1 */
 3897              		.loc 3 557 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 104


 3898 003a 05A9     		add	r1, sp, #20
 3899 003c 1AAB     		add	r3, sp, #104
 3900 003e 0722     		movs	r2, #7
 3901 0040 1800     		movs	r0, r3
 3902 0042 FFF7FEFF 		bl	uECC_vli_set
 558:curve-specific.inc ****         uECC_vli_set(e0, e1, num_words_secp224r1);          /* e0 <-- e1 */
 3903              		.loc 3 558 0
 3904 0046 28A9     		add	r1, sp, #160
 3905 0048 13AB     		add	r3, sp, #76
 3906 004a 0722     		movs	r2, #7
 3907 004c 1800     		movs	r0, r3
 3908 004e FFF7FEFF 		bl	uECC_vli_set
 559:curve-specific.inc ****         uECC_vli_set(f0, f1, num_words_secp224r1);          /* f0 <-- f1 */
 3909              		.loc 3 559 0
 3910 0052 21A9     		add	r1, sp, #132
 3911 0054 0CAB     		add	r3, sp, #48
 3912 0056 0722     		movs	r2, #7
 3913 0058 1800     		movs	r0, r3
 3914 005a FFF7FEFF 		bl	uECC_vli_set
 560:curve-specific.inc ****         mod_sqrt_secp224r1_rs(d1, e1, f1, d0, e0, f0); /* RS (d1, e1, f1, d0, e0, f0) */
 3915              		.loc 3 560 0
 3916 005e 1AAC     		add	r4, sp, #104
 3917 0060 21AA     		add	r2, sp, #132
 3918 0062 28A9     		add	r1, sp, #160
 3919 0064 05A8     		add	r0, sp, #20
 3920 0066 0CAB     		add	r3, sp, #48
 3921 0068 0193     		str	r3, [sp, #4]
 3922 006a 13AB     		add	r3, sp, #76
 3923 006c 0093     		str	r3, [sp]
 3924 006e 2300     		movs	r3, r4
 3925 0070 FFF7FEFF 		bl	mod_sqrt_secp224r1_rs
 561:curve-specific.inc ****         if (uECC_vli_isZero(d1, num_words_secp224r1)) {     /* if d1 == 0 */
 3926              		.loc 3 561 0
 3927 0074 05AB     		add	r3, sp, #20
 3928 0076 0721     		movs	r1, #7
 3929 0078 1800     		movs	r0, r3
 3930 007a FFF7FEFF 		bl	uECC_vli_isZero
 3931 007e 031E     		subs	r3, r0, #0
 3932 0080 10D1     		bne	.L156
 556:curve-specific.inc ****         uECC_vli_set(d0, d1, num_words_secp224r1);          /* d0 <-- d1 */
 3933              		.loc 3 556 0 discriminator 2
 3934 0082 BE23     		movs	r3, #190
 3935 0084 6B44     		add	r3, r3, sp
 3936 0086 0022     		movs	r2, #0
 3937 0088 9B5E     		ldrsh	r3, [r3, r2]
 3938 008a 9BB2     		uxth	r3, r3
 3939 008c 0133     		adds	r3, r3, #1
 3940 008e 9AB2     		uxth	r2, r3
 3941 0090 BE23     		movs	r3, #190
 3942 0092 6B44     		add	r3, r3, sp
 3943 0094 1A80     		strh	r2, [r3]
 3944              	.L152:
 556:curve-specific.inc ****         uECC_vli_set(d0, d1, num_words_secp224r1);          /* d0 <-- d1 */
 3945              		.loc 3 556 0 is_stmt 0 discriminator 1
 3946 0096 BE23     		movs	r3, #190
 3947 0098 6B44     		add	r3, r3, sp
 3948 009a 0022     		movs	r2, #0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 105


 3949 009c 9B5E     		ldrsh	r3, [r3, r2]
 3950 009e 5F2B     		cmp	r3, #95
 3951 00a0 CBDD     		ble	.L155
 3952 00a2 00E0     		b	.L154
 3953              	.L156:
 562:curve-specific.inc ****                 break;
 3954              		.loc 3 562 0 is_stmt 1
 3955 00a4 C046     		nop
 3956              	.L154:
 563:curve-specific.inc ****         }
 564:curve-specific.inc ****     }
 565:curve-specific.inc ****     uECC_vli_modInv(f1, e0, curve_secp224r1.p, num_words_secp224r1); /* f1 <-- 1 / e0 */
 3957              		.loc 3 565 0
 3958 00a6 074A     		ldr	r2, .L157
 3959 00a8 13A9     		add	r1, sp, #76
 3960 00aa 21A8     		add	r0, sp, #132
 3961 00ac 0723     		movs	r3, #7
 3962 00ae FFF7FEFF 		bl	uECC_vli_modInv
 566:curve-specific.inc ****     uECC_vli_modMult_fast(a, d0, f1, &curve_secp224r1);              /* a  <-- d0 / e0 */
 3963              		.loc 3 566 0
 3964 00b2 054B     		ldr	r3, .L157+4
 3965 00b4 21AA     		add	r2, sp, #132
 3966 00b6 1AA9     		add	r1, sp, #104
 3967 00b8 0398     		ldr	r0, [sp, #12]
 3968 00ba FFF7FEFF 		bl	uECC_vli_modMult_fast
 567:curve-specific.inc **** }
 3969              		.loc 3 567 0
 3970 00be C046     		nop
 3971 00c0 30B0     		add	sp, sp, #192
 3972              		@ sp needed
 3973 00c2 10BD     		pop	{r4, pc}
 3974              	.L158:
 3975              		.align	2
 3976              	.L157:
 3977 00c4 6C010000 		.word	curve_secp224r1+4
 3978 00c8 68010000 		.word	curve_secp224r1
 3979              		.cfi_endproc
 3980              	.LFE38:
 3981              		.size	mod_sqrt_secp224r1, .-mod_sqrt_secp224r1
 3982              		.section	.text.vli_mmod_fast_secp224r1,"ax",%progbits
 3983              		.align	2
 3984              		.code	16
 3985              		.thumb_func
 3986              		.type	vli_mmod_fast_secp224r1, %function
 3987              	vli_mmod_fast_secp224r1:
 3988              	.LFB39:
 568:curve-specific.inc **** #endif /* uECC_SUPPORT_COMPRESSED_POINT */
 569:curve-specific.inc **** 
 570:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0)
 571:curve-specific.inc **** /* Computes result = product % curve_p
 572:curve-specific.inc ****    from http://www.nsa.gov/ia/_files/nist-routines.pdf */
 573:curve-specific.inc **** #if uECC_WORD_SIZE == 1
 574:curve-specific.inc **** static void vli_mmod_fast_secp224r1(uint8_t *result, uint8_t *product) {
 575:curve-specific.inc ****     uint8_t tmp[num_words_secp224r1];
 576:curve-specific.inc ****     int8_t carry;
 577:curve-specific.inc **** 
 578:curve-specific.inc ****     /* t */
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 106


 579:curve-specific.inc ****     uECC_vli_set(result, product, num_words_secp224r1);
 580:curve-specific.inc **** 
 581:curve-specific.inc ****     /* s1 */
 582:curve-specific.inc ****     tmp[0] = tmp[1] = tmp[2] = tmp[3] = 0;
 583:curve-specific.inc ****     tmp[4] = tmp[5] = tmp[6] = tmp[7] = 0;
 584:curve-specific.inc ****     tmp[8] = tmp[9] = tmp[10] = tmp[11] = 0;
 585:curve-specific.inc ****     tmp[12] = product[28]; tmp[13] = product[29]; tmp[14] = product[30]; tmp[15] = product[31];
 586:curve-specific.inc ****     tmp[16] = product[32]; tmp[17] = product[33]; tmp[18] = product[34]; tmp[19] = product[35];
 587:curve-specific.inc ****     tmp[20] = product[36]; tmp[21] = product[37]; tmp[22] = product[38]; tmp[23] = product[39];
 588:curve-specific.inc ****     tmp[24] = product[40]; tmp[25] = product[41]; tmp[26] = product[42]; tmp[27] = product[43];
 589:curve-specific.inc ****     carry = uECC_vli_add(result, result, tmp, num_words_secp224r1);
 590:curve-specific.inc **** 
 591:curve-specific.inc ****     /* s2 */
 592:curve-specific.inc ****     tmp[12] = product[44]; tmp[13] = product[45]; tmp[14] = product[46]; tmp[15] = product[47];
 593:curve-specific.inc ****     tmp[16] = product[48]; tmp[17] = product[49]; tmp[18] = product[50]; tmp[19] = product[51];
 594:curve-specific.inc ****     tmp[20] = product[52]; tmp[21] = product[53]; tmp[22] = product[54]; tmp[23] = product[55];
 595:curve-specific.inc ****     tmp[24] = tmp[25] = tmp[26] = tmp[27] = 0;
 596:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp224r1);
 597:curve-specific.inc **** 
 598:curve-specific.inc ****     /* d1 */
 599:curve-specific.inc ****     tmp[0]  = product[28]; tmp[1]  = product[29]; tmp[2]  = product[30]; tmp[3]  = product[31];
 600:curve-specific.inc ****     tmp[4]  = product[32]; tmp[5]  = product[33]; tmp[6]  = product[34]; tmp[7]  = product[35];
 601:curve-specific.inc ****     tmp[8]  = product[36]; tmp[9]  = product[37]; tmp[10] = product[38]; tmp[11] = product[39];
 602:curve-specific.inc ****     tmp[12] = product[40]; tmp[13] = product[41]; tmp[14] = product[42]; tmp[15] = product[43];
 603:curve-specific.inc ****     tmp[16] = product[44]; tmp[17] = product[45]; tmp[18] = product[46]; tmp[19] = product[47];
 604:curve-specific.inc ****     tmp[20] = product[48]; tmp[21] = product[49]; tmp[22] = product[50]; tmp[23] = product[51];
 605:curve-specific.inc ****     tmp[24] = product[52]; tmp[25] = product[53]; tmp[26] = product[54]; tmp[27] = product[55];
 606:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp224r1);
 607:curve-specific.inc **** 
 608:curve-specific.inc ****     /* d2 */
 609:curve-specific.inc ****     tmp[0]  = product[44]; tmp[1]  = product[45]; tmp[2]  = product[46]; tmp[3]  = product[47];
 610:curve-specific.inc ****     tmp[4]  = product[48]; tmp[5]  = product[49]; tmp[6]  = product[50]; tmp[7]  = product[51];
 611:curve-specific.inc ****     tmp[8]  = product[52]; tmp[9]  = product[53]; tmp[10] = product[54]; tmp[11] = product[55];
 612:curve-specific.inc ****     tmp[12] = tmp[13] = tmp[14] = tmp[15] = 0;
 613:curve-specific.inc ****     tmp[16] = tmp[17] = tmp[18] = tmp[19] = 0;
 614:curve-specific.inc ****     tmp[20] = tmp[21] = tmp[22] = tmp[23] = 0;
 615:curve-specific.inc ****     tmp[24] = tmp[25] = tmp[26] = tmp[27] = 0;
 616:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp224r1);
 617:curve-specific.inc **** 
 618:curve-specific.inc ****     if (carry < 0) {
 619:curve-specific.inc ****         do {
 620:curve-specific.inc ****             carry += uECC_vli_add(result, result, curve_secp224r1.p, num_words_secp224r1);
 621:curve-specific.inc ****         } while (carry < 0);
 622:curve-specific.inc ****     } else {
 623:curve-specific.inc ****         while (carry || uECC_vli_cmp_unsafe(curve_secp224r1.p, result, num_words_secp224r1) != 1) {
 624:curve-specific.inc ****             carry -= uECC_vli_sub(result, result, curve_secp224r1.p, num_words_secp224r1);
 625:curve-specific.inc ****         }
 626:curve-specific.inc ****     }
 627:curve-specific.inc **** }
 628:curve-specific.inc **** #elif uECC_WORD_SIZE == 4
 629:curve-specific.inc **** static void vli_mmod_fast_secp224r1(uint32_t *result, uint32_t *product)
 630:curve-specific.inc **** {
 3989              		.loc 3 630 0
 3990              		.cfi_startproc
 3991              		@ args = 0, pretend = 0, frame = 40
 3992              		@ frame_needed = 0, uses_anonymous_args = 0
 3993 0000 00B5     		push	{lr}
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 107


 3994              		.cfi_def_cfa_offset 4
 3995              		.cfi_offset 14, -4
 3996 0002 8BB0     		sub	sp, sp, #44
 3997              		.cfi_def_cfa_offset 48
 3998 0004 0190     		str	r0, [sp, #4]
 3999 0006 0091     		str	r1, [sp]
 631:curve-specific.inc ****     uint32_t tmp[num_words_secp224r1];
 632:curve-specific.inc ****     int carry;
 633:curve-specific.inc **** 
 634:curve-specific.inc ****     /* t */
 635:curve-specific.inc ****     uECC_vli_set(result, product, num_words_secp224r1);
 4000              		.loc 3 635 0
 4001 0008 0099     		ldr	r1, [sp]
 4002 000a 019B     		ldr	r3, [sp, #4]
 4003 000c 0722     		movs	r2, #7
 4004 000e 1800     		movs	r0, r3
 4005 0010 FFF7FEFF 		bl	uECC_vli_set
 636:curve-specific.inc **** 
 637:curve-specific.inc ****     /* s1 */
 638:curve-specific.inc ****     tmp[0] = tmp[1] = tmp[2] = 0;
 4006              		.loc 3 638 0
 4007 0014 02AB     		add	r3, sp, #8
 4008 0016 0022     		movs	r2, #0
 4009 0018 9A60     		str	r2, [r3, #8]
 4010 001a 02AB     		add	r3, sp, #8
 4011 001c 9A68     		ldr	r2, [r3, #8]
 4012 001e 02AB     		add	r3, sp, #8
 4013 0020 5A60     		str	r2, [r3, #4]
 4014 0022 02AB     		add	r3, sp, #8
 4015 0024 5A68     		ldr	r2, [r3, #4]
 4016 0026 02AB     		add	r3, sp, #8
 4017 0028 1A60     		str	r2, [r3]
 639:curve-specific.inc ****     tmp[3] = product[7];
 4018              		.loc 3 639 0
 4019 002a 009B     		ldr	r3, [sp]
 4020 002c DA69     		ldr	r2, [r3, #28]
 4021 002e 02AB     		add	r3, sp, #8
 4022 0030 DA60     		str	r2, [r3, #12]
 640:curve-specific.inc ****     tmp[4] = product[8];
 4023              		.loc 3 640 0
 4024 0032 009B     		ldr	r3, [sp]
 4025 0034 1A6A     		ldr	r2, [r3, #32]
 4026 0036 02AB     		add	r3, sp, #8
 4027 0038 1A61     		str	r2, [r3, #16]
 641:curve-specific.inc ****     tmp[5] = product[9];
 4028              		.loc 3 641 0
 4029 003a 009B     		ldr	r3, [sp]
 4030 003c 5A6A     		ldr	r2, [r3, #36]
 4031 003e 02AB     		add	r3, sp, #8
 4032 0040 5A61     		str	r2, [r3, #20]
 642:curve-specific.inc ****     tmp[6] = product[10];
 4033              		.loc 3 642 0
 4034 0042 009B     		ldr	r3, [sp]
 4035 0044 9A6A     		ldr	r2, [r3, #40]
 4036 0046 02AB     		add	r3, sp, #8
 4037 0048 9A61     		str	r2, [r3, #24]
 643:curve-specific.inc ****     carry = uECC_vli_add(result, result, tmp, num_words_secp224r1);
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 108


 4038              		.loc 3 643 0
 4039 004a 02AA     		add	r2, sp, #8
 4040 004c 0199     		ldr	r1, [sp, #4]
 4041 004e 0198     		ldr	r0, [sp, #4]
 4042 0050 0723     		movs	r3, #7
 4043 0052 FFF7FEFF 		bl	uECC_vli_add
 4044 0056 0300     		movs	r3, r0
 4045 0058 0993     		str	r3, [sp, #36]
 644:curve-specific.inc **** 
 645:curve-specific.inc ****     /* s2 */
 646:curve-specific.inc ****     tmp[3] = product[11];
 4046              		.loc 3 646 0
 4047 005a 009B     		ldr	r3, [sp]
 4048 005c DA6A     		ldr	r2, [r3, #44]
 4049 005e 02AB     		add	r3, sp, #8
 4050 0060 DA60     		str	r2, [r3, #12]
 647:curve-specific.inc ****     tmp[4] = product[12];
 4051              		.loc 3 647 0
 4052 0062 009B     		ldr	r3, [sp]
 4053 0064 1A6B     		ldr	r2, [r3, #48]
 4054 0066 02AB     		add	r3, sp, #8
 4055 0068 1A61     		str	r2, [r3, #16]
 648:curve-specific.inc ****     tmp[5] = product[13];
 4056              		.loc 3 648 0
 4057 006a 009B     		ldr	r3, [sp]
 4058 006c 5A6B     		ldr	r2, [r3, #52]
 4059 006e 02AB     		add	r3, sp, #8
 4060 0070 5A61     		str	r2, [r3, #20]
 649:curve-specific.inc ****     tmp[6] = 0;
 4061              		.loc 3 649 0
 4062 0072 02AB     		add	r3, sp, #8
 4063 0074 0022     		movs	r2, #0
 4064 0076 9A61     		str	r2, [r3, #24]
 650:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp224r1);
 4065              		.loc 3 650 0
 4066 0078 02AA     		add	r2, sp, #8
 4067 007a 0199     		ldr	r1, [sp, #4]
 4068 007c 0198     		ldr	r0, [sp, #4]
 4069 007e 0723     		movs	r3, #7
 4070 0080 FFF7FEFF 		bl	uECC_vli_add
 4071 0084 0200     		movs	r2, r0
 4072 0086 099B     		ldr	r3, [sp, #36]
 4073 0088 D318     		adds	r3, r2, r3
 4074 008a 0993     		str	r3, [sp, #36]
 651:curve-specific.inc **** 
 652:curve-specific.inc ****     /* d1 */
 653:curve-specific.inc ****     tmp[0] = product[7];
 4075              		.loc 3 653 0
 4076 008c 009B     		ldr	r3, [sp]
 4077 008e DA69     		ldr	r2, [r3, #28]
 4078 0090 02AB     		add	r3, sp, #8
 4079 0092 1A60     		str	r2, [r3]
 654:curve-specific.inc ****     tmp[1] = product[8];
 4080              		.loc 3 654 0
 4081 0094 009B     		ldr	r3, [sp]
 4082 0096 1A6A     		ldr	r2, [r3, #32]
 4083 0098 02AB     		add	r3, sp, #8
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 109


 4084 009a 5A60     		str	r2, [r3, #4]
 655:curve-specific.inc ****     tmp[2] = product[9];
 4085              		.loc 3 655 0
 4086 009c 009B     		ldr	r3, [sp]
 4087 009e 5A6A     		ldr	r2, [r3, #36]
 4088 00a0 02AB     		add	r3, sp, #8
 4089 00a2 9A60     		str	r2, [r3, #8]
 656:curve-specific.inc ****     tmp[3] = product[10];
 4090              		.loc 3 656 0
 4091 00a4 009B     		ldr	r3, [sp]
 4092 00a6 9A6A     		ldr	r2, [r3, #40]
 4093 00a8 02AB     		add	r3, sp, #8
 4094 00aa DA60     		str	r2, [r3, #12]
 657:curve-specific.inc ****     tmp[4] = product[11];
 4095              		.loc 3 657 0
 4096 00ac 009B     		ldr	r3, [sp]
 4097 00ae DA6A     		ldr	r2, [r3, #44]
 4098 00b0 02AB     		add	r3, sp, #8
 4099 00b2 1A61     		str	r2, [r3, #16]
 658:curve-specific.inc ****     tmp[5] = product[12];
 4100              		.loc 3 658 0
 4101 00b4 009B     		ldr	r3, [sp]
 4102 00b6 1A6B     		ldr	r2, [r3, #48]
 4103 00b8 02AB     		add	r3, sp, #8
 4104 00ba 5A61     		str	r2, [r3, #20]
 659:curve-specific.inc ****     tmp[6] = product[13];
 4105              		.loc 3 659 0
 4106 00bc 009B     		ldr	r3, [sp]
 4107 00be 5A6B     		ldr	r2, [r3, #52]
 4108 00c0 02AB     		add	r3, sp, #8
 4109 00c2 9A61     		str	r2, [r3, #24]
 660:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp224r1);
 4110              		.loc 3 660 0
 4111 00c4 02AA     		add	r2, sp, #8
 4112 00c6 0199     		ldr	r1, [sp, #4]
 4113 00c8 0198     		ldr	r0, [sp, #4]
 4114 00ca 0723     		movs	r3, #7
 4115 00cc FFF7FEFF 		bl	uECC_vli_sub
 4116 00d0 0200     		movs	r2, r0
 4117 00d2 099B     		ldr	r3, [sp, #36]
 4118 00d4 9B1A     		subs	r3, r3, r2
 4119 00d6 0993     		str	r3, [sp, #36]
 661:curve-specific.inc **** 
 662:curve-specific.inc ****     /* d2 */
 663:curve-specific.inc ****     tmp[0] = product[11];
 4120              		.loc 3 663 0
 4121 00d8 009B     		ldr	r3, [sp]
 4122 00da DA6A     		ldr	r2, [r3, #44]
 4123 00dc 02AB     		add	r3, sp, #8
 4124 00de 1A60     		str	r2, [r3]
 664:curve-specific.inc ****     tmp[1] = product[12];
 4125              		.loc 3 664 0
 4126 00e0 009B     		ldr	r3, [sp]
 4127 00e2 1A6B     		ldr	r2, [r3, #48]
 4128 00e4 02AB     		add	r3, sp, #8
 4129 00e6 5A60     		str	r2, [r3, #4]
 665:curve-specific.inc ****     tmp[2] = product[13];
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 110


 4130              		.loc 3 665 0
 4131 00e8 009B     		ldr	r3, [sp]
 4132 00ea 5A6B     		ldr	r2, [r3, #52]
 4133 00ec 02AB     		add	r3, sp, #8
 4134 00ee 9A60     		str	r2, [r3, #8]
 666:curve-specific.inc ****     tmp[3] = tmp[4] = tmp[5] = tmp[6] = 0;
 4135              		.loc 3 666 0
 4136 00f0 02AB     		add	r3, sp, #8
 4137 00f2 0022     		movs	r2, #0
 4138 00f4 9A61     		str	r2, [r3, #24]
 4139 00f6 02AB     		add	r3, sp, #8
 4140 00f8 9A69     		ldr	r2, [r3, #24]
 4141 00fa 02AB     		add	r3, sp, #8
 4142 00fc 5A61     		str	r2, [r3, #20]
 4143 00fe 02AB     		add	r3, sp, #8
 4144 0100 5A69     		ldr	r2, [r3, #20]
 4145 0102 02AB     		add	r3, sp, #8
 4146 0104 1A61     		str	r2, [r3, #16]
 4147 0106 02AB     		add	r3, sp, #8
 4148 0108 1A69     		ldr	r2, [r3, #16]
 4149 010a 02AB     		add	r3, sp, #8
 4150 010c DA60     		str	r2, [r3, #12]
 667:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp224r1);
 4151              		.loc 3 667 0
 4152 010e 02AA     		add	r2, sp, #8
 4153 0110 0199     		ldr	r1, [sp, #4]
 4154 0112 0198     		ldr	r0, [sp, #4]
 4155 0114 0723     		movs	r3, #7
 4156 0116 FFF7FEFF 		bl	uECC_vli_sub
 4157 011a 0200     		movs	r2, r0
 4158 011c 099B     		ldr	r3, [sp, #36]
 4159 011e 9B1A     		subs	r3, r3, r2
 4160 0120 0993     		str	r3, [sp, #36]
 668:curve-specific.inc **** 
 669:curve-specific.inc ****     if (carry < 0) {
 4161              		.loc 3 669 0
 4162 0122 099B     		ldr	r3, [sp, #36]
 4163 0124 002B     		cmp	r3, #0
 4164 0126 17DA     		bge	.L163
 4165              	.L161:
 670:curve-specific.inc ****         do {
 671:curve-specific.inc ****             carry += uECC_vli_add(result, result, curve_secp224r1.p, num_words_secp224r1);
 4166              		.loc 3 671 0 discriminator 1
 4167 0128 134A     		ldr	r2, .L166
 4168 012a 0199     		ldr	r1, [sp, #4]
 4169 012c 0198     		ldr	r0, [sp, #4]
 4170 012e 0723     		movs	r3, #7
 4171 0130 FFF7FEFF 		bl	uECC_vli_add
 4172 0134 0200     		movs	r2, r0
 4173 0136 099B     		ldr	r3, [sp, #36]
 4174 0138 D318     		adds	r3, r2, r3
 4175 013a 0993     		str	r3, [sp, #36]
 672:curve-specific.inc ****         } while (carry < 0);
 4176              		.loc 3 672 0 discriminator 1
 4177 013c 099B     		ldr	r3, [sp, #36]
 4178 013e 002B     		cmp	r3, #0
 4179 0140 F2DB     		blt	.L161
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 111


 673:curve-specific.inc ****     } else {
 674:curve-specific.inc ****         while (carry || uECC_vli_cmp_unsafe(curve_secp224r1.p, result, num_words_secp224r1) != 1) {
 675:curve-specific.inc ****             carry -= uECC_vli_sub(result, result, curve_secp224r1.p, num_words_secp224r1);
 676:curve-specific.inc ****         }
 677:curve-specific.inc ****     }
 678:curve-specific.inc **** }
 4180              		.loc 3 678 0
 4181 0142 15E0     		b	.L165
 4182              	.L164:
 675:curve-specific.inc ****         }
 4183              		.loc 3 675 0
 4184 0144 0C4A     		ldr	r2, .L166
 4185 0146 0199     		ldr	r1, [sp, #4]
 4186 0148 0198     		ldr	r0, [sp, #4]
 4187 014a 0723     		movs	r3, #7
 4188 014c FFF7FEFF 		bl	uECC_vli_sub
 4189 0150 0200     		movs	r2, r0
 4190 0152 099B     		ldr	r3, [sp, #36]
 4191 0154 9B1A     		subs	r3, r3, r2
 4192 0156 0993     		str	r3, [sp, #36]
 4193              	.L163:
 674:curve-specific.inc ****             carry -= uECC_vli_sub(result, result, curve_secp224r1.p, num_words_secp224r1);
 4194              		.loc 3 674 0
 4195 0158 099B     		ldr	r3, [sp, #36]
 4196 015a 002B     		cmp	r3, #0
 4197 015c F2D1     		bne	.L164
 674:curve-specific.inc ****             carry -= uECC_vli_sub(result, result, curve_secp224r1.p, num_words_secp224r1);
 4198              		.loc 3 674 0 is_stmt 0 discriminator 1
 4199 015e 0199     		ldr	r1, [sp, #4]
 4200 0160 054B     		ldr	r3, .L166
 4201 0162 0722     		movs	r2, #7
 4202 0164 1800     		movs	r0, r3
 4203 0166 FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 4204 016a 0300     		movs	r3, r0
 4205 016c 012B     		cmp	r3, #1
 4206 016e E9D1     		bne	.L164
 4207              	.L165:
 4208              		.loc 3 678 0 is_stmt 1
 4209 0170 C046     		nop
 4210 0172 0BB0     		add	sp, sp, #44
 4211              		@ sp needed
 4212 0174 00BD     		pop	{pc}
 4213              	.L167:
 4214 0176 C046     		.align	2
 4215              	.L166:
 4216 0178 6C010000 		.word	curve_secp224r1+4
 4217              		.cfi_endproc
 4218              	.LFE39:
 4219              		.size	vli_mmod_fast_secp224r1, .-vli_mmod_fast_secp224r1
 4220              		.section	.rodata
 4221              		.align	2
 4222              		.type	curve_secp256r1, %object
 4223              		.size	curve_secp256r1, 180
 4224              	curve_secp256r1:
 4225 021c 08       		.byte	8
 4226 021d 20       		.byte	32
 4227 021e 0001     		.short	256
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 112


 4228 0220 FFFFFFFF 		.word	-1
 4229 0224 FFFFFFFF 		.word	-1
 4230 0228 FFFFFFFF 		.word	-1
 4231 022c 00000000 		.word	0
 4232 0230 00000000 		.word	0
 4233 0234 00000000 		.word	0
 4234 0238 01000000 		.word	1
 4235 023c FFFFFFFF 		.word	-1
 4236 0240 512563FC 		.word	-60611247
 4237 0244 C2CAB9F3 		.word	-205927742
 4238 0248 849E17A7 		.word	-1491624316
 4239 024c ADFAE6BC 		.word	-1125713235
 4240 0250 FFFFFFFF 		.word	-1
 4241 0254 FFFFFFFF 		.word	-1
 4242 0258 00000000 		.word	0
 4243 025c FFFFFFFF 		.word	-1
 4244 0260 96C298D8 		.word	-661077354
 4245 0264 4539A1F4 		.word	-190760635
 4246 0268 A033EB2D 		.word	770388896
 4247 026c 817D0377 		.word	1996717441
 4248 0270 F240A463 		.word	1671708914
 4249 0274 E5E6BCF8 		.word	-121837851
 4250 0278 47422CE1 		.word	-517193145
 4251 027c F2D1176B 		.word	1796723186
 4252 0280 F551BF37 		.word	935285237
 4253 0284 6840B6CB 		.word	-877248408
 4254 0288 CE5E316B 		.word	1798397646
 4255 028c 5733CE2B 		.word	734933847
 4256 0290 169E0F7C 		.word	2081398294
 4257 0294 4AEBE78E 		.word	-1897403574
 4258 0298 9B7F1AFE 		.word	-31817829
 4259 029c E242E34F 		.word	1340293858
 4260 02a0 4B60D227 		.word	668098635
 4261 02a4 3E3CCE3B 		.word	1003371582
 4262 02a8 F6B053CC 		.word	-866930442
 4263 02ac B0061D65 		.word	1696401072
 4264 02b0 BC869876 		.word	1989707452
 4265 02b4 55BDEBB3 		.word	-1276396203
 4266 02b8 E7933AAA 		.word	-1439001625
 4267 02bc D835C65A 		.word	1522939352
 4268 02c0 00000000 		.word	double_jacobian_default
 4269 02c4 00000000 		.word	mod_sqrt_default
 4270 02c8 00000000 		.word	x_side_default
 4271 02cc 00000000 		.word	vli_mmod_fast_secp256r1
 4272              		.section	.text.uECC_secp256r1,"ax",%progbits
 4273              		.align	2
 4274              		.global	uECC_secp256r1
 4275              		.code	16
 4276              		.thumb_func
 4277              		.type	uECC_secp256r1, %function
 4278              	uECC_secp256r1:
 4279              	.LFB40:
 679:curve-specific.inc **** #else
 680:curve-specific.inc **** static void vli_mmod_fast_secp224r1(uint64_t *result, uint64_t *product)
 681:curve-specific.inc **** {
 682:curve-specific.inc ****     uint64_t tmp[num_words_secp224r1];
 683:curve-specific.inc ****     int carry = 0;
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 113


 684:curve-specific.inc **** 
 685:curve-specific.inc ****     /* t */
 686:curve-specific.inc ****     uECC_vli_set(result, product, num_words_secp224r1);
 687:curve-specific.inc ****     result[num_words_secp224r1 - 1] &= 0xffffffff;
 688:curve-specific.inc **** 
 689:curve-specific.inc ****     /* s1 */
 690:curve-specific.inc ****     tmp[0] = 0;
 691:curve-specific.inc ****     tmp[1] = product[3] & 0xffffffff00000000ull;
 692:curve-specific.inc ****     tmp[2] = product[4];
 693:curve-specific.inc ****     tmp[3] = product[5] & 0xffffffff;
 694:curve-specific.inc ****     uECC_vli_add(result, result, tmp, num_words_secp224r1);
 695:curve-specific.inc **** 
 696:curve-specific.inc ****     /* s2 */
 697:curve-specific.inc ****     tmp[1] = product[5] & 0xffffffff00000000ull;
 698:curve-specific.inc ****     tmp[2] = product[6];
 699:curve-specific.inc ****     tmp[3] = 0;
 700:curve-specific.inc ****     uECC_vli_add(result, result, tmp, num_words_secp224r1);
 701:curve-specific.inc **** 
 702:curve-specific.inc ****     /* d1 */
 703:curve-specific.inc ****     tmp[0] = (product[3] >> 32) | (product[4] << 32);
 704:curve-specific.inc ****     tmp[1] = (product[4] >> 32) | (product[5] << 32);
 705:curve-specific.inc ****     tmp[2] = (product[5] >> 32) | (product[6] << 32);
 706:curve-specific.inc ****     tmp[3] = product[6] >> 32;
 707:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp224r1);
 708:curve-specific.inc **** 
 709:curve-specific.inc ****     /* d2 */
 710:curve-specific.inc ****     tmp[0] = (product[5] >> 32) | (product[6] << 32);
 711:curve-specific.inc ****     tmp[1] = product[6] >> 32;
 712:curve-specific.inc ****     tmp[2] = tmp[3] = 0;
 713:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp224r1);
 714:curve-specific.inc **** 
 715:curve-specific.inc ****     if (carry < 0) {
 716:curve-specific.inc ****         do {
 717:curve-specific.inc ****             carry += uECC_vli_add(result, result, curve_secp224r1.p, num_words_secp224r1);
 718:curve-specific.inc ****         } while (carry < 0);
 719:curve-specific.inc ****     } else {
 720:curve-specific.inc ****         while (uECC_vli_cmp_unsafe(curve_secp224r1.p, result, num_words_secp224r1) != 1) {
 721:curve-specific.inc ****             uECC_vli_sub(result, result, curve_secp224r1.p, num_words_secp224r1);
 722:curve-specific.inc ****         }
 723:curve-specific.inc ****     }
 724:curve-specific.inc **** }
 725:curve-specific.inc **** #endif /* uECC_WORD_SIZE */
 726:curve-specific.inc **** #endif /* (uECC_OPTIMIZATION_LEVEL > 0) */
 727:curve-specific.inc **** 
 728:curve-specific.inc **** #endif /* uECC_SUPPORTS_secp224r1 */
 729:curve-specific.inc **** 
 730:curve-specific.inc **** #if uECC_SUPPORTS_secp256r1
 731:curve-specific.inc **** 
 732:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0)
 733:curve-specific.inc **** static void vli_mmod_fast_secp256r1(uECC_word_t *result, uECC_word_t *product);
 734:curve-specific.inc **** #endif
 735:curve-specific.inc **** 
 736:curve-specific.inc **** static const struct uECC_Curve_t curve_secp256r1 = {
 737:curve-specific.inc ****     num_words_secp256r1,
 738:curve-specific.inc ****     num_bytes_secp256r1,
 739:curve-specific.inc ****     256, /* num_n_bits */
 740:curve-specific.inc ****     { BYTES_TO_WORDS_8(FF, FF, FF, FF, FF, FF, FF, FF),
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 114


 741:curve-specific.inc ****         BYTES_TO_WORDS_8(FF, FF, FF, FF, 00, 00, 00, 00),
 742:curve-specific.inc ****         BYTES_TO_WORDS_8(00, 00, 00, 00, 00, 00, 00, 00),
 743:curve-specific.inc ****         BYTES_TO_WORDS_8(01, 00, 00, 00, FF, FF, FF, FF) },
 744:curve-specific.inc ****     { BYTES_TO_WORDS_8(51, 25, 63, FC, C2, CA, B9, F3),
 745:curve-specific.inc ****         BYTES_TO_WORDS_8(84, 9E, 17, A7, AD, FA, E6, BC),
 746:curve-specific.inc ****         BYTES_TO_WORDS_8(FF, FF, FF, FF, FF, FF, FF, FF),
 747:curve-specific.inc ****         BYTES_TO_WORDS_8(00, 00, 00, 00, FF, FF, FF, FF) },
 748:curve-specific.inc ****     { BYTES_TO_WORDS_8(96, C2, 98, D8, 45, 39, A1, F4),
 749:curve-specific.inc ****         BYTES_TO_WORDS_8(A0, 33, EB, 2D, 81, 7D, 03, 77),
 750:curve-specific.inc ****         BYTES_TO_WORDS_8(F2, 40, A4, 63, E5, E6, BC, F8),
 751:curve-specific.inc ****         BYTES_TO_WORDS_8(47, 42, 2C, E1, F2, D1, 17, 6B),
 752:curve-specific.inc **** 
 753:curve-specific.inc ****         BYTES_TO_WORDS_8(F5, 51, BF, 37, 68, 40, B6, CB),
 754:curve-specific.inc ****         BYTES_TO_WORDS_8(CE, 5E, 31, 6B, 57, 33, CE, 2B),
 755:curve-specific.inc ****         BYTES_TO_WORDS_8(16, 9E, 0F, 7C, 4A, EB, E7, 8E),
 756:curve-specific.inc ****         BYTES_TO_WORDS_8(9B, 7F, 1A, FE, E2, 42, E3, 4F) },
 757:curve-specific.inc ****     { BYTES_TO_WORDS_8(4B, 60, D2, 27, 3E, 3C, CE, 3B),
 758:curve-specific.inc ****         BYTES_TO_WORDS_8(F6, B0, 53, CC, B0, 06, 1D, 65),
 759:curve-specific.inc ****         BYTES_TO_WORDS_8(BC, 86, 98, 76, 55, BD, EB, B3),
 760:curve-specific.inc ****         BYTES_TO_WORDS_8(E7, 93, 3A, AA, D8, 35, C6, 5A) },
 761:curve-specific.inc ****     &double_jacobian_default,
 762:curve-specific.inc **** #if uECC_SUPPORT_COMPRESSED_POINT
 763:curve-specific.inc ****     &mod_sqrt_default,
 764:curve-specific.inc **** #endif
 765:curve-specific.inc ****     &x_side_default,
 766:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0)
 767:curve-specific.inc ****     &vli_mmod_fast_secp256r1
 768:curve-specific.inc **** #endif
 769:curve-specific.inc **** };
 770:curve-specific.inc **** 
 771:curve-specific.inc **** uECC_Curve uECC_secp256r1(void) { return &curve_secp256r1; }
 4280              		.loc 3 771 0
 4281              		.cfi_startproc
 4282              		@ args = 0, pretend = 0, frame = 0
 4283              		@ frame_needed = 0, uses_anonymous_args = 0
 4284              		@ link register save eliminated.
 4285              		.loc 3 771 0
 4286 0000 014B     		ldr	r3, .L170
 4287 0002 1800     		movs	r0, r3
 4288              		@ sp needed
 4289 0004 7047     		bx	lr
 4290              	.L171:
 4291 0006 C046     		.align	2
 4292              	.L170:
 4293 0008 1C020000 		.word	curve_secp256r1
 4294              		.cfi_endproc
 4295              	.LFE40:
 4296              		.size	uECC_secp256r1, .-uECC_secp256r1
 4297              		.section	.text.vli_mmod_fast_secp256r1,"ax",%progbits
 4298              		.align	2
 4299              		.code	16
 4300              		.thumb_func
 4301              		.type	vli_mmod_fast_secp256r1, %function
 4302              	vli_mmod_fast_secp256r1:
 4303              	.LFB41:
 772:curve-specific.inc **** 
 773:curve-specific.inc **** 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 115


 774:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0 && !asm_mmod_fast_secp256r1)
 775:curve-specific.inc **** /* Computes result = product % curve_p
 776:curve-specific.inc ****    from http://www.nsa.gov/ia/_files/nist-routines.pdf */
 777:curve-specific.inc **** #if uECC_WORD_SIZE == 1
 778:curve-specific.inc **** static void vli_mmod_fast_secp256r1(uint8_t *result, uint8_t *product) {
 779:curve-specific.inc ****     uint8_t tmp[num_words_secp256r1];
 780:curve-specific.inc ****     int8_t carry;
 781:curve-specific.inc ****     
 782:curve-specific.inc ****     /* t */
 783:curve-specific.inc ****     uECC_vli_set(result, product, num_words_secp256r1);
 784:curve-specific.inc ****     
 785:curve-specific.inc ****     /* s1 */
 786:curve-specific.inc ****     tmp[0] = tmp[1] = tmp[2] = tmp[3] = 0;
 787:curve-specific.inc ****     tmp[4] = tmp[5] = tmp[6] = tmp[7] = 0;
 788:curve-specific.inc ****     tmp[8] = tmp[9] = tmp[10] = tmp[11] = 0;
 789:curve-specific.inc ****     tmp[12] = product[44]; tmp[13] = product[45]; tmp[14] = product[46]; tmp[15] = product[47];
 790:curve-specific.inc ****     tmp[16] = product[48]; tmp[17] = product[49]; tmp[18] = product[50]; tmp[19] = product[51];
 791:curve-specific.inc ****     tmp[20] = product[52]; tmp[21] = product[53]; tmp[22] = product[54]; tmp[23] = product[55];
 792:curve-specific.inc ****     tmp[24] = product[56]; tmp[25] = product[57]; tmp[26] = product[58]; tmp[27] = product[59];
 793:curve-specific.inc ****     tmp[28] = product[60]; tmp[29] = product[61]; tmp[30] = product[62]; tmp[31] = product[63];
 794:curve-specific.inc ****     carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 795:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 796:curve-specific.inc ****     
 797:curve-specific.inc ****     /* s2 */
 798:curve-specific.inc ****     tmp[12] = product[48]; tmp[13] = product[49]; tmp[14] = product[50]; tmp[15] = product[51];
 799:curve-specific.inc ****     tmp[16] = product[52]; tmp[17] = product[53]; tmp[18] = product[54]; tmp[19] = product[55];
 800:curve-specific.inc ****     tmp[20] = product[56]; tmp[21] = product[57]; tmp[22] = product[58]; tmp[23] = product[59];
 801:curve-specific.inc ****     tmp[24] = product[60]; tmp[25] = product[61]; tmp[26] = product[62]; tmp[27] = product[63];
 802:curve-specific.inc ****     tmp[28] = tmp[29] = tmp[30] = tmp[31] = 0;
 803:curve-specific.inc ****     carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 804:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 805:curve-specific.inc ****     
 806:curve-specific.inc ****     /* s3 */
 807:curve-specific.inc ****     tmp[0] = product[32]; tmp[1] = product[33]; tmp[2] = product[34]; tmp[3] = product[35];
 808:curve-specific.inc ****     tmp[4] = product[36]; tmp[5] = product[37]; tmp[6] = product[38]; tmp[7] = product[39];
 809:curve-specific.inc ****     tmp[8] = product[40]; tmp[9] = product[41]; tmp[10] = product[42]; tmp[11] = product[43];
 810:curve-specific.inc ****     tmp[12] = tmp[13] = tmp[14] = tmp[15] = 0;
 811:curve-specific.inc ****     tmp[16] = tmp[17] = tmp[18] = tmp[19] = 0;
 812:curve-specific.inc ****     tmp[20] = tmp[21] = tmp[22] = tmp[23] = 0;
 813:curve-specific.inc ****     tmp[24] = product[56]; tmp[25] = product[57]; tmp[26] = product[58]; tmp[27] = product[59];
 814:curve-specific.inc ****     tmp[28] = product[60]; tmp[29] = product[61]; tmp[30] = product[62]; tmp[31] = product[63];
 815:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 816:curve-specific.inc ****     
 817:curve-specific.inc ****     /* s4 */
 818:curve-specific.inc ****     tmp[0] = product[36]; tmp[1] = product[37]; tmp[2] = product[38]; tmp[3] = product[39];
 819:curve-specific.inc ****     tmp[4] = product[40]; tmp[5] = product[41]; tmp[6] = product[42]; tmp[7] = product[43];
 820:curve-specific.inc ****     tmp[8] = product[44]; tmp[9] = product[45]; tmp[10] = product[46]; tmp[11] = product[47];
 821:curve-specific.inc ****     tmp[12] = product[52]; tmp[13] = product[53]; tmp[14] = product[54]; tmp[15] = product[55];
 822:curve-specific.inc ****     tmp[16] = product[56]; tmp[17] = product[57]; tmp[18] = product[58]; tmp[19] = product[59];
 823:curve-specific.inc ****     tmp[20] = product[60]; tmp[21] = product[61]; tmp[22] = product[62]; tmp[23] = product[63];
 824:curve-specific.inc ****     tmp[24] = product[52]; tmp[25] = product[53]; tmp[26] = product[54]; tmp[27] = product[55];
 825:curve-specific.inc ****     tmp[28] = product[32]; tmp[29] = product[33]; tmp[30] = product[34]; tmp[31] = product[35];
 826:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 827:curve-specific.inc ****     
 828:curve-specific.inc ****     /* d1 */
 829:curve-specific.inc ****     tmp[0] = product[44]; tmp[1] = product[45]; tmp[2] = product[46]; tmp[3] = product[47];
 830:curve-specific.inc ****     tmp[4] = product[48]; tmp[5] = product[49]; tmp[6] = product[50]; tmp[7] = product[51];
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 116


 831:curve-specific.inc ****     tmp[8] = product[52]; tmp[9] = product[53]; tmp[10] = product[54]; tmp[11] = product[55];
 832:curve-specific.inc ****     tmp[12] = tmp[13] = tmp[14] = tmp[15] = 0;
 833:curve-specific.inc ****     tmp[16] = tmp[17] = tmp[18] = tmp[19] = 0;
 834:curve-specific.inc ****     tmp[20] = tmp[21] = tmp[22] = tmp[23] = 0;
 835:curve-specific.inc ****     tmp[24] = product[32]; tmp[25] = product[33]; tmp[26] = product[34]; tmp[27] = product[35];
 836:curve-specific.inc ****     tmp[28] = product[40]; tmp[29] = product[41]; tmp[30] = product[42]; tmp[31] = product[43];
 837:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 838:curve-specific.inc ****     
 839:curve-specific.inc ****     /* d2 */
 840:curve-specific.inc ****     tmp[0] = product[48]; tmp[1] = product[49]; tmp[2] = product[50]; tmp[3] = product[51];
 841:curve-specific.inc ****     tmp[4] = product[52]; tmp[5] = product[53]; tmp[6] = product[54]; tmp[7] = product[55];
 842:curve-specific.inc ****     tmp[8] = product[56]; tmp[9] = product[57]; tmp[10] = product[58]; tmp[11] = product[59];
 843:curve-specific.inc ****     tmp[12] = product[60]; tmp[13] = product[61]; tmp[14] = product[62]; tmp[15] = product[63];
 844:curve-specific.inc ****     tmp[16] = tmp[17] = tmp[18] = tmp[19] = 0;
 845:curve-specific.inc ****     tmp[20] = tmp[21] = tmp[22] = tmp[23] = 0;
 846:curve-specific.inc ****     tmp[24] = product[36]; tmp[25] = product[37]; tmp[26] = product[38]; tmp[27] = product[39];
 847:curve-specific.inc ****     tmp[28] = product[44]; tmp[29] = product[45]; tmp[30] = product[46]; tmp[31] = product[47];
 848:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 849:curve-specific.inc ****     
 850:curve-specific.inc ****     /* d3 */
 851:curve-specific.inc ****     tmp[0] = product[52]; tmp[1] = product[53]; tmp[2] = product[54]; tmp[3] = product[55];
 852:curve-specific.inc ****     tmp[4] = product[56]; tmp[5] = product[57]; tmp[6] = product[58]; tmp[7] = product[59];
 853:curve-specific.inc ****     tmp[8] = product[60]; tmp[9] = product[61]; tmp[10] = product[62]; tmp[11] = product[63];
 854:curve-specific.inc ****     tmp[12] = product[32]; tmp[13] = product[33]; tmp[14] = product[34]; tmp[15] = product[35];
 855:curve-specific.inc ****     tmp[16] = product[36]; tmp[17] = product[37]; tmp[18] = product[38]; tmp[19] = product[39];
 856:curve-specific.inc ****     tmp[20] = product[40]; tmp[21] = product[41]; tmp[22] = product[42]; tmp[23] = product[43];
 857:curve-specific.inc ****     tmp[24] = tmp[25] = tmp[26] = tmp[27] = 0;
 858:curve-specific.inc ****     tmp[28] = product[48]; tmp[29] = product[49]; tmp[30] = product[50]; tmp[31] = product[51];
 859:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 860:curve-specific.inc ****     
 861:curve-specific.inc ****     /* d4 */
 862:curve-specific.inc ****     tmp[0] = product[56]; tmp[1] = product[57]; tmp[2] = product[58]; tmp[3] = product[59];
 863:curve-specific.inc ****     tmp[4] = product[60]; tmp[5] = product[61]; tmp[6] = product[62]; tmp[7] = product[63];
 864:curve-specific.inc ****     tmp[8] = tmp[9] = tmp[10] = tmp[11] = 0;
 865:curve-specific.inc ****     tmp[12] = product[36]; tmp[13] = product[37]; tmp[14] = product[38]; tmp[15] = product[39];
 866:curve-specific.inc ****     tmp[16] = product[40]; tmp[17] = product[41]; tmp[18] = product[42]; tmp[19] = product[43];
 867:curve-specific.inc ****     tmp[20] = product[44]; tmp[21] = product[45]; tmp[22] = product[46]; tmp[23] = product[47];
 868:curve-specific.inc ****     tmp[24] = tmp[25] = tmp[26] = tmp[27] = 0;
 869:curve-specific.inc ****     tmp[28] = product[52]; tmp[29] = product[53]; tmp[30] = product[54]; tmp[31] = product[55];
 870:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 871:curve-specific.inc ****     
 872:curve-specific.inc ****     if (carry < 0) {
 873:curve-specific.inc ****         do {
 874:curve-specific.inc ****             carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
 875:curve-specific.inc ****         } while (carry < 0);
 876:curve-specific.inc ****     } else {
 877:curve-specific.inc ****         while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
 878:curve-specific.inc ****             carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
 879:curve-specific.inc ****         }
 880:curve-specific.inc ****     }
 881:curve-specific.inc **** }
 882:curve-specific.inc **** #elif uECC_WORD_SIZE == 4
 883:curve-specific.inc **** static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 4304              		.loc 3 883 0
 4305              		.cfi_startproc
 4306              		@ args = 0, pretend = 0, frame = 48
 4307              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 117


 4308 0000 00B5     		push	{lr}
 4309              		.cfi_def_cfa_offset 4
 4310              		.cfi_offset 14, -4
 4311 0002 8DB0     		sub	sp, sp, #52
 4312              		.cfi_def_cfa_offset 56
 4313 0004 0190     		str	r0, [sp, #4]
 4314 0006 0091     		str	r1, [sp]
 884:curve-specific.inc ****     uint32_t tmp[num_words_secp256r1];
 885:curve-specific.inc ****     int carry;
 886:curve-specific.inc ****     
 887:curve-specific.inc ****     /* t */
 888:curve-specific.inc ****     uECC_vli_set(result, product, num_words_secp256r1);
 4315              		.loc 3 888 0
 4316 0008 0099     		ldr	r1, [sp]
 4317 000a 019B     		ldr	r3, [sp, #4]
 4318 000c 0822     		movs	r2, #8
 4319 000e 1800     		movs	r0, r3
 4320 0010 FFF7FEFF 		bl	uECC_vli_set
 889:curve-specific.inc ****     
 890:curve-specific.inc ****     /* s1 */
 891:curve-specific.inc ****     tmp[0] = tmp[1] = tmp[2] = 0;
 4321              		.loc 3 891 0
 4322 0014 03AB     		add	r3, sp, #12
 4323 0016 0022     		movs	r2, #0
 4324 0018 9A60     		str	r2, [r3, #8]
 4325 001a 03AB     		add	r3, sp, #12
 4326 001c 9A68     		ldr	r2, [r3, #8]
 4327 001e 03AB     		add	r3, sp, #12
 4328 0020 5A60     		str	r2, [r3, #4]
 4329 0022 03AB     		add	r3, sp, #12
 4330 0024 5A68     		ldr	r2, [r3, #4]
 4331 0026 03AB     		add	r3, sp, #12
 4332 0028 1A60     		str	r2, [r3]
 892:curve-specific.inc ****     tmp[3] = product[11];
 4333              		.loc 3 892 0
 4334 002a 009B     		ldr	r3, [sp]
 4335 002c DA6A     		ldr	r2, [r3, #44]
 4336 002e 03AB     		add	r3, sp, #12
 4337 0030 DA60     		str	r2, [r3, #12]
 893:curve-specific.inc ****     tmp[4] = product[12];
 4338              		.loc 3 893 0
 4339 0032 009B     		ldr	r3, [sp]
 4340 0034 1A6B     		ldr	r2, [r3, #48]
 4341 0036 03AB     		add	r3, sp, #12
 4342 0038 1A61     		str	r2, [r3, #16]
 894:curve-specific.inc ****     tmp[5] = product[13];
 4343              		.loc 3 894 0
 4344 003a 009B     		ldr	r3, [sp]
 4345 003c 5A6B     		ldr	r2, [r3, #52]
 4346 003e 03AB     		add	r3, sp, #12
 4347 0040 5A61     		str	r2, [r3, #20]
 895:curve-specific.inc ****     tmp[6] = product[14];
 4348              		.loc 3 895 0
 4349 0042 009B     		ldr	r3, [sp]
 4350 0044 9A6B     		ldr	r2, [r3, #56]
 4351 0046 03AB     		add	r3, sp, #12
 4352 0048 9A61     		str	r2, [r3, #24]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 118


 896:curve-specific.inc ****     tmp[7] = product[15];
 4353              		.loc 3 896 0
 4354 004a 009B     		ldr	r3, [sp]
 4355 004c DA6B     		ldr	r2, [r3, #60]
 4356 004e 03AB     		add	r3, sp, #12
 4357 0050 DA61     		str	r2, [r3, #28]
 897:curve-specific.inc ****     carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 4358              		.loc 3 897 0
 4359 0052 03AA     		add	r2, sp, #12
 4360 0054 03A9     		add	r1, sp, #12
 4361 0056 03A8     		add	r0, sp, #12
 4362 0058 0823     		movs	r3, #8
 4363 005a FFF7FEFF 		bl	uECC_vli_add
 4364 005e 0300     		movs	r3, r0
 4365 0060 0B93     		str	r3, [sp, #44]
 898:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 4366              		.loc 3 898 0
 4367 0062 03AA     		add	r2, sp, #12
 4368 0064 0199     		ldr	r1, [sp, #4]
 4369 0066 0198     		ldr	r0, [sp, #4]
 4370 0068 0823     		movs	r3, #8
 4371 006a FFF7FEFF 		bl	uECC_vli_add
 4372 006e 0200     		movs	r2, r0
 4373 0070 0B9B     		ldr	r3, [sp, #44]
 4374 0072 D318     		adds	r3, r2, r3
 4375 0074 0B93     		str	r3, [sp, #44]
 899:curve-specific.inc ****     
 900:curve-specific.inc ****     /* s2 */
 901:curve-specific.inc ****     tmp[3] = product[12];
 4376              		.loc 3 901 0
 4377 0076 009B     		ldr	r3, [sp]
 4378 0078 1A6B     		ldr	r2, [r3, #48]
 4379 007a 03AB     		add	r3, sp, #12
 4380 007c DA60     		str	r2, [r3, #12]
 902:curve-specific.inc ****     tmp[4] = product[13];
 4381              		.loc 3 902 0
 4382 007e 009B     		ldr	r3, [sp]
 4383 0080 5A6B     		ldr	r2, [r3, #52]
 4384 0082 03AB     		add	r3, sp, #12
 4385 0084 1A61     		str	r2, [r3, #16]
 903:curve-specific.inc ****     tmp[5] = product[14];
 4386              		.loc 3 903 0
 4387 0086 009B     		ldr	r3, [sp]
 4388 0088 9A6B     		ldr	r2, [r3, #56]
 4389 008a 03AB     		add	r3, sp, #12
 4390 008c 5A61     		str	r2, [r3, #20]
 904:curve-specific.inc ****     tmp[6] = product[15];
 4391              		.loc 3 904 0
 4392 008e 009B     		ldr	r3, [sp]
 4393 0090 DA6B     		ldr	r2, [r3, #60]
 4394 0092 03AB     		add	r3, sp, #12
 4395 0094 9A61     		str	r2, [r3, #24]
 905:curve-specific.inc ****     tmp[7] = 0;
 4396              		.loc 3 905 0
 4397 0096 03AB     		add	r3, sp, #12
 4398 0098 0022     		movs	r2, #0
 4399 009a DA61     		str	r2, [r3, #28]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 119


 906:curve-specific.inc ****     carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 4400              		.loc 3 906 0
 4401 009c 03AA     		add	r2, sp, #12
 4402 009e 03A9     		add	r1, sp, #12
 4403 00a0 03A8     		add	r0, sp, #12
 4404 00a2 0823     		movs	r3, #8
 4405 00a4 FFF7FEFF 		bl	uECC_vli_add
 4406 00a8 0200     		movs	r2, r0
 4407 00aa 0B9B     		ldr	r3, [sp, #44]
 4408 00ac D318     		adds	r3, r2, r3
 4409 00ae 0B93     		str	r3, [sp, #44]
 907:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 4410              		.loc 3 907 0
 4411 00b0 03AA     		add	r2, sp, #12
 4412 00b2 0199     		ldr	r1, [sp, #4]
 4413 00b4 0198     		ldr	r0, [sp, #4]
 4414 00b6 0823     		movs	r3, #8
 4415 00b8 FFF7FEFF 		bl	uECC_vli_add
 4416 00bc 0200     		movs	r2, r0
 4417 00be 0B9B     		ldr	r3, [sp, #44]
 4418 00c0 D318     		adds	r3, r2, r3
 4419 00c2 0B93     		str	r3, [sp, #44]
 908:curve-specific.inc ****     
 909:curve-specific.inc ****     /* s3 */
 910:curve-specific.inc ****     tmp[0] = product[8];
 4420              		.loc 3 910 0
 4421 00c4 009B     		ldr	r3, [sp]
 4422 00c6 1A6A     		ldr	r2, [r3, #32]
 4423 00c8 03AB     		add	r3, sp, #12
 4424 00ca 1A60     		str	r2, [r3]
 911:curve-specific.inc ****     tmp[1] = product[9];
 4425              		.loc 3 911 0
 4426 00cc 009B     		ldr	r3, [sp]
 4427 00ce 5A6A     		ldr	r2, [r3, #36]
 4428 00d0 03AB     		add	r3, sp, #12
 4429 00d2 5A60     		str	r2, [r3, #4]
 912:curve-specific.inc ****     tmp[2] = product[10];
 4430              		.loc 3 912 0
 4431 00d4 009B     		ldr	r3, [sp]
 4432 00d6 9A6A     		ldr	r2, [r3, #40]
 4433 00d8 03AB     		add	r3, sp, #12
 4434 00da 9A60     		str	r2, [r3, #8]
 913:curve-specific.inc ****     tmp[3] = tmp[4] = tmp[5] = 0;
 4435              		.loc 3 913 0
 4436 00dc 03AB     		add	r3, sp, #12
 4437 00de 0022     		movs	r2, #0
 4438 00e0 5A61     		str	r2, [r3, #20]
 4439 00e2 03AB     		add	r3, sp, #12
 4440 00e4 5A69     		ldr	r2, [r3, #20]
 4441 00e6 03AB     		add	r3, sp, #12
 4442 00e8 1A61     		str	r2, [r3, #16]
 4443 00ea 03AB     		add	r3, sp, #12
 4444 00ec 1A69     		ldr	r2, [r3, #16]
 4445 00ee 03AB     		add	r3, sp, #12
 4446 00f0 DA60     		str	r2, [r3, #12]
 914:curve-specific.inc ****     tmp[6] = product[14];
 4447              		.loc 3 914 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 120


 4448 00f2 009B     		ldr	r3, [sp]
 4449 00f4 9A6B     		ldr	r2, [r3, #56]
 4450 00f6 03AB     		add	r3, sp, #12
 4451 00f8 9A61     		str	r2, [r3, #24]
 915:curve-specific.inc ****     tmp[7] = product[15];
 4452              		.loc 3 915 0
 4453 00fa 009B     		ldr	r3, [sp]
 4454 00fc DA6B     		ldr	r2, [r3, #60]
 4455 00fe 03AB     		add	r3, sp, #12
 4456 0100 DA61     		str	r2, [r3, #28]
 916:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 4457              		.loc 3 916 0
 4458 0102 03AA     		add	r2, sp, #12
 4459 0104 0199     		ldr	r1, [sp, #4]
 4460 0106 0198     		ldr	r0, [sp, #4]
 4461 0108 0823     		movs	r3, #8
 4462 010a FFF7FEFF 		bl	uECC_vli_add
 4463 010e 0200     		movs	r2, r0
 4464 0110 0B9B     		ldr	r3, [sp, #44]
 4465 0112 D318     		adds	r3, r2, r3
 4466 0114 0B93     		str	r3, [sp, #44]
 917:curve-specific.inc ****     
 918:curve-specific.inc ****     /* s4 */
 919:curve-specific.inc ****     tmp[0] = product[9];
 4467              		.loc 3 919 0
 4468 0116 009B     		ldr	r3, [sp]
 4469 0118 5A6A     		ldr	r2, [r3, #36]
 4470 011a 03AB     		add	r3, sp, #12
 4471 011c 1A60     		str	r2, [r3]
 920:curve-specific.inc ****     tmp[1] = product[10];
 4472              		.loc 3 920 0
 4473 011e 009B     		ldr	r3, [sp]
 4474 0120 9A6A     		ldr	r2, [r3, #40]
 4475 0122 03AB     		add	r3, sp, #12
 4476 0124 5A60     		str	r2, [r3, #4]
 921:curve-specific.inc ****     tmp[2] = product[11];
 4477              		.loc 3 921 0
 4478 0126 009B     		ldr	r3, [sp]
 4479 0128 DA6A     		ldr	r2, [r3, #44]
 4480 012a 03AB     		add	r3, sp, #12
 4481 012c 9A60     		str	r2, [r3, #8]
 922:curve-specific.inc ****     tmp[3] = product[13];
 4482              		.loc 3 922 0
 4483 012e 009B     		ldr	r3, [sp]
 4484 0130 5A6B     		ldr	r2, [r3, #52]
 4485 0132 03AB     		add	r3, sp, #12
 4486 0134 DA60     		str	r2, [r3, #12]
 923:curve-specific.inc ****     tmp[4] = product[14];
 4487              		.loc 3 923 0
 4488 0136 009B     		ldr	r3, [sp]
 4489 0138 9A6B     		ldr	r2, [r3, #56]
 4490 013a 03AB     		add	r3, sp, #12
 4491 013c 1A61     		str	r2, [r3, #16]
 924:curve-specific.inc ****     tmp[5] = product[15];
 4492              		.loc 3 924 0
 4493 013e 009B     		ldr	r3, [sp]
 4494 0140 DA6B     		ldr	r2, [r3, #60]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 121


 4495 0142 03AB     		add	r3, sp, #12
 4496 0144 5A61     		str	r2, [r3, #20]
 925:curve-specific.inc ****     tmp[6] = product[13];
 4497              		.loc 3 925 0
 4498 0146 009B     		ldr	r3, [sp]
 4499 0148 5A6B     		ldr	r2, [r3, #52]
 4500 014a 03AB     		add	r3, sp, #12
 4501 014c 9A61     		str	r2, [r3, #24]
 926:curve-specific.inc ****     tmp[7] = product[8];
 4502              		.loc 3 926 0
 4503 014e 009B     		ldr	r3, [sp]
 4504 0150 1A6A     		ldr	r2, [r3, #32]
 4505 0152 03AB     		add	r3, sp, #12
 4506 0154 DA61     		str	r2, [r3, #28]
 927:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 4507              		.loc 3 927 0
 4508 0156 03AA     		add	r2, sp, #12
 4509 0158 0199     		ldr	r1, [sp, #4]
 4510 015a 0198     		ldr	r0, [sp, #4]
 4511 015c 0823     		movs	r3, #8
 4512 015e FFF7FEFF 		bl	uECC_vli_add
 4513 0162 0200     		movs	r2, r0
 4514 0164 0B9B     		ldr	r3, [sp, #44]
 4515 0166 D318     		adds	r3, r2, r3
 4516 0168 0B93     		str	r3, [sp, #44]
 928:curve-specific.inc ****     
 929:curve-specific.inc ****     /* d1 */
 930:curve-specific.inc ****     tmp[0] = product[11];
 4517              		.loc 3 930 0
 4518 016a 009B     		ldr	r3, [sp]
 4519 016c DA6A     		ldr	r2, [r3, #44]
 4520 016e 03AB     		add	r3, sp, #12
 4521 0170 1A60     		str	r2, [r3]
 931:curve-specific.inc ****     tmp[1] = product[12];
 4522              		.loc 3 931 0
 4523 0172 009B     		ldr	r3, [sp]
 4524 0174 1A6B     		ldr	r2, [r3, #48]
 4525 0176 03AB     		add	r3, sp, #12
 4526 0178 5A60     		str	r2, [r3, #4]
 932:curve-specific.inc ****     tmp[2] = product[13];
 4527              		.loc 3 932 0
 4528 017a 009B     		ldr	r3, [sp]
 4529 017c 5A6B     		ldr	r2, [r3, #52]
 4530 017e 03AB     		add	r3, sp, #12
 4531 0180 9A60     		str	r2, [r3, #8]
 933:curve-specific.inc ****     tmp[3] = tmp[4] = tmp[5] = 0;
 4532              		.loc 3 933 0
 4533 0182 03AB     		add	r3, sp, #12
 4534 0184 0022     		movs	r2, #0
 4535 0186 5A61     		str	r2, [r3, #20]
 4536 0188 03AB     		add	r3, sp, #12
 4537 018a 5A69     		ldr	r2, [r3, #20]
 4538 018c 03AB     		add	r3, sp, #12
 4539 018e 1A61     		str	r2, [r3, #16]
 4540 0190 03AB     		add	r3, sp, #12
 4541 0192 1A69     		ldr	r2, [r3, #16]
 4542 0194 03AB     		add	r3, sp, #12
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 122


 4543 0196 DA60     		str	r2, [r3, #12]
 934:curve-specific.inc ****     tmp[6] = product[8];
 4544              		.loc 3 934 0
 4545 0198 009B     		ldr	r3, [sp]
 4546 019a 1A6A     		ldr	r2, [r3, #32]
 4547 019c 03AB     		add	r3, sp, #12
 4548 019e 9A61     		str	r2, [r3, #24]
 935:curve-specific.inc ****     tmp[7] = product[10];
 4549              		.loc 3 935 0
 4550 01a0 009B     		ldr	r3, [sp]
 4551 01a2 9A6A     		ldr	r2, [r3, #40]
 4552 01a4 03AB     		add	r3, sp, #12
 4553 01a6 DA61     		str	r2, [r3, #28]
 936:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 4554              		.loc 3 936 0
 4555 01a8 03AA     		add	r2, sp, #12
 4556 01aa 0199     		ldr	r1, [sp, #4]
 4557 01ac 0198     		ldr	r0, [sp, #4]
 4558 01ae 0823     		movs	r3, #8
 4559 01b0 FFF7FEFF 		bl	uECC_vli_sub
 4560 01b4 0200     		movs	r2, r0
 4561 01b6 0B9B     		ldr	r3, [sp, #44]
 4562 01b8 9B1A     		subs	r3, r3, r2
 4563 01ba 0B93     		str	r3, [sp, #44]
 937:curve-specific.inc ****     
 938:curve-specific.inc ****     /* d2 */
 939:curve-specific.inc ****     tmp[0] = product[12];
 4564              		.loc 3 939 0
 4565 01bc 009B     		ldr	r3, [sp]
 4566 01be 1A6B     		ldr	r2, [r3, #48]
 4567 01c0 03AB     		add	r3, sp, #12
 4568 01c2 1A60     		str	r2, [r3]
 940:curve-specific.inc ****     tmp[1] = product[13];
 4569              		.loc 3 940 0
 4570 01c4 009B     		ldr	r3, [sp]
 4571 01c6 5A6B     		ldr	r2, [r3, #52]
 4572 01c8 03AB     		add	r3, sp, #12
 4573 01ca 5A60     		str	r2, [r3, #4]
 941:curve-specific.inc ****     tmp[2] = product[14];
 4574              		.loc 3 941 0
 4575 01cc 009B     		ldr	r3, [sp]
 4576 01ce 9A6B     		ldr	r2, [r3, #56]
 4577 01d0 03AB     		add	r3, sp, #12
 4578 01d2 9A60     		str	r2, [r3, #8]
 942:curve-specific.inc ****     tmp[3] = product[15];
 4579              		.loc 3 942 0
 4580 01d4 009B     		ldr	r3, [sp]
 4581 01d6 DA6B     		ldr	r2, [r3, #60]
 4582 01d8 03AB     		add	r3, sp, #12
 4583 01da DA60     		str	r2, [r3, #12]
 943:curve-specific.inc ****     tmp[4] = tmp[5] = 0;
 4584              		.loc 3 943 0
 4585 01dc 03AB     		add	r3, sp, #12
 4586 01de 0022     		movs	r2, #0
 4587 01e0 5A61     		str	r2, [r3, #20]
 4588 01e2 03AB     		add	r3, sp, #12
 4589 01e4 5A69     		ldr	r2, [r3, #20]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 123


 4590 01e6 03AB     		add	r3, sp, #12
 4591 01e8 1A61     		str	r2, [r3, #16]
 944:curve-specific.inc ****     tmp[6] = product[9];
 4592              		.loc 3 944 0
 4593 01ea 009B     		ldr	r3, [sp]
 4594 01ec 5A6A     		ldr	r2, [r3, #36]
 4595 01ee 03AB     		add	r3, sp, #12
 4596 01f0 9A61     		str	r2, [r3, #24]
 945:curve-specific.inc ****     tmp[7] = product[11];
 4597              		.loc 3 945 0
 4598 01f2 009B     		ldr	r3, [sp]
 4599 01f4 DA6A     		ldr	r2, [r3, #44]
 4600 01f6 03AB     		add	r3, sp, #12
 4601 01f8 DA61     		str	r2, [r3, #28]
 946:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 4602              		.loc 3 946 0
 4603 01fa 03AA     		add	r2, sp, #12
 4604 01fc 0199     		ldr	r1, [sp, #4]
 4605 01fe 0198     		ldr	r0, [sp, #4]
 4606 0200 0823     		movs	r3, #8
 4607 0202 FFF7FEFF 		bl	uECC_vli_sub
 4608 0206 0200     		movs	r2, r0
 4609 0208 0B9B     		ldr	r3, [sp, #44]
 4610 020a 9B1A     		subs	r3, r3, r2
 4611 020c 0B93     		str	r3, [sp, #44]
 947:curve-specific.inc ****     
 948:curve-specific.inc ****     /* d3 */
 949:curve-specific.inc ****     tmp[0] = product[13];
 4612              		.loc 3 949 0
 4613 020e 009B     		ldr	r3, [sp]
 4614 0210 5A6B     		ldr	r2, [r3, #52]
 4615 0212 03AB     		add	r3, sp, #12
 4616 0214 1A60     		str	r2, [r3]
 950:curve-specific.inc ****     tmp[1] = product[14];
 4617              		.loc 3 950 0
 4618 0216 009B     		ldr	r3, [sp]
 4619 0218 9A6B     		ldr	r2, [r3, #56]
 4620 021a 03AB     		add	r3, sp, #12
 4621 021c 5A60     		str	r2, [r3, #4]
 951:curve-specific.inc ****     tmp[2] = product[15];
 4622              		.loc 3 951 0
 4623 021e 009B     		ldr	r3, [sp]
 4624 0220 DA6B     		ldr	r2, [r3, #60]
 4625 0222 03AB     		add	r3, sp, #12
 4626 0224 9A60     		str	r2, [r3, #8]
 952:curve-specific.inc ****     tmp[3] = product[8];
 4627              		.loc 3 952 0
 4628 0226 009B     		ldr	r3, [sp]
 4629 0228 1A6A     		ldr	r2, [r3, #32]
 4630 022a 03AB     		add	r3, sp, #12
 4631 022c DA60     		str	r2, [r3, #12]
 953:curve-specific.inc ****     tmp[4] = product[9];
 4632              		.loc 3 953 0
 4633 022e 009B     		ldr	r3, [sp]
 4634 0230 5A6A     		ldr	r2, [r3, #36]
 4635 0232 03AB     		add	r3, sp, #12
 4636 0234 1A61     		str	r2, [r3, #16]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 124


 954:curve-specific.inc ****     tmp[5] = product[10];
 4637              		.loc 3 954 0
 4638 0236 009B     		ldr	r3, [sp]
 4639 0238 9A6A     		ldr	r2, [r3, #40]
 4640 023a 03AB     		add	r3, sp, #12
 4641 023c 5A61     		str	r2, [r3, #20]
 955:curve-specific.inc ****     tmp[6] = 0;
 4642              		.loc 3 955 0
 4643 023e 03AB     		add	r3, sp, #12
 4644 0240 0022     		movs	r2, #0
 4645 0242 9A61     		str	r2, [r3, #24]
 956:curve-specific.inc ****     tmp[7] = product[12];
 4646              		.loc 3 956 0
 4647 0244 009B     		ldr	r3, [sp]
 4648 0246 1A6B     		ldr	r2, [r3, #48]
 4649 0248 03AB     		add	r3, sp, #12
 4650 024a DA61     		str	r2, [r3, #28]
 957:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 4651              		.loc 3 957 0
 4652 024c 03AA     		add	r2, sp, #12
 4653 024e 0199     		ldr	r1, [sp, #4]
 4654 0250 0198     		ldr	r0, [sp, #4]
 4655 0252 0823     		movs	r3, #8
 4656 0254 FFF7FEFF 		bl	uECC_vli_sub
 4657 0258 0200     		movs	r2, r0
 4658 025a 0B9B     		ldr	r3, [sp, #44]
 4659 025c 9B1A     		subs	r3, r3, r2
 4660 025e 0B93     		str	r3, [sp, #44]
 958:curve-specific.inc ****     
 959:curve-specific.inc ****     /* d4 */
 960:curve-specific.inc ****     tmp[0] = product[14];
 4661              		.loc 3 960 0
 4662 0260 009B     		ldr	r3, [sp]
 4663 0262 9A6B     		ldr	r2, [r3, #56]
 4664 0264 03AB     		add	r3, sp, #12
 4665 0266 1A60     		str	r2, [r3]
 961:curve-specific.inc ****     tmp[1] = product[15];
 4666              		.loc 3 961 0
 4667 0268 009B     		ldr	r3, [sp]
 4668 026a DA6B     		ldr	r2, [r3, #60]
 4669 026c 03AB     		add	r3, sp, #12
 4670 026e 5A60     		str	r2, [r3, #4]
 962:curve-specific.inc ****     tmp[2] = 0;
 4671              		.loc 3 962 0
 4672 0270 03AB     		add	r3, sp, #12
 4673 0272 0022     		movs	r2, #0
 4674 0274 9A60     		str	r2, [r3, #8]
 963:curve-specific.inc ****     tmp[3] = product[9];
 4675              		.loc 3 963 0
 4676 0276 009B     		ldr	r3, [sp]
 4677 0278 5A6A     		ldr	r2, [r3, #36]
 4678 027a 03AB     		add	r3, sp, #12
 4679 027c DA60     		str	r2, [r3, #12]
 964:curve-specific.inc ****     tmp[4] = product[10];
 4680              		.loc 3 964 0
 4681 027e 009B     		ldr	r3, [sp]
 4682 0280 9A6A     		ldr	r2, [r3, #40]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 125


 4683 0282 03AB     		add	r3, sp, #12
 4684 0284 1A61     		str	r2, [r3, #16]
 965:curve-specific.inc ****     tmp[5] = product[11];
 4685              		.loc 3 965 0
 4686 0286 009B     		ldr	r3, [sp]
 4687 0288 DA6A     		ldr	r2, [r3, #44]
 4688 028a 03AB     		add	r3, sp, #12
 4689 028c 5A61     		str	r2, [r3, #20]
 966:curve-specific.inc ****     tmp[6] = 0;
 4690              		.loc 3 966 0
 4691 028e 03AB     		add	r3, sp, #12
 4692 0290 0022     		movs	r2, #0
 4693 0292 9A61     		str	r2, [r3, #24]
 967:curve-specific.inc ****     tmp[7] = product[13];
 4694              		.loc 3 967 0
 4695 0294 009B     		ldr	r3, [sp]
 4696 0296 5A6B     		ldr	r2, [r3, #52]
 4697 0298 03AB     		add	r3, sp, #12
 4698 029a DA61     		str	r2, [r3, #28]
 968:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 4699              		.loc 3 968 0
 4700 029c 03AA     		add	r2, sp, #12
 4701 029e 0199     		ldr	r1, [sp, #4]
 4702 02a0 0198     		ldr	r0, [sp, #4]
 4703 02a2 0823     		movs	r3, #8
 4704 02a4 FFF7FEFF 		bl	uECC_vli_sub
 4705 02a8 0200     		movs	r2, r0
 4706 02aa 0B9B     		ldr	r3, [sp, #44]
 4707 02ac 9B1A     		subs	r3, r3, r2
 4708 02ae 0B93     		str	r3, [sp, #44]
 969:curve-specific.inc ****     
 970:curve-specific.inc ****     if (carry < 0) {
 4709              		.loc 3 970 0
 4710 02b0 0B9B     		ldr	r3, [sp, #44]
 4711 02b2 002B     		cmp	r3, #0
 4712 02b4 17DA     		bge	.L176
 4713              	.L174:
 971:curve-specific.inc ****         do {
 972:curve-specific.inc ****             carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
 4714              		.loc 3 972 0 discriminator 1
 4715 02b6 134A     		ldr	r2, .L179
 4716 02b8 0199     		ldr	r1, [sp, #4]
 4717 02ba 0198     		ldr	r0, [sp, #4]
 4718 02bc 0823     		movs	r3, #8
 4719 02be FFF7FEFF 		bl	uECC_vli_add
 4720 02c2 0200     		movs	r2, r0
 4721 02c4 0B9B     		ldr	r3, [sp, #44]
 4722 02c6 D318     		adds	r3, r2, r3
 4723 02c8 0B93     		str	r3, [sp, #44]
 973:curve-specific.inc ****         } while (carry < 0);
 4724              		.loc 3 973 0 discriminator 1
 4725 02ca 0B9B     		ldr	r3, [sp, #44]
 4726 02cc 002B     		cmp	r3, #0
 4727 02ce F2DB     		blt	.L174
 974:curve-specific.inc ****     } else {
 975:curve-specific.inc ****         while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
 976:curve-specific.inc ****             carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 126


 977:curve-specific.inc ****         }
 978:curve-specific.inc ****     }
 979:curve-specific.inc **** }
 4728              		.loc 3 979 0
 4729 02d0 15E0     		b	.L178
 4730              	.L177:
 976:curve-specific.inc ****         }
 4731              		.loc 3 976 0
 4732 02d2 0C4A     		ldr	r2, .L179
 4733 02d4 0199     		ldr	r1, [sp, #4]
 4734 02d6 0198     		ldr	r0, [sp, #4]
 4735 02d8 0823     		movs	r3, #8
 4736 02da FFF7FEFF 		bl	uECC_vli_sub
 4737 02de 0200     		movs	r2, r0
 4738 02e0 0B9B     		ldr	r3, [sp, #44]
 4739 02e2 9B1A     		subs	r3, r3, r2
 4740 02e4 0B93     		str	r3, [sp, #44]
 4741              	.L176:
 975:curve-specific.inc ****             carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
 4742              		.loc 3 975 0
 4743 02e6 0B9B     		ldr	r3, [sp, #44]
 4744 02e8 002B     		cmp	r3, #0
 4745 02ea F2D1     		bne	.L177
 975:curve-specific.inc ****             carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
 4746              		.loc 3 975 0 is_stmt 0 discriminator 1
 4747 02ec 0199     		ldr	r1, [sp, #4]
 4748 02ee 054B     		ldr	r3, .L179
 4749 02f0 0822     		movs	r2, #8
 4750 02f2 1800     		movs	r0, r3
 4751 02f4 FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 4752 02f8 0300     		movs	r3, r0
 4753 02fa 012B     		cmp	r3, #1
 4754 02fc E9D1     		bne	.L177
 4755              	.L178:
 4756              		.loc 3 979 0 is_stmt 1
 4757 02fe C046     		nop
 4758 0300 0DB0     		add	sp, sp, #52
 4759              		@ sp needed
 4760 0302 00BD     		pop	{pc}
 4761              	.L180:
 4762              		.align	2
 4763              	.L179:
 4764 0304 20020000 		.word	curve_secp256r1+4
 4765              		.cfi_endproc
 4766              	.LFE41:
 4767              		.size	vli_mmod_fast_secp256r1, .-vli_mmod_fast_secp256r1
 4768              		.section	.rodata
 4769              		.align	2
 4770              		.type	curve_secp256k1, %object
 4771              		.size	curve_secp256k1, 180
 4772              	curve_secp256k1:
 4773 02d0 08       		.byte	8
 4774 02d1 20       		.byte	32
 4775 02d2 0001     		.short	256
 4776 02d4 2FFCFFFF 		.word	-977
 4777 02d8 FEFFFFFF 		.word	-2
 4778 02dc FFFFFFFF 		.word	-1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 127


 4779 02e0 FFFFFFFF 		.word	-1
 4780 02e4 FFFFFFFF 		.word	-1
 4781 02e8 FFFFFFFF 		.word	-1
 4782 02ec FFFFFFFF 		.word	-1
 4783 02f0 FFFFFFFF 		.word	-1
 4784 02f4 414136D0 		.word	-801750719
 4785 02f8 8C5ED2BF 		.word	-1076732276
 4786 02fc 3BA048AF 		.word	-1354194885
 4787 0300 E6DCAEBA 		.word	-1162945306
 4788 0304 FEFFFFFF 		.word	-2
 4789 0308 FFFFFFFF 		.word	-1
 4790 030c FFFFFFFF 		.word	-1
 4791 0310 FFFFFFFF 		.word	-1
 4792 0314 9817F816 		.word	385357720
 4793 0318 5B81F259 		.word	1509065051
 4794 031c D928CE2D 		.word	768485593
 4795 0320 DBFC9B02 		.word	43777243
 4796 0324 070B87CE 		.word	-830010617
 4797 0328 9562A055 		.word	1436574357
 4798 032c ACBBDCF9 		.word	-102974548
 4799 0330 7E66BE79 		.word	2042521214
 4800 0334 B8D410FB 		.word	-82783048
 4801 0338 8FD0479C 		.word	-1673015153
 4802 033c 195485A6 		.word	-1501211623
 4803 0340 48B417FD 		.word	-48778168
 4804 0344 A808110E 		.word	235997352
 4805 0348 FCFBA45D 		.word	1571093500
 4806 034c 65C4A326 		.word	648266853
 4807 0350 77DA3A48 		.word	1211816567
 4808 0354 07000000 		.word	7
 4809 0358 00000000 		.word	0
 4810 035c 00000000 		.word	0
 4811 0360 00000000 		.word	0
 4812 0364 00000000 		.word	0
 4813 0368 00000000 		.word	0
 4814 036c 00000000 		.word	0
 4815 0370 00000000 		.word	0
 4816 0374 00000000 		.word	double_jacobian_secp256k1
 4817 0378 00000000 		.word	mod_sqrt_default
 4818 037c 00000000 		.word	x_side_secp256k1
 4819 0380 00000000 		.word	vli_mmod_fast_secp256k1
 4820              		.section	.text.uECC_secp256k1,"ax",%progbits
 4821              		.align	2
 4822              		.global	uECC_secp256k1
 4823              		.code	16
 4824              		.thumb_func
 4825              		.type	uECC_secp256k1, %function
 4826              	uECC_secp256k1:
 4827              	.LFB42:
 980:curve-specific.inc **** #else
 981:curve-specific.inc **** static void vli_mmod_fast_secp256r1(uint64_t *result, uint64_t *product) {
 982:curve-specific.inc ****     uint64_t tmp[num_words_secp256r1];
 983:curve-specific.inc ****     int carry;
 984:curve-specific.inc ****     
 985:curve-specific.inc ****     /* t */
 986:curve-specific.inc ****     uECC_vli_set(result, product, num_words_secp256r1);
 987:curve-specific.inc ****     
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 128


 988:curve-specific.inc ****     /* s1 */
 989:curve-specific.inc ****     tmp[0] = 0;
 990:curve-specific.inc ****     tmp[1] = product[5] & 0xffffffff00000000ull;
 991:curve-specific.inc ****     tmp[2] = product[6];
 992:curve-specific.inc ****     tmp[3] = product[7];
 993:curve-specific.inc ****     carry = (int)uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 994:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 995:curve-specific.inc ****     
 996:curve-specific.inc ****     /* s2 */
 997:curve-specific.inc ****     tmp[1] = product[6] << 32;
 998:curve-specific.inc ****     tmp[2] = (product[6] >> 32) | (product[7] << 32);
 999:curve-specific.inc ****     tmp[3] = product[7] >> 32;
1000:curve-specific.inc ****     carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
1001:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
1002:curve-specific.inc ****     
1003:curve-specific.inc ****     /* s3 */
1004:curve-specific.inc ****     tmp[0] = product[4];
1005:curve-specific.inc ****     tmp[1] = product[5] & 0xffffffff;
1006:curve-specific.inc ****     tmp[2] = 0;
1007:curve-specific.inc ****     tmp[3] = product[7];
1008:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
1009:curve-specific.inc ****     
1010:curve-specific.inc ****     /* s4 */
1011:curve-specific.inc ****     tmp[0] = (product[4] >> 32) | (product[5] << 32);
1012:curve-specific.inc ****     tmp[1] = (product[5] >> 32) | (product[6] & 0xffffffff00000000ull);
1013:curve-specific.inc ****     tmp[2] = product[7];
1014:curve-specific.inc ****     tmp[3] = (product[6] >> 32) | (product[4] << 32);
1015:curve-specific.inc ****     carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
1016:curve-specific.inc ****     
1017:curve-specific.inc ****     /* d1 */
1018:curve-specific.inc ****     tmp[0] = (product[5] >> 32) | (product[6] << 32);
1019:curve-specific.inc ****     tmp[1] = (product[6] >> 32);
1020:curve-specific.inc ****     tmp[2] = 0;
1021:curve-specific.inc ****     tmp[3] = (product[4] & 0xffffffff) | (product[5] << 32);
1022:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
1023:curve-specific.inc ****     
1024:curve-specific.inc ****     /* d2 */
1025:curve-specific.inc ****     tmp[0] = product[6];
1026:curve-specific.inc ****     tmp[1] = product[7];
1027:curve-specific.inc ****     tmp[2] = 0;
1028:curve-specific.inc ****     tmp[3] = (product[4] >> 32) | (product[5] & 0xffffffff00000000ull);
1029:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
1030:curve-specific.inc ****     
1031:curve-specific.inc ****     /* d3 */
1032:curve-specific.inc ****     tmp[0] = (product[6] >> 32) | (product[7] << 32);
1033:curve-specific.inc ****     tmp[1] = (product[7] >> 32) | (product[4] << 32);
1034:curve-specific.inc ****     tmp[2] = (product[4] >> 32) | (product[5] << 32);
1035:curve-specific.inc ****     tmp[3] = (product[6] << 32);
1036:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
1037:curve-specific.inc ****     
1038:curve-specific.inc ****     /* d4 */
1039:curve-specific.inc ****     tmp[0] = product[7];
1040:curve-specific.inc ****     tmp[1] = product[4] & 0xffffffff00000000ull;
1041:curve-specific.inc ****     tmp[2] = product[5];
1042:curve-specific.inc ****     tmp[3] = product[6] & 0xffffffff00000000ull;
1043:curve-specific.inc ****     carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
1044:curve-specific.inc ****     
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 129


1045:curve-specific.inc ****     if (carry < 0) {
1046:curve-specific.inc ****         do {
1047:curve-specific.inc ****             carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
1048:curve-specific.inc ****         } while (carry < 0);
1049:curve-specific.inc ****     } else {
1050:curve-specific.inc ****         while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
1051:curve-specific.inc ****             carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
1052:curve-specific.inc ****         }
1053:curve-specific.inc ****     }
1054:curve-specific.inc **** }
1055:curve-specific.inc **** #endif /* uECC_WORD_SIZE */
1056:curve-specific.inc **** #endif /* (uECC_OPTIMIZATION_LEVEL > 0 && !asm_mmod_fast_secp256r1) */
1057:curve-specific.inc **** 
1058:curve-specific.inc **** #endif /* uECC_SUPPORTS_secp256r1 */
1059:curve-specific.inc **** 
1060:curve-specific.inc **** #if uECC_SUPPORTS_secp256k1
1061:curve-specific.inc **** 
1062:curve-specific.inc **** static void double_jacobian_secp256k1(uECC_word_t * X1,
1063:curve-specific.inc ****                                       uECC_word_t * Y1,
1064:curve-specific.inc ****                                       uECC_word_t * Z1,
1065:curve-specific.inc ****                                       uECC_Curve curve);
1066:curve-specific.inc **** static void x_side_secp256k1(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve);
1067:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0)
1068:curve-specific.inc **** static void vli_mmod_fast_secp256k1(uECC_word_t *result, uECC_word_t *product);
1069:curve-specific.inc **** #endif
1070:curve-specific.inc **** 
1071:curve-specific.inc **** static const struct uECC_Curve_t curve_secp256k1 = {
1072:curve-specific.inc ****     num_words_secp256k1,
1073:curve-specific.inc ****     num_bytes_secp256k1,
1074:curve-specific.inc ****     256, /* num_n_bits */
1075:curve-specific.inc ****     { BYTES_TO_WORDS_8(2F, FC, FF, FF, FE, FF, FF, FF),
1076:curve-specific.inc ****         BYTES_TO_WORDS_8(FF, FF, FF, FF, FF, FF, FF, FF),
1077:curve-specific.inc ****         BYTES_TO_WORDS_8(FF, FF, FF, FF, FF, FF, FF, FF),
1078:curve-specific.inc ****         BYTES_TO_WORDS_8(FF, FF, FF, FF, FF, FF, FF, FF) },
1079:curve-specific.inc ****     { BYTES_TO_WORDS_8(41, 41, 36, D0, 8C, 5E, D2, BF),
1080:curve-specific.inc ****         BYTES_TO_WORDS_8(3B, A0, 48, AF, E6, DC, AE, BA),
1081:curve-specific.inc ****         BYTES_TO_WORDS_8(FE, FF, FF, FF, FF, FF, FF, FF),
1082:curve-specific.inc ****         BYTES_TO_WORDS_8(FF, FF, FF, FF, FF, FF, FF, FF) },
1083:curve-specific.inc ****     { BYTES_TO_WORDS_8(98, 17, F8, 16, 5B, 81, F2, 59),
1084:curve-specific.inc ****         BYTES_TO_WORDS_8(D9, 28, CE, 2D, DB, FC, 9B, 02),
1085:curve-specific.inc ****         BYTES_TO_WORDS_8(07, 0B, 87, CE, 95, 62, A0, 55),
1086:curve-specific.inc ****         BYTES_TO_WORDS_8(AC, BB, DC, F9, 7E, 66, BE, 79),
1087:curve-specific.inc **** 
1088:curve-specific.inc ****         BYTES_TO_WORDS_8(B8, D4, 10, FB, 8F, D0, 47, 9C),
1089:curve-specific.inc ****         BYTES_TO_WORDS_8(19, 54, 85, A6, 48, B4, 17, FD),
1090:curve-specific.inc ****         BYTES_TO_WORDS_8(A8, 08, 11, 0E, FC, FB, A4, 5D),
1091:curve-specific.inc ****         BYTES_TO_WORDS_8(65, C4, A3, 26, 77, DA, 3A, 48) },
1092:curve-specific.inc ****     { BYTES_TO_WORDS_8(07, 00, 00, 00, 00, 00, 00, 00),
1093:curve-specific.inc ****         BYTES_TO_WORDS_8(00, 00, 00, 00, 00, 00, 00, 00),
1094:curve-specific.inc ****         BYTES_TO_WORDS_8(00, 00, 00, 00, 00, 00, 00, 00),
1095:curve-specific.inc ****         BYTES_TO_WORDS_8(00, 00, 00, 00, 00, 00, 00, 00) },
1096:curve-specific.inc ****     &double_jacobian_secp256k1,
1097:curve-specific.inc **** #if uECC_SUPPORT_COMPRESSED_POINT
1098:curve-specific.inc ****     &mod_sqrt_default,
1099:curve-specific.inc **** #endif
1100:curve-specific.inc ****     &x_side_secp256k1,
1101:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0)
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 130


1102:curve-specific.inc ****     &vli_mmod_fast_secp256k1
1103:curve-specific.inc **** #endif
1104:curve-specific.inc **** };
1105:curve-specific.inc **** 
1106:curve-specific.inc **** uECC_Curve uECC_secp256k1(void) { return &curve_secp256k1; }
 4828              		.loc 3 1106 0
 4829              		.cfi_startproc
 4830              		@ args = 0, pretend = 0, frame = 0
 4831              		@ frame_needed = 0, uses_anonymous_args = 0
 4832              		@ link register save eliminated.
 4833              		.loc 3 1106 0
 4834 0000 014B     		ldr	r3, .L183
 4835 0002 1800     		movs	r0, r3
 4836              		@ sp needed
 4837 0004 7047     		bx	lr
 4838              	.L184:
 4839 0006 C046     		.align	2
 4840              	.L183:
 4841 0008 D0020000 		.word	curve_secp256k1
 4842              		.cfi_endproc
 4843              	.LFE42:
 4844              		.size	uECC_secp256k1, .-uECC_secp256k1
 4845              		.section	.text.double_jacobian_secp256k1,"ax",%progbits
 4846              		.align	2
 4847              		.code	16
 4848              		.thumb_func
 4849              		.type	double_jacobian_secp256k1, %function
 4850              	double_jacobian_secp256k1:
 4851              	.LFB43:
1107:curve-specific.inc **** 
1108:curve-specific.inc **** 
1109:curve-specific.inc **** /* Double in place */
1110:curve-specific.inc **** static void double_jacobian_secp256k1(uECC_word_t * X1,
1111:curve-specific.inc ****                                       uECC_word_t * Y1,
1112:curve-specific.inc ****                                       uECC_word_t * Z1,
1113:curve-specific.inc ****                                       uECC_Curve curve) {
 4852              		.loc 3 1113 0
 4853              		.cfi_startproc
 4854              		@ args = 0, pretend = 0, frame = 88
 4855              		@ frame_needed = 0, uses_anonymous_args = 0
 4856 0000 10B5     		push	{r4, lr}
 4857              		.cfi_def_cfa_offset 8
 4858              		.cfi_offset 4, -8
 4859              		.cfi_offset 14, -4
 4860 0002 98B0     		sub	sp, sp, #96
 4861              		.cfi_def_cfa_offset 104
 4862 0004 0590     		str	r0, [sp, #20]
 4863 0006 0491     		str	r1, [sp, #16]
 4864 0008 0392     		str	r2, [sp, #12]
 4865 000a 0293     		str	r3, [sp, #8]
1114:curve-specific.inc ****     /* t1 = X, t2 = Y, t3 = Z */
1115:curve-specific.inc ****     uECC_word_t t4[num_words_secp256k1];
1116:curve-specific.inc ****     uECC_word_t t5[num_words_secp256k1];
1117:curve-specific.inc ****     
1118:curve-specific.inc ****     if (uECC_vli_isZero(Z1, num_words_secp256k1)) {
 4866              		.loc 3 1118 0
 4867 000c 039B     		ldr	r3, [sp, #12]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 131


 4868 000e 0821     		movs	r1, #8
 4869 0010 1800     		movs	r0, r3
 4870 0012 FFF7FEFF 		bl	uECC_vli_isZero
 4871 0016 031E     		subs	r3, r0, #0
 4872 0018 00D0     		beq	.LCB3896
 4873 001a 8AE0     		b	.L190	@long jump
 4874              	.LCB3896:
1119:curve-specific.inc ****         return;
1120:curve-specific.inc ****     }
1121:curve-specific.inc ****     
1122:curve-specific.inc ****     uECC_vli_modSquare_fast(t5, Y1, curve);   /* t5 = y1^2 */
 4875              		.loc 3 1122 0
 4876 001c 029A     		ldr	r2, [sp, #8]
 4877 001e 0499     		ldr	r1, [sp, #16]
 4878 0020 07AB     		add	r3, sp, #28
 4879 0022 1800     		movs	r0, r3
 4880 0024 FFF7FEFF 		bl	uECC_vli_modSquare_fast
1123:curve-specific.inc ****     uECC_vli_modMult_fast(t4, X1, t5, curve); /* t4 = x1*y1^2 = A */
 4881              		.loc 3 1123 0
 4882 0028 029B     		ldr	r3, [sp, #8]
 4883 002a 07AA     		add	r2, sp, #28
 4884 002c 0599     		ldr	r1, [sp, #20]
 4885 002e 0FA8     		add	r0, sp, #60
 4886 0030 FFF7FEFF 		bl	uECC_vli_modMult_fast
1124:curve-specific.inc ****     uECC_vli_modSquare_fast(X1, X1, curve);   /* t1 = x1^2 */
 4887              		.loc 3 1124 0
 4888 0034 029A     		ldr	r2, [sp, #8]
 4889 0036 0599     		ldr	r1, [sp, #20]
 4890 0038 059B     		ldr	r3, [sp, #20]
 4891 003a 1800     		movs	r0, r3
 4892 003c FFF7FEFF 		bl	uECC_vli_modSquare_fast
1125:curve-specific.inc ****     uECC_vli_modSquare_fast(t5, t5, curve);   /* t5 = y1^4 */
 4893              		.loc 3 1125 0
 4894 0040 029A     		ldr	r2, [sp, #8]
 4895 0042 07A9     		add	r1, sp, #28
 4896 0044 07AB     		add	r3, sp, #28
 4897 0046 1800     		movs	r0, r3
 4898 0048 FFF7FEFF 		bl	uECC_vli_modSquare_fast
1126:curve-specific.inc ****     uECC_vli_modMult_fast(Z1, Y1, Z1, curve); /* t3 = y1*z1 = z3 */
 4899              		.loc 3 1126 0
 4900 004c 029B     		ldr	r3, [sp, #8]
 4901 004e 039A     		ldr	r2, [sp, #12]
 4902 0050 0499     		ldr	r1, [sp, #16]
 4903 0052 0398     		ldr	r0, [sp, #12]
 4904 0054 FFF7FEFF 		bl	uECC_vli_modMult_fast
1127:curve-specific.inc ****     
1128:curve-specific.inc ****     uECC_vli_modAdd(Y1, X1, X1, curve->p, num_words_secp256k1); /* t2 = 2*x1^2 */
 4905              		.loc 3 1128 0
 4906 0058 029B     		ldr	r3, [sp, #8]
 4907 005a 1C1D     		adds	r4, r3, #4
 4908 005c 059A     		ldr	r2, [sp, #20]
 4909 005e 0599     		ldr	r1, [sp, #20]
 4910 0060 0498     		ldr	r0, [sp, #16]
 4911 0062 0823     		movs	r3, #8
 4912 0064 0093     		str	r3, [sp]
 4913 0066 2300     		movs	r3, r4
 4914 0068 FFF7FEFF 		bl	uECC_vli_modAdd
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 132


1129:curve-specific.inc ****     uECC_vli_modAdd(Y1, Y1, X1, curve->p, num_words_secp256k1); /* t2 = 3*x1^2 */
 4915              		.loc 3 1129 0
 4916 006c 029B     		ldr	r3, [sp, #8]
 4917 006e 1C1D     		adds	r4, r3, #4
 4918 0070 059A     		ldr	r2, [sp, #20]
 4919 0072 0499     		ldr	r1, [sp, #16]
 4920 0074 0498     		ldr	r0, [sp, #16]
 4921 0076 0823     		movs	r3, #8
 4922 0078 0093     		str	r3, [sp]
 4923 007a 2300     		movs	r3, r4
 4924 007c FFF7FEFF 		bl	uECC_vli_modAdd
1130:curve-specific.inc ****     if (uECC_vli_testBit(Y1, 0)) {
 4925              		.loc 3 1130 0
 4926 0080 049B     		ldr	r3, [sp, #16]
 4927 0082 0021     		movs	r1, #0
 4928 0084 1800     		movs	r0, r3
 4929 0086 FFF7FEFF 		bl	uECC_vli_testBit
 4930 008a 031E     		subs	r3, r0, #0
 4931 008c 17D0     		beq	.L188
 4932              	.LBB8:
1131:curve-specific.inc ****         uECC_word_t carry = uECC_vli_add(Y1, Y1, curve->p, num_words_secp256k1);
 4933              		.loc 3 1131 0
 4934 008e 029B     		ldr	r3, [sp, #8]
 4935 0090 1A1D     		adds	r2, r3, #4
 4936 0092 0499     		ldr	r1, [sp, #16]
 4937 0094 0498     		ldr	r0, [sp, #16]
 4938 0096 0823     		movs	r3, #8
 4939 0098 FFF7FEFF 		bl	uECC_vli_add
 4940 009c 0300     		movs	r3, r0
 4941 009e 1793     		str	r3, [sp, #92]
1132:curve-specific.inc ****         uECC_vli_rshift1(Y1, num_words_secp256k1);
 4942              		.loc 3 1132 0
 4943 00a0 049B     		ldr	r3, [sp, #16]
 4944 00a2 0821     		movs	r1, #8
 4945 00a4 1800     		movs	r0, r3
 4946 00a6 FFF7FEFF 		bl	uECC_vli_rshift1
1133:curve-specific.inc ****         Y1[num_words_secp256k1 - 1] |= carry << (uECC_WORD_BITS - 1);
 4947              		.loc 3 1133 0
 4948 00aa 049B     		ldr	r3, [sp, #16]
 4949 00ac 1C33     		adds	r3, r3, #28
 4950 00ae 049A     		ldr	r2, [sp, #16]
 4951 00b0 1C32     		adds	r2, r2, #28
 4952 00b2 1168     		ldr	r1, [r2]
 4953 00b4 179A     		ldr	r2, [sp, #92]
 4954 00b6 D207     		lsls	r2, r2, #31
 4955 00b8 0A43     		orrs	r2, r1
 4956 00ba 1A60     		str	r2, [r3]
 4957              	.LBE8:
 4958 00bc 04E0     		b	.L189
 4959              	.L188:
1134:curve-specific.inc ****     } else {
1135:curve-specific.inc ****         uECC_vli_rshift1(Y1, num_words_secp256k1);
 4960              		.loc 3 1135 0
 4961 00be 049B     		ldr	r3, [sp, #16]
 4962 00c0 0821     		movs	r1, #8
 4963 00c2 1800     		movs	r0, r3
 4964 00c4 FFF7FEFF 		bl	uECC_vli_rshift1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 133


 4965              	.L189:
1136:curve-specific.inc ****     }
1137:curve-specific.inc ****     /* t2 = 3/2*(x1^2) = B */
1138:curve-specific.inc ****     
1139:curve-specific.inc ****     uECC_vli_modSquare_fast(X1, Y1, curve);                     /* t1 = B^2 */
 4966              		.loc 3 1139 0
 4967 00c8 029A     		ldr	r2, [sp, #8]
 4968 00ca 0499     		ldr	r1, [sp, #16]
 4969 00cc 059B     		ldr	r3, [sp, #20]
 4970 00ce 1800     		movs	r0, r3
 4971 00d0 FFF7FEFF 		bl	uECC_vli_modSquare_fast
1140:curve-specific.inc ****     uECC_vli_modSub(X1, X1, t4, curve->p, num_words_secp256k1); /* t1 = B^2 - A */
 4972              		.loc 3 1140 0
 4973 00d4 029B     		ldr	r3, [sp, #8]
 4974 00d6 1C1D     		adds	r4, r3, #4
 4975 00d8 0FAA     		add	r2, sp, #60
 4976 00da 0599     		ldr	r1, [sp, #20]
 4977 00dc 0598     		ldr	r0, [sp, #20]
 4978 00de 0823     		movs	r3, #8
 4979 00e0 0093     		str	r3, [sp]
 4980 00e2 2300     		movs	r3, r4
 4981 00e4 FFF7FEFF 		bl	uECC_vli_modSub
1141:curve-specific.inc ****     uECC_vli_modSub(X1, X1, t4, curve->p, num_words_secp256k1); /* t1 = B^2 - 2A = x3 */
 4982              		.loc 3 1141 0
 4983 00e8 029B     		ldr	r3, [sp, #8]
 4984 00ea 1C1D     		adds	r4, r3, #4
 4985 00ec 0FAA     		add	r2, sp, #60
 4986 00ee 0599     		ldr	r1, [sp, #20]
 4987 00f0 0598     		ldr	r0, [sp, #20]
 4988 00f2 0823     		movs	r3, #8
 4989 00f4 0093     		str	r3, [sp]
 4990 00f6 2300     		movs	r3, r4
 4991 00f8 FFF7FEFF 		bl	uECC_vli_modSub
1142:curve-specific.inc ****     
1143:curve-specific.inc ****     uECC_vli_modSub(t4, t4, X1, curve->p, num_words_secp256k1); /* t4 = A - x3 */
 4992              		.loc 3 1143 0
 4993 00fc 029B     		ldr	r3, [sp, #8]
 4994 00fe 1C1D     		adds	r4, r3, #4
 4995 0100 059A     		ldr	r2, [sp, #20]
 4996 0102 0FA9     		add	r1, sp, #60
 4997 0104 0FA8     		add	r0, sp, #60
 4998 0106 0823     		movs	r3, #8
 4999 0108 0093     		str	r3, [sp]
 5000 010a 2300     		movs	r3, r4
 5001 010c FFF7FEFF 		bl	uECC_vli_modSub
1144:curve-specific.inc ****     uECC_vli_modMult_fast(Y1, Y1, t4, curve);                   /* t2 = B * (A - x3) */
 5002              		.loc 3 1144 0
 5003 0110 029B     		ldr	r3, [sp, #8]
 5004 0112 0FAA     		add	r2, sp, #60
 5005 0114 0499     		ldr	r1, [sp, #16]
 5006 0116 0498     		ldr	r0, [sp, #16]
 5007 0118 FFF7FEFF 		bl	uECC_vli_modMult_fast
1145:curve-specific.inc ****     uECC_vli_modSub(Y1, Y1, t5, curve->p, num_words_secp256k1); /* t2 = B * (A - x3) - y1^4 = y3 */
 5008              		.loc 3 1145 0
 5009 011c 029B     		ldr	r3, [sp, #8]
 5010 011e 1C1D     		adds	r4, r3, #4
 5011 0120 07AA     		add	r2, sp, #28
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 134


 5012 0122 0499     		ldr	r1, [sp, #16]
 5013 0124 0498     		ldr	r0, [sp, #16]
 5014 0126 0823     		movs	r3, #8
 5015 0128 0093     		str	r3, [sp]
 5016 012a 2300     		movs	r3, r4
 5017 012c FFF7FEFF 		bl	uECC_vli_modSub
 5018 0130 00E0     		b	.L185
 5019              	.L190:
1119:curve-specific.inc ****     }
 5020              		.loc 3 1119 0
 5021 0132 C046     		nop
 5022              	.L185:
1146:curve-specific.inc **** }
 5023              		.loc 3 1146 0
 5024 0134 18B0     		add	sp, sp, #96
 5025              		@ sp needed
 5026 0136 10BD     		pop	{r4, pc}
 5027              		.cfi_endproc
 5028              	.LFE43:
 5029              		.size	double_jacobian_secp256k1, .-double_jacobian_secp256k1
 5030              		.section	.text.x_side_secp256k1,"ax",%progbits
 5031              		.align	2
 5032              		.code	16
 5033              		.thumb_func
 5034              		.type	x_side_secp256k1, %function
 5035              	x_side_secp256k1:
 5036              	.LFB44:
1147:curve-specific.inc **** 
1148:curve-specific.inc **** /* Computes result = x^3 + b. result must not overlap x. */
1149:curve-specific.inc **** static void x_side_secp256k1(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
 5037              		.loc 3 1149 0
 5038              		.cfi_startproc
 5039              		@ args = 0, pretend = 0, frame = 16
 5040              		@ frame_needed = 0, uses_anonymous_args = 0
 5041 0000 10B5     		push	{r4, lr}
 5042              		.cfi_def_cfa_offset 8
 5043              		.cfi_offset 4, -8
 5044              		.cfi_offset 14, -4
 5045 0002 86B0     		sub	sp, sp, #24
 5046              		.cfi_def_cfa_offset 32
 5047 0004 0590     		str	r0, [sp, #20]
 5048 0006 0491     		str	r1, [sp, #16]
 5049 0008 0392     		str	r2, [sp, #12]
1150:curve-specific.inc ****     uECC_vli_modSquare_fast(result, x, curve);                                /* r = x^2 */
 5050              		.loc 3 1150 0
 5051 000a 039A     		ldr	r2, [sp, #12]
 5052 000c 0499     		ldr	r1, [sp, #16]
 5053 000e 059B     		ldr	r3, [sp, #20]
 5054 0010 1800     		movs	r0, r3
 5055 0012 FFF7FEFF 		bl	uECC_vli_modSquare_fast
1151:curve-specific.inc ****     uECC_vli_modMult_fast(result, result, x, curve);                          /* r = x^3 */
 5056              		.loc 3 1151 0
 5057 0016 039B     		ldr	r3, [sp, #12]
 5058 0018 049A     		ldr	r2, [sp, #16]
 5059 001a 0599     		ldr	r1, [sp, #20]
 5060 001c 0598     		ldr	r0, [sp, #20]
 5061 001e FFF7FEFF 		bl	uECC_vli_modMult_fast
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 135


1152:curve-specific.inc ****     uECC_vli_modAdd(result, result, curve->b, curve->p, num_words_secp256k1); /* r = x^3 + b */
 5062              		.loc 3 1152 0
 5063 0022 039B     		ldr	r3, [sp, #12]
 5064 0024 8433     		adds	r3, r3, #132
 5065 0026 1A00     		movs	r2, r3
 5066 0028 039B     		ldr	r3, [sp, #12]
 5067 002a 1C1D     		adds	r4, r3, #4
 5068 002c 0599     		ldr	r1, [sp, #20]
 5069 002e 0598     		ldr	r0, [sp, #20]
 5070 0030 0823     		movs	r3, #8
 5071 0032 0093     		str	r3, [sp]
 5072 0034 2300     		movs	r3, r4
 5073 0036 FFF7FEFF 		bl	uECC_vli_modAdd
1153:curve-specific.inc **** }
 5074              		.loc 3 1153 0
 5075 003a C046     		nop
 5076 003c 06B0     		add	sp, sp, #24
 5077              		@ sp needed
 5078 003e 10BD     		pop	{r4, pc}
 5079              		.cfi_endproc
 5080              	.LFE44:
 5081              		.size	x_side_secp256k1, .-x_side_secp256k1
 5082              		.section	.text.vli_mmod_fast_secp256k1,"ax",%progbits
 5083              		.align	2
 5084              		.code	16
 5085              		.thumb_func
 5086              		.type	vli_mmod_fast_secp256k1, %function
 5087              	vli_mmod_fast_secp256k1:
 5088              	.LFB45:
1154:curve-specific.inc **** 
1155:curve-specific.inc **** #if (uECC_OPTIMIZATION_LEVEL > 0 && !asm_mmod_fast_secp256k1)
1156:curve-specific.inc **** static void omega_mult_secp256k1(uECC_word_t *result, const uECC_word_t *right);
1157:curve-specific.inc **** static void vli_mmod_fast_secp256k1(uECC_word_t *result, uECC_word_t *product) {
 5089              		.loc 3 1157 0
 5090              		.cfi_startproc
 5091              		@ args = 0, pretend = 0, frame = 80
 5092              		@ frame_needed = 0, uses_anonymous_args = 0
 5093 0000 00B5     		push	{lr}
 5094              		.cfi_def_cfa_offset 4
 5095              		.cfi_offset 14, -4
 5096 0002 95B0     		sub	sp, sp, #84
 5097              		.cfi_def_cfa_offset 88
 5098 0004 0190     		str	r0, [sp, #4]
 5099 0006 0091     		str	r1, [sp]
1158:curve-specific.inc ****     uECC_word_t tmp[2 * num_words_secp256k1];
1159:curve-specific.inc ****     uECC_word_t carry;
1160:curve-specific.inc ****     
1161:curve-specific.inc ****     uECC_vli_clear(tmp, num_words_secp256k1);
 5100              		.loc 3 1161 0
 5101 0008 03AB     		add	r3, sp, #12
 5102 000a 0821     		movs	r1, #8
 5103 000c 1800     		movs	r0, r3
 5104 000e FFF7FEFF 		bl	uECC_vli_clear
1162:curve-specific.inc ****     uECC_vli_clear(tmp + num_words_secp256k1, num_words_secp256k1);
 5105              		.loc 3 1162 0
 5106 0012 03AB     		add	r3, sp, #12
 5107 0014 2033     		adds	r3, r3, #32
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 136


 5108 0016 0821     		movs	r1, #8
 5109 0018 1800     		movs	r0, r3
 5110 001a FFF7FEFF 		bl	uECC_vli_clear
1163:curve-specific.inc ****     
1164:curve-specific.inc ****     omega_mult_secp256k1(tmp, product + num_words_secp256k1); /* (Rq, q) = q * c */
 5111              		.loc 3 1164 0
 5112 001e 009B     		ldr	r3, [sp]
 5113 0020 2033     		adds	r3, r3, #32
 5114 0022 1A00     		movs	r2, r3
 5115 0024 03AB     		add	r3, sp, #12
 5116 0026 1100     		movs	r1, r2
 5117 0028 1800     		movs	r0, r3
 5118 002a FFF7FEFF 		bl	omega_mult_secp256k1
1165:curve-specific.inc ****     
1166:curve-specific.inc ****     carry = uECC_vli_add(result, product, tmp, num_words_secp256k1); /* (C, r) = r + q       */
 5119              		.loc 3 1166 0
 5120 002e 03AA     		add	r2, sp, #12
 5121 0030 0099     		ldr	r1, [sp]
 5122 0032 0198     		ldr	r0, [sp, #4]
 5123 0034 0823     		movs	r3, #8
 5124 0036 FFF7FEFF 		bl	uECC_vli_add
 5125 003a 0300     		movs	r3, r0
 5126 003c 1393     		str	r3, [sp, #76]
1167:curve-specific.inc ****     uECC_vli_clear(product, num_words_secp256k1);
 5127              		.loc 3 1167 0
 5128 003e 009B     		ldr	r3, [sp]
 5129 0040 0821     		movs	r1, #8
 5130 0042 1800     		movs	r0, r3
 5131 0044 FFF7FEFF 		bl	uECC_vli_clear
1168:curve-specific.inc ****     omega_mult_secp256k1(product, tmp + num_words_secp256k1); /* Rq*c */
 5132              		.loc 3 1168 0
 5133 0048 03AB     		add	r3, sp, #12
 5134 004a 2033     		adds	r3, r3, #32
 5135 004c 009A     		ldr	r2, [sp]
 5136 004e 1900     		movs	r1, r3
 5137 0050 1000     		movs	r0, r2
 5138 0052 FFF7FEFF 		bl	omega_mult_secp256k1
1169:curve-specific.inc ****     carry += uECC_vli_add(result, result, product, num_words_secp256k1); /* (C1, r) = r + Rq*c */
 5139              		.loc 3 1169 0
 5140 0056 009A     		ldr	r2, [sp]
 5141 0058 0199     		ldr	r1, [sp, #4]
 5142 005a 0198     		ldr	r0, [sp, #4]
 5143 005c 0823     		movs	r3, #8
 5144 005e FFF7FEFF 		bl	uECC_vli_add
 5145 0062 0200     		movs	r2, r0
 5146 0064 139B     		ldr	r3, [sp, #76]
 5147 0066 9B18     		adds	r3, r3, r2
 5148 0068 1393     		str	r3, [sp, #76]
1170:curve-specific.inc ****     
1171:curve-specific.inc ****     while (carry > 0) {
 5149              		.loc 3 1171 0
 5150 006a 08E0     		b	.L193
 5151              	.L194:
1172:curve-specific.inc ****         --carry;
 5152              		.loc 3 1172 0
 5153 006c 139B     		ldr	r3, [sp, #76]
 5154 006e 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 137


 5155 0070 1393     		str	r3, [sp, #76]
1173:curve-specific.inc ****         uECC_vli_sub(result, result, curve_secp256k1.p, num_words_secp256k1);
 5156              		.loc 3 1173 0
 5157 0072 0D4A     		ldr	r2, .L197
 5158 0074 0199     		ldr	r1, [sp, #4]
 5159 0076 0198     		ldr	r0, [sp, #4]
 5160 0078 0823     		movs	r3, #8
 5161 007a FFF7FEFF 		bl	uECC_vli_sub
 5162              	.L193:
1171:curve-specific.inc ****         --carry;
 5163              		.loc 3 1171 0
 5164 007e 139B     		ldr	r3, [sp, #76]
 5165 0080 002B     		cmp	r3, #0
 5166 0082 F3D1     		bne	.L194
1174:curve-specific.inc ****     }
1175:curve-specific.inc ****     if (uECC_vli_cmp_unsafe(result, curve_secp256k1.p, num_words_secp256k1) > 0) {
 5167              		.loc 3 1175 0
 5168 0084 0849     		ldr	r1, .L197
 5169 0086 019B     		ldr	r3, [sp, #4]
 5170 0088 0822     		movs	r2, #8
 5171 008a 1800     		movs	r0, r3
 5172 008c FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 5173 0090 031E     		subs	r3, r0, #0
 5174 0092 05DD     		ble	.L196
1176:curve-specific.inc ****         uECC_vli_sub(result, result, curve_secp256k1.p, num_words_secp256k1);
 5175              		.loc 3 1176 0
 5176 0094 044A     		ldr	r2, .L197
 5177 0096 0199     		ldr	r1, [sp, #4]
 5178 0098 0198     		ldr	r0, [sp, #4]
 5179 009a 0823     		movs	r3, #8
 5180 009c FFF7FEFF 		bl	uECC_vli_sub
 5181              	.L196:
1177:curve-specific.inc ****     }
1178:curve-specific.inc **** }
 5182              		.loc 3 1178 0
 5183 00a0 C046     		nop
 5184 00a2 15B0     		add	sp, sp, #84
 5185              		@ sp needed
 5186 00a4 00BD     		pop	{pc}
 5187              	.L198:
 5188 00a6 C046     		.align	2
 5189              	.L197:
 5190 00a8 D4020000 		.word	curve_secp256k1+4
 5191              		.cfi_endproc
 5192              	.LFE45:
 5193              		.size	vli_mmod_fast_secp256k1, .-vli_mmod_fast_secp256k1
 5194              		.global	__aeabi_lmul
 5195              		.section	.text.omega_mult_secp256k1,"ax",%progbits
 5196              		.align	2
 5197              		.code	16
 5198              		.thumb_func
 5199              		.type	omega_mult_secp256k1, %function
 5200              	omega_mult_secp256k1:
 5201              	.LFB46:
1179:curve-specific.inc **** 
1180:curve-specific.inc **** #if uECC_WORD_SIZE == 1
1181:curve-specific.inc **** static void omega_mult_secp256k1(uint8_t * result, const uint8_t * right) {
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 138


1182:curve-specific.inc ****     /* Multiply by (2^32 + 2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1). */
1183:curve-specific.inc ****     uECC_word_t r0 = 0;
1184:curve-specific.inc ****     uECC_word_t r1 = 0;
1185:curve-specific.inc ****     uECC_word_t r2 = 0;
1186:curve-specific.inc ****     wordcount_t k;
1187:curve-specific.inc ****     
1188:curve-specific.inc ****     /* Multiply by (2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1). */
1189:curve-specific.inc ****     muladd(0xD1, right[0], &r0, &r1, &r2);
1190:curve-specific.inc ****     result[0] = r0;
1191:curve-specific.inc ****     r0 = r1;
1192:curve-specific.inc ****     r1 = r2;
1193:curve-specific.inc ****     /* r2 is still 0 */
1194:curve-specific.inc ****     
1195:curve-specific.inc ****     for (k = 1; k < num_words_secp256k1; ++k) {
1196:curve-specific.inc ****         muladd(0x03, right[k - 1], &r0, &r1, &r2);
1197:curve-specific.inc ****         muladd(0xD1, right[k], &r0, &r1, &r2);
1198:curve-specific.inc ****         result[k] = r0;
1199:curve-specific.inc ****         r0 = r1;
1200:curve-specific.inc ****         r1 = r2;
1201:curve-specific.inc ****         r2 = 0;
1202:curve-specific.inc ****     }
1203:curve-specific.inc ****     muladd(0x03, right[num_words_secp256k1 - 1], &r0, &r1, &r2);
1204:curve-specific.inc ****     result[num_words_secp256k1] = r0;
1205:curve-specific.inc ****     result[num_words_secp256k1 + 1] = r1;
1206:curve-specific.inc ****     /* add the 2^32 multiple */
1207:curve-specific.inc ****     result[4 + num_words_secp256k1] =
1208:curve-specific.inc ****         uECC_vli_add(result + 4, result + 4, right, num_words_secp256k1); 
1209:curve-specific.inc **** }
1210:curve-specific.inc **** #elif uECC_WORD_SIZE == 4
1211:curve-specific.inc **** static void omega_mult_secp256k1(uint32_t * result, const uint32_t * right) {
 5202              		.loc 3 1211 0
 5203              		.cfi_startproc
 5204              		@ args = 0, pretend = 0, frame = 40
 5205              		@ frame_needed = 0, uses_anonymous_args = 0
 5206 0000 70B5     		push	{r4, r5, r6, lr}
 5207              		.cfi_def_cfa_offset 16
 5208              		.cfi_offset 4, -16
 5209              		.cfi_offset 5, -12
 5210              		.cfi_offset 6, -8
 5211              		.cfi_offset 14, -4
 5212 0002 8AB0     		sub	sp, sp, #40
 5213              		.cfi_def_cfa_offset 56
 5214 0004 0590     		str	r0, [sp, #20]
 5215 0006 0491     		str	r1, [sp, #16]
1212:curve-specific.inc ****     /* Multiply by (2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1). */
1213:curve-specific.inc ****     uint32_t carry = 0;
 5216              		.loc 3 1213 0
 5217 0008 0023     		movs	r3, #0
 5218 000a 0993     		str	r3, [sp, #36]
1214:curve-specific.inc ****     wordcount_t k;
1215:curve-specific.inc ****     
1216:curve-specific.inc ****     for (k = 0; k < num_words_secp256k1; ++k) {
 5219              		.loc 3 1216 0
 5220 000c 1323     		movs	r3, #19
 5221 000e 04AA     		add	r2, sp, #16
 5222 0010 9446     		mov	ip, r2
 5223 0012 6344     		add	r3, r3, ip
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 139


 5224 0014 0022     		movs	r2, #0
 5225 0016 1A70     		strb	r2, [r3]
 5226 0018 3AE0     		b	.L200
 5227              	.L201:
 5228              	.LBB9:
1217:curve-specific.inc ****         uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
 5229              		.loc 3 1217 0 discriminator 3
 5230 001a 1323     		movs	r3, #19
 5231 001c 04AA     		add	r2, sp, #16
 5232 001e 9446     		mov	ip, r2
 5233 0020 6344     		add	r3, r3, ip
 5234 0022 1B78     		ldrb	r3, [r3]
 5235 0024 5BB2     		sxtb	r3, r3
 5236 0026 9B00     		lsls	r3, r3, #2
 5237 0028 049A     		ldr	r2, [sp, #16]
 5238 002a D318     		adds	r3, r2, r3
 5239 002c 1B68     		ldr	r3, [r3]
 5240 002e 0093     		str	r3, [sp]
 5241 0030 0023     		movs	r3, #0
 5242 0032 0193     		str	r3, [sp, #4]
 5243 0034 244A     		ldr	r2, .L202
 5244 0036 0023     		movs	r3, #0
 5245 0038 0098     		ldr	r0, [sp]
 5246 003a 0199     		ldr	r1, [sp, #4]
 5247 003c FFF7FEFF 		bl	__aeabi_lmul
 5248 0040 0300     		movs	r3, r0
 5249 0042 0C00     		movs	r4, r1
 5250 0044 099A     		ldr	r2, [sp, #36]
 5251 0046 1500     		movs	r5, r2
 5252 0048 0022     		movs	r2, #0
 5253 004a 1600     		movs	r6, r2
 5254 004c 5B19     		adds	r3, r3, r5
 5255 004e 7441     		adcs	r4, r4, r6
 5256 0050 0693     		str	r3, [sp, #24]
 5257 0052 0794     		str	r4, [sp, #28]
1218:curve-specific.inc ****         result[k] = (uint32_t) p;
 5258              		.loc 3 1218 0 discriminator 3
 5259 0054 1323     		movs	r3, #19
 5260 0056 04AA     		add	r2, sp, #16
 5261 0058 9446     		mov	ip, r2
 5262 005a 6344     		add	r3, r3, ip
 5263 005c 1B78     		ldrb	r3, [r3]
 5264 005e 5BB2     		sxtb	r3, r3
 5265 0060 9B00     		lsls	r3, r3, #2
 5266 0062 059A     		ldr	r2, [sp, #20]
 5267 0064 D318     		adds	r3, r2, r3
 5268 0066 069A     		ldr	r2, [sp, #24]
 5269 0068 1A60     		str	r2, [r3]
1219:curve-specific.inc ****         carry = p >> 32;
 5270              		.loc 3 1219 0 discriminator 3
 5271 006a 079B     		ldr	r3, [sp, #28]
 5272 006c 1B00     		lsrs	r3, r3, #0
 5273 006e 0293     		str	r3, [sp, #8]
 5274 0070 0023     		movs	r3, #0
 5275 0072 0393     		str	r3, [sp, #12]
 5276 0074 029B     		ldr	r3, [sp, #8]
 5277 0076 0993     		str	r3, [sp, #36]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 140


 5278              	.LBE9:
1216:curve-specific.inc ****         uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
 5279              		.loc 3 1216 0 discriminator 3
 5280 0078 1323     		movs	r3, #19
 5281 007a 04AA     		add	r2, sp, #16
 5282 007c 9446     		mov	ip, r2
 5283 007e 6344     		add	r3, r3, ip
 5284 0080 1B78     		ldrb	r3, [r3]
 5285 0082 0133     		adds	r3, r3, #1
 5286 0084 DAB2     		uxtb	r2, r3
 5287 0086 1323     		movs	r3, #19
 5288 0088 04A9     		add	r1, sp, #16
 5289 008a 8C46     		mov	ip, r1
 5290 008c 6344     		add	r3, r3, ip
 5291 008e 1A70     		strb	r2, [r3]
 5292              	.L200:
1216:curve-specific.inc ****         uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
 5293              		.loc 3 1216 0 is_stmt 0 discriminator 1
 5294 0090 1323     		movs	r3, #19
 5295 0092 04AA     		add	r2, sp, #16
 5296 0094 9446     		mov	ip, r2
 5297 0096 6344     		add	r3, r3, ip
 5298 0098 1B78     		ldrb	r3, [r3]
 5299 009a 5BB2     		sxtb	r3, r3
 5300 009c 072B     		cmp	r3, #7
 5301 009e BCDD     		ble	.L201
1220:curve-specific.inc ****     }
1221:curve-specific.inc ****     result[num_words_secp256k1] = carry;
 5302              		.loc 3 1221 0 is_stmt 1
 5303 00a0 059B     		ldr	r3, [sp, #20]
 5304 00a2 2033     		adds	r3, r3, #32
 5305 00a4 099A     		ldr	r2, [sp, #36]
 5306 00a6 1A60     		str	r2, [r3]
1222:curve-specific.inc ****     /* add the 2^32 multiple */
1223:curve-specific.inc ****     result[1 + num_words_secp256k1] =
 5307              		.loc 3 1223 0
 5308 00a8 059B     		ldr	r3, [sp, #20]
 5309 00aa 2433     		adds	r3, r3, #36
 5310 00ac 1C00     		movs	r4, r3
1224:curve-specific.inc ****         uECC_vli_add(result + 1, result + 1, right, num_words_secp256k1); 
 5311              		.loc 3 1224 0
 5312 00ae 059B     		ldr	r3, [sp, #20]
 5313 00b0 181D     		adds	r0, r3, #4
 5314 00b2 059B     		ldr	r3, [sp, #20]
 5315 00b4 191D     		adds	r1, r3, #4
 5316 00b6 049A     		ldr	r2, [sp, #16]
 5317 00b8 0823     		movs	r3, #8
 5318 00ba FFF7FEFF 		bl	uECC_vli_add
 5319 00be 0300     		movs	r3, r0
1223:curve-specific.inc ****         uECC_vli_add(result + 1, result + 1, right, num_words_secp256k1); 
 5320              		.loc 3 1223 0
 5321 00c0 2360     		str	r3, [r4]
1225:curve-specific.inc **** }
 5322              		.loc 3 1225 0
 5323 00c2 C046     		nop
 5324 00c4 0AB0     		add	sp, sp, #40
 5325              		@ sp needed
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 141


 5326 00c6 70BD     		pop	{r4, r5, r6, pc}
 5327              	.L203:
 5328              		.align	2
 5329              	.L202:
 5330 00c8 D1030000 		.word	977
 5331              		.cfi_endproc
 5332              	.LFE46:
 5333              		.size	omega_mult_secp256k1, .-omega_mult_secp256k1
 5334              		.section	.text.apply_z,"ax",%progbits
 5335              		.align	2
 5336              		.code	16
 5337              		.thumb_func
 5338              		.type	apply_z, %function
 5339              	apply_z:
 5340              	.LFB47:
 740:uECC.c        **** 
 741:uECC.c        **** /* ------ Point operations ------ */
 742:uECC.c        **** 
 743:uECC.c        **** #include "curve-specific.inc"
 744:uECC.c        **** 
 745:uECC.c        **** /* Returns 1 if 'point' is the point at infinity, 0 otherwise. */
 746:uECC.c        **** #define EccPoint_isZero(point, curve) uECC_vli_isZero((point), (curve)->num_words * 2)
 747:uECC.c        **** 
 748:uECC.c        **** /* Point multiplication algorithm using Montgomery's ladder with co-Z coordinates.
 749:uECC.c        **** From http://eprint.iacr.org/2011/338.pdf
 750:uECC.c        **** */
 751:uECC.c        **** 
 752:uECC.c        **** /* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
 753:uECC.c        **** static void apply_z(uECC_word_t * X1,
 754:uECC.c        ****                     uECC_word_t * Y1,
 755:uECC.c        ****                     const uECC_word_t * const Z,
 756:uECC.c        ****                     uECC_Curve curve) {
 5341              		.loc 2 756 0
 5342              		.cfi_startproc
 5343              		@ args = 0, pretend = 0, frame = 48
 5344              		@ frame_needed = 0, uses_anonymous_args = 0
 5345 0000 00B5     		push	{lr}
 5346              		.cfi_def_cfa_offset 4
 5347              		.cfi_offset 14, -4
 5348 0002 8DB0     		sub	sp, sp, #52
 5349              		.cfi_def_cfa_offset 56
 5350 0004 0390     		str	r0, [sp, #12]
 5351 0006 0291     		str	r1, [sp, #8]
 5352 0008 0192     		str	r2, [sp, #4]
 5353 000a 0093     		str	r3, [sp]
 757:uECC.c        ****     uECC_word_t t1[uECC_MAX_WORDS];
 758:uECC.c        **** 
 759:uECC.c        ****     uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 5354              		.loc 2 759 0
 5355 000c 009A     		ldr	r2, [sp]
 5356 000e 0199     		ldr	r1, [sp, #4]
 5357 0010 04AB     		add	r3, sp, #16
 5358 0012 1800     		movs	r0, r3
 5359 0014 FFF7FEFF 		bl	uECC_vli_modSquare_fast
 760:uECC.c        ****     uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 5360              		.loc 2 760 0
 5361 0018 009B     		ldr	r3, [sp]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 142


 5362 001a 04AA     		add	r2, sp, #16
 5363 001c 0399     		ldr	r1, [sp, #12]
 5364 001e 0398     		ldr	r0, [sp, #12]
 5365 0020 FFF7FEFF 		bl	uECC_vli_modMult_fast
 761:uECC.c        ****     uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 5366              		.loc 2 761 0
 5367 0024 009B     		ldr	r3, [sp]
 5368 0026 019A     		ldr	r2, [sp, #4]
 5369 0028 04A9     		add	r1, sp, #16
 5370 002a 04A8     		add	r0, sp, #16
 5371 002c FFF7FEFF 		bl	uECC_vli_modMult_fast
 762:uECC.c        ****     uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 5372              		.loc 2 762 0
 5373 0030 009B     		ldr	r3, [sp]
 5374 0032 04AA     		add	r2, sp, #16
 5375 0034 0299     		ldr	r1, [sp, #8]
 5376 0036 0298     		ldr	r0, [sp, #8]
 5377 0038 FFF7FEFF 		bl	uECC_vli_modMult_fast
 763:uECC.c        **** }
 5378              		.loc 2 763 0
 5379 003c C046     		nop
 5380 003e 0DB0     		add	sp, sp, #52
 5381              		@ sp needed
 5382 0040 00BD     		pop	{pc}
 5383              		.cfi_endproc
 5384              	.LFE47:
 5385              		.size	apply_z, .-apply_z
 5386 0042 C046     		.section	.text.XYcZ_initial_double,"ax",%progbits
 5387              		.align	2
 5388              		.code	16
 5389              		.thumb_func
 5390              		.type	XYcZ_initial_double, %function
 5391              	XYcZ_initial_double:
 5392              	.LFB48:
 764:uECC.c        **** 
 765:uECC.c        **** /* P = (x1, y1) => 2P, (x2, y2) => P' */
 766:uECC.c        **** static void XYcZ_initial_double(uECC_word_t * X1,
 767:uECC.c        ****                                 uECC_word_t * Y1,
 768:uECC.c        ****                                 uECC_word_t * X2,
 769:uECC.c        ****                                 uECC_word_t * Y2,
 770:uECC.c        ****                                 const uECC_word_t * const initial_Z,
 771:uECC.c        ****                                 uECC_Curve curve) {
 5393              		.loc 2 771 0
 5394              		.cfi_startproc
 5395              		@ args = 8, pretend = 0, frame = 56
 5396              		@ frame_needed = 0, uses_anonymous_args = 0
 5397 0000 10B5     		push	{r4, lr}
 5398              		.cfi_def_cfa_offset 8
 5399              		.cfi_offset 4, -8
 5400              		.cfi_offset 14, -4
 5401 0002 8EB0     		sub	sp, sp, #56
 5402              		.cfi_def_cfa_offset 64
 5403 0004 0390     		str	r0, [sp, #12]
 5404 0006 0291     		str	r1, [sp, #8]
 5405 0008 0192     		str	r2, [sp, #4]
 5406 000a 0093     		str	r3, [sp]
 772:uECC.c        ****     uECC_word_t z[uECC_MAX_WORDS];
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 143


 773:uECC.c        ****     wordcount_t num_words = curve->num_words;
 5407              		.loc 2 773 0
 5408 000c 3723     		movs	r3, #55
 5409 000e 6B44     		add	r3, r3, sp
 5410 0010 119A     		ldr	r2, [sp, #68]
 5411 0012 1278     		ldrb	r2, [r2]
 5412 0014 1A70     		strb	r2, [r3]
 774:uECC.c        ****     if (initial_Z) {
 5413              		.loc 2 774 0
 5414 0016 109B     		ldr	r3, [sp, #64]
 5415 0018 002B     		cmp	r3, #0
 5416 001a 09D0     		beq	.L206
 775:uECC.c        ****         uECC_vli_set(z, initial_Z, num_words);
 5417              		.loc 2 775 0
 5418 001c 3723     		movs	r3, #55
 5419 001e 6B44     		add	r3, r3, sp
 5420 0020 0022     		movs	r2, #0
 5421 0022 9A56     		ldrsb	r2, [r3, r2]
 5422 0024 1099     		ldr	r1, [sp, #64]
 5423 0026 05AB     		add	r3, sp, #20
 5424 0028 1800     		movs	r0, r3
 5425 002a FFF7FEFF 		bl	uECC_vli_set
 5426 002e 0BE0     		b	.L207
 5427              	.L206:
 776:uECC.c        ****     } else {
 777:uECC.c        ****         uECC_vli_clear(z, num_words);
 5428              		.loc 2 777 0
 5429 0030 3723     		movs	r3, #55
 5430 0032 6B44     		add	r3, r3, sp
 5431 0034 0022     		movs	r2, #0
 5432 0036 9A56     		ldrsb	r2, [r3, r2]
 5433 0038 05AB     		add	r3, sp, #20
 5434 003a 1100     		movs	r1, r2
 5435 003c 1800     		movs	r0, r3
 5436 003e FFF7FEFF 		bl	uECC_vli_clear
 778:uECC.c        ****         z[0] = 1;
 5437              		.loc 2 778 0
 5438 0042 05AB     		add	r3, sp, #20
 5439 0044 0122     		movs	r2, #1
 5440 0046 1A60     		str	r2, [r3]
 5441              	.L207:
 779:uECC.c        ****     }
 780:uECC.c        **** 
 781:uECC.c        ****     uECC_vli_set(X2, X1, num_words);
 5442              		.loc 2 781 0
 5443 0048 3723     		movs	r3, #55
 5444 004a 6B44     		add	r3, r3, sp
 5445 004c 0022     		movs	r2, #0
 5446 004e 9A56     		ldrsb	r2, [r3, r2]
 5447 0050 0399     		ldr	r1, [sp, #12]
 5448 0052 019B     		ldr	r3, [sp, #4]
 5449 0054 1800     		movs	r0, r3
 5450 0056 FFF7FEFF 		bl	uECC_vli_set
 782:uECC.c        ****     uECC_vli_set(Y2, Y1, num_words);
 5451              		.loc 2 782 0
 5452 005a 3723     		movs	r3, #55
 5453 005c 6B44     		add	r3, r3, sp
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 144


 5454 005e 0022     		movs	r2, #0
 5455 0060 9A56     		ldrsb	r2, [r3, r2]
 5456 0062 0299     		ldr	r1, [sp, #8]
 5457 0064 009B     		ldr	r3, [sp]
 5458 0066 1800     		movs	r0, r3
 5459 0068 FFF7FEFF 		bl	uECC_vli_set
 783:uECC.c        **** 
 784:uECC.c        ****     apply_z(X1, Y1, z, curve);
 5460              		.loc 2 784 0
 5461 006c 119B     		ldr	r3, [sp, #68]
 5462 006e 05AA     		add	r2, sp, #20
 5463 0070 0299     		ldr	r1, [sp, #8]
 5464 0072 0398     		ldr	r0, [sp, #12]
 5465 0074 FFF7FEFF 		bl	apply_z
 785:uECC.c        ****     curve->double_jacobian(X1, Y1, z, curve);
 5466              		.loc 2 785 0
 5467 0078 119B     		ldr	r3, [sp, #68]
 5468 007a A422     		movs	r2, #164
 5469 007c 9C58     		ldr	r4, [r3, r2]
 5470 007e 119B     		ldr	r3, [sp, #68]
 5471 0080 05AA     		add	r2, sp, #20
 5472 0082 0299     		ldr	r1, [sp, #8]
 5473 0084 0398     		ldr	r0, [sp, #12]
 5474 0086 A047     		blx	r4
 786:uECC.c        ****     apply_z(X2, Y2, z, curve);
 5475              		.loc 2 786 0
 5476 0088 119B     		ldr	r3, [sp, #68]
 5477 008a 05AA     		add	r2, sp, #20
 5478 008c 0099     		ldr	r1, [sp]
 5479 008e 0198     		ldr	r0, [sp, #4]
 5480 0090 FFF7FEFF 		bl	apply_z
 787:uECC.c        **** }
 5481              		.loc 2 787 0
 5482 0094 C046     		nop
 5483 0096 0EB0     		add	sp, sp, #56
 5484              		@ sp needed
 5485 0098 10BD     		pop	{r4, pc}
 5486              		.cfi_endproc
 5487              	.LFE48:
 5488              		.size	XYcZ_initial_double, .-XYcZ_initial_double
 5489              		.section	.text.XYcZ_add,"ax",%progbits
 5490              		.align	2
 5491              		.code	16
 5492              		.thumb_func
 5493              		.type	XYcZ_add, %function
 5494              	XYcZ_add:
 5495              	.LFB49:
 788:uECC.c        **** 
 789:uECC.c        **** /* Input P = (x1, y1, Z), Q = (x2, y2, Z)
 790:uECC.c        ****    Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
 791:uECC.c        ****    or P => P', Q => P + Q
 792:uECC.c        **** */
 793:uECC.c        **** static void XYcZ_add(uECC_word_t * X1,
 794:uECC.c        ****                      uECC_word_t * Y1,
 795:uECC.c        ****                      uECC_word_t * X2,
 796:uECC.c        ****                      uECC_word_t * Y2,
 797:uECC.c        ****                      uECC_Curve curve) {
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 145


 5496              		.loc 2 797 0
 5497              		.cfi_startproc
 5498              		@ args = 4, pretend = 0, frame = 56
 5499              		@ frame_needed = 0, uses_anonymous_args = 0
 5500 0000 10B5     		push	{r4, lr}
 5501              		.cfi_def_cfa_offset 8
 5502              		.cfi_offset 4, -8
 5503              		.cfi_offset 14, -4
 5504 0002 90B0     		sub	sp, sp, #64
 5505              		.cfi_def_cfa_offset 72
 5506 0004 0590     		str	r0, [sp, #20]
 5507 0006 0491     		str	r1, [sp, #16]
 5508 0008 0392     		str	r2, [sp, #12]
 5509 000a 0293     		str	r3, [sp, #8]
 798:uECC.c        ****     /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
 799:uECC.c        ****     uECC_word_t t5[uECC_MAX_WORDS];
 800:uECC.c        ****     wordcount_t num_words = curve->num_words;
 5510              		.loc 2 800 0
 5511 000c 3F23     		movs	r3, #63
 5512 000e 6B44     		add	r3, r3, sp
 5513 0010 129A     		ldr	r2, [sp, #72]
 5514 0012 1278     		ldrb	r2, [r2]
 5515 0014 1A70     		strb	r2, [r3]
 801:uECC.c        **** 
 802:uECC.c        ****     uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 5516              		.loc 2 802 0
 5517 0016 129B     		ldr	r3, [sp, #72]
 5518 0018 1C1D     		adds	r4, r3, #4
 5519 001a 059A     		ldr	r2, [sp, #20]
 5520 001c 0399     		ldr	r1, [sp, #12]
 5521 001e 07A8     		add	r0, sp, #28
 5522 0020 3F23     		movs	r3, #63
 5523 0022 6B44     		add	r3, r3, sp
 5524 0024 1B78     		ldrb	r3, [r3]
 5525 0026 5BB2     		sxtb	r3, r3
 5526 0028 0093     		str	r3, [sp]
 5527 002a 2300     		movs	r3, r4
 5528 002c FFF7FEFF 		bl	uECC_vli_modSub
 803:uECC.c        ****     uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 5529              		.loc 2 803 0
 5530 0030 129A     		ldr	r2, [sp, #72]
 5531 0032 07A9     		add	r1, sp, #28
 5532 0034 07AB     		add	r3, sp, #28
 5533 0036 1800     		movs	r0, r3
 5534 0038 FFF7FEFF 		bl	uECC_vli_modSquare_fast
 804:uECC.c        ****     uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 5535              		.loc 2 804 0
 5536 003c 129B     		ldr	r3, [sp, #72]
 5537 003e 07AA     		add	r2, sp, #28
 5538 0040 0599     		ldr	r1, [sp, #20]
 5539 0042 0598     		ldr	r0, [sp, #20]
 5540 0044 FFF7FEFF 		bl	uECC_vli_modMult_fast
 805:uECC.c        ****     uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 5541              		.loc 2 805 0
 5542 0048 129B     		ldr	r3, [sp, #72]
 5543 004a 07AA     		add	r2, sp, #28
 5544 004c 0399     		ldr	r1, [sp, #12]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 146


 5545 004e 0398     		ldr	r0, [sp, #12]
 5546 0050 FFF7FEFF 		bl	uECC_vli_modMult_fast
 806:uECC.c        ****     uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 5547              		.loc 2 806 0
 5548 0054 129B     		ldr	r3, [sp, #72]
 5549 0056 1C1D     		adds	r4, r3, #4
 5550 0058 049A     		ldr	r2, [sp, #16]
 5551 005a 0299     		ldr	r1, [sp, #8]
 5552 005c 0298     		ldr	r0, [sp, #8]
 5553 005e 3F23     		movs	r3, #63
 5554 0060 6B44     		add	r3, r3, sp
 5555 0062 1B78     		ldrb	r3, [r3]
 5556 0064 5BB2     		sxtb	r3, r3
 5557 0066 0093     		str	r3, [sp]
 5558 0068 2300     		movs	r3, r4
 5559 006a FFF7FEFF 		bl	uECC_vli_modSub
 807:uECC.c        ****     uECC_vli_modSquare_fast(t5, Y2, curve);                  /* t5 = (y2 - y1)^2 = D */
 5560              		.loc 2 807 0
 5561 006e 129A     		ldr	r2, [sp, #72]
 5562 0070 0299     		ldr	r1, [sp, #8]
 5563 0072 07AB     		add	r3, sp, #28
 5564 0074 1800     		movs	r0, r3
 5565 0076 FFF7FEFF 		bl	uECC_vli_modSquare_fast
 808:uECC.c        **** 
 809:uECC.c        ****     uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 5566              		.loc 2 809 0
 5567 007a 129B     		ldr	r3, [sp, #72]
 5568 007c 1C1D     		adds	r4, r3, #4
 5569 007e 059A     		ldr	r2, [sp, #20]
 5570 0080 07A9     		add	r1, sp, #28
 5571 0082 07A8     		add	r0, sp, #28
 5572 0084 3F23     		movs	r3, #63
 5573 0086 6B44     		add	r3, r3, sp
 5574 0088 1B78     		ldrb	r3, [r3]
 5575 008a 5BB2     		sxtb	r3, r3
 5576 008c 0093     		str	r3, [sp]
 5577 008e 2300     		movs	r3, r4
 5578 0090 FFF7FEFF 		bl	uECC_vli_modSub
 810:uECC.c        ****     uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 5579              		.loc 2 810 0
 5580 0094 129B     		ldr	r3, [sp, #72]
 5581 0096 1C1D     		adds	r4, r3, #4
 5582 0098 039A     		ldr	r2, [sp, #12]
 5583 009a 07A9     		add	r1, sp, #28
 5584 009c 07A8     		add	r0, sp, #28
 5585 009e 3F23     		movs	r3, #63
 5586 00a0 6B44     		add	r3, r3, sp
 5587 00a2 1B78     		ldrb	r3, [r3]
 5588 00a4 5BB2     		sxtb	r3, r3
 5589 00a6 0093     		str	r3, [sp]
 5590 00a8 2300     		movs	r3, r4
 5591 00aa FFF7FEFF 		bl	uECC_vli_modSub
 811:uECC.c        ****     uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 5592              		.loc 2 811 0
 5593 00ae 129B     		ldr	r3, [sp, #72]
 5594 00b0 1C1D     		adds	r4, r3, #4
 5595 00b2 059A     		ldr	r2, [sp, #20]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 147


 5596 00b4 0399     		ldr	r1, [sp, #12]
 5597 00b6 0398     		ldr	r0, [sp, #12]
 5598 00b8 3F23     		movs	r3, #63
 5599 00ba 6B44     		add	r3, r3, sp
 5600 00bc 1B78     		ldrb	r3, [r3]
 5601 00be 5BB2     		sxtb	r3, r3
 5602 00c0 0093     		str	r3, [sp]
 5603 00c2 2300     		movs	r3, r4
 5604 00c4 FFF7FEFF 		bl	uECC_vli_modSub
 812:uECC.c        ****     uECC_vli_modMult_fast(Y1, Y1, X2, curve);                /* t2 = y1*(C - B) */
 5605              		.loc 2 812 0
 5606 00c8 129B     		ldr	r3, [sp, #72]
 5607 00ca 039A     		ldr	r2, [sp, #12]
 5608 00cc 0499     		ldr	r1, [sp, #16]
 5609 00ce 0498     		ldr	r0, [sp, #16]
 5610 00d0 FFF7FEFF 		bl	uECC_vli_modMult_fast
 813:uECC.c        ****     uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 5611              		.loc 2 813 0
 5612 00d4 129B     		ldr	r3, [sp, #72]
 5613 00d6 1C1D     		adds	r4, r3, #4
 5614 00d8 07AA     		add	r2, sp, #28
 5615 00da 0599     		ldr	r1, [sp, #20]
 5616 00dc 0398     		ldr	r0, [sp, #12]
 5617 00de 3F23     		movs	r3, #63
 5618 00e0 6B44     		add	r3, r3, sp
 5619 00e2 1B78     		ldrb	r3, [r3]
 5620 00e4 5BB2     		sxtb	r3, r3
 5621 00e6 0093     		str	r3, [sp]
 5622 00e8 2300     		movs	r3, r4
 5623 00ea FFF7FEFF 		bl	uECC_vli_modSub
 814:uECC.c        ****     uECC_vli_modMult_fast(Y2, Y2, X2, curve);                /* t4 = (y2 - y1)*(B - x3) */
 5624              		.loc 2 814 0
 5625 00ee 129B     		ldr	r3, [sp, #72]
 5626 00f0 039A     		ldr	r2, [sp, #12]
 5627 00f2 0299     		ldr	r1, [sp, #8]
 5628 00f4 0298     		ldr	r0, [sp, #8]
 5629 00f6 FFF7FEFF 		bl	uECC_vli_modMult_fast
 815:uECC.c        ****     uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 5630              		.loc 2 815 0
 5631 00fa 129B     		ldr	r3, [sp, #72]
 5632 00fc 1C1D     		adds	r4, r3, #4
 5633 00fe 049A     		ldr	r2, [sp, #16]
 5634 0100 0299     		ldr	r1, [sp, #8]
 5635 0102 0298     		ldr	r0, [sp, #8]
 5636 0104 3F23     		movs	r3, #63
 5637 0106 6B44     		add	r3, r3, sp
 5638 0108 1B78     		ldrb	r3, [r3]
 5639 010a 5BB2     		sxtb	r3, r3
 5640 010c 0093     		str	r3, [sp]
 5641 010e 2300     		movs	r3, r4
 5642 0110 FFF7FEFF 		bl	uECC_vli_modSub
 816:uECC.c        **** 
 817:uECC.c        ****     uECC_vli_set(X2, t5, num_words);
 5643              		.loc 2 817 0
 5644 0114 3F23     		movs	r3, #63
 5645 0116 6B44     		add	r3, r3, sp
 5646 0118 0022     		movs	r2, #0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 148


 5647 011a 9A56     		ldrsb	r2, [r3, r2]
 5648 011c 07A9     		add	r1, sp, #28
 5649 011e 039B     		ldr	r3, [sp, #12]
 5650 0120 1800     		movs	r0, r3
 5651 0122 FFF7FEFF 		bl	uECC_vli_set
 818:uECC.c        **** }
 5652              		.loc 2 818 0
 5653 0126 C046     		nop
 5654 0128 10B0     		add	sp, sp, #64
 5655              		@ sp needed
 5656 012a 10BD     		pop	{r4, pc}
 5657              		.cfi_endproc
 5658              	.LFE49:
 5659              		.size	XYcZ_add, .-XYcZ_add
 5660              		.section	.text.XYcZ_addC,"ax",%progbits
 5661              		.align	2
 5662              		.code	16
 5663              		.thumb_func
 5664              		.type	XYcZ_addC, %function
 5665              	XYcZ_addC:
 5666              	.LFB50:
 819:uECC.c        **** 
 820:uECC.c        **** /* Input P = (x1, y1, Z), Q = (x2, y2, Z)
 821:uECC.c        ****    Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
 822:uECC.c        ****    or P => P - Q, Q => P + Q
 823:uECC.c        **** */
 824:uECC.c        **** static void XYcZ_addC(uECC_word_t * X1,
 825:uECC.c        ****                       uECC_word_t * Y1,
 826:uECC.c        ****                       uECC_word_t * X2,
 827:uECC.c        ****                       uECC_word_t * Y2,
 828:uECC.c        ****                       uECC_Curve curve) {
 5667              		.loc 2 828 0
 5668              		.cfi_startproc
 5669              		@ args = 4, pretend = 0, frame = 120
 5670              		@ frame_needed = 0, uses_anonymous_args = 0
 5671 0000 10B5     		push	{r4, lr}
 5672              		.cfi_def_cfa_offset 8
 5673              		.cfi_offset 4, -8
 5674              		.cfi_offset 14, -4
 5675 0002 A0B0     		sub	sp, sp, #128
 5676              		.cfi_def_cfa_offset 136
 5677 0004 0590     		str	r0, [sp, #20]
 5678 0006 0491     		str	r1, [sp, #16]
 5679 0008 0392     		str	r2, [sp, #12]
 5680 000a 0293     		str	r3, [sp, #8]
 829:uECC.c        ****     /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
 830:uECC.c        ****     uECC_word_t t5[uECC_MAX_WORDS];
 831:uECC.c        ****     uECC_word_t t6[uECC_MAX_WORDS];
 832:uECC.c        ****     uECC_word_t t7[uECC_MAX_WORDS];
 833:uECC.c        ****     wordcount_t num_words = curve->num_words;
 5681              		.loc 2 833 0
 5682 000c 7F23     		movs	r3, #127
 5683 000e 6B44     		add	r3, r3, sp
 5684 0010 229A     		ldr	r2, [sp, #136]
 5685 0012 1278     		ldrb	r2, [r2]
 5686 0014 1A70     		strb	r2, [r3]
 834:uECC.c        **** 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 149


 835:uECC.c        ****     uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 5687              		.loc 2 835 0
 5688 0016 229B     		ldr	r3, [sp, #136]
 5689 0018 1C1D     		adds	r4, r3, #4
 5690 001a 059A     		ldr	r2, [sp, #20]
 5691 001c 0399     		ldr	r1, [sp, #12]
 5692 001e 17A8     		add	r0, sp, #92
 5693 0020 7F23     		movs	r3, #127
 5694 0022 6B44     		add	r3, r3, sp
 5695 0024 1B78     		ldrb	r3, [r3]
 5696 0026 5BB2     		sxtb	r3, r3
 5697 0028 0093     		str	r3, [sp]
 5698 002a 2300     		movs	r3, r4
 5699 002c FFF7FEFF 		bl	uECC_vli_modSub
 836:uECC.c        ****     uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 5700              		.loc 2 836 0
 5701 0030 229A     		ldr	r2, [sp, #136]
 5702 0032 17A9     		add	r1, sp, #92
 5703 0034 17AB     		add	r3, sp, #92
 5704 0036 1800     		movs	r0, r3
 5705 0038 FFF7FEFF 		bl	uECC_vli_modSquare_fast
 837:uECC.c        ****     uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 5706              		.loc 2 837 0
 5707 003c 229B     		ldr	r3, [sp, #136]
 5708 003e 17AA     		add	r2, sp, #92
 5709 0040 0599     		ldr	r1, [sp, #20]
 5710 0042 0598     		ldr	r0, [sp, #20]
 5711 0044 FFF7FEFF 		bl	uECC_vli_modMult_fast
 838:uECC.c        ****     uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 5712              		.loc 2 838 0
 5713 0048 229B     		ldr	r3, [sp, #136]
 5714 004a 17AA     		add	r2, sp, #92
 5715 004c 0399     		ldr	r1, [sp, #12]
 5716 004e 0398     		ldr	r0, [sp, #12]
 5717 0050 FFF7FEFF 		bl	uECC_vli_modMult_fast
 839:uECC.c        ****     uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 5718              		.loc 2 839 0
 5719 0054 229B     		ldr	r3, [sp, #136]
 5720 0056 1C1D     		adds	r4, r3, #4
 5721 0058 049A     		ldr	r2, [sp, #16]
 5722 005a 0299     		ldr	r1, [sp, #8]
 5723 005c 17A8     		add	r0, sp, #92
 5724 005e 7F23     		movs	r3, #127
 5725 0060 6B44     		add	r3, r3, sp
 5726 0062 1B78     		ldrb	r3, [r3]
 5727 0064 5BB2     		sxtb	r3, r3
 5728 0066 0093     		str	r3, [sp]
 5729 0068 2300     		movs	r3, r4
 5730 006a FFF7FEFF 		bl	uECC_vli_modAdd
 840:uECC.c        ****     uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 5731              		.loc 2 840 0
 5732 006e 229B     		ldr	r3, [sp, #136]
 5733 0070 1C1D     		adds	r4, r3, #4
 5734 0072 049A     		ldr	r2, [sp, #16]
 5735 0074 0299     		ldr	r1, [sp, #8]
 5736 0076 0298     		ldr	r0, [sp, #8]
 5737 0078 7F23     		movs	r3, #127
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 150


 5738 007a 6B44     		add	r3, r3, sp
 5739 007c 1B78     		ldrb	r3, [r3]
 5740 007e 5BB2     		sxtb	r3, r3
 5741 0080 0093     		str	r3, [sp]
 5742 0082 2300     		movs	r3, r4
 5743 0084 FFF7FEFF 		bl	uECC_vli_modSub
 841:uECC.c        **** 
 842:uECC.c        ****     uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 5744              		.loc 2 842 0
 5745 0088 229B     		ldr	r3, [sp, #136]
 5746 008a 1C1D     		adds	r4, r3, #4
 5747 008c 059A     		ldr	r2, [sp, #20]
 5748 008e 0399     		ldr	r1, [sp, #12]
 5749 0090 0FA8     		add	r0, sp, #60
 5750 0092 7F23     		movs	r3, #127
 5751 0094 6B44     		add	r3, r3, sp
 5752 0096 1B78     		ldrb	r3, [r3]
 5753 0098 5BB2     		sxtb	r3, r3
 5754 009a 0093     		str	r3, [sp]
 5755 009c 2300     		movs	r3, r4
 5756 009e FFF7FEFF 		bl	uECC_vli_modSub
 843:uECC.c        ****     uECC_vli_modMult_fast(Y1, Y1, t6, curve);                /* t2 = y1 * (C - B) = E */
 5757              		.loc 2 843 0
 5758 00a2 229B     		ldr	r3, [sp, #136]
 5759 00a4 0FAA     		add	r2, sp, #60
 5760 00a6 0499     		ldr	r1, [sp, #16]
 5761 00a8 0498     		ldr	r0, [sp, #16]
 5762 00aa FFF7FEFF 		bl	uECC_vli_modMult_fast
 844:uECC.c        ****     uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 5763              		.loc 2 844 0
 5764 00ae 229B     		ldr	r3, [sp, #136]
 5765 00b0 1C1D     		adds	r4, r3, #4
 5766 00b2 039A     		ldr	r2, [sp, #12]
 5767 00b4 0599     		ldr	r1, [sp, #20]
 5768 00b6 0FA8     		add	r0, sp, #60
 5769 00b8 7F23     		movs	r3, #127
 5770 00ba 6B44     		add	r3, r3, sp
 5771 00bc 1B78     		ldrb	r3, [r3]
 5772 00be 5BB2     		sxtb	r3, r3
 5773 00c0 0093     		str	r3, [sp]
 5774 00c2 2300     		movs	r3, r4
 5775 00c4 FFF7FEFF 		bl	uECC_vli_modAdd
 845:uECC.c        ****     uECC_vli_modSquare_fast(X2, Y2, curve);                  /* t3 = (y2 - y1)^2 = D */
 5776              		.loc 2 845 0
 5777 00c8 229A     		ldr	r2, [sp, #136]
 5778 00ca 0299     		ldr	r1, [sp, #8]
 5779 00cc 039B     		ldr	r3, [sp, #12]
 5780 00ce 1800     		movs	r0, r3
 5781 00d0 FFF7FEFF 		bl	uECC_vli_modSquare_fast
 846:uECC.c        ****     uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
 5782              		.loc 2 846 0
 5783 00d4 229B     		ldr	r3, [sp, #136]
 5784 00d6 1C1D     		adds	r4, r3, #4
 5785 00d8 0FAA     		add	r2, sp, #60
 5786 00da 0399     		ldr	r1, [sp, #12]
 5787 00dc 0398     		ldr	r0, [sp, #12]
 5788 00de 7F23     		movs	r3, #127
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 151


 5789 00e0 6B44     		add	r3, r3, sp
 5790 00e2 1B78     		ldrb	r3, [r3]
 5791 00e4 5BB2     		sxtb	r3, r3
 5792 00e6 0093     		str	r3, [sp]
 5793 00e8 2300     		movs	r3, r4
 5794 00ea FFF7FEFF 		bl	uECC_vli_modSub
 847:uECC.c        **** 
 848:uECC.c        ****     uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 5795              		.loc 2 848 0
 5796 00ee 229B     		ldr	r3, [sp, #136]
 5797 00f0 1C1D     		adds	r4, r3, #4
 5798 00f2 039A     		ldr	r2, [sp, #12]
 5799 00f4 0599     		ldr	r1, [sp, #20]
 5800 00f6 07A8     		add	r0, sp, #28
 5801 00f8 7F23     		movs	r3, #127
 5802 00fa 6B44     		add	r3, r3, sp
 5803 00fc 1B78     		ldrb	r3, [r3]
 5804 00fe 5BB2     		sxtb	r3, r3
 5805 0100 0093     		str	r3, [sp]
 5806 0102 2300     		movs	r3, r4
 5807 0104 FFF7FEFF 		bl	uECC_vli_modSub
 849:uECC.c        ****     uECC_vli_modMult_fast(Y2, Y2, t7, curve);                /* t4 = (y2 - y1)*(B - x3) */
 5808              		.loc 2 849 0
 5809 0108 229B     		ldr	r3, [sp, #136]
 5810 010a 07AA     		add	r2, sp, #28
 5811 010c 0299     		ldr	r1, [sp, #8]
 5812 010e 0298     		ldr	r0, [sp, #8]
 5813 0110 FFF7FEFF 		bl	uECC_vli_modMult_fast
 850:uECC.c        ****     uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */
 5814              		.loc 2 850 0
 5815 0114 229B     		ldr	r3, [sp, #136]
 5816 0116 1C1D     		adds	r4, r3, #4
 5817 0118 049A     		ldr	r2, [sp, #16]
 5818 011a 0299     		ldr	r1, [sp, #8]
 5819 011c 0298     		ldr	r0, [sp, #8]
 5820 011e 7F23     		movs	r3, #127
 5821 0120 6B44     		add	r3, r3, sp
 5822 0122 1B78     		ldrb	r3, [r3]
 5823 0124 5BB2     		sxtb	r3, r3
 5824 0126 0093     		str	r3, [sp]
 5825 0128 2300     		movs	r3, r4
 5826 012a FFF7FEFF 		bl	uECC_vli_modSub
 851:uECC.c        **** 
 852:uECC.c        ****     uECC_vli_modSquare_fast(t7, t5, curve);                  /* t7 = (y2 + y1)^2 = F */
 5827              		.loc 2 852 0
 5828 012e 229A     		ldr	r2, [sp, #136]
 5829 0130 17A9     		add	r1, sp, #92
 5830 0132 07AB     		add	r3, sp, #28
 5831 0134 1800     		movs	r0, r3
 5832 0136 FFF7FEFF 		bl	uECC_vli_modSquare_fast
 853:uECC.c        ****     uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
 5833              		.loc 2 853 0
 5834 013a 229B     		ldr	r3, [sp, #136]
 5835 013c 1C1D     		adds	r4, r3, #4
 5836 013e 0FAA     		add	r2, sp, #60
 5837 0140 07A9     		add	r1, sp, #28
 5838 0142 07A8     		add	r0, sp, #28
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 152


 5839 0144 7F23     		movs	r3, #127
 5840 0146 6B44     		add	r3, r3, sp
 5841 0148 1B78     		ldrb	r3, [r3]
 5842 014a 5BB2     		sxtb	r3, r3
 5843 014c 0093     		str	r3, [sp]
 5844 014e 2300     		movs	r3, r4
 5845 0150 FFF7FEFF 		bl	uECC_vli_modSub
 854:uECC.c        ****     uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 5846              		.loc 2 854 0
 5847 0154 229B     		ldr	r3, [sp, #136]
 5848 0156 1C1D     		adds	r4, r3, #4
 5849 0158 059A     		ldr	r2, [sp, #20]
 5850 015a 07A9     		add	r1, sp, #28
 5851 015c 0FA8     		add	r0, sp, #60
 5852 015e 7F23     		movs	r3, #127
 5853 0160 6B44     		add	r3, r3, sp
 5854 0162 1B78     		ldrb	r3, [r3]
 5855 0164 5BB2     		sxtb	r3, r3
 5856 0166 0093     		str	r3, [sp]
 5857 0168 2300     		movs	r3, r4
 5858 016a FFF7FEFF 		bl	uECC_vli_modSub
 855:uECC.c        ****     uECC_vli_modMult_fast(t6, t6, t5, curve);                /* t6 = (y2+y1)*(x3' - B) */
 5859              		.loc 2 855 0
 5860 016e 229B     		ldr	r3, [sp, #136]
 5861 0170 17AA     		add	r2, sp, #92
 5862 0172 0FA9     		add	r1, sp, #60
 5863 0174 0FA8     		add	r0, sp, #60
 5864 0176 FFF7FEFF 		bl	uECC_vli_modMult_fast
 856:uECC.c        ****     uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */
 5865              		.loc 2 856 0
 5866 017a 229B     		ldr	r3, [sp, #136]
 5867 017c 1C1D     		adds	r4, r3, #4
 5868 017e 049A     		ldr	r2, [sp, #16]
 5869 0180 0FA9     		add	r1, sp, #60
 5870 0182 0498     		ldr	r0, [sp, #16]
 5871 0184 7F23     		movs	r3, #127
 5872 0186 6B44     		add	r3, r3, sp
 5873 0188 1B78     		ldrb	r3, [r3]
 5874 018a 5BB2     		sxtb	r3, r3
 5875 018c 0093     		str	r3, [sp]
 5876 018e 2300     		movs	r3, r4
 5877 0190 FFF7FEFF 		bl	uECC_vli_modSub
 857:uECC.c        **** 
 858:uECC.c        ****     uECC_vli_set(X1, t7, num_words);
 5878              		.loc 2 858 0
 5879 0194 7F23     		movs	r3, #127
 5880 0196 6B44     		add	r3, r3, sp
 5881 0198 0022     		movs	r2, #0
 5882 019a 9A56     		ldrsb	r2, [r3, r2]
 5883 019c 07A9     		add	r1, sp, #28
 5884 019e 059B     		ldr	r3, [sp, #20]
 5885 01a0 1800     		movs	r0, r3
 5886 01a2 FFF7FEFF 		bl	uECC_vli_set
 859:uECC.c        **** }
 5887              		.loc 2 859 0
 5888 01a6 C046     		nop
 5889 01a8 20B0     		add	sp, sp, #128
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 153


 5890              		@ sp needed
 5891 01aa 10BD     		pop	{r4, pc}
 5892              		.cfi_endproc
 5893              	.LFE50:
 5894              		.size	XYcZ_addC, .-XYcZ_addC
 5895              		.section	.text.EccPoint_mult,"ax",%progbits
 5896              		.align	2
 5897              		.code	16
 5898              		.thumb_func
 5899              		.type	EccPoint_mult, %function
 5900              	EccPoint_mult:
 5901              	.LFB51:
 860:uECC.c        **** 
 861:uECC.c        **** /* result may overlap point. */
 862:uECC.c        **** static void EccPoint_mult(uECC_word_t * result,
 863:uECC.c        ****                           const uECC_word_t * point,
 864:uECC.c        ****                           const uECC_word_t * scalar,
 865:uECC.c        ****                           const uECC_word_t * initial_Z,
 866:uECC.c        ****                           bitcount_t num_bits,
 867:uECC.c        ****                           uECC_Curve curve) {
 5902              		.loc 2 867 0
 5903              		.cfi_startproc
 5904              		@ args = 8, pretend = 0, frame = 184
 5905              		@ frame_needed = 0, uses_anonymous_args = 0
 5906 0000 10B5     		push	{r4, lr}
 5907              		.cfi_def_cfa_offset 8
 5908              		.cfi_offset 4, -8
 5909              		.cfi_offset 14, -4
 5910 0002 B0B0     		sub	sp, sp, #192
 5911              		.cfi_def_cfa_offset 200
 5912 0004 0590     		str	r0, [sp, #20]
 5913 0006 0491     		str	r1, [sp, #16]
 5914 0008 0392     		str	r2, [sp, #12]
 5915 000a 0293     		str	r3, [sp, #8]
 868:uECC.c        ****     /* R0 and R1 */
 869:uECC.c        ****     uECC_word_t Rx[2][uECC_MAX_WORDS];
 870:uECC.c        ****     uECC_word_t Ry[2][uECC_MAX_WORDS];
 871:uECC.c        ****     uECC_word_t z[uECC_MAX_WORDS];
 872:uECC.c        ****     bitcount_t i;
 873:uECC.c        ****     uECC_word_t nb;
 874:uECC.c        ****     wordcount_t num_words = curve->num_words;
 5916              		.loc 2 874 0
 5917 000c BD23     		movs	r3, #189
 5918 000e 6B44     		add	r3, r3, sp
 5919 0010 339A     		ldr	r2, [sp, #204]
 5920 0012 1278     		ldrb	r2, [r2]
 5921 0014 1A70     		strb	r2, [r3]
 875:uECC.c        **** 
 876:uECC.c        ****     uECC_vli_set(Rx[1], point, num_words);
 5922              		.loc 2 876 0
 5923 0016 BD23     		movs	r3, #189
 5924 0018 6B44     		add	r3, r3, sp
 5925 001a 0022     		movs	r2, #0
 5926 001c 9A56     		ldrsb	r2, [r3, r2]
 5927 001e 0499     		ldr	r1, [sp, #16]
 5928 0020 1EAB     		add	r3, sp, #120
 5929 0022 2033     		adds	r3, r3, #32
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 154


 5930 0024 1800     		movs	r0, r3
 5931 0026 FFF7FEFF 		bl	uECC_vli_set
 877:uECC.c        ****     uECC_vli_set(Ry[1], point + num_words, num_words);
 5932              		.loc 2 877 0
 5933 002a BD23     		movs	r3, #189
 5934 002c 6B44     		add	r3, r3, sp
 5935 002e 1B78     		ldrb	r3, [r3]
 5936 0030 5BB2     		sxtb	r3, r3
 5937 0032 9B00     		lsls	r3, r3, #2
 5938 0034 049A     		ldr	r2, [sp, #16]
 5939 0036 D118     		adds	r1, r2, r3
 5940 0038 BD23     		movs	r3, #189
 5941 003a 6B44     		add	r3, r3, sp
 5942 003c 0022     		movs	r2, #0
 5943 003e 9A56     		ldrsb	r2, [r3, r2]
 5944 0040 0EAB     		add	r3, sp, #56
 5945 0042 2033     		adds	r3, r3, #32
 5946 0044 1800     		movs	r0, r3
 5947 0046 FFF7FEFF 		bl	uECC_vli_set
 878:uECC.c        **** 
 879:uECC.c        ****     XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 5948              		.loc 2 879 0
 5949 004a 0EAC     		add	r4, sp, #56
 5950 004c 1EAA     		add	r2, sp, #120
 5951 004e 0EAB     		add	r3, sp, #56
 5952 0050 2033     		adds	r3, r3, #32
 5953 0052 1900     		movs	r1, r3
 5954 0054 1EAB     		add	r3, sp, #120
 5955 0056 2033     		adds	r3, r3, #32
 5956 0058 1800     		movs	r0, r3
 5957 005a 339B     		ldr	r3, [sp, #204]
 5958 005c 0193     		str	r3, [sp, #4]
 5959 005e 029B     		ldr	r3, [sp, #8]
 5960 0060 0093     		str	r3, [sp]
 5961 0062 2300     		movs	r3, r4
 5962 0064 FFF7FEFF 		bl	XYcZ_initial_double
 880:uECC.c        **** 
 881:uECC.c        ****     for (i = num_bits - 2; i > 0; --i) {
 5963              		.loc 2 881 0
 5964 0068 32AB     		add	r3, sp, #200
 5965 006a 1B88     		ldrh	r3, [r3]
 5966 006c 023B     		subs	r3, r3, #2
 5967 006e 9AB2     		uxth	r2, r3
 5968 0070 BE23     		movs	r3, #190
 5969 0072 6B44     		add	r3, r3, sp
 5970 0074 1A80     		strh	r2, [r3]
 5971 0076 49E0     		b	.L211
 5972              	.L212:
 882:uECC.c        ****         nb = !uECC_vli_testBit(scalar, i);
 5973              		.loc 2 882 0 discriminator 3
 5974 0078 BE23     		movs	r3, #190
 5975 007a 6B44     		add	r3, r3, sp
 5976 007c 0022     		movs	r2, #0
 5977 007e 9A5E     		ldrsh	r2, [r3, r2]
 5978 0080 039B     		ldr	r3, [sp, #12]
 5979 0082 1100     		movs	r1, r2
 5980 0084 1800     		movs	r0, r3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 155


 5981 0086 FFF7FEFF 		bl	uECC_vli_testBit
 5982 008a 0300     		movs	r3, r0
 5983 008c 5A42     		rsbs	r2, r3, #0
 5984 008e 5341     		adcs	r3, r3, r2
 5985 0090 DBB2     		uxtb	r3, r3
 5986 0092 2E93     		str	r3, [sp, #184]
 883:uECC.c        ****         XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 5987              		.loc 2 883 0 discriminator 3
 5988 0094 2E9B     		ldr	r3, [sp, #184]
 5989 0096 0122     		movs	r2, #1
 5990 0098 D31A     		subs	r3, r2, r3
 5991 009a 1EAA     		add	r2, sp, #120
 5992 009c 5B01     		lsls	r3, r3, #5
 5993 009e D018     		adds	r0, r2, r3
 5994 00a0 2E9B     		ldr	r3, [sp, #184]
 5995 00a2 0122     		movs	r2, #1
 5996 00a4 D31A     		subs	r3, r2, r3
 5997 00a6 0EAA     		add	r2, sp, #56
 5998 00a8 5B01     		lsls	r3, r3, #5
 5999 00aa D118     		adds	r1, r2, r3
 6000 00ac 1EAA     		add	r2, sp, #120
 6001 00ae 2E9B     		ldr	r3, [sp, #184]
 6002 00b0 5B01     		lsls	r3, r3, #5
 6003 00b2 D418     		adds	r4, r2, r3
 6004 00b4 0EAA     		add	r2, sp, #56
 6005 00b6 2E9B     		ldr	r3, [sp, #184]
 6006 00b8 5B01     		lsls	r3, r3, #5
 6007 00ba D218     		adds	r2, r2, r3
 6008 00bc 339B     		ldr	r3, [sp, #204]
 6009 00be 0093     		str	r3, [sp]
 6010 00c0 1300     		movs	r3, r2
 6011 00c2 2200     		movs	r2, r4
 6012 00c4 FFF7FEFF 		bl	XYcZ_addC
 884:uECC.c        ****         XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 6013              		.loc 2 884 0 discriminator 3
 6014 00c8 1EAA     		add	r2, sp, #120
 6015 00ca 2E9B     		ldr	r3, [sp, #184]
 6016 00cc 5B01     		lsls	r3, r3, #5
 6017 00ce D018     		adds	r0, r2, r3
 6018 00d0 0EAA     		add	r2, sp, #56
 6019 00d2 2E9B     		ldr	r3, [sp, #184]
 6020 00d4 5B01     		lsls	r3, r3, #5
 6021 00d6 D118     		adds	r1, r2, r3
 6022 00d8 2E9B     		ldr	r3, [sp, #184]
 6023 00da 0122     		movs	r2, #1
 6024 00dc D31A     		subs	r3, r2, r3
 6025 00de 1EAA     		add	r2, sp, #120
 6026 00e0 5B01     		lsls	r3, r3, #5
 6027 00e2 D418     		adds	r4, r2, r3
 6028 00e4 2E9B     		ldr	r3, [sp, #184]
 6029 00e6 0122     		movs	r2, #1
 6030 00e8 D31A     		subs	r3, r2, r3
 6031 00ea 0EAA     		add	r2, sp, #56
 6032 00ec 5B01     		lsls	r3, r3, #5
 6033 00ee D218     		adds	r2, r2, r3
 6034 00f0 339B     		ldr	r3, [sp, #204]
 6035 00f2 0093     		str	r3, [sp]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 156


 6036 00f4 1300     		movs	r3, r2
 6037 00f6 2200     		movs	r2, r4
 6038 00f8 FFF7FEFF 		bl	XYcZ_add
 881:uECC.c        ****         nb = !uECC_vli_testBit(scalar, i);
 6039              		.loc 2 881 0 discriminator 3
 6040 00fc BE23     		movs	r3, #190
 6041 00fe 6B44     		add	r3, r3, sp
 6042 0100 1B88     		ldrh	r3, [r3]
 6043 0102 013B     		subs	r3, r3, #1
 6044 0104 9AB2     		uxth	r2, r3
 6045 0106 BE23     		movs	r3, #190
 6046 0108 6B44     		add	r3, r3, sp
 6047 010a 1A80     		strh	r2, [r3]
 6048              	.L211:
 881:uECC.c        ****         nb = !uECC_vli_testBit(scalar, i);
 6049              		.loc 2 881 0 is_stmt 0 discriminator 1
 6050 010c BE23     		movs	r3, #190
 6051 010e 6B44     		add	r3, r3, sp
 6052 0110 0022     		movs	r2, #0
 6053 0112 9B5E     		ldrsh	r3, [r3, r2]
 6054 0114 002B     		cmp	r3, #0
 6055 0116 AFDC     		bgt	.L212
 885:uECC.c        ****     }
 886:uECC.c        **** 
 887:uECC.c        ****     nb = !uECC_vli_testBit(scalar, 0);
 6056              		.loc 2 887 0 is_stmt 1
 6057 0118 039B     		ldr	r3, [sp, #12]
 6058 011a 0021     		movs	r1, #0
 6059 011c 1800     		movs	r0, r3
 6060 011e FFF7FEFF 		bl	uECC_vli_testBit
 6061 0122 0300     		movs	r3, r0
 6062 0124 5A42     		rsbs	r2, r3, #0
 6063 0126 5341     		adcs	r3, r3, r2
 6064 0128 DBB2     		uxtb	r3, r3
 6065 012a 2E93     		str	r3, [sp, #184]
 888:uECC.c        ****     XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 6066              		.loc 2 888 0
 6067 012c 2E9B     		ldr	r3, [sp, #184]
 6068 012e 0122     		movs	r2, #1
 6069 0130 D31A     		subs	r3, r2, r3
 6070 0132 1EAA     		add	r2, sp, #120
 6071 0134 5B01     		lsls	r3, r3, #5
 6072 0136 D018     		adds	r0, r2, r3
 6073 0138 2E9B     		ldr	r3, [sp, #184]
 6074 013a 0122     		movs	r2, #1
 6075 013c D31A     		subs	r3, r2, r3
 6076 013e 0EAA     		add	r2, sp, #56
 6077 0140 5B01     		lsls	r3, r3, #5
 6078 0142 D118     		adds	r1, r2, r3
 6079 0144 1EAA     		add	r2, sp, #120
 6080 0146 2E9B     		ldr	r3, [sp, #184]
 6081 0148 5B01     		lsls	r3, r3, #5
 6082 014a D418     		adds	r4, r2, r3
 6083 014c 0EAA     		add	r2, sp, #56
 6084 014e 2E9B     		ldr	r3, [sp, #184]
 6085 0150 5B01     		lsls	r3, r3, #5
 6086 0152 D218     		adds	r2, r2, r3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 157


 6087 0154 339B     		ldr	r3, [sp, #204]
 6088 0156 0093     		str	r3, [sp]
 6089 0158 1300     		movs	r3, r2
 6090 015a 2200     		movs	r2, r4
 6091 015c FFF7FEFF 		bl	XYcZ_addC
 889:uECC.c        **** 
 890:uECC.c        ****     /* Find final 1/Z value. */
 891:uECC.c        ****     uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 6092              		.loc 2 891 0
 6093 0160 339B     		ldr	r3, [sp, #204]
 6094 0162 1C1D     		adds	r4, r3, #4
 6095 0164 1EAA     		add	r2, sp, #120
 6096 0166 1EAB     		add	r3, sp, #120
 6097 0168 2033     		adds	r3, r3, #32
 6098 016a 1900     		movs	r1, r3
 6099 016c 06A8     		add	r0, sp, #24
 6100 016e BD23     		movs	r3, #189
 6101 0170 6B44     		add	r3, r3, sp
 6102 0172 1B78     		ldrb	r3, [r3]
 6103 0174 5BB2     		sxtb	r3, r3
 6104 0176 0093     		str	r3, [sp]
 6105 0178 2300     		movs	r3, r4
 6106 017a FFF7FEFF 		bl	uECC_vli_modSub
 892:uECC.c        ****     uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve);               /* Yb * (X1 - X0) */
 6107              		.loc 2 892 0
 6108 017e 2E9B     		ldr	r3, [sp, #184]
 6109 0180 0122     		movs	r2, #1
 6110 0182 D31A     		subs	r3, r2, r3
 6111 0184 0EAA     		add	r2, sp, #56
 6112 0186 5B01     		lsls	r3, r3, #5
 6113 0188 D218     		adds	r2, r2, r3
 6114 018a 339B     		ldr	r3, [sp, #204]
 6115 018c 06A9     		add	r1, sp, #24
 6116 018e 06A8     		add	r0, sp, #24
 6117 0190 FFF7FEFF 		bl	uECC_vli_modMult_fast
 893:uECC.c        ****     uECC_vli_modMult_fast(z, z, point, curve);                    /* xP * Yb * (X1 - X0) */
 6118              		.loc 2 893 0
 6119 0194 339B     		ldr	r3, [sp, #204]
 6120 0196 049A     		ldr	r2, [sp, #16]
 6121 0198 06A9     		add	r1, sp, #24
 6122 019a 06A8     		add	r0, sp, #24
 6123 019c FFF7FEFF 		bl	uECC_vli_modMult_fast
 894:uECC.c        ****     uECC_vli_modInv(z, z, curve->p, num_words);            /* 1 / (xP * Yb * (X1 - X0)) */
 6124              		.loc 2 894 0
 6125 01a0 339B     		ldr	r3, [sp, #204]
 6126 01a2 1A1D     		adds	r2, r3, #4
 6127 01a4 BD23     		movs	r3, #189
 6128 01a6 6B44     		add	r3, r3, sp
 6129 01a8 1B78     		ldrb	r3, [r3]
 6130 01aa 5BB2     		sxtb	r3, r3
 6131 01ac 06A9     		add	r1, sp, #24
 6132 01ae 06A8     		add	r0, sp, #24
 6133 01b0 FFF7FEFF 		bl	uECC_vli_modInv
 895:uECC.c        ****     /* yP / (xP * Yb * (X1 - X0)) */
 896:uECC.c        ****     uECC_vli_modMult_fast(z, z, point + num_words, curve);
 6134              		.loc 2 896 0
 6135 01b4 BD23     		movs	r3, #189
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 158


 6136 01b6 6B44     		add	r3, r3, sp
 6137 01b8 1B78     		ldrb	r3, [r3]
 6138 01ba 5BB2     		sxtb	r3, r3
 6139 01bc 9B00     		lsls	r3, r3, #2
 6140 01be 049A     		ldr	r2, [sp, #16]
 6141 01c0 D218     		adds	r2, r2, r3
 6142 01c2 339B     		ldr	r3, [sp, #204]
 6143 01c4 06A9     		add	r1, sp, #24
 6144 01c6 06A8     		add	r0, sp, #24
 6145 01c8 FFF7FEFF 		bl	uECC_vli_modMult_fast
 897:uECC.c        ****     uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
 6146              		.loc 2 897 0
 6147 01cc 2E9B     		ldr	r3, [sp, #184]
 6148 01ce 0122     		movs	r2, #1
 6149 01d0 D31A     		subs	r3, r2, r3
 6150 01d2 1EAA     		add	r2, sp, #120
 6151 01d4 5B01     		lsls	r3, r3, #5
 6152 01d6 D218     		adds	r2, r2, r3
 6153 01d8 339B     		ldr	r3, [sp, #204]
 6154 01da 06A9     		add	r1, sp, #24
 6155 01dc 06A8     		add	r0, sp, #24
 6156 01de FFF7FEFF 		bl	uECC_vli_modMult_fast
 898:uECC.c        ****     /* End 1/Z calculation */
 899:uECC.c        **** 
 900:uECC.c        ****     XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 6157              		.loc 2 900 0
 6158 01e2 1EAA     		add	r2, sp, #120
 6159 01e4 2E9B     		ldr	r3, [sp, #184]
 6160 01e6 5B01     		lsls	r3, r3, #5
 6161 01e8 D018     		adds	r0, r2, r3
 6162 01ea 0EAA     		add	r2, sp, #56
 6163 01ec 2E9B     		ldr	r3, [sp, #184]
 6164 01ee 5B01     		lsls	r3, r3, #5
 6165 01f0 D118     		adds	r1, r2, r3
 6166 01f2 2E9B     		ldr	r3, [sp, #184]
 6167 01f4 0122     		movs	r2, #1
 6168 01f6 D31A     		subs	r3, r2, r3
 6169 01f8 1EAA     		add	r2, sp, #120
 6170 01fa 5B01     		lsls	r3, r3, #5
 6171 01fc D418     		adds	r4, r2, r3
 6172 01fe 2E9B     		ldr	r3, [sp, #184]
 6173 0200 0122     		movs	r2, #1
 6174 0202 D31A     		subs	r3, r2, r3
 6175 0204 0EAA     		add	r2, sp, #56
 6176 0206 5B01     		lsls	r3, r3, #5
 6177 0208 D218     		adds	r2, r2, r3
 6178 020a 339B     		ldr	r3, [sp, #204]
 6179 020c 0093     		str	r3, [sp]
 6180 020e 1300     		movs	r3, r2
 6181 0210 2200     		movs	r2, r4
 6182 0212 FFF7FEFF 		bl	XYcZ_add
 901:uECC.c        ****     apply_z(Rx[0], Ry[0], z, curve);
 6183              		.loc 2 901 0
 6184 0216 339B     		ldr	r3, [sp, #204]
 6185 0218 06AA     		add	r2, sp, #24
 6186 021a 0EA9     		add	r1, sp, #56
 6187 021c 1EA8     		add	r0, sp, #120
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 159


 6188 021e FFF7FEFF 		bl	apply_z
 902:uECC.c        **** 
 903:uECC.c        ****     uECC_vli_set(result, Rx[0], num_words);
 6189              		.loc 2 903 0
 6190 0222 BD23     		movs	r3, #189
 6191 0224 6B44     		add	r3, r3, sp
 6192 0226 0022     		movs	r2, #0
 6193 0228 9A56     		ldrsb	r2, [r3, r2]
 6194 022a 1EA9     		add	r1, sp, #120
 6195 022c 059B     		ldr	r3, [sp, #20]
 6196 022e 1800     		movs	r0, r3
 6197 0230 FFF7FEFF 		bl	uECC_vli_set
 904:uECC.c        ****     uECC_vli_set(result + num_words, Ry[0], num_words);
 6198              		.loc 2 904 0
 6199 0234 BD23     		movs	r3, #189
 6200 0236 6B44     		add	r3, r3, sp
 6201 0238 1B78     		ldrb	r3, [r3]
 6202 023a 5BB2     		sxtb	r3, r3
 6203 023c 9B00     		lsls	r3, r3, #2
 6204 023e 059A     		ldr	r2, [sp, #20]
 6205 0240 D018     		adds	r0, r2, r3
 6206 0242 BD23     		movs	r3, #189
 6207 0244 6B44     		add	r3, r3, sp
 6208 0246 0022     		movs	r2, #0
 6209 0248 9A56     		ldrsb	r2, [r3, r2]
 6210 024a 0EAB     		add	r3, sp, #56
 6211 024c 1900     		movs	r1, r3
 6212 024e FFF7FEFF 		bl	uECC_vli_set
 905:uECC.c        **** }
 6213              		.loc 2 905 0
 6214 0252 C046     		nop
 6215 0254 30B0     		add	sp, sp, #192
 6216              		@ sp needed
 6217 0256 10BD     		pop	{r4, pc}
 6218              		.cfi_endproc
 6219              	.LFE51:
 6220              		.size	EccPoint_mult, .-EccPoint_mult
 6221              		.section	.text.regularize_k,"ax",%progbits
 6222              		.align	2
 6223              		.code	16
 6224              		.thumb_func
 6225              		.type	regularize_k, %function
 6226              	regularize_k:
 6227              	.LFB52:
 906:uECC.c        **** 
 907:uECC.c        **** static uECC_word_t regularize_k(const uECC_word_t * const k,
 908:uECC.c        ****                                 uECC_word_t *k0,
 909:uECC.c        ****                                 uECC_word_t *k1,
 910:uECC.c        ****                                 uECC_Curve curve) {
 6228              		.loc 2 910 0
 6229              		.cfi_startproc
 6230              		@ args = 0, pretend = 0, frame = 24
 6231              		@ frame_needed = 0, uses_anonymous_args = 0
 6232 0000 00B5     		push	{lr}
 6233              		.cfi_def_cfa_offset 4
 6234              		.cfi_offset 14, -4
 6235 0002 87B0     		sub	sp, sp, #28
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 160


 6236              		.cfi_def_cfa_offset 32
 6237 0004 0390     		str	r0, [sp, #12]
 6238 0006 0291     		str	r1, [sp, #8]
 6239 0008 0192     		str	r2, [sp, #4]
 6240 000a 0093     		str	r3, [sp]
 911:uECC.c        ****     wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 6241              		.loc 2 911 0
 6242 000c 009B     		ldr	r3, [sp]
 6243 000e 0222     		movs	r2, #2
 6244 0010 9B5E     		ldrsh	r3, [r3, r2]
 6245 0012 1F33     		adds	r3, r3, #31
 6246 0014 002B     		cmp	r3, #0
 6247 0016 00DA     		bge	.L214
 6248 0018 1F33     		adds	r3, r3, #31
 6249              	.L214:
 6250 001a 5B11     		asrs	r3, r3, #5
 6251 001c 1A00     		movs	r2, r3
 6252 001e 1723     		movs	r3, #23
 6253 0020 6B44     		add	r3, r3, sp
 6254 0022 1A70     		strb	r2, [r3]
 912:uECC.c        ****     bitcount_t num_n_bits = curve->num_n_bits;
 6255              		.loc 2 912 0
 6256 0024 05AB     		add	r3, sp, #20
 6257 0026 009A     		ldr	r2, [sp]
 6258 0028 5288     		ldrh	r2, [r2, #2]
 6259 002a 1A80     		strh	r2, [r3]
 913:uECC.c        ****     uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 6260              		.loc 2 913 0
 6261 002c 009B     		ldr	r3, [sp]
 6262 002e 2433     		adds	r3, r3, #36
 6263 0030 1A00     		movs	r2, r3
 6264 0032 1723     		movs	r3, #23
 6265 0034 6B44     		add	r3, r3, sp
 6266 0036 1B78     		ldrb	r3, [r3]
 6267 0038 5BB2     		sxtb	r3, r3
 6268 003a 0399     		ldr	r1, [sp, #12]
 6269 003c 0298     		ldr	r0, [sp, #8]
 6270 003e FFF7FEFF 		bl	uECC_vli_add
 6271 0042 031E     		subs	r3, r0, #0
 6272 0044 13D1     		bne	.L215
 914:uECC.c        ****         (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 6273              		.loc 2 914 0 discriminator 2
 6274 0046 05AB     		add	r3, sp, #20
 6275 0048 0022     		movs	r2, #0
 6276 004a 9A5E     		ldrsh	r2, [r3, r2]
 6277 004c 1723     		movs	r3, #23
 6278 004e 6B44     		add	r3, r3, sp
 6279 0050 1B78     		ldrb	r3, [r3]
 6280 0052 5BB2     		sxtb	r3, r3
 6281 0054 5B01     		lsls	r3, r3, #5
 913:uECC.c        ****     uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 6282              		.loc 2 913 0 discriminator 2
 6283 0056 9A42     		cmp	r2, r3
 6284 0058 0BDA     		bge	.L216
 915:uECC.c        ****          uECC_vli_testBit(k0, num_n_bits));
 6285              		.loc 2 915 0
 6286 005a 05AB     		add	r3, sp, #20
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 161


 6287 005c 0022     		movs	r2, #0
 6288 005e 9A5E     		ldrsh	r2, [r3, r2]
 6289 0060 029B     		ldr	r3, [sp, #8]
 6290 0062 1100     		movs	r1, r2
 6291 0064 1800     		movs	r0, r3
 6292 0066 FFF7FEFF 		bl	uECC_vli_testBit
 6293 006a 031E     		subs	r3, r0, #0
 914:uECC.c        ****         (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 6294              		.loc 2 914 0
 6295 006c 01D0     		beq	.L216
 6296              	.L215:
 913:uECC.c        ****     uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 6297              		.loc 2 913 0 discriminator 1
 6298 006e 0123     		movs	r3, #1
 6299 0070 00E0     		b	.L217
 6300              	.L216:
 913:uECC.c        ****     uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 6301              		.loc 2 913 0 is_stmt 0 discriminator 3
 6302 0072 0023     		movs	r3, #0
 6303              	.L217:
 913:uECC.c        ****     uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 6304              		.loc 2 913 0 discriminator 5
 6305 0074 0493     		str	r3, [sp, #16]
 916:uECC.c        ****     uECC_vli_add(k1, k0, curve->n, num_n_words);
 6306              		.loc 2 916 0 is_stmt 1 discriminator 5
 6307 0076 009B     		ldr	r3, [sp]
 6308 0078 2433     		adds	r3, r3, #36
 6309 007a 1A00     		movs	r2, r3
 6310 007c 1723     		movs	r3, #23
 6311 007e 6B44     		add	r3, r3, sp
 6312 0080 1B78     		ldrb	r3, [r3]
 6313 0082 5BB2     		sxtb	r3, r3
 6314 0084 0299     		ldr	r1, [sp, #8]
 6315 0086 0198     		ldr	r0, [sp, #4]
 6316 0088 FFF7FEFF 		bl	uECC_vli_add
 917:uECC.c        ****     return carry;
 6317              		.loc 2 917 0 discriminator 5
 6318 008c 049B     		ldr	r3, [sp, #16]
 918:uECC.c        **** }
 6319              		.loc 2 918 0 discriminator 5
 6320 008e 1800     		movs	r0, r3
 6321 0090 07B0     		add	sp, sp, #28
 6322              		@ sp needed
 6323 0092 00BD     		pop	{pc}
 6324              		.cfi_endproc
 6325              	.LFE52:
 6326              		.size	regularize_k, .-regularize_k
 6327              		.section	.text.EccPoint_compute_public_key,"ax",%progbits
 6328              		.align	2
 6329              		.code	16
 6330              		.thumb_func
 6331              		.type	EccPoint_compute_public_key, %function
 6332              	EccPoint_compute_public_key:
 6333              	.LFB53:
 919:uECC.c        **** 
 920:uECC.c        **** static uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
 921:uECC.c        ****                                                uECC_word_t *private_key,
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 162


 922:uECC.c        ****                                                uECC_Curve curve) {
 6334              		.loc 2 922 0
 6335              		.cfi_startproc
 6336              		@ args = 0, pretend = 0, frame = 96
 6337              		@ frame_needed = 0, uses_anonymous_args = 0
 6338 0000 10B5     		push	{r4, lr}
 6339              		.cfi_def_cfa_offset 8
 6340              		.cfi_offset 4, -8
 6341              		.cfi_offset 14, -4
 6342 0002 9AB0     		sub	sp, sp, #104
 6343              		.cfi_def_cfa_offset 112
 6344 0004 0590     		str	r0, [sp, #20]
 6345 0006 0491     		str	r1, [sp, #16]
 6346 0008 0392     		str	r2, [sp, #12]
 923:uECC.c        ****     uECC_word_t tmp1[uECC_MAX_WORDS];
 924:uECC.c        ****     uECC_word_t tmp2[uECC_MAX_WORDS];
 925:uECC.c        ****     uECC_word_t *p2[2] = {tmp1, tmp2};
 6347              		.loc 2 925 0
 6348 000a 07AB     		add	r3, sp, #28
 6349 000c 11AA     		add	r2, sp, #68
 6350 000e 1A60     		str	r2, [r3]
 6351 0010 07AB     		add	r3, sp, #28
 6352 0012 09AA     		add	r2, sp, #36
 6353 0014 5A60     		str	r2, [r3, #4]
 926:uECC.c        ****     uECC_word_t carry;
 927:uECC.c        **** 
 928:uECC.c        ****     /* Regularize the bitcount for the private key so that attackers cannot use a side channel
 929:uECC.c        ****        attack to learn the number of leading zeros. */
 930:uECC.c        ****     carry = regularize_k(private_key, tmp1, tmp2, curve);
 6354              		.loc 2 930 0
 6355 0016 039B     		ldr	r3, [sp, #12]
 6356 0018 09AA     		add	r2, sp, #36
 6357 001a 11A9     		add	r1, sp, #68
 6358 001c 0498     		ldr	r0, [sp, #16]
 6359 001e FFF7FEFF 		bl	regularize_k
 6360 0022 0300     		movs	r3, r0
 6361 0024 1993     		str	r3, [sp, #100]
 931:uECC.c        **** 
 932:uECC.c        ****     EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
 6362              		.loc 2 932 0
 6363 0026 039B     		ldr	r3, [sp, #12]
 6364 0028 4433     		adds	r3, r3, #68
 6365 002a 1900     		movs	r1, r3
 6366 002c 199B     		ldr	r3, [sp, #100]
 6367 002e 5A42     		rsbs	r2, r3, #0
 6368 0030 5341     		adcs	r3, r3, r2
 6369 0032 DBB2     		uxtb	r3, r3
 6370 0034 1A00     		movs	r2, r3
 6371 0036 07AB     		add	r3, sp, #28
 6372 0038 9200     		lsls	r2, r2, #2
 6373 003a D458     		ldr	r4, [r2, r3]
 6374 003c 039B     		ldr	r3, [sp, #12]
 6375 003e 0222     		movs	r2, #2
 6376 0040 9B5E     		ldrsh	r3, [r3, r2]
 6377 0042 9BB2     		uxth	r3, r3
 6378 0044 0133     		adds	r3, r3, #1
 6379 0046 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 163


 6380 0048 1BB2     		sxth	r3, r3
 6381 004a 0598     		ldr	r0, [sp, #20]
 6382 004c 039A     		ldr	r2, [sp, #12]
 6383 004e 0192     		str	r2, [sp, #4]
 6384 0050 0093     		str	r3, [sp]
 6385 0052 0023     		movs	r3, #0
 6386 0054 2200     		movs	r2, r4
 6387 0056 FFF7FEFF 		bl	EccPoint_mult
 933:uECC.c        **** 
 934:uECC.c        ****     if (EccPoint_isZero(result, curve)) {
 6388              		.loc 2 934 0
 6389 005a 039B     		ldr	r3, [sp, #12]
 6390 005c 1B78     		ldrb	r3, [r3]
 6391 005e 5BB2     		sxtb	r3, r3
 6392 0060 DBB2     		uxtb	r3, r3
 6393 0062 DB18     		adds	r3, r3, r3
 6394 0064 DBB2     		uxtb	r3, r3
 6395 0066 5AB2     		sxtb	r2, r3
 6396 0068 059B     		ldr	r3, [sp, #20]
 6397 006a 1100     		movs	r1, r2
 6398 006c 1800     		movs	r0, r3
 6399 006e FFF7FEFF 		bl	uECC_vli_isZero
 6400 0072 031E     		subs	r3, r0, #0
 6401 0074 01D0     		beq	.L220
 935:uECC.c        ****         return 0;
 6402              		.loc 2 935 0
 6403 0076 0023     		movs	r3, #0
 6404 0078 00E0     		b	.L222
 6405              	.L220:
 936:uECC.c        ****     }
 937:uECC.c        ****     return 1;
 6406              		.loc 2 937 0
 6407 007a 0123     		movs	r3, #1
 6408              	.L222:
 938:uECC.c        **** }
 6409              		.loc 2 938 0 discriminator 1
 6410 007c 1800     		movs	r0, r3
 6411 007e 1AB0     		add	sp, sp, #104
 6412              		@ sp needed
 6413 0080 10BD     		pop	{r4, pc}
 6414              		.cfi_endproc
 6415              	.LFE53:
 6416              		.size	EccPoint_compute_public_key, .-EccPoint_compute_public_key
 6417 0082 C046     		.section	.text.uECC_vli_nativeToBytes,"ax",%progbits
 6418              		.align	2
 6419              		.code	16
 6420              		.thumb_func
 6421              		.type	uECC_vli_nativeToBytes, %function
 6422              	uECC_vli_nativeToBytes:
 6423              	.LFB54:
 939:uECC.c        **** 
 940:uECC.c        **** #if uECC_WORD_SIZE == 1
 941:uECC.c        **** 
 942:uECC.c        **** uECC_VLI_API void uECC_vli_nativeToBytes(uint8_t *bytes,
 943:uECC.c        ****                                          int num_bytes,
 944:uECC.c        ****                                          const uint8_t *native) {
 945:uECC.c        ****     wordcount_t i;
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 164


 946:uECC.c        ****     for (i = 0; i < num_bytes; ++i) {
 947:uECC.c        ****         bytes[i] = native[(num_bytes - 1) - i];
 948:uECC.c        ****     }
 949:uECC.c        **** }
 950:uECC.c        **** 
 951:uECC.c        **** uECC_VLI_API void uECC_vli_bytesToNative(uint8_t *native,
 952:uECC.c        ****                                          const uint8_t *bytes,
 953:uECC.c        ****                                          int num_bytes) {
 954:uECC.c        ****     uECC_vli_nativeToBytes(native, num_bytes, bytes);
 955:uECC.c        **** }
 956:uECC.c        **** 
 957:uECC.c        **** #else
 958:uECC.c        **** 
 959:uECC.c        **** uECC_VLI_API void uECC_vli_nativeToBytes(uint8_t *bytes,
 960:uECC.c        ****                                          int num_bytes,
 961:uECC.c        ****                                          const uECC_word_t *native) {
 6424              		.loc 2 961 0
 6425              		.cfi_startproc
 6426              		@ args = 0, pretend = 0, frame = 24
 6427              		@ frame_needed = 0, uses_anonymous_args = 0
 6428              		@ link register save eliminated.
 6429 0000 86B0     		sub	sp, sp, #24
 6430              		.cfi_def_cfa_offset 24
 6431 0002 0390     		str	r0, [sp, #12]
 6432 0004 0291     		str	r1, [sp, #8]
 6433 0006 0192     		str	r2, [sp, #4]
 962:uECC.c        ****     wordcount_t i;
 963:uECC.c        ****     for (i = 0; i < num_bytes; ++i) {
 6434              		.loc 2 963 0
 6435 0008 1723     		movs	r3, #23
 6436 000a 6B44     		add	r3, r3, sp
 6437 000c 0022     		movs	r2, #0
 6438 000e 1A70     		strb	r2, [r3]
 6439 0010 23E0     		b	.L224
 6440              	.L225:
 6441              	.LBB10:
 964:uECC.c        ****         unsigned b = num_bytes - 1 - i;
 6442              		.loc 2 964 0 discriminator 3
 6443 0012 029B     		ldr	r3, [sp, #8]
 6444 0014 5A1E     		subs	r2, r3, #1
 6445 0016 1723     		movs	r3, #23
 6446 0018 6B44     		add	r3, r3, sp
 6447 001a 1B78     		ldrb	r3, [r3]
 6448 001c 5BB2     		sxtb	r3, r3
 6449 001e D31A     		subs	r3, r2, r3
 6450 0020 0493     		str	r3, [sp, #16]
 965:uECC.c        ****         bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
 6451              		.loc 2 965 0 discriminator 3
 6452 0022 1723     		movs	r3, #23
 6453 0024 6B44     		add	r3, r3, sp
 6454 0026 1B78     		ldrb	r3, [r3]
 6455 0028 5BB2     		sxtb	r3, r3
 6456 002a 039A     		ldr	r2, [sp, #12]
 6457 002c D218     		adds	r2, r2, r3
 6458 002e 049B     		ldr	r3, [sp, #16]
 6459 0030 9B08     		lsrs	r3, r3, #2
 6460 0032 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 165


 6461 0034 0199     		ldr	r1, [sp, #4]
 6462 0036 CB18     		adds	r3, r1, r3
 6463 0038 1968     		ldr	r1, [r3]
 6464 003a 049B     		ldr	r3, [sp, #16]
 6465 003c 0320     		movs	r0, #3
 6466 003e 0340     		ands	r3, r0
 6467 0040 DB00     		lsls	r3, r3, #3
 6468 0042 D940     		lsrs	r1, r1, r3
 6469 0044 0B00     		movs	r3, r1
 6470 0046 DBB2     		uxtb	r3, r3
 6471 0048 1370     		strb	r3, [r2]
 6472              	.LBE10:
 963:uECC.c        ****         unsigned b = num_bytes - 1 - i;
 6473              		.loc 2 963 0 discriminator 3
 6474 004a 1723     		movs	r3, #23
 6475 004c 6B44     		add	r3, r3, sp
 6476 004e 1B78     		ldrb	r3, [r3]
 6477 0050 0133     		adds	r3, r3, #1
 6478 0052 DAB2     		uxtb	r2, r3
 6479 0054 1723     		movs	r3, #23
 6480 0056 6B44     		add	r3, r3, sp
 6481 0058 1A70     		strb	r2, [r3]
 6482              	.L224:
 963:uECC.c        ****         unsigned b = num_bytes - 1 - i;
 6483              		.loc 2 963 0 is_stmt 0 discriminator 1
 6484 005a 1723     		movs	r3, #23
 6485 005c 6B44     		add	r3, r3, sp
 6486 005e 0022     		movs	r2, #0
 6487 0060 9A56     		ldrsb	r2, [r3, r2]
 6488 0062 029B     		ldr	r3, [sp, #8]
 6489 0064 9A42     		cmp	r2, r3
 6490 0066 D4DB     		blt	.L225
 966:uECC.c        ****     }
 967:uECC.c        **** }
 6491              		.loc 2 967 0 is_stmt 1
 6492 0068 C046     		nop
 6493 006a 06B0     		add	sp, sp, #24
 6494              		@ sp needed
 6495 006c 7047     		bx	lr
 6496              		.cfi_endproc
 6497              	.LFE54:
 6498              		.size	uECC_vli_nativeToBytes, .-uECC_vli_nativeToBytes
 6499 006e C046     		.section	.text.uECC_vli_bytesToNative,"ax",%progbits
 6500              		.align	2
 6501              		.code	16
 6502              		.thumb_func
 6503              		.type	uECC_vli_bytesToNative, %function
 6504              	uECC_vli_bytesToNative:
 6505              	.LFB55:
 968:uECC.c        **** 
 969:uECC.c        **** uECC_VLI_API void uECC_vli_bytesToNative(uECC_word_t *native,
 970:uECC.c        ****                                          const uint8_t *bytes,
 971:uECC.c        ****                                          int num_bytes) {
 6506              		.loc 2 971 0
 6507              		.cfi_startproc
 6508              		@ args = 0, pretend = 0, frame = 24
 6509              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 166


 6510 0000 10B5     		push	{r4, lr}
 6511              		.cfi_def_cfa_offset 8
 6512              		.cfi_offset 4, -8
 6513              		.cfi_offset 14, -4
 6514 0002 86B0     		sub	sp, sp, #24
 6515              		.cfi_def_cfa_offset 32
 6516 0004 0390     		str	r0, [sp, #12]
 6517 0006 0291     		str	r1, [sp, #8]
 6518 0008 0192     		str	r2, [sp, #4]
 972:uECC.c        ****     wordcount_t i;
 973:uECC.c        ****     uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 6519              		.loc 2 973 0
 6520 000a 019B     		ldr	r3, [sp, #4]
 6521 000c 0333     		adds	r3, r3, #3
 6522 000e 002B     		cmp	r3, #0
 6523 0010 00DA     		bge	.L227
 6524 0012 0333     		adds	r3, r3, #3
 6525              	.L227:
 6526 0014 9B10     		asrs	r3, r3, #2
 6527 0016 5AB2     		sxtb	r2, r3
 6528 0018 039B     		ldr	r3, [sp, #12]
 6529 001a 1100     		movs	r1, r2
 6530 001c 1800     		movs	r0, r3
 6531 001e FFF7FEFF 		bl	uECC_vli_clear
 974:uECC.c        ****     for (i = 0; i < num_bytes; ++i) {
 6532              		.loc 2 974 0
 6533 0022 1723     		movs	r3, #23
 6534 0024 6B44     		add	r3, r3, sp
 6535 0026 0022     		movs	r2, #0
 6536 0028 1A70     		strb	r2, [r3]
 6537 002a 28E0     		b	.L228
 6538              	.L229:
 6539              	.LBB11:
 975:uECC.c        ****         unsigned b = num_bytes - 1 - i;
 6540              		.loc 2 975 0 discriminator 3
 6541 002c 019B     		ldr	r3, [sp, #4]
 6542 002e 5A1E     		subs	r2, r3, #1
 6543 0030 1723     		movs	r3, #23
 6544 0032 6B44     		add	r3, r3, sp
 6545 0034 1B78     		ldrb	r3, [r3]
 6546 0036 5BB2     		sxtb	r3, r3
 6547 0038 D31A     		subs	r3, r2, r3
 6548 003a 0493     		str	r3, [sp, #16]
 976:uECC.c        ****         native[b / uECC_WORD_SIZE] |=
 6549              		.loc 2 976 0 discriminator 3
 6550 003c 049B     		ldr	r3, [sp, #16]
 6551 003e 9A08     		lsrs	r2, r3, #2
 6552 0040 9300     		lsls	r3, r2, #2
 6553 0042 0399     		ldr	r1, [sp, #12]
 6554 0044 CB18     		adds	r3, r1, r3
 6555 0046 9200     		lsls	r2, r2, #2
 6556 0048 0399     		ldr	r1, [sp, #12]
 6557 004a 8A18     		adds	r2, r1, r2
 6558 004c 1168     		ldr	r1, [r2]
 977:uECC.c        ****             (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
 6559              		.loc 2 977 0 discriminator 3
 6560 004e 1722     		movs	r2, #23
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 167


 6561 0050 6A44     		add	r2, r2, sp
 6562 0052 1278     		ldrb	r2, [r2]
 6563 0054 52B2     		sxtb	r2, r2
 6564 0056 0298     		ldr	r0, [sp, #8]
 6565 0058 8218     		adds	r2, r0, r2
 6566 005a 1278     		ldrb	r2, [r2]
 6567 005c 1400     		movs	r4, r2
 6568 005e 049A     		ldr	r2, [sp, #16]
 6569 0060 0320     		movs	r0, #3
 6570 0062 0240     		ands	r2, r0
 6571 0064 D200     		lsls	r2, r2, #3
 6572 0066 9440     		lsls	r4, r4, r2
 6573 0068 2200     		movs	r2, r4
 976:uECC.c        ****         native[b / uECC_WORD_SIZE] |=
 6574              		.loc 2 976 0 discriminator 3
 6575 006a 0A43     		orrs	r2, r1
 6576 006c 1A60     		str	r2, [r3]
 6577              	.LBE11:
 974:uECC.c        ****         unsigned b = num_bytes - 1 - i;
 6578              		.loc 2 974 0 discriminator 3
 6579 006e 1723     		movs	r3, #23
 6580 0070 6B44     		add	r3, r3, sp
 6581 0072 1B78     		ldrb	r3, [r3]
 6582 0074 0133     		adds	r3, r3, #1
 6583 0076 DAB2     		uxtb	r2, r3
 6584 0078 1723     		movs	r3, #23
 6585 007a 6B44     		add	r3, r3, sp
 6586 007c 1A70     		strb	r2, [r3]
 6587              	.L228:
 974:uECC.c        ****         unsigned b = num_bytes - 1 - i;
 6588              		.loc 2 974 0 is_stmt 0 discriminator 1
 6589 007e 1723     		movs	r3, #23
 6590 0080 6B44     		add	r3, r3, sp
 6591 0082 0022     		movs	r2, #0
 6592 0084 9A56     		ldrsb	r2, [r3, r2]
 6593 0086 019B     		ldr	r3, [sp, #4]
 6594 0088 9A42     		cmp	r2, r3
 6595 008a CFDB     		blt	.L229
 978:uECC.c        ****     }
 979:uECC.c        **** }
 6596              		.loc 2 979 0 is_stmt 1
 6597 008c C046     		nop
 6598 008e 06B0     		add	sp, sp, #24
 6599              		@ sp needed
 6600 0090 10BD     		pop	{r4, pc}
 6601              		.cfi_endproc
 6602              	.LFE55:
 6603              		.size	uECC_vli_bytesToNative, .-uECC_vli_bytesToNative
 6604              		.section	.text.uECC_generate_random_int,"ax",%progbits
 6605              		.align	2
 6606              		.code	16
 6607              		.thumb_func
 6608              		.type	uECC_generate_random_int, %function
 6609              	uECC_generate_random_int:
 6610              	.LFB56:
 980:uECC.c        **** 
 981:uECC.c        **** #endif /* uECC_WORD_SIZE */
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 168


 982:uECC.c        **** 
 983:uECC.c        **** /* Generates a random integer in the range 0 < random < top.
 984:uECC.c        ****    Both random and top have num_words words. */
 985:uECC.c        **** uECC_VLI_API int uECC_generate_random_int(uECC_word_t *random,
 986:uECC.c        ****                                           const uECC_word_t *top,
 987:uECC.c        ****                                           wordcount_t num_words) {
 6611              		.loc 2 987 0
 6612              		.cfi_startproc
 6613              		@ args = 0, pretend = 0, frame = 32
 6614              		@ frame_needed = 0, uses_anonymous_args = 0
 6615 0000 10B5     		push	{r4, lr}
 6616              		.cfi_def_cfa_offset 8
 6617              		.cfi_offset 4, -8
 6618              		.cfi_offset 14, -4
 6619 0002 88B0     		sub	sp, sp, #32
 6620              		.cfi_def_cfa_offset 40
 6621 0004 0390     		str	r0, [sp, #12]
 6622 0006 0291     		str	r1, [sp, #8]
 6623 0008 6B46     		mov	r3, sp
 6624 000a 0733     		adds	r3, r3, #7
 6625 000c 1A70     		strb	r2, [r3]
 988:uECC.c        ****     uECC_word_t mask = (uECC_word_t)-1;
 6626              		.loc 2 988 0
 6627 000e 0123     		movs	r3, #1
 6628 0010 5B42     		rsbs	r3, r3, #0
 6629 0012 0693     		str	r3, [sp, #24]
 989:uECC.c        ****     uECC_word_t tries;
 990:uECC.c        ****     bitcount_t num_bits = uECC_vli_numBits(top, num_words);
 6630              		.loc 2 990 0
 6631 0014 1624     		movs	r4, #22
 6632 0016 6C44     		add	r4, r4, sp
 6633 0018 6B46     		mov	r3, sp
 6634 001a 0733     		adds	r3, r3, #7
 6635 001c 0022     		movs	r2, #0
 6636 001e 9A56     		ldrsb	r2, [r3, r2]
 6637 0020 029B     		ldr	r3, [sp, #8]
 6638 0022 1100     		movs	r1, r2
 6639 0024 1800     		movs	r0, r3
 6640 0026 FFF7FEFF 		bl	uECC_vli_numBits
 6641 002a 0300     		movs	r3, r0
 6642 002c 2380     		strh	r3, [r4]
 991:uECC.c        **** 
 992:uECC.c        ****     if (!g_rng_function) {
 6643              		.loc 2 992 0
 6644 002e 314B     		ldr	r3, .L237
 6645 0030 1B68     		ldr	r3, [r3]
 6646 0032 002B     		cmp	r3, #0
 6647 0034 01D1     		bne	.L231
 993:uECC.c        ****         return 0;
 6648              		.loc 2 993 0
 6649 0036 0023     		movs	r3, #0
 6650 0038 58E0     		b	.L232
 6651              	.L231:
 994:uECC.c        ****     }
 995:uECC.c        **** 
 996:uECC.c        ****     for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 6652              		.loc 2 996 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 169


 6653 003a 0023     		movs	r3, #0
 6654 003c 0793     		str	r3, [sp, #28]
 6655 003e 51E0     		b	.L233
 6656              	.L236:
 997:uECC.c        ****         if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
 6657              		.loc 2 997 0
 6658 0040 2C4B     		ldr	r3, .L237
 6659 0042 1B68     		ldr	r3, [r3]
 6660 0044 6A46     		mov	r2, sp
 6661 0046 0732     		adds	r2, r2, #7
 6662 0048 1278     		ldrb	r2, [r2]
 6663 004a 52B2     		sxtb	r2, r2
 6664 004c 9200     		lsls	r2, r2, #2
 6665 004e 1100     		movs	r1, r2
 6666 0050 039A     		ldr	r2, [sp, #12]
 6667 0052 1000     		movs	r0, r2
 6668 0054 9847     		blx	r3
 6669 0056 031E     		subs	r3, r0, #0
 6670 0058 01D1     		bne	.L234
 998:uECC.c        ****             return 0;
 6671              		.loc 2 998 0
 6672 005a 0023     		movs	r3, #0
 6673 005c 46E0     		b	.L232
 6674              	.L234:
 999:uECC.c        **** 	    }
1000:uECC.c        ****         random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
 6675              		.loc 2 1000 0
 6676 005e 6B46     		mov	r3, sp
 6677 0060 0733     		adds	r3, r3, #7
 6678 0062 1B78     		ldrb	r3, [r3]
 6679 0064 5BB2     		sxtb	r3, r3
 6680 0066 244A     		ldr	r2, .L237+4
 6681 0068 9446     		mov	ip, r2
 6682 006a 6344     		add	r3, r3, ip
 6683 006c 9B00     		lsls	r3, r3, #2
 6684 006e 039A     		ldr	r2, [sp, #12]
 6685 0070 D318     		adds	r3, r2, r3
 6686 0072 6A46     		mov	r2, sp
 6687 0074 0732     		adds	r2, r2, #7
 6688 0076 1278     		ldrb	r2, [r2]
 6689 0078 52B2     		sxtb	r2, r2
 6690 007a 1F49     		ldr	r1, .L237+4
 6691 007c 8C46     		mov	ip, r1
 6692 007e 6244     		add	r2, r2, ip
 6693 0080 9200     		lsls	r2, r2, #2
 6694 0082 0399     		ldr	r1, [sp, #12]
 6695 0084 8A18     		adds	r2, r1, r2
 6696 0086 1268     		ldr	r2, [r2]
 6697 0088 6946     		mov	r1, sp
 6698 008a 0731     		adds	r1, r1, #7
 6699 008c 0978     		ldrb	r1, [r1]
 6700 008e 49B2     		sxtb	r1, r1
 6701 0090 89B2     		uxth	r1, r1
 6702 0092 4901     		lsls	r1, r1, #5
 6703 0094 88B2     		uxth	r0, r1
 6704 0096 1621     		movs	r1, #22
 6705 0098 6944     		add	r1, r1, sp
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 170


 6706 009a 0988     		ldrh	r1, [r1]
 6707 009c 411A     		subs	r1, r0, r1
 6708 009e 89B2     		uxth	r1, r1
 6709 00a0 09B2     		sxth	r1, r1
 6710 00a2 0800     		movs	r0, r1
 6711 00a4 0699     		ldr	r1, [sp, #24]
 6712 00a6 C140     		lsrs	r1, r1, r0
 6713 00a8 0A40     		ands	r2, r1
 6714 00aa 1A60     		str	r2, [r3]
1001:uECC.c        ****         if (!uECC_vli_isZero(random, num_words) &&
 6715              		.loc 2 1001 0
 6716 00ac 6B46     		mov	r3, sp
 6717 00ae 0733     		adds	r3, r3, #7
 6718 00b0 0022     		movs	r2, #0
 6719 00b2 9A56     		ldrsb	r2, [r3, r2]
 6720 00b4 039B     		ldr	r3, [sp, #12]
 6721 00b6 1100     		movs	r1, r2
 6722 00b8 1800     		movs	r0, r3
 6723 00ba FFF7FEFF 		bl	uECC_vli_isZero
 6724 00be 031E     		subs	r3, r0, #0
 6725 00c0 0DD1     		bne	.L235
1002:uECC.c        **** 		        uECC_vli_cmp(top, random, num_words) == 1) {
 6726              		.loc 2 1002 0 discriminator 1
 6727 00c2 6B46     		mov	r3, sp
 6728 00c4 0733     		adds	r3, r3, #7
 6729 00c6 0022     		movs	r2, #0
 6730 00c8 9A56     		ldrsb	r2, [r3, r2]
 6731 00ca 0399     		ldr	r1, [sp, #12]
 6732 00cc 029B     		ldr	r3, [sp, #8]
 6733 00ce 1800     		movs	r0, r3
 6734 00d0 FFF7FEFF 		bl	uECC_vli_cmp
 6735 00d4 0300     		movs	r3, r0
1001:uECC.c        ****         if (!uECC_vli_isZero(random, num_words) &&
 6736              		.loc 2 1001 0 discriminator 1
 6737 00d6 012B     		cmp	r3, #1
 6738 00d8 01D1     		bne	.L235
1003:uECC.c        ****             return 1;
 6739              		.loc 2 1003 0
 6740 00da 0123     		movs	r3, #1
 6741 00dc 06E0     		b	.L232
 6742              	.L235:
 996:uECC.c        ****         if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
 6743              		.loc 2 996 0 discriminator 2
 6744 00de 079B     		ldr	r3, [sp, #28]
 6745 00e0 0133     		adds	r3, r3, #1
 6746 00e2 0793     		str	r3, [sp, #28]
 6747              	.L233:
 996:uECC.c        ****         if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
 6748              		.loc 2 996 0 is_stmt 0 discriminator 1
 6749 00e4 079B     		ldr	r3, [sp, #28]
 6750 00e6 3F2B     		cmp	r3, #63
 6751 00e8 AAD9     		bls	.L236
1004:uECC.c        ****         }
1005:uECC.c        ****     }
1006:uECC.c        ****     return 0;
 6752              		.loc 2 1006 0 is_stmt 1
 6753 00ea 0023     		movs	r3, #0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 171


 6754              	.L232:
1007:uECC.c        **** }
 6755              		.loc 2 1007 0
 6756 00ec 1800     		movs	r0, r3
 6757 00ee 08B0     		add	sp, sp, #32
 6758              		@ sp needed
 6759 00f0 10BD     		pop	{r4, pc}
 6760              	.L238:
 6761 00f2 C046     		.align	2
 6762              	.L237:
 6763 00f4 00000000 		.word	g_rng_function
 6764 00f8 FFFFFF3F 		.word	1073741823
 6765              		.cfi_endproc
 6766              	.LFE56:
 6767              		.size	uECC_generate_random_int, .-uECC_generate_random_int
 6768              		.section	.text.uECC_make_key,"ax",%progbits
 6769              		.align	2
 6770              		.global	uECC_make_key
 6771              		.code	16
 6772              		.thumb_func
 6773              		.type	uECC_make_key, %function
 6774              	uECC_make_key:
 6775              	.LFB57:
1008:uECC.c        **** 
1009:uECC.c        **** int uECC_make_key(uint8_t *public_key,
1010:uECC.c        ****                   uint8_t *private_key,
1011:uECC.c        ****                   uECC_Curve curve) {
 6776              		.loc 2 1011 0
 6777              		.cfi_startproc
 6778              		@ args = 0, pretend = 0, frame = 120
 6779              		@ frame_needed = 0, uses_anonymous_args = 0
 6780 0000 00B5     		push	{lr}
 6781              		.cfi_def_cfa_offset 4
 6782              		.cfi_offset 14, -4
 6783 0002 9FB0     		sub	sp, sp, #124
 6784              		.cfi_def_cfa_offset 128
 6785 0004 0390     		str	r0, [sp, #12]
 6786 0006 0291     		str	r1, [sp, #8]
 6787 0008 0192     		str	r2, [sp, #4]
1012:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1013:uECC.c        ****     uECC_word_t *_private = (uECC_word_t *)private_key;
1014:uECC.c        ****     uECC_word_t *_public = (uECC_word_t *)public_key;
1015:uECC.c        **** #else
1016:uECC.c        ****     uECC_word_t _private[uECC_MAX_WORDS];
1017:uECC.c        ****     uECC_word_t _public[uECC_MAX_WORDS * 2];
1018:uECC.c        **** #endif
1019:uECC.c        ****     uECC_word_t tries;
1020:uECC.c        **** 
1021:uECC.c        ****     for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 6788              		.loc 2 1021 0
 6789 000a 0023     		movs	r3, #0
 6790 000c 1D93     		str	r3, [sp, #116]
 6791 000e 4AE0     		b	.L240
 6792              	.L246:
1022:uECC.c        ****         if (!uECC_generate_random_int(_private, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
 6793              		.loc 2 1022 0
 6794 0010 019B     		ldr	r3, [sp, #4]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 172


 6795 0012 2433     		adds	r3, r3, #36
 6796 0014 1900     		movs	r1, r3
 6797 0016 019B     		ldr	r3, [sp, #4]
 6798 0018 0222     		movs	r2, #2
 6799 001a 9B5E     		ldrsh	r3, [r3, r2]
 6800 001c 1F33     		adds	r3, r3, #31
 6801 001e 002B     		cmp	r3, #0
 6802 0020 00DA     		bge	.L241
 6803 0022 1F33     		adds	r3, r3, #31
 6804              	.L241:
 6805 0024 5B11     		asrs	r3, r3, #5
 6806 0026 5AB2     		sxtb	r2, r3
 6807 0028 15AB     		add	r3, sp, #84
 6808 002a 1800     		movs	r0, r3
 6809 002c FFF7FEFF 		bl	uECC_generate_random_int
 6810 0030 031E     		subs	r3, r0, #0
 6811 0032 01D1     		bne	.L242
1023:uECC.c        ****             return 0;
 6812              		.loc 2 1023 0
 6813 0034 0023     		movs	r3, #0
 6814 0036 3AE0     		b	.L247
 6815              	.L242:
1024:uECC.c        ****         }
1025:uECC.c        **** 
1026:uECC.c        ****         if (EccPoint_compute_public_key(_public, _private, curve)) {
 6816              		.loc 2 1026 0
 6817 0038 019A     		ldr	r2, [sp, #4]
 6818 003a 15A9     		add	r1, sp, #84
 6819 003c 05AB     		add	r3, sp, #20
 6820 003e 1800     		movs	r0, r3
 6821 0040 FFF7FEFF 		bl	EccPoint_compute_public_key
 6822 0044 031E     		subs	r3, r0, #0
 6823 0046 2BD0     		beq	.L244
1027:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
1028:uECC.c        ****             uECC_vli_nativeToBytes(private_key, BITS_TO_BYTES(curve->num_n_bits), _private);
 6824              		.loc 2 1028 0
 6825 0048 019B     		ldr	r3, [sp, #4]
 6826 004a 0222     		movs	r2, #2
 6827 004c 9B5E     		ldrsh	r3, [r3, r2]
 6828 004e 0733     		adds	r3, r3, #7
 6829 0050 002B     		cmp	r3, #0
 6830 0052 00DA     		bge	.L245
 6831 0054 0733     		adds	r3, r3, #7
 6832              	.L245:
 6833 0056 DB10     		asrs	r3, r3, #3
 6834 0058 1900     		movs	r1, r3
 6835 005a 15AA     		add	r2, sp, #84
 6836 005c 029B     		ldr	r3, [sp, #8]
 6837 005e 1800     		movs	r0, r3
 6838 0060 FFF7FEFF 		bl	uECC_vli_nativeToBytes
1029:uECC.c        ****             uECC_vli_nativeToBytes(public_key, curve->num_bytes, _public);
 6839              		.loc 2 1029 0
 6840 0064 019B     		ldr	r3, [sp, #4]
 6841 0066 5B78     		ldrb	r3, [r3, #1]
 6842 0068 5BB2     		sxtb	r3, r3
 6843 006a 1900     		movs	r1, r3
 6844 006c 05AA     		add	r2, sp, #20
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 173


 6845 006e 039B     		ldr	r3, [sp, #12]
 6846 0070 1800     		movs	r0, r3
 6847 0072 FFF7FEFF 		bl	uECC_vli_nativeToBytes
1030:uECC.c        ****             uECC_vli_nativeToBytes(
1031:uECC.c        ****                 public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
 6848              		.loc 2 1031 0
 6849 0076 019B     		ldr	r3, [sp, #4]
 6850 0078 5B78     		ldrb	r3, [r3, #1]
 6851 007a 5BB2     		sxtb	r3, r3
1030:uECC.c        ****             uECC_vli_nativeToBytes(
 6852              		.loc 2 1030 0
 6853 007c 1A00     		movs	r2, r3
 6854 007e 039B     		ldr	r3, [sp, #12]
 6855 0080 9818     		adds	r0, r3, r2
 6856              		.loc 2 1031 0
 6857 0082 019B     		ldr	r3, [sp, #4]
 6858 0084 5B78     		ldrb	r3, [r3, #1]
 6859 0086 5BB2     		sxtb	r3, r3
1030:uECC.c        ****             uECC_vli_nativeToBytes(
 6860              		.loc 2 1030 0
 6861 0088 1900     		movs	r1, r3
 6862              		.loc 2 1031 0
 6863 008a 019B     		ldr	r3, [sp, #4]
 6864 008c 1B78     		ldrb	r3, [r3]
 6865 008e 5BB2     		sxtb	r3, r3
 6866 0090 9B00     		lsls	r3, r3, #2
1030:uECC.c        ****             uECC_vli_nativeToBytes(
 6867              		.loc 2 1030 0
 6868 0092 05AA     		add	r2, sp, #20
 6869 0094 D318     		adds	r3, r2, r3
 6870 0096 1A00     		movs	r2, r3
 6871 0098 FFF7FEFF 		bl	uECC_vli_nativeToBytes
1032:uECC.c        **** #endif
1033:uECC.c        ****             return 1;
 6872              		.loc 2 1033 0
 6873 009c 0123     		movs	r3, #1
 6874 009e 06E0     		b	.L247
 6875              	.L244:
1021:uECC.c        ****         if (!uECC_generate_random_int(_private, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
 6876              		.loc 2 1021 0 discriminator 2
 6877 00a0 1D9B     		ldr	r3, [sp, #116]
 6878 00a2 0133     		adds	r3, r3, #1
 6879 00a4 1D93     		str	r3, [sp, #116]
 6880              	.L240:
1021:uECC.c        ****         if (!uECC_generate_random_int(_private, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
 6881              		.loc 2 1021 0 is_stmt 0 discriminator 1
 6882 00a6 1D9B     		ldr	r3, [sp, #116]
 6883 00a8 3F2B     		cmp	r3, #63
 6884 00aa B1D9     		bls	.L246
1034:uECC.c        ****         }
1035:uECC.c        ****     }
1036:uECC.c        ****     return 0;
 6885              		.loc 2 1036 0 is_stmt 1
 6886 00ac 0023     		movs	r3, #0
 6887              	.L247:
1037:uECC.c        **** }
 6888              		.loc 2 1037 0 discriminator 1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 174


 6889 00ae 1800     		movs	r0, r3
 6890 00b0 1FB0     		add	sp, sp, #124
 6891              		@ sp needed
 6892 00b2 00BD     		pop	{pc}
 6893              		.cfi_endproc
 6894              	.LFE57:
 6895              		.size	uECC_make_key, .-uECC_make_key
 6896              		.section	.text.uECC_shared_secret,"ax",%progbits
 6897              		.align	2
 6898              		.global	uECC_shared_secret
 6899              		.code	16
 6900              		.thumb_func
 6901              		.type	uECC_shared_secret, %function
 6902              	uECC_shared_secret:
 6903              	.LFB58:
1038:uECC.c        **** 
1039:uECC.c        **** int uECC_shared_secret(const uint8_t *public_key,
1040:uECC.c        ****                        const uint8_t *private_key,
1041:uECC.c        ****                        uint8_t *secret,
1042:uECC.c        ****                        uECC_Curve curve) {
 6904              		.loc 2 1042 0
 6905              		.cfi_startproc
 6906              		@ args = 0, pretend = 0, frame = 168
 6907              		@ frame_needed = 0, uses_anonymous_args = 0
 6908 0000 30B5     		push	{r4, r5, lr}
 6909              		.cfi_def_cfa_offset 12
 6910              		.cfi_offset 4, -12
 6911              		.cfi_offset 5, -8
 6912              		.cfi_offset 14, -4
 6913 0002 ADB0     		sub	sp, sp, #180
 6914              		.cfi_def_cfa_offset 192
 6915 0004 0590     		str	r0, [sp, #20]
 6916 0006 0491     		str	r1, [sp, #16]
 6917 0008 0392     		str	r2, [sp, #12]
 6918 000a 0293     		str	r3, [sp, #8]
1043:uECC.c        ****     uECC_word_t _public[uECC_MAX_WORDS * 2];
1044:uECC.c        ****     uECC_word_t _private[uECC_MAX_WORDS];
1045:uECC.c        **** 
1046:uECC.c        ****     uECC_word_t tmp[uECC_MAX_WORDS];
1047:uECC.c        ****     uECC_word_t *p2[2] = {_private, tmp};
 6919              		.loc 2 1047 0
 6920 000c 07AB     		add	r3, sp, #28
 6921 000e 11AA     		add	r2, sp, #68
 6922 0010 1A60     		str	r2, [r3]
 6923 0012 07AB     		add	r3, sp, #28
 6924 0014 09AA     		add	r2, sp, #36
 6925 0016 5A60     		str	r2, [r3, #4]
1048:uECC.c        ****     uECC_word_t *initial_Z = 0;
 6926              		.loc 2 1048 0
 6927 0018 0023     		movs	r3, #0
 6928 001a 2B93     		str	r3, [sp, #172]
1049:uECC.c        ****     uECC_word_t carry;
1050:uECC.c        ****     wordcount_t num_words = curve->num_words;
 6929              		.loc 2 1050 0
 6930 001c AB23     		movs	r3, #171
 6931 001e 6B44     		add	r3, r3, sp
 6932 0020 029A     		ldr	r2, [sp, #8]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 175


 6933 0022 1278     		ldrb	r2, [r2]
 6934 0024 1A70     		strb	r2, [r3]
1051:uECC.c        ****     wordcount_t num_bytes = curve->num_bytes;
 6935              		.loc 2 1051 0
 6936 0026 AA23     		movs	r3, #170
 6937 0028 6B44     		add	r3, r3, sp
 6938 002a 029A     		ldr	r2, [sp, #8]
 6939 002c 5278     		ldrb	r2, [r2, #1]
 6940 002e 1A70     		strb	r2, [r3]
1052:uECC.c        **** 
1053:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1054:uECC.c        ****     bcopy((uint8_t *) _private, private_key, num_bytes);
1055:uECC.c        ****     bcopy((uint8_t *) _public, public_key, num_bytes*2);
1056:uECC.c        **** #else
1057:uECC.c        ****     uECC_vli_bytesToNative(_private, private_key, BITS_TO_BYTES(curve->num_n_bits));
 6941              		.loc 2 1057 0
 6942 0030 029B     		ldr	r3, [sp, #8]
 6943 0032 0222     		movs	r2, #2
 6944 0034 9B5E     		ldrsh	r3, [r3, r2]
 6945 0036 0733     		adds	r3, r3, #7
 6946 0038 002B     		cmp	r3, #0
 6947 003a 00DA     		bge	.L249
 6948 003c 0733     		adds	r3, r3, #7
 6949              	.L249:
 6950 003e DB10     		asrs	r3, r3, #3
 6951 0040 1A00     		movs	r2, r3
 6952 0042 0499     		ldr	r1, [sp, #16]
 6953 0044 11AB     		add	r3, sp, #68
 6954 0046 1800     		movs	r0, r3
 6955 0048 FFF7FEFF 		bl	uECC_vli_bytesToNative
1058:uECC.c        ****     uECC_vli_bytesToNative(_public, public_key, num_bytes);
 6956              		.loc 2 1058 0
 6957 004c AA23     		movs	r3, #170
 6958 004e 6B44     		add	r3, r3, sp
 6959 0050 0022     		movs	r2, #0
 6960 0052 9A56     		ldrsb	r2, [r3, r2]
 6961 0054 0599     		ldr	r1, [sp, #20]
 6962 0056 19AB     		add	r3, sp, #100
 6963 0058 1800     		movs	r0, r3
 6964 005a FFF7FEFF 		bl	uECC_vli_bytesToNative
1059:uECC.c        ****     uECC_vli_bytesToNative(_public + num_words, public_key + num_bytes, num_bytes);
 6965              		.loc 2 1059 0
 6966 005e AB23     		movs	r3, #171
 6967 0060 6B44     		add	r3, r3, sp
 6968 0062 1B78     		ldrb	r3, [r3]
 6969 0064 5BB2     		sxtb	r3, r3
 6970 0066 9B00     		lsls	r3, r3, #2
 6971 0068 19AA     		add	r2, sp, #100
 6972 006a D018     		adds	r0, r2, r3
 6973 006c AA23     		movs	r3, #170
 6974 006e 6B44     		add	r3, r3, sp
 6975 0070 1B78     		ldrb	r3, [r3]
 6976 0072 5BB2     		sxtb	r3, r3
 6977 0074 059A     		ldr	r2, [sp, #20]
 6978 0076 D118     		adds	r1, r2, r3
 6979 0078 AA23     		movs	r3, #170
 6980 007a 6B44     		add	r3, r3, sp
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 176


 6981 007c 1B78     		ldrb	r3, [r3]
 6982 007e 5BB2     		sxtb	r3, r3
 6983 0080 1A00     		movs	r2, r3
 6984 0082 FFF7FEFF 		bl	uECC_vli_bytesToNative
1060:uECC.c        **** #endif
1061:uECC.c        **** 
1062:uECC.c        ****     /* Regularize the bitcount for the private key so that attackers cannot use a side channel
1063:uECC.c        ****        attack to learn the number of leading zeros. */
1064:uECC.c        ****     carry = regularize_k(_private, _private, tmp, curve);
 6985              		.loc 2 1064 0
 6986 0086 029B     		ldr	r3, [sp, #8]
 6987 0088 09AA     		add	r2, sp, #36
 6988 008a 11A9     		add	r1, sp, #68
 6989 008c 11A8     		add	r0, sp, #68
 6990 008e FFF7FEFF 		bl	regularize_k
 6991 0092 0300     		movs	r3, r0
 6992 0094 2993     		str	r3, [sp, #164]
1065:uECC.c        **** 
1066:uECC.c        ****     /* If an RNG function was specified, try to get a random initial Z value to improve
1067:uECC.c        ****        protection against side-channel attacks. */
1068:uECC.c        ****     if (g_rng_function) {
 6993              		.loc 2 1068 0
 6994 0096 274B     		ldr	r3, .L254
 6995 0098 1B68     		ldr	r3, [r3]
 6996 009a 002B     		cmp	r3, #0
 6997 009c 15D0     		beq	.L250
1069:uECC.c        ****         if (!uECC_generate_random_int(p2[carry], curve->p, num_words)) {
 6998              		.loc 2 1069 0
 6999 009e 07AB     		add	r3, sp, #28
 7000 00a0 299A     		ldr	r2, [sp, #164]
 7001 00a2 9200     		lsls	r2, r2, #2
 7002 00a4 D058     		ldr	r0, [r2, r3]
 7003 00a6 029B     		ldr	r3, [sp, #8]
 7004 00a8 191D     		adds	r1, r3, #4
 7005 00aa AB23     		movs	r3, #171
 7006 00ac 6B44     		add	r3, r3, sp
 7007 00ae 1B78     		ldrb	r3, [r3]
 7008 00b0 5BB2     		sxtb	r3, r3
 7009 00b2 1A00     		movs	r2, r3
 7010 00b4 FFF7FEFF 		bl	uECC_generate_random_int
 7011 00b8 031E     		subs	r3, r0, #0
 7012 00ba 01D1     		bne	.L251
1070:uECC.c        ****             return 0;
 7013              		.loc 2 1070 0
 7014 00bc 0023     		movs	r3, #0
 7015 00be 36E0     		b	.L253
 7016              	.L251:
1071:uECC.c        ****         }
1072:uECC.c        ****         initial_Z = p2[carry];
 7017              		.loc 2 1072 0
 7018 00c0 07AB     		add	r3, sp, #28
 7019 00c2 299A     		ldr	r2, [sp, #164]
 7020 00c4 9200     		lsls	r2, r2, #2
 7021 00c6 D358     		ldr	r3, [r2, r3]
 7022 00c8 2B93     		str	r3, [sp, #172]
 7023              	.L250:
1073:uECC.c        ****     }
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 177


1074:uECC.c        **** 
1075:uECC.c        ****     EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1, curve);
 7024              		.loc 2 1075 0
 7025 00ca 299B     		ldr	r3, [sp, #164]
 7026 00cc 5A42     		rsbs	r2, r3, #0
 7027 00ce 5341     		adcs	r3, r3, r2
 7028 00d0 DBB2     		uxtb	r3, r3
 7029 00d2 1A00     		movs	r2, r3
 7030 00d4 07AB     		add	r3, sp, #28
 7031 00d6 9200     		lsls	r2, r2, #2
 7032 00d8 D458     		ldr	r4, [r2, r3]
 7033 00da 029B     		ldr	r3, [sp, #8]
 7034 00dc 0222     		movs	r2, #2
 7035 00de 9B5E     		ldrsh	r3, [r3, r2]
 7036 00e0 9BB2     		uxth	r3, r3
 7037 00e2 0133     		adds	r3, r3, #1
 7038 00e4 9BB2     		uxth	r3, r3
 7039 00e6 1BB2     		sxth	r3, r3
 7040 00e8 2B9D     		ldr	r5, [sp, #172]
 7041 00ea 19A9     		add	r1, sp, #100
 7042 00ec 19A8     		add	r0, sp, #100
 7043 00ee 029A     		ldr	r2, [sp, #8]
 7044 00f0 0192     		str	r2, [sp, #4]
 7045 00f2 0093     		str	r3, [sp]
 7046 00f4 2B00     		movs	r3, r5
 7047 00f6 2200     		movs	r2, r4
 7048 00f8 FFF7FEFF 		bl	EccPoint_mult
1076:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1077:uECC.c        ****     bcopy((uint8_t *) secret, (uint8_t *) _public, num_bytes);
1078:uECC.c        **** #else
1079:uECC.c        ****     uECC_vli_nativeToBytes(secret, num_bytes, _public);
 7049              		.loc 2 1079 0
 7050 00fc AA23     		movs	r3, #170
 7051 00fe 6B44     		add	r3, r3, sp
 7052 0100 0021     		movs	r1, #0
 7053 0102 5956     		ldrsb	r1, [r3, r1]
 7054 0104 19AA     		add	r2, sp, #100
 7055 0106 039B     		ldr	r3, [sp, #12]
 7056 0108 1800     		movs	r0, r3
 7057 010a FFF7FEFF 		bl	uECC_vli_nativeToBytes
1080:uECC.c        **** #endif
1081:uECC.c        ****     return !EccPoint_isZero(_public, curve);
 7058              		.loc 2 1081 0
 7059 010e 029B     		ldr	r3, [sp, #8]
 7060 0110 1B78     		ldrb	r3, [r3]
 7061 0112 5BB2     		sxtb	r3, r3
 7062 0114 DBB2     		uxtb	r3, r3
 7063 0116 DB18     		adds	r3, r3, r3
 7064 0118 DBB2     		uxtb	r3, r3
 7065 011a 5AB2     		sxtb	r2, r3
 7066 011c 19AB     		add	r3, sp, #100
 7067 011e 1100     		movs	r1, r2
 7068 0120 1800     		movs	r0, r3
 7069 0122 FFF7FEFF 		bl	uECC_vli_isZero
 7070 0126 0300     		movs	r3, r0
 7071 0128 5A42     		rsbs	r2, r3, #0
 7072 012a 5341     		adcs	r3, r3, r2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 178


 7073 012c DBB2     		uxtb	r3, r3
 7074              	.L253:
1082:uECC.c        **** }
 7075              		.loc 2 1082 0 discriminator 1
 7076 012e 1800     		movs	r0, r3
 7077 0130 2DB0     		add	sp, sp, #180
 7078              		@ sp needed
 7079 0132 30BD     		pop	{r4, r5, pc}
 7080              	.L255:
 7081              		.align	2
 7082              	.L254:
 7083 0134 00000000 		.word	g_rng_function
 7084              		.cfi_endproc
 7085              	.LFE58:
 7086              		.size	uECC_shared_secret, .-uECC_shared_secret
 7087              		.section	.text.uECC_compress,"ax",%progbits
 7088              		.align	2
 7089              		.global	uECC_compress
 7090              		.code	16
 7091              		.thumb_func
 7092              		.type	uECC_compress, %function
 7093              	uECC_compress:
 7094              	.LFB59:
1083:uECC.c        **** 
1084:uECC.c        **** #if uECC_SUPPORT_COMPRESSED_POINT
1085:uECC.c        **** void uECC_compress(const uint8_t *public_key, uint8_t *compressed, uECC_Curve curve) {
 7095              		.loc 2 1085 0
 7096              		.cfi_startproc
 7097              		@ args = 0, pretend = 0, frame = 24
 7098              		@ frame_needed = 0, uses_anonymous_args = 0
 7099              		@ link register save eliminated.
 7100 0000 86B0     		sub	sp, sp, #24
 7101              		.cfi_def_cfa_offset 24
 7102 0002 0390     		str	r0, [sp, #12]
 7103 0004 0291     		str	r1, [sp, #8]
 7104 0006 0192     		str	r2, [sp, #4]
1086:uECC.c        ****     wordcount_t i;
1087:uECC.c        ****     for (i = 0; i < curve->num_bytes; ++i) {
 7105              		.loc 2 1087 0
 7106 0008 1723     		movs	r3, #23
 7107 000a 6B44     		add	r3, r3, sp
 7108 000c 0022     		movs	r2, #0
 7109 000e 1A70     		strb	r2, [r3]
 7110 0010 16E0     		b	.L257
 7111              	.L258:
1088:uECC.c        ****         compressed[i+1] = public_key[i];
 7112              		.loc 2 1088 0 discriminator 3
 7113 0012 1723     		movs	r3, #23
 7114 0014 6B44     		add	r3, r3, sp
 7115 0016 1B78     		ldrb	r3, [r3]
 7116 0018 5BB2     		sxtb	r3, r3
 7117 001a 0133     		adds	r3, r3, #1
 7118 001c 029A     		ldr	r2, [sp, #8]
 7119 001e D318     		adds	r3, r2, r3
 7120 0020 1722     		movs	r2, #23
 7121 0022 6A44     		add	r2, r2, sp
 7122 0024 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 179


 7123 0026 52B2     		sxtb	r2, r2
 7124 0028 0399     		ldr	r1, [sp, #12]
 7125 002a 8A18     		adds	r2, r1, r2
 7126 002c 1278     		ldrb	r2, [r2]
 7127 002e 1A70     		strb	r2, [r3]
1087:uECC.c        ****         compressed[i+1] = public_key[i];
 7128              		.loc 2 1087 0 discriminator 3
 7129 0030 1723     		movs	r3, #23
 7130 0032 6B44     		add	r3, r3, sp
 7131 0034 1B78     		ldrb	r3, [r3]
 7132 0036 0133     		adds	r3, r3, #1
 7133 0038 DAB2     		uxtb	r2, r3
 7134 003a 1723     		movs	r3, #23
 7135 003c 6B44     		add	r3, r3, sp
 7136 003e 1A70     		strb	r2, [r3]
 7137              	.L257:
1087:uECC.c        ****         compressed[i+1] = public_key[i];
 7138              		.loc 2 1087 0 is_stmt 0 discriminator 1
 7139 0040 019B     		ldr	r3, [sp, #4]
 7140 0042 5B78     		ldrb	r3, [r3, #1]
 7141 0044 5BB2     		sxtb	r3, r3
 7142 0046 1722     		movs	r2, #23
 7143 0048 6A44     		add	r2, r2, sp
 7144 004a 1278     		ldrb	r2, [r2]
 7145 004c 52B2     		sxtb	r2, r2
 7146 004e 9A42     		cmp	r2, r3
 7147 0050 DFDB     		blt	.L258
1089:uECC.c        ****     }
1090:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1091:uECC.c        ****     compressed[0] = 2 + (public_key[curve->num_bytes] & 0x01);
1092:uECC.c        **** #else
1093:uECC.c        ****     compressed[0] = 2 + (public_key[curve->num_bytes * 2 - 1] & 0x01);
 7148              		.loc 2 1093 0 is_stmt 1
 7149 0052 019B     		ldr	r3, [sp, #4]
 7150 0054 5B78     		ldrb	r3, [r3, #1]
 7151 0056 5BB2     		sxtb	r3, r3
 7152 0058 5B00     		lsls	r3, r3, #1
 7153 005a 013B     		subs	r3, r3, #1
 7154 005c 039A     		ldr	r2, [sp, #12]
 7155 005e D318     		adds	r3, r2, r3
 7156 0060 1B78     		ldrb	r3, [r3]
 7157 0062 0122     		movs	r2, #1
 7158 0064 1340     		ands	r3, r2
 7159 0066 DBB2     		uxtb	r3, r3
 7160 0068 0233     		adds	r3, r3, #2
 7161 006a DAB2     		uxtb	r2, r3
 7162 006c 029B     		ldr	r3, [sp, #8]
 7163 006e 1A70     		strb	r2, [r3]
1094:uECC.c        **** #endif
1095:uECC.c        **** }
 7164              		.loc 2 1095 0
 7165 0070 C046     		nop
 7166 0072 06B0     		add	sp, sp, #24
 7167              		@ sp needed
 7168 0074 7047     		bx	lr
 7169              		.cfi_endproc
 7170              	.LFE59:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 180


 7171              		.size	uECC_compress, .-uECC_compress
 7172 0076 C046     		.section	.text.uECC_decompress,"ax",%progbits
 7173              		.align	2
 7174              		.global	uECC_decompress
 7175              		.code	16
 7176              		.thumb_func
 7177              		.type	uECC_decompress, %function
 7178              	uECC_decompress:
 7179              	.LFB60:
1096:uECC.c        **** 
1097:uECC.c        **** void uECC_decompress(const uint8_t *compressed, uint8_t *public_key, uECC_Curve curve) {
 7180              		.loc 2 1097 0
 7181              		.cfi_startproc
 7182              		@ args = 0, pretend = 0, frame = 88
 7183              		@ frame_needed = 0, uses_anonymous_args = 0
 7184 0000 00B5     		push	{lr}
 7185              		.cfi_def_cfa_offset 4
 7186              		.cfi_offset 14, -4
 7187 0002 97B0     		sub	sp, sp, #92
 7188              		.cfi_def_cfa_offset 96
 7189 0004 0390     		str	r0, [sp, #12]
 7190 0006 0291     		str	r1, [sp, #8]
 7191 0008 0192     		str	r2, [sp, #4]
1098:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1099:uECC.c        ****     uECC_word_t *point = (uECC_word_t *)public_key;
1100:uECC.c        **** #else
1101:uECC.c        ****     uECC_word_t point[uECC_MAX_WORDS * 2];
1102:uECC.c        **** #endif
1103:uECC.c        ****     uECC_word_t *y = point + curve->num_words;
 7192              		.loc 2 1103 0
 7193 000a 019B     		ldr	r3, [sp, #4]
 7194 000c 1B78     		ldrb	r3, [r3]
 7195 000e 5BB2     		sxtb	r3, r3
 7196 0010 9B00     		lsls	r3, r3, #2
 7197 0012 05AA     		add	r2, sp, #20
 7198 0014 D318     		adds	r3, r2, r3
 7199 0016 1593     		str	r3, [sp, #84]
1104:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1105:uECC.c        ****     bcopy(public_key, compressed+1, curve->num_bytes);
1106:uECC.c        **** #else
1107:uECC.c        ****     uECC_vli_bytesToNative(point, compressed + 1, curve->num_bytes);
 7200              		.loc 2 1107 0
 7201 0018 039B     		ldr	r3, [sp, #12]
 7202 001a 591C     		adds	r1, r3, #1
 7203 001c 019B     		ldr	r3, [sp, #4]
 7204 001e 5B78     		ldrb	r3, [r3, #1]
 7205 0020 5BB2     		sxtb	r3, r3
 7206 0022 1A00     		movs	r2, r3
 7207 0024 05AB     		add	r3, sp, #20
 7208 0026 1800     		movs	r0, r3
 7209 0028 FFF7FEFF 		bl	uECC_vli_bytesToNative
1108:uECC.c        **** #endif
1109:uECC.c        ****     curve->x_side(y, point, curve);
 7210              		.loc 2 1109 0
 7211 002c 019B     		ldr	r3, [sp, #4]
 7212 002e AC22     		movs	r2, #172
 7213 0030 9B58     		ldr	r3, [r3, r2]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 181


 7214 0032 019A     		ldr	r2, [sp, #4]
 7215 0034 05A9     		add	r1, sp, #20
 7216 0036 1598     		ldr	r0, [sp, #84]
 7217 0038 9847     		blx	r3
1110:uECC.c        ****     curve->mod_sqrt(y, curve);
 7218              		.loc 2 1110 0
 7219 003a 019B     		ldr	r3, [sp, #4]
 7220 003c A822     		movs	r2, #168
 7221 003e 9B58     		ldr	r3, [r3, r2]
 7222 0040 0199     		ldr	r1, [sp, #4]
 7223 0042 159A     		ldr	r2, [sp, #84]
 7224 0044 1000     		movs	r0, r2
 7225 0046 9847     		blx	r3
1111:uECC.c        **** 
1112:uECC.c        ****     if ((y[0] & 0x01) != (compressed[0] & 0x01)) {
 7226              		.loc 2 1112 0
 7227 0048 159B     		ldr	r3, [sp, #84]
 7228 004a 1B68     		ldr	r3, [r3]
 7229 004c 039A     		ldr	r2, [sp, #12]
 7230 004e 1278     		ldrb	r2, [r2]
 7231 0050 5340     		eors	r3, r2
 7232 0052 0122     		movs	r2, #1
 7233 0054 1340     		ands	r3, r2
 7234 0056 08D0     		beq	.L260
1113:uECC.c        ****         uECC_vli_sub(y, curve->p, y, curve->num_words);
 7235              		.loc 2 1113 0
 7236 0058 019B     		ldr	r3, [sp, #4]
 7237 005a 191D     		adds	r1, r3, #4
 7238 005c 019B     		ldr	r3, [sp, #4]
 7239 005e 1B78     		ldrb	r3, [r3]
 7240 0060 5BB2     		sxtb	r3, r3
 7241 0062 159A     		ldr	r2, [sp, #84]
 7242 0064 1598     		ldr	r0, [sp, #84]
 7243 0066 FFF7FEFF 		bl	uECC_vli_sub
 7244              	.L260:
1114:uECC.c        ****     }
1115:uECC.c        **** 
1116:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
1117:uECC.c        ****     uECC_vli_nativeToBytes(public_key, curve->num_bytes, point);
 7245              		.loc 2 1117 0
 7246 006a 019B     		ldr	r3, [sp, #4]
 7247 006c 5B78     		ldrb	r3, [r3, #1]
 7248 006e 5BB2     		sxtb	r3, r3
 7249 0070 1900     		movs	r1, r3
 7250 0072 05AA     		add	r2, sp, #20
 7251 0074 029B     		ldr	r3, [sp, #8]
 7252 0076 1800     		movs	r0, r3
 7253 0078 FFF7FEFF 		bl	uECC_vli_nativeToBytes
1118:uECC.c        ****     uECC_vli_nativeToBytes(public_key + curve->num_bytes, curve->num_bytes, y);
 7254              		.loc 2 1118 0
 7255 007c 019B     		ldr	r3, [sp, #4]
 7256 007e 5B78     		ldrb	r3, [r3, #1]
 7257 0080 5BB2     		sxtb	r3, r3
 7258 0082 1A00     		movs	r2, r3
 7259 0084 029B     		ldr	r3, [sp, #8]
 7260 0086 9818     		adds	r0, r3, r2
 7261 0088 019B     		ldr	r3, [sp, #4]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 182


 7262 008a 5B78     		ldrb	r3, [r3, #1]
 7263 008c 5BB2     		sxtb	r3, r3
 7264 008e 1900     		movs	r1, r3
 7265 0090 159B     		ldr	r3, [sp, #84]
 7266 0092 1A00     		movs	r2, r3
 7267 0094 FFF7FEFF 		bl	uECC_vli_nativeToBytes
1119:uECC.c        **** #endif
1120:uECC.c        **** }
 7268              		.loc 2 1120 0
 7269 0098 C046     		nop
 7270 009a 17B0     		add	sp, sp, #92
 7271              		@ sp needed
 7272 009c 00BD     		pop	{pc}
 7273              		.cfi_endproc
 7274              	.LFE60:
 7275              		.size	uECC_decompress, .-uECC_decompress
 7276 009e C046     		.section	.text.uECC_valid_point,"ax",%progbits
 7277              		.align	2
 7278              		.global	uECC_valid_point
 7279              		.code	16
 7280              		.thumb_func
 7281              		.type	uECC_valid_point, %function
 7282              	uECC_valid_point:
 7283              	.LFB61:
1121:uECC.c        **** #endif /* uECC_SUPPORT_COMPRESSED_POINT */
1122:uECC.c        **** 
1123:uECC.c        **** int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve) {
 7284              		.loc 2 1123 0
 7285              		.cfi_startproc
 7286              		@ args = 0, pretend = 0, frame = 80
 7287              		@ frame_needed = 0, uses_anonymous_args = 0
 7288 0000 00B5     		push	{lr}
 7289              		.cfi_def_cfa_offset 4
 7290              		.cfi_offset 14, -4
 7291 0002 95B0     		sub	sp, sp, #84
 7292              		.cfi_def_cfa_offset 88
 7293 0004 0190     		str	r0, [sp, #4]
 7294 0006 0091     		str	r1, [sp]
1124:uECC.c        ****     uECC_word_t tmp1[uECC_MAX_WORDS];
1125:uECC.c        ****     uECC_word_t tmp2[uECC_MAX_WORDS];
1126:uECC.c        ****     wordcount_t num_words = curve->num_words;
 7295              		.loc 2 1126 0
 7296 0008 4F23     		movs	r3, #79
 7297 000a 6B44     		add	r3, r3, sp
 7298 000c 009A     		ldr	r2, [sp]
 7299 000e 1278     		ldrb	r2, [r2]
 7300 0010 1A70     		strb	r2, [r3]
1127:uECC.c        **** 
1128:uECC.c        ****     /* The point at infinity is invalid. */
1129:uECC.c        ****     if (EccPoint_isZero(point, curve)) {
 7301              		.loc 2 1129 0
 7302 0012 009B     		ldr	r3, [sp]
 7303 0014 1B78     		ldrb	r3, [r3]
 7304 0016 5BB2     		sxtb	r3, r3
 7305 0018 DBB2     		uxtb	r3, r3
 7306 001a DB18     		adds	r3, r3, r3
 7307 001c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 183


 7308 001e 5AB2     		sxtb	r2, r3
 7309 0020 019B     		ldr	r3, [sp, #4]
 7310 0022 1100     		movs	r1, r2
 7311 0024 1800     		movs	r0, r3
 7312 0026 FFF7FEFF 		bl	uECC_vli_isZero
 7313 002a 031E     		subs	r3, r0, #0
 7314 002c 01D0     		beq	.L262
1130:uECC.c        ****         return 0;
 7315              		.loc 2 1130 0
 7316 002e 0023     		movs	r3, #0
 7317 0030 3EE0     		b	.L266
 7318              	.L262:
1131:uECC.c        ****     }
1132:uECC.c        **** 
1133:uECC.c        ****     /* x and y must be smaller than p. */
1134:uECC.c        ****     if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
 7319              		.loc 2 1134 0
 7320 0032 009B     		ldr	r3, [sp]
 7321 0034 181D     		adds	r0, r3, #4
 7322 0036 4F23     		movs	r3, #79
 7323 0038 6B44     		add	r3, r3, sp
 7324 003a 0022     		movs	r2, #0
 7325 003c 9A56     		ldrsb	r2, [r3, r2]
 7326 003e 019B     		ldr	r3, [sp, #4]
 7327 0040 1900     		movs	r1, r3
 7328 0042 FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 7329 0046 0300     		movs	r3, r0
 7330 0048 012B     		cmp	r3, #1
 7331 004a 12D1     		bne	.L264
1135:uECC.c        ****             uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
 7332              		.loc 2 1135 0 discriminator 1
 7333 004c 009B     		ldr	r3, [sp]
 7334 004e 181D     		adds	r0, r3, #4
 7335 0050 4F23     		movs	r3, #79
 7336 0052 6B44     		add	r3, r3, sp
 7337 0054 1B78     		ldrb	r3, [r3]
 7338 0056 5BB2     		sxtb	r3, r3
 7339 0058 9B00     		lsls	r3, r3, #2
 7340 005a 019A     		ldr	r2, [sp, #4]
 7341 005c D118     		adds	r1, r2, r3
 7342 005e 4F23     		movs	r3, #79
 7343 0060 6B44     		add	r3, r3, sp
 7344 0062 1B78     		ldrb	r3, [r3]
 7345 0064 5BB2     		sxtb	r3, r3
 7346 0066 1A00     		movs	r2, r3
 7347 0068 FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 7348 006c 0300     		movs	r3, r0
1134:uECC.c        ****             uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
 7349              		.loc 2 1134 0 discriminator 1
 7350 006e 012B     		cmp	r3, #1
 7351 0070 01D0     		beq	.L265
 7352              	.L264:
1136:uECC.c        ****         return 0;
 7353              		.loc 2 1136 0
 7354 0072 0023     		movs	r3, #0
 7355 0074 1CE0     		b	.L266
 7356              	.L265:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 184


1137:uECC.c        ****     }
1138:uECC.c        **** 
1139:uECC.c        ****     uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
 7357              		.loc 2 1139 0
 7358 0076 4F23     		movs	r3, #79
 7359 0078 6B44     		add	r3, r3, sp
 7360 007a 1B78     		ldrb	r3, [r3]
 7361 007c 5BB2     		sxtb	r3, r3
 7362 007e 9B00     		lsls	r3, r3, #2
 7363 0080 019A     		ldr	r2, [sp, #4]
 7364 0082 D118     		adds	r1, r2, r3
 7365 0084 009A     		ldr	r2, [sp]
 7366 0086 0BAB     		add	r3, sp, #44
 7367 0088 1800     		movs	r0, r3
 7368 008a FFF7FEFF 		bl	uECC_vli_modSquare_fast
1140:uECC.c        ****     curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
 7369              		.loc 2 1140 0
 7370 008e 009B     		ldr	r3, [sp]
 7371 0090 AC22     		movs	r2, #172
 7372 0092 9B58     		ldr	r3, [r3, r2]
 7373 0094 009A     		ldr	r2, [sp]
 7374 0096 0199     		ldr	r1, [sp, #4]
 7375 0098 03A8     		add	r0, sp, #12
 7376 009a 9847     		blx	r3
1141:uECC.c        **** 
1142:uECC.c        ****     /* Make sure that y^2 == x^3 + ax + b */
1143:uECC.c        ****     return (int)(uECC_vli_equal(tmp1, tmp2, num_words));
 7377              		.loc 2 1143 0
 7378 009c 4F23     		movs	r3, #79
 7379 009e 6B44     		add	r3, r3, sp
 7380 00a0 0022     		movs	r2, #0
 7381 00a2 9A56     		ldrsb	r2, [r3, r2]
 7382 00a4 03A9     		add	r1, sp, #12
 7383 00a6 0BAB     		add	r3, sp, #44
 7384 00a8 1800     		movs	r0, r3
 7385 00aa FFF7FEFF 		bl	uECC_vli_equal
 7386 00ae 0300     		movs	r3, r0
 7387              	.L266:
1144:uECC.c        **** }
 7388              		.loc 2 1144 0 discriminator 1
 7389 00b0 1800     		movs	r0, r3
 7390 00b2 15B0     		add	sp, sp, #84
 7391              		@ sp needed
 7392 00b4 00BD     		pop	{pc}
 7393              		.cfi_endproc
 7394              	.LFE61:
 7395              		.size	uECC_valid_point, .-uECC_valid_point
 7396 00b6 C046     		.section	.text.uECC_valid_public_key,"ax",%progbits
 7397              		.align	2
 7398              		.global	uECC_valid_public_key
 7399              		.code	16
 7400              		.thumb_func
 7401              		.type	uECC_valid_public_key, %function
 7402              	uECC_valid_public_key:
 7403              	.LFB62:
1145:uECC.c        **** 
1146:uECC.c        **** int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve) {
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 185


 7404              		.loc 2 1146 0
 7405              		.cfi_startproc
 7406              		@ args = 0, pretend = 0, frame = 72
 7407              		@ frame_needed = 0, uses_anonymous_args = 0
 7408 0000 00B5     		push	{lr}
 7409              		.cfi_def_cfa_offset 4
 7410              		.cfi_offset 14, -4
 7411 0002 93B0     		sub	sp, sp, #76
 7412              		.cfi_def_cfa_offset 80
 7413 0004 0190     		str	r0, [sp, #4]
 7414 0006 0091     		str	r1, [sp]
1147:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1148:uECC.c        ****     uECC_word_t *_public = (uECC_word_t *)public_key;
1149:uECC.c        **** #else
1150:uECC.c        ****     uECC_word_t _public[uECC_MAX_WORDS * 2];
1151:uECC.c        **** #endif
1152:uECC.c        **** 
1153:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
1154:uECC.c        ****     uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
 7415              		.loc 2 1154 0
 7416 0008 009B     		ldr	r3, [sp]
 7417 000a 5B78     		ldrb	r3, [r3, #1]
 7418 000c 5BB2     		sxtb	r3, r3
 7419 000e 1A00     		movs	r2, r3
 7420 0010 0199     		ldr	r1, [sp, #4]
 7421 0012 02AB     		add	r3, sp, #8
 7422 0014 1800     		movs	r0, r3
 7423 0016 FFF7FEFF 		bl	uECC_vli_bytesToNative
1155:uECC.c        ****     uECC_vli_bytesToNative(
1156:uECC.c        ****         _public + curve->num_words, public_key + curve->num_bytes, curve->num_bytes);
 7424              		.loc 2 1156 0
 7425 001a 009B     		ldr	r3, [sp]
 7426 001c 1B78     		ldrb	r3, [r3]
 7427 001e 5BB2     		sxtb	r3, r3
 7428 0020 9B00     		lsls	r3, r3, #2
1155:uECC.c        ****     uECC_vli_bytesToNative(
 7429              		.loc 2 1155 0
 7430 0022 02AA     		add	r2, sp, #8
 7431 0024 D018     		adds	r0, r2, r3
 7432              		.loc 2 1156 0
 7433 0026 009B     		ldr	r3, [sp]
 7434 0028 5B78     		ldrb	r3, [r3, #1]
 7435 002a 5BB2     		sxtb	r3, r3
1155:uECC.c        ****     uECC_vli_bytesToNative(
 7436              		.loc 2 1155 0
 7437 002c 1A00     		movs	r2, r3
 7438 002e 019B     		ldr	r3, [sp, #4]
 7439 0030 9918     		adds	r1, r3, r2
 7440              		.loc 2 1156 0
 7441 0032 009B     		ldr	r3, [sp]
 7442 0034 5B78     		ldrb	r3, [r3, #1]
 7443 0036 5BB2     		sxtb	r3, r3
1155:uECC.c        ****     uECC_vli_bytesToNative(
 7444              		.loc 2 1155 0
 7445 0038 1A00     		movs	r2, r3
 7446 003a FFF7FEFF 		bl	uECC_vli_bytesToNative
1157:uECC.c        **** #endif
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 186


1158:uECC.c        ****     return uECC_valid_point(_public, curve);
 7447              		.loc 2 1158 0
 7448 003e 009A     		ldr	r2, [sp]
 7449 0040 02AB     		add	r3, sp, #8
 7450 0042 1100     		movs	r1, r2
 7451 0044 1800     		movs	r0, r3
 7452 0046 FFF7FEFF 		bl	uECC_valid_point
 7453 004a 0300     		movs	r3, r0
1159:uECC.c        **** }
 7454              		.loc 2 1159 0
 7455 004c 1800     		movs	r0, r3
 7456 004e 13B0     		add	sp, sp, #76
 7457              		@ sp needed
 7458 0050 00BD     		pop	{pc}
 7459              		.cfi_endproc
 7460              	.LFE62:
 7461              		.size	uECC_valid_public_key, .-uECC_valid_public_key
 7462 0052 C046     		.section	.text.uECC_compute_public_key,"ax",%progbits
 7463              		.align	2
 7464              		.global	uECC_compute_public_key
 7465              		.code	16
 7466              		.thumb_func
 7467              		.type	uECC_compute_public_key, %function
 7468              	uECC_compute_public_key:
 7469              	.LFB63:
1160:uECC.c        **** 
1161:uECC.c        **** int uECC_compute_public_key(const uint8_t *private_key, uint8_t *public_key, uECC_Curve curve) {
 7470              		.loc 2 1161 0
 7471              		.cfi_startproc
 7472              		@ args = 0, pretend = 0, frame = 112
 7473              		@ frame_needed = 0, uses_anonymous_args = 0
 7474 0000 00B5     		push	{lr}
 7475              		.cfi_def_cfa_offset 4
 7476              		.cfi_offset 14, -4
 7477 0002 9DB0     		sub	sp, sp, #116
 7478              		.cfi_def_cfa_offset 120
 7479 0004 0390     		str	r0, [sp, #12]
 7480 0006 0291     		str	r1, [sp, #8]
 7481 0008 0192     		str	r2, [sp, #4]
1162:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1163:uECC.c        ****     uECC_word_t *_private = (uECC_word_t *)private_key;
1164:uECC.c        ****     uECC_word_t *_public = (uECC_word_t *)public_key;
1165:uECC.c        **** #else
1166:uECC.c        ****     uECC_word_t _private[uECC_MAX_WORDS];
1167:uECC.c        ****     uECC_word_t _public[uECC_MAX_WORDS * 2];
1168:uECC.c        **** #endif
1169:uECC.c        **** 
1170:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
1171:uECC.c        ****     uECC_vli_bytesToNative(_private, private_key, BITS_TO_BYTES(curve->num_n_bits));
 7482              		.loc 2 1171 0
 7483 000a 019B     		ldr	r3, [sp, #4]
 7484 000c 0222     		movs	r2, #2
 7485 000e 9B5E     		ldrsh	r3, [r3, r2]
 7486 0010 0733     		adds	r3, r3, #7
 7487 0012 002B     		cmp	r3, #0
 7488 0014 00DA     		bge	.L270
 7489 0016 0733     		adds	r3, r3, #7
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 187


 7490              	.L270:
 7491 0018 DB10     		asrs	r3, r3, #3
 7492 001a 1A00     		movs	r2, r3
 7493 001c 0399     		ldr	r1, [sp, #12]
 7494 001e 14AB     		add	r3, sp, #80
 7495 0020 1800     		movs	r0, r3
 7496 0022 FFF7FEFF 		bl	uECC_vli_bytesToNative
1172:uECC.c        **** #endif
1173:uECC.c        **** 
1174:uECC.c        ****     /* Make sure the private key is in the range [1, n-1]. */
1175:uECC.c        ****     if (uECC_vli_isZero(_private, BITS_TO_WORDS(curve->num_n_bits))) {
 7497              		.loc 2 1175 0
 7498 0026 019B     		ldr	r3, [sp, #4]
 7499 0028 0222     		movs	r2, #2
 7500 002a 9B5E     		ldrsh	r3, [r3, r2]
 7501 002c 1F33     		adds	r3, r3, #31
 7502 002e 002B     		cmp	r3, #0
 7503 0030 00DA     		bge	.L271
 7504 0032 1F33     		adds	r3, r3, #31
 7505              	.L271:
 7506 0034 5B11     		asrs	r3, r3, #5
 7507 0036 5AB2     		sxtb	r2, r3
 7508 0038 14AB     		add	r3, sp, #80
 7509 003a 1100     		movs	r1, r2
 7510 003c 1800     		movs	r0, r3
 7511 003e FFF7FEFF 		bl	uECC_vli_isZero
 7512 0042 031E     		subs	r3, r0, #0
 7513 0044 01D0     		beq	.L272
1176:uECC.c        ****         return 0;
 7514              		.loc 2 1176 0
 7515 0046 0023     		movs	r3, #0
 7516 0048 3BE0     		b	.L277
 7517              	.L272:
1177:uECC.c        ****     }
1178:uECC.c        **** 
1179:uECC.c        ****     if (uECC_vli_cmp(curve->n, _private, BITS_TO_WORDS(curve->num_n_bits)) != 1) {
 7518              		.loc 2 1179 0
 7519 004a 019B     		ldr	r3, [sp, #4]
 7520 004c 2433     		adds	r3, r3, #36
 7521 004e 1800     		movs	r0, r3
 7522 0050 019B     		ldr	r3, [sp, #4]
 7523 0052 0222     		movs	r2, #2
 7524 0054 9B5E     		ldrsh	r3, [r3, r2]
 7525 0056 1F33     		adds	r3, r3, #31
 7526 0058 002B     		cmp	r3, #0
 7527 005a 00DA     		bge	.L274
 7528 005c 1F33     		adds	r3, r3, #31
 7529              	.L274:
 7530 005e 5B11     		asrs	r3, r3, #5
 7531 0060 5AB2     		sxtb	r2, r3
 7532 0062 14AB     		add	r3, sp, #80
 7533 0064 1900     		movs	r1, r3
 7534 0066 FFF7FEFF 		bl	uECC_vli_cmp
 7535 006a 0300     		movs	r3, r0
 7536 006c 012B     		cmp	r3, #1
 7537 006e 01D0     		beq	.L275
1180:uECC.c        ****         return 0;
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 188


 7538              		.loc 2 1180 0
 7539 0070 0023     		movs	r3, #0
 7540 0072 26E0     		b	.L277
 7541              	.L275:
1181:uECC.c        ****     }
1182:uECC.c        **** 
1183:uECC.c        ****     /* Compute public key. */
1184:uECC.c        ****     if (!EccPoint_compute_public_key(_public, _private, curve)) {
 7542              		.loc 2 1184 0
 7543 0074 019A     		ldr	r2, [sp, #4]
 7544 0076 14A9     		add	r1, sp, #80
 7545 0078 04AB     		add	r3, sp, #16
 7546 007a 1800     		movs	r0, r3
 7547 007c FFF7FEFF 		bl	EccPoint_compute_public_key
 7548 0080 031E     		subs	r3, r0, #0
 7549 0082 01D1     		bne	.L276
1185:uECC.c        ****         return 0;
 7550              		.loc 2 1185 0
 7551 0084 0023     		movs	r3, #0
 7552 0086 1CE0     		b	.L277
 7553              	.L276:
1186:uECC.c        ****     }
1187:uECC.c        **** 
1188:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
1189:uECC.c        ****     uECC_vli_nativeToBytes(public_key, curve->num_bytes, _public);
 7554              		.loc 2 1189 0
 7555 0088 019B     		ldr	r3, [sp, #4]
 7556 008a 5B78     		ldrb	r3, [r3, #1]
 7557 008c 5BB2     		sxtb	r3, r3
 7558 008e 1900     		movs	r1, r3
 7559 0090 04AA     		add	r2, sp, #16
 7560 0092 029B     		ldr	r3, [sp, #8]
 7561 0094 1800     		movs	r0, r3
 7562 0096 FFF7FEFF 		bl	uECC_vli_nativeToBytes
1190:uECC.c        ****     uECC_vli_nativeToBytes(
1191:uECC.c        ****         public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
 7563              		.loc 2 1191 0
 7564 009a 019B     		ldr	r3, [sp, #4]
 7565 009c 5B78     		ldrb	r3, [r3, #1]
 7566 009e 5BB2     		sxtb	r3, r3
1190:uECC.c        ****     uECC_vli_nativeToBytes(
 7567              		.loc 2 1190 0
 7568 00a0 1A00     		movs	r2, r3
 7569 00a2 029B     		ldr	r3, [sp, #8]
 7570 00a4 9818     		adds	r0, r3, r2
 7571              		.loc 2 1191 0
 7572 00a6 019B     		ldr	r3, [sp, #4]
 7573 00a8 5B78     		ldrb	r3, [r3, #1]
 7574 00aa 5BB2     		sxtb	r3, r3
1190:uECC.c        ****     uECC_vli_nativeToBytes(
 7575              		.loc 2 1190 0
 7576 00ac 1900     		movs	r1, r3
 7577              		.loc 2 1191 0
 7578 00ae 019B     		ldr	r3, [sp, #4]
 7579 00b0 1B78     		ldrb	r3, [r3]
 7580 00b2 5BB2     		sxtb	r3, r3
 7581 00b4 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 189


1190:uECC.c        ****     uECC_vli_nativeToBytes(
 7582              		.loc 2 1190 0
 7583 00b6 04AA     		add	r2, sp, #16
 7584 00b8 D318     		adds	r3, r2, r3
 7585 00ba 1A00     		movs	r2, r3
 7586 00bc FFF7FEFF 		bl	uECC_vli_nativeToBytes
1192:uECC.c        **** #endif
1193:uECC.c        ****     return 1;
 7587              		.loc 2 1193 0
 7588 00c0 0123     		movs	r3, #1
 7589              	.L277:
1194:uECC.c        **** }
 7590              		.loc 2 1194 0 discriminator 1
 7591 00c2 1800     		movs	r0, r3
 7592 00c4 1DB0     		add	sp, sp, #116
 7593              		@ sp needed
 7594 00c6 00BD     		pop	{pc}
 7595              		.cfi_endproc
 7596              	.LFE63:
 7597              		.size	uECC_compute_public_key, .-uECC_compute_public_key
 7598              		.section	.text.bits2int,"ax",%progbits
 7599              		.align	2
 7600              		.code	16
 7601              		.thumb_func
 7602              		.type	bits2int, %function
 7603              	bits2int:
 7604              	.LFB64:
1195:uECC.c        **** 
1196:uECC.c        **** 
1197:uECC.c        **** /* -------- ECDSA code -------- */
1198:uECC.c        **** 
1199:uECC.c        **** static void bits2int(uECC_word_t *native,
1200:uECC.c        ****                      const uint8_t *bits,
1201:uECC.c        ****                      unsigned bits_size,
1202:uECC.c        ****                      uECC_Curve curve) {
 7605              		.loc 2 1202 0
 7606              		.cfi_startproc
 7607              		@ args = 0, pretend = 0, frame = 40
 7608              		@ frame_needed = 0, uses_anonymous_args = 0
 7609 0000 00B5     		push	{lr}
 7610              		.cfi_def_cfa_offset 4
 7611              		.cfi_offset 14, -4
 7612 0002 8BB0     		sub	sp, sp, #44
 7613              		.cfi_def_cfa_offset 48
 7614 0004 0390     		str	r0, [sp, #12]
 7615 0006 0291     		str	r1, [sp, #8]
 7616 0008 0192     		str	r2, [sp, #4]
 7617 000a 0093     		str	r3, [sp]
1203:uECC.c        ****     unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 7618              		.loc 2 1203 0
 7619 000c 009B     		ldr	r3, [sp]
 7620 000e 0222     		movs	r2, #2
 7621 0010 9B5E     		ldrsh	r3, [r3, r2]
 7622 0012 0733     		adds	r3, r3, #7
 7623 0014 002B     		cmp	r3, #0
 7624 0016 00DA     		bge	.L279
 7625 0018 0733     		adds	r3, r3, #7
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 190


 7626              	.L279:
 7627 001a DB10     		asrs	r3, r3, #3
 7628 001c 0793     		str	r3, [sp, #28]
1204:uECC.c        ****     unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 7629              		.loc 2 1204 0
 7630 001e 009B     		ldr	r3, [sp]
 7631 0020 0222     		movs	r2, #2
 7632 0022 9B5E     		ldrsh	r3, [r3, r2]
 7633 0024 1F33     		adds	r3, r3, #31
 7634 0026 002B     		cmp	r3, #0
 7635 0028 00DA     		bge	.L280
 7636 002a 1F33     		adds	r3, r3, #31
 7637              	.L280:
 7638 002c 5B11     		asrs	r3, r3, #5
 7639 002e 0693     		str	r3, [sp, #24]
1205:uECC.c        ****     int shift;
1206:uECC.c        ****     uECC_word_t carry;
1207:uECC.c        ****     uECC_word_t *ptr;
1208:uECC.c        **** 
1209:uECC.c        ****     if (bits_size > num_n_bytes) {
 7640              		.loc 2 1209 0
 7641 0030 019A     		ldr	r2, [sp, #4]
 7642 0032 079B     		ldr	r3, [sp, #28]
 7643 0034 9A42     		cmp	r2, r3
 7644 0036 01D9     		bls	.L281
1210:uECC.c        ****         bits_size = num_n_bytes;
 7645              		.loc 2 1210 0
 7646 0038 079B     		ldr	r3, [sp, #28]
 7647 003a 0193     		str	r3, [sp, #4]
 7648              	.L281:
1211:uECC.c        ****     }
1212:uECC.c        **** 
1213:uECC.c        ****     uECC_vli_clear(native, num_n_words);
 7649              		.loc 2 1213 0
 7650 003c 069B     		ldr	r3, [sp, #24]
 7651 003e 5AB2     		sxtb	r2, r3
 7652 0040 039B     		ldr	r3, [sp, #12]
 7653 0042 1100     		movs	r1, r2
 7654 0044 1800     		movs	r0, r3
 7655 0046 FFF7FEFF 		bl	uECC_vli_clear
1214:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1215:uECC.c        ****     bcopy((uint8_t *) native, bits, bits_size);
1216:uECC.c        **** #else
1217:uECC.c        ****     uECC_vli_bytesToNative(native, bits, bits_size);
 7656              		.loc 2 1217 0
 7657 004a 019A     		ldr	r2, [sp, #4]
 7658 004c 0299     		ldr	r1, [sp, #8]
 7659 004e 039B     		ldr	r3, [sp, #12]
 7660 0050 1800     		movs	r0, r3
 7661 0052 FFF7FEFF 		bl	uECC_vli_bytesToNative
1218:uECC.c        **** #endif    
1219:uECC.c        ****     if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
 7662              		.loc 2 1219 0
 7663 0056 019B     		ldr	r3, [sp, #4]
 7664 0058 DB00     		lsls	r3, r3, #3
 7665 005a 009A     		ldr	r2, [sp]
 7666 005c 0221     		movs	r1, #2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 191


 7667 005e 525E     		ldrsh	r2, [r2, r1]
 7668 0060 9342     		cmp	r3, r2
 7669 0062 3AD9     		bls	.L286
1220:uECC.c        ****         return;
1221:uECC.c        ****     }
1222:uECC.c        ****     shift = bits_size * 8 - curve->num_n_bits;
 7670              		.loc 2 1222 0
 7671 0064 019B     		ldr	r3, [sp, #4]
 7672 0066 DB00     		lsls	r3, r3, #3
 7673 0068 009A     		ldr	r2, [sp]
 7674 006a 0221     		movs	r1, #2
 7675 006c 525E     		ldrsh	r2, [r2, r1]
 7676 006e 9B1A     		subs	r3, r3, r2
 7677 0070 0593     		str	r3, [sp, #20]
1223:uECC.c        ****     carry = 0;
 7678              		.loc 2 1223 0
 7679 0072 0023     		movs	r3, #0
 7680 0074 0993     		str	r3, [sp, #36]
1224:uECC.c        ****     ptr = native + num_n_words;
 7681              		.loc 2 1224 0
 7682 0076 069B     		ldr	r3, [sp, #24]
 7683 0078 9B00     		lsls	r3, r3, #2
 7684 007a 039A     		ldr	r2, [sp, #12]
 7685 007c D318     		adds	r3, r2, r3
 7686 007e 0893     		str	r3, [sp, #32]
1225:uECC.c        ****     while (ptr-- > native) {
 7687              		.loc 2 1225 0
 7688 0080 10E0     		b	.L284
 7689              	.L285:
 7690              	.LBB12:
1226:uECC.c        ****         uECC_word_t temp = *ptr;
 7691              		.loc 2 1226 0
 7692 0082 089B     		ldr	r3, [sp, #32]
 7693 0084 1B68     		ldr	r3, [r3]
 7694 0086 0493     		str	r3, [sp, #16]
1227:uECC.c        ****         *ptr = (temp >> shift) | carry;
 7695              		.loc 2 1227 0
 7696 0088 049A     		ldr	r2, [sp, #16]
 7697 008a 059B     		ldr	r3, [sp, #20]
 7698 008c DA40     		lsrs	r2, r2, r3
 7699 008e 099B     		ldr	r3, [sp, #36]
 7700 0090 1A43     		orrs	r2, r3
 7701 0092 089B     		ldr	r3, [sp, #32]
 7702 0094 1A60     		str	r2, [r3]
1228:uECC.c        ****         carry = temp << (uECC_WORD_BITS - shift);
 7703              		.loc 2 1228 0
 7704 0096 059B     		ldr	r3, [sp, #20]
 7705 0098 2022     		movs	r2, #32
 7706 009a D31A     		subs	r3, r2, r3
 7707 009c 049A     		ldr	r2, [sp, #16]
 7708 009e 9A40     		lsls	r2, r2, r3
 7709 00a0 1300     		movs	r3, r2
 7710 00a2 0993     		str	r3, [sp, #36]
 7711              	.L284:
 7712              	.LBE12:
1225:uECC.c        ****         uECC_word_t temp = *ptr;
 7713              		.loc 2 1225 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 192


 7714 00a4 089B     		ldr	r3, [sp, #32]
 7715 00a6 1A1F     		subs	r2, r3, #4
 7716 00a8 0892     		str	r2, [sp, #32]
 7717 00aa 039A     		ldr	r2, [sp, #12]
 7718 00ac 9342     		cmp	r3, r2
 7719 00ae E8D8     		bhi	.L285
1229:uECC.c        ****     }
1230:uECC.c        **** 
1231:uECC.c        ****     /* Reduce mod curve_n */
1232:uECC.c        ****     if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
 7720              		.loc 2 1232 0
 7721 00b0 009B     		ldr	r3, [sp]
 7722 00b2 2433     		adds	r3, r3, #36
 7723 00b4 069A     		ldr	r2, [sp, #24]
 7724 00b6 52B2     		sxtb	r2, r2
 7725 00b8 0399     		ldr	r1, [sp, #12]
 7726 00ba 1800     		movs	r0, r3
 7727 00bc FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 7728 00c0 0300     		movs	r3, r0
 7729 00c2 012B     		cmp	r3, #1
 7730 00c4 0AD0     		beq	.L278
1233:uECC.c        ****         uECC_vli_sub(native, native, curve->n, num_n_words);
 7731              		.loc 2 1233 0
 7732 00c6 009B     		ldr	r3, [sp]
 7733 00c8 2433     		adds	r3, r3, #36
 7734 00ca 1A00     		movs	r2, r3
 7735 00cc 069B     		ldr	r3, [sp, #24]
 7736 00ce 5BB2     		sxtb	r3, r3
 7737 00d0 0399     		ldr	r1, [sp, #12]
 7738 00d2 0398     		ldr	r0, [sp, #12]
 7739 00d4 FFF7FEFF 		bl	uECC_vli_sub
 7740 00d8 00E0     		b	.L278
 7741              	.L286:
1220:uECC.c        ****     }
 7742              		.loc 2 1220 0
 7743 00da C046     		nop
 7744              	.L278:
1234:uECC.c        ****     }
1235:uECC.c        **** }
 7745              		.loc 2 1235 0
 7746 00dc 0BB0     		add	sp, sp, #44
 7747              		@ sp needed
 7748 00de 00BD     		pop	{pc}
 7749              		.cfi_endproc
 7750              	.LFE64:
 7751              		.size	bits2int, .-bits2int
 7752              		.section	.text.uECC_sign_with_k,"ax",%progbits
 7753              		.align	2
 7754              		.code	16
 7755              		.thumb_func
 7756              		.type	uECC_sign_with_k, %function
 7757              	uECC_sign_with_k:
 7758              	.LFB65:
1236:uECC.c        **** 
1237:uECC.c        **** static int uECC_sign_with_k(const uint8_t *private_key,
1238:uECC.c        ****                             const uint8_t *message_hash,
1239:uECC.c        ****                             unsigned hash_size,
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 193


1240:uECC.c        ****                             uECC_word_t *k,
1241:uECC.c        ****                             uint8_t *signature,
1242:uECC.c        ****                             uECC_Curve curve) {
 7759              		.loc 2 1242 0
 7760              		.cfi_startproc
 7761              		@ args = 8, pretend = 0, frame = 160
 7762              		@ frame_needed = 0, uses_anonymous_args = 0
 7763 0000 10B5     		push	{r4, lr}
 7764              		.cfi_def_cfa_offset 8
 7765              		.cfi_offset 4, -8
 7766              		.cfi_offset 14, -4
 7767 0002 AAB0     		sub	sp, sp, #168
 7768              		.cfi_def_cfa_offset 176
 7769 0004 0590     		str	r0, [sp, #20]
 7770 0006 0491     		str	r1, [sp, #16]
 7771 0008 0392     		str	r2, [sp, #12]
 7772 000a 0293     		str	r3, [sp, #8]
1243:uECC.c        **** 
1244:uECC.c        ****     uECC_word_t tmp[uECC_MAX_WORDS];
1245:uECC.c        ****     uECC_word_t s[uECC_MAX_WORDS];
1246:uECC.c        ****     uECC_word_t *k2[2] = {tmp, s};
 7773              		.loc 2 1246 0
 7774 000c 16AB     		add	r3, sp, #88
 7775 000e 20AA     		add	r2, sp, #128
 7776 0010 1A60     		str	r2, [r3]
 7777 0012 16AB     		add	r3, sp, #88
 7778 0014 18AA     		add	r2, sp, #96
 7779 0016 5A60     		str	r2, [r3, #4]
1247:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1248:uECC.c        ****     uECC_word_t *p = (uECC_word_t *)signature;
1249:uECC.c        **** #else
1250:uECC.c        ****     uECC_word_t p[uECC_MAX_WORDS * 2];
1251:uECC.c        **** #endif
1252:uECC.c        ****     uECC_word_t carry;
1253:uECC.c        ****     wordcount_t num_words = curve->num_words;
 7780              		.loc 2 1253 0
 7781 0018 A723     		movs	r3, #167
 7782 001a 6B44     		add	r3, r3, sp
 7783 001c 2D9A     		ldr	r2, [sp, #180]
 7784 001e 1278     		ldrb	r2, [r2]
 7785 0020 1A70     		strb	r2, [r3]
1254:uECC.c        ****     wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 7786              		.loc 2 1254 0
 7787 0022 2D9B     		ldr	r3, [sp, #180]
 7788 0024 0222     		movs	r2, #2
 7789 0026 9B5E     		ldrsh	r3, [r3, r2]
 7790 0028 1F33     		adds	r3, r3, #31
 7791 002a 002B     		cmp	r3, #0
 7792 002c 00DA     		bge	.L288
 7793 002e 1F33     		adds	r3, r3, #31
 7794              	.L288:
 7795 0030 5B11     		asrs	r3, r3, #5
 7796 0032 1A00     		movs	r2, r3
 7797 0034 A623     		movs	r3, #166
 7798 0036 6B44     		add	r3, r3, sp
 7799 0038 1A70     		strb	r2, [r3]
1255:uECC.c        ****     bitcount_t num_n_bits = curve->num_n_bits;
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 194


 7800              		.loc 2 1255 0
 7801 003a 29AB     		add	r3, sp, #164
 7802 003c 2D9A     		ldr	r2, [sp, #180]
 7803 003e 5288     		ldrh	r2, [r2, #2]
 7804 0040 1A80     		strh	r2, [r3]
1256:uECC.c        **** 
1257:uECC.c        ****     /* Make sure 0 < k < curve_n */
1258:uECC.c        ****     if (uECC_vli_isZero(k, num_words) || uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
 7805              		.loc 2 1258 0
 7806 0042 A723     		movs	r3, #167
 7807 0044 6B44     		add	r3, r3, sp
 7808 0046 0022     		movs	r2, #0
 7809 0048 9A56     		ldrsb	r2, [r3, r2]
 7810 004a 029B     		ldr	r3, [sp, #8]
 7811 004c 1100     		movs	r1, r2
 7812 004e 1800     		movs	r0, r3
 7813 0050 FFF7FEFF 		bl	uECC_vli_isZero
 7814 0054 031E     		subs	r3, r0, #0
 7815 0056 0DD1     		bne	.L289
 7816              		.loc 2 1258 0 is_stmt 0 discriminator 1
 7817 0058 2D9B     		ldr	r3, [sp, #180]
 7818 005a 2433     		adds	r3, r3, #36
 7819 005c 1800     		movs	r0, r3
 7820 005e A623     		movs	r3, #166
 7821 0060 6B44     		add	r3, r3, sp
 7822 0062 0022     		movs	r2, #0
 7823 0064 9A56     		ldrsb	r2, [r3, r2]
 7824 0066 029B     		ldr	r3, [sp, #8]
 7825 0068 1900     		movs	r1, r3
 7826 006a FFF7FEFF 		bl	uECC_vli_cmp
 7827 006e 0300     		movs	r3, r0
 7828 0070 012B     		cmp	r3, #1
 7829 0072 01D0     		beq	.L290
 7830              	.L289:
1259:uECC.c        ****         return 0;
 7831              		.loc 2 1259 0 is_stmt 1
 7832 0074 0023     		movs	r3, #0
 7833 0076 EEE0     		b	.L297
 7834              	.L290:
1260:uECC.c        ****     }
1261:uECC.c        **** 
1262:uECC.c        ****     carry = regularize_k(k, tmp, s, curve);
 7835              		.loc 2 1262 0
 7836 0078 2D9B     		ldr	r3, [sp, #180]
 7837 007a 18AA     		add	r2, sp, #96
 7838 007c 20A9     		add	r1, sp, #128
 7839 007e 0298     		ldr	r0, [sp, #8]
 7840 0080 FFF7FEFF 		bl	regularize_k
 7841 0084 0300     		movs	r3, r0
 7842 0086 2893     		str	r3, [sp, #160]
1263:uECC.c        ****     EccPoint_mult(p, curve->G, k2[!carry], 0, num_n_bits + 1, curve);
 7843              		.loc 2 1263 0
 7844 0088 2D9B     		ldr	r3, [sp, #180]
 7845 008a 4433     		adds	r3, r3, #68
 7846 008c 1900     		movs	r1, r3
 7847 008e 289B     		ldr	r3, [sp, #160]
 7848 0090 5A42     		rsbs	r2, r3, #0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 195


 7849 0092 5341     		adcs	r3, r3, r2
 7850 0094 DBB2     		uxtb	r3, r3
 7851 0096 1A00     		movs	r2, r3
 7852 0098 16AB     		add	r3, sp, #88
 7853 009a 9200     		lsls	r2, r2, #2
 7854 009c D458     		ldr	r4, [r2, r3]
 7855 009e 29AB     		add	r3, sp, #164
 7856 00a0 1B88     		ldrh	r3, [r3]
 7857 00a2 0133     		adds	r3, r3, #1
 7858 00a4 9BB2     		uxth	r3, r3
 7859 00a6 1BB2     		sxth	r3, r3
 7860 00a8 06A8     		add	r0, sp, #24
 7861 00aa 2D9A     		ldr	r2, [sp, #180]
 7862 00ac 0192     		str	r2, [sp, #4]
 7863 00ae 0093     		str	r3, [sp]
 7864 00b0 0023     		movs	r3, #0
 7865 00b2 2200     		movs	r2, r4
 7866 00b4 FFF7FEFF 		bl	EccPoint_mult
1264:uECC.c        ****     if (uECC_vli_isZero(p, num_words)) {
 7867              		.loc 2 1264 0
 7868 00b8 A723     		movs	r3, #167
 7869 00ba 6B44     		add	r3, r3, sp
 7870 00bc 0022     		movs	r2, #0
 7871 00be 9A56     		ldrsb	r2, [r3, r2]
 7872 00c0 06AB     		add	r3, sp, #24
 7873 00c2 1100     		movs	r1, r2
 7874 00c4 1800     		movs	r0, r3
 7875 00c6 FFF7FEFF 		bl	uECC_vli_isZero
 7876 00ca 031E     		subs	r3, r0, #0
 7877 00cc 01D0     		beq	.L292
1265:uECC.c        ****         return 0;
 7878              		.loc 2 1265 0
 7879 00ce 0023     		movs	r3, #0
 7880 00d0 C1E0     		b	.L297
 7881              	.L292:
1266:uECC.c        ****     }
1267:uECC.c        **** 
1268:uECC.c        ****     /* If an RNG function was specified, get a random number
1269:uECC.c        ****        to prevent side channel analysis of k. */
1270:uECC.c        ****     if (!g_rng_function) {
 7882              		.loc 2 1270 0
 7883 00d2 624B     		ldr	r3, .L298
 7884 00d4 1B68     		ldr	r3, [r3]
 7885 00d6 002B     		cmp	r3, #0
 7886 00d8 0CD1     		bne	.L293
1271:uECC.c        ****         uECC_vli_clear(tmp, num_n_words);
 7887              		.loc 2 1271 0
 7888 00da A623     		movs	r3, #166
 7889 00dc 6B44     		add	r3, r3, sp
 7890 00de 0022     		movs	r2, #0
 7891 00e0 9A56     		ldrsb	r2, [r3, r2]
 7892 00e2 20AB     		add	r3, sp, #128
 7893 00e4 1100     		movs	r1, r2
 7894 00e6 1800     		movs	r0, r3
 7895 00e8 FFF7FEFF 		bl	uECC_vli_clear
1272:uECC.c        ****         tmp[0] = 1;
 7896              		.loc 2 1272 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 196


 7897 00ec 20AB     		add	r3, sp, #128
 7898 00ee 0122     		movs	r2, #1
 7899 00f0 1A60     		str	r2, [r3]
 7900 00f2 0EE0     		b	.L294
 7901              	.L293:
1273:uECC.c        ****     } else if (!uECC_generate_random_int(tmp, curve->n, num_n_words)) {
 7902              		.loc 2 1273 0
 7903 00f4 2D9B     		ldr	r3, [sp, #180]
 7904 00f6 2433     		adds	r3, r3, #36
 7905 00f8 1900     		movs	r1, r3
 7906 00fa A623     		movs	r3, #166
 7907 00fc 6B44     		add	r3, r3, sp
 7908 00fe 0022     		movs	r2, #0
 7909 0100 9A56     		ldrsb	r2, [r3, r2]
 7910 0102 20AB     		add	r3, sp, #128
 7911 0104 1800     		movs	r0, r3
 7912 0106 FFF7FEFF 		bl	uECC_generate_random_int
 7913 010a 031E     		subs	r3, r0, #0
 7914 010c 01D1     		bne	.L294
1274:uECC.c        ****         return 0;
 7915              		.loc 2 1274 0
 7916 010e 0023     		movs	r3, #0
 7917 0110 A1E0     		b	.L297
 7918              	.L294:
1275:uECC.c        ****     }
1276:uECC.c        **** 
1277:uECC.c        ****     /* Prevent side channel analysis of uECC_vli_modInv() to determine
1278:uECC.c        ****        bits of k / the private key by premultiplying by a random number */
1279:uECC.c        ****     uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 7919              		.loc 2 1279 0
 7920 0112 2D9B     		ldr	r3, [sp, #180]
 7921 0114 2433     		adds	r3, r3, #36
 7922 0116 1C00     		movs	r4, r3
 7923 0118 20AA     		add	r2, sp, #128
 7924 011a 0299     		ldr	r1, [sp, #8]
 7925 011c 0298     		ldr	r0, [sp, #8]
 7926 011e A623     		movs	r3, #166
 7927 0120 6B44     		add	r3, r3, sp
 7928 0122 1B78     		ldrb	r3, [r3]
 7929 0124 5BB2     		sxtb	r3, r3
 7930 0126 0093     		str	r3, [sp]
 7931 0128 2300     		movs	r3, r4
 7932 012a FFF7FEFF 		bl	uECC_vli_modMult
1280:uECC.c        ****     uECC_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 7933              		.loc 2 1280 0
 7934 012e 2D9B     		ldr	r3, [sp, #180]
 7935 0130 2433     		adds	r3, r3, #36
 7936 0132 1A00     		movs	r2, r3
 7937 0134 A623     		movs	r3, #166
 7938 0136 6B44     		add	r3, r3, sp
 7939 0138 1B78     		ldrb	r3, [r3]
 7940 013a 5BB2     		sxtb	r3, r3
 7941 013c 0299     		ldr	r1, [sp, #8]
 7942 013e 0298     		ldr	r0, [sp, #8]
 7943 0140 FFF7FEFF 		bl	uECC_vli_modInv
1281:uECC.c        ****     uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 7944              		.loc 2 1281 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 197


 7945 0144 2D9B     		ldr	r3, [sp, #180]
 7946 0146 2433     		adds	r3, r3, #36
 7947 0148 1C00     		movs	r4, r3
 7948 014a 20AA     		add	r2, sp, #128
 7949 014c 0299     		ldr	r1, [sp, #8]
 7950 014e 0298     		ldr	r0, [sp, #8]
 7951 0150 A623     		movs	r3, #166
 7952 0152 6B44     		add	r3, r3, sp
 7953 0154 1B78     		ldrb	r3, [r3]
 7954 0156 5BB2     		sxtb	r3, r3
 7955 0158 0093     		str	r3, [sp]
 7956 015a 2300     		movs	r3, r4
 7957 015c FFF7FEFF 		bl	uECC_vli_modMult
1282:uECC.c        **** 
1283:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
1284:uECC.c        ****     uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 7958              		.loc 2 1284 0
 7959 0160 2D9B     		ldr	r3, [sp, #180]
 7960 0162 5B78     		ldrb	r3, [r3, #1]
 7961 0164 5BB2     		sxtb	r3, r3
 7962 0166 1900     		movs	r1, r3
 7963 0168 06AA     		add	r2, sp, #24
 7964 016a 2C9B     		ldr	r3, [sp, #176]
 7965 016c 1800     		movs	r0, r3
 7966 016e FFF7FEFF 		bl	uECC_vli_nativeToBytes
1285:uECC.c        **** #endif
1286:uECC.c        **** 
1287:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1288:uECC.c        ****     bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
1289:uECC.c        **** #else
1290:uECC.c        ****     uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 7967              		.loc 2 1290 0
 7968 0172 2D9B     		ldr	r3, [sp, #180]
 7969 0174 0222     		movs	r2, #2
 7970 0176 9B5E     		ldrsh	r3, [r3, r2]
 7971 0178 0733     		adds	r3, r3, #7
 7972 017a 002B     		cmp	r3, #0
 7973 017c 00DA     		bge	.L295
 7974 017e 0733     		adds	r3, r3, #7
 7975              	.L295:
 7976 0180 DB10     		asrs	r3, r3, #3
 7977 0182 1A00     		movs	r2, r3
 7978 0184 0599     		ldr	r1, [sp, #20]
 7979 0186 20AB     		add	r3, sp, #128
 7980 0188 1800     		movs	r0, r3
 7981 018a FFF7FEFF 		bl	uECC_vli_bytesToNative
1291:uECC.c        **** #endif
1292:uECC.c        **** 
1293:uECC.c        ****     s[num_n_words - 1] = 0;
 7982              		.loc 2 1293 0
 7983 018e A623     		movs	r3, #166
 7984 0190 6B44     		add	r3, r3, sp
 7985 0192 1B78     		ldrb	r3, [r3]
 7986 0194 5BB2     		sxtb	r3, r3
 7987 0196 5A1E     		subs	r2, r3, #1
 7988 0198 18AB     		add	r3, sp, #96
 7989 019a 9200     		lsls	r2, r2, #2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 198


 7990 019c 0021     		movs	r1, #0
 7991 019e D150     		str	r1, [r2, r3]
1294:uECC.c        ****     uECC_vli_set(s, p, num_words);
 7992              		.loc 2 1294 0
 7993 01a0 A723     		movs	r3, #167
 7994 01a2 6B44     		add	r3, r3, sp
 7995 01a4 0022     		movs	r2, #0
 7996 01a6 9A56     		ldrsb	r2, [r3, r2]
 7997 01a8 06A9     		add	r1, sp, #24
 7998 01aa 18AB     		add	r3, sp, #96
 7999 01ac 1800     		movs	r0, r3
 8000 01ae FFF7FEFF 		bl	uECC_vli_set
1295:uECC.c        ****     uECC_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 8001              		.loc 2 1295 0
 8002 01b2 2D9B     		ldr	r3, [sp, #180]
 8003 01b4 2433     		adds	r3, r3, #36
 8004 01b6 1C00     		movs	r4, r3
 8005 01b8 18AA     		add	r2, sp, #96
 8006 01ba 20A9     		add	r1, sp, #128
 8007 01bc 18A8     		add	r0, sp, #96
 8008 01be A623     		movs	r3, #166
 8009 01c0 6B44     		add	r3, r3, sp
 8010 01c2 1B78     		ldrb	r3, [r3]
 8011 01c4 5BB2     		sxtb	r3, r3
 8012 01c6 0093     		str	r3, [sp]
 8013 01c8 2300     		movs	r3, r4
 8014 01ca FFF7FEFF 		bl	uECC_vli_modMult
1296:uECC.c        **** 
1297:uECC.c        ****     bits2int(tmp, message_hash, hash_size, curve);
 8015              		.loc 2 1297 0
 8016 01ce 2D9B     		ldr	r3, [sp, #180]
 8017 01d0 039A     		ldr	r2, [sp, #12]
 8018 01d2 0499     		ldr	r1, [sp, #16]
 8019 01d4 20A8     		add	r0, sp, #128
 8020 01d6 FFF7FEFF 		bl	bits2int
1298:uECC.c        ****     uECC_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 8021              		.loc 2 1298 0
 8022 01da 2D9B     		ldr	r3, [sp, #180]
 8023 01dc 2433     		adds	r3, r3, #36
 8024 01de 1C00     		movs	r4, r3
 8025 01e0 18AA     		add	r2, sp, #96
 8026 01e2 20A9     		add	r1, sp, #128
 8027 01e4 18A8     		add	r0, sp, #96
 8028 01e6 A623     		movs	r3, #166
 8029 01e8 6B44     		add	r3, r3, sp
 8030 01ea 1B78     		ldrb	r3, [r3]
 8031 01ec 5BB2     		sxtb	r3, r3
 8032 01ee 0093     		str	r3, [sp]
 8033 01f0 2300     		movs	r3, r4
 8034 01f2 FFF7FEFF 		bl	uECC_vli_modAdd
1299:uECC.c        ****     uECC_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 8035              		.loc 2 1299 0
 8036 01f6 2D9B     		ldr	r3, [sp, #180]
 8037 01f8 2433     		adds	r3, r3, #36
 8038 01fa 1C00     		movs	r4, r3
 8039 01fc 029A     		ldr	r2, [sp, #8]
 8040 01fe 18A9     		add	r1, sp, #96
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 199


 8041 0200 18A8     		add	r0, sp, #96
 8042 0202 A623     		movs	r3, #166
 8043 0204 6B44     		add	r3, r3, sp
 8044 0206 1B78     		ldrb	r3, [r3]
 8045 0208 5BB2     		sxtb	r3, r3
 8046 020a 0093     		str	r3, [sp]
 8047 020c 2300     		movs	r3, r4
 8048 020e FFF7FEFF 		bl	uECC_vli_modMult
1300:uECC.c        ****     if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {
 8049              		.loc 2 1300 0
 8050 0212 A623     		movs	r3, #166
 8051 0214 6B44     		add	r3, r3, sp
 8052 0216 0022     		movs	r2, #0
 8053 0218 9A56     		ldrsb	r2, [r3, r2]
 8054 021a 18AB     		add	r3, sp, #96
 8055 021c 1100     		movs	r1, r2
 8056 021e 1800     		movs	r0, r3
 8057 0220 FFF7FEFF 		bl	uECC_vli_numBits
 8058 0224 0300     		movs	r3, r0
 8059 0226 1A00     		movs	r2, r3
 8060 0228 2D9B     		ldr	r3, [sp, #180]
 8061 022a 5B78     		ldrb	r3, [r3, #1]
 8062 022c 5BB2     		sxtb	r3, r3
 8063 022e DB00     		lsls	r3, r3, #3
 8064 0230 9A42     		cmp	r2, r3
 8065 0232 01DD     		ble	.L296
1301:uECC.c        ****         return 0;
 8066              		.loc 2 1301 0
 8067 0234 0023     		movs	r3, #0
 8068 0236 0EE0     		b	.L297
 8069              	.L296:
1302:uECC.c        ****     }
1303:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1304:uECC.c        ****     bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s, curve->num_bytes);
1305:uECC.c        **** #else
1306:uECC.c        ****     uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 8070              		.loc 2 1306 0
 8071 0238 2D9B     		ldr	r3, [sp, #180]
 8072 023a 5B78     		ldrb	r3, [r3, #1]
 8073 023c 5BB2     		sxtb	r3, r3
 8074 023e 1A00     		movs	r2, r3
 8075 0240 2C9B     		ldr	r3, [sp, #176]
 8076 0242 9818     		adds	r0, r3, r2
 8077 0244 2D9B     		ldr	r3, [sp, #180]
 8078 0246 5B78     		ldrb	r3, [r3, #1]
 8079 0248 5BB2     		sxtb	r3, r3
 8080 024a 1900     		movs	r1, r3
 8081 024c 18AB     		add	r3, sp, #96
 8082 024e 1A00     		movs	r2, r3
 8083 0250 FFF7FEFF 		bl	uECC_vli_nativeToBytes
1307:uECC.c        **** #endif    
1308:uECC.c        ****     return 1;
 8084              		.loc 2 1308 0
 8085 0254 0123     		movs	r3, #1
 8086              	.L297:
1309:uECC.c        **** }
 8087              		.loc 2 1309 0 discriminator 1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 200


 8088 0256 1800     		movs	r0, r3
 8089 0258 2AB0     		add	sp, sp, #168
 8090              		@ sp needed
 8091 025a 10BD     		pop	{r4, pc}
 8092              	.L299:
 8093              		.align	2
 8094              	.L298:
 8095 025c 00000000 		.word	g_rng_function
 8096              		.cfi_endproc
 8097              	.LFE65:
 8098              		.size	uECC_sign_with_k, .-uECC_sign_with_k
 8099              		.section	.text.uECC_sign,"ax",%progbits
 8100              		.align	2
 8101              		.global	uECC_sign
 8102              		.code	16
 8103              		.thumb_func
 8104              		.type	uECC_sign, %function
 8105              	uECC_sign:
 8106              	.LFB66:
1310:uECC.c        **** 
1311:uECC.c        **** int uECC_sign(const uint8_t *private_key,
1312:uECC.c        ****               const uint8_t *message_hash,
1313:uECC.c        ****               unsigned hash_size,
1314:uECC.c        ****               uint8_t *signature,
1315:uECC.c        ****               uECC_Curve curve) {
 8107              		.loc 2 1315 0
 8108              		.cfi_startproc
 8109              		@ args = 4, pretend = 0, frame = 56
 8110              		@ frame_needed = 0, uses_anonymous_args = 0
 8111 0000 10B5     		push	{r4, lr}
 8112              		.cfi_def_cfa_offset 8
 8113              		.cfi_offset 4, -8
 8114              		.cfi_offset 14, -4
 8115 0002 90B0     		sub	sp, sp, #64
 8116              		.cfi_def_cfa_offset 72
 8117 0004 0590     		str	r0, [sp, #20]
 8118 0006 0491     		str	r1, [sp, #16]
 8119 0008 0392     		str	r2, [sp, #12]
 8120 000a 0293     		str	r3, [sp, #8]
1316:uECC.c        ****     uECC_word_t k[uECC_MAX_WORDS];
1317:uECC.c        ****     uECC_word_t tries;
1318:uECC.c        **** 
1319:uECC.c        ****     for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 8121              		.loc 2 1319 0
 8122 000c 0023     		movs	r3, #0
 8123 000e 0F93     		str	r3, [sp, #60]
 8124 0010 25E0     		b	.L301
 8125              	.L306:
1320:uECC.c        ****         if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
 8126              		.loc 2 1320 0
 8127 0012 129B     		ldr	r3, [sp, #72]
 8128 0014 2433     		adds	r3, r3, #36
 8129 0016 1900     		movs	r1, r3
 8130 0018 129B     		ldr	r3, [sp, #72]
 8131 001a 0222     		movs	r2, #2
 8132 001c 9B5E     		ldrsh	r3, [r3, r2]
 8133 001e 1F33     		adds	r3, r3, #31
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 201


 8134 0020 002B     		cmp	r3, #0
 8135 0022 00DA     		bge	.L302
 8136 0024 1F33     		adds	r3, r3, #31
 8137              	.L302:
 8138 0026 5B11     		asrs	r3, r3, #5
 8139 0028 5AB2     		sxtb	r2, r3
 8140 002a 07AB     		add	r3, sp, #28
 8141 002c 1800     		movs	r0, r3
 8142 002e FFF7FEFF 		bl	uECC_generate_random_int
 8143 0032 031E     		subs	r3, r0, #0
 8144 0034 01D1     		bne	.L303
1321:uECC.c        ****             return 0;
 8145              		.loc 2 1321 0
 8146 0036 0023     		movs	r3, #0
 8147 0038 15E0     		b	.L307
 8148              	.L303:
1322:uECC.c        ****         }
1323:uECC.c        **** 
1324:uECC.c        ****         if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, curve)) {
 8149              		.loc 2 1324 0
 8150 003a 07AC     		add	r4, sp, #28
 8151 003c 039A     		ldr	r2, [sp, #12]
 8152 003e 0499     		ldr	r1, [sp, #16]
 8153 0040 0598     		ldr	r0, [sp, #20]
 8154 0042 129B     		ldr	r3, [sp, #72]
 8155 0044 0193     		str	r3, [sp, #4]
 8156 0046 029B     		ldr	r3, [sp, #8]
 8157 0048 0093     		str	r3, [sp]
 8158 004a 2300     		movs	r3, r4
 8159 004c FFF7FEFF 		bl	uECC_sign_with_k
 8160 0050 031E     		subs	r3, r0, #0
 8161 0052 01D0     		beq	.L305
1325:uECC.c        ****             return 1;
 8162              		.loc 2 1325 0
 8163 0054 0123     		movs	r3, #1
 8164 0056 06E0     		b	.L307
 8165              	.L305:
1319:uECC.c        ****         if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
 8166              		.loc 2 1319 0 discriminator 2
 8167 0058 0F9B     		ldr	r3, [sp, #60]
 8168 005a 0133     		adds	r3, r3, #1
 8169 005c 0F93     		str	r3, [sp, #60]
 8170              	.L301:
1319:uECC.c        ****         if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
 8171              		.loc 2 1319 0 is_stmt 0 discriminator 1
 8172 005e 0F9B     		ldr	r3, [sp, #60]
 8173 0060 3F2B     		cmp	r3, #63
 8174 0062 D6D9     		bls	.L306
1326:uECC.c        ****         }
1327:uECC.c        ****     }
1328:uECC.c        ****     return 0;
 8175              		.loc 2 1328 0 is_stmt 1
 8176 0064 0023     		movs	r3, #0
 8177              	.L307:
1329:uECC.c        **** }
 8178              		.loc 2 1329 0 discriminator 1
 8179 0066 1800     		movs	r0, r3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 202


 8180 0068 10B0     		add	sp, sp, #64
 8181              		@ sp needed
 8182 006a 10BD     		pop	{r4, pc}
 8183              		.cfi_endproc
 8184              	.LFE66:
 8185              		.size	uECC_sign, .-uECC_sign
 8186              		.section	.text.HMAC_init,"ax",%progbits
 8187              		.align	2
 8188              		.code	16
 8189              		.thumb_func
 8190              		.type	HMAC_init, %function
 8191              	HMAC_init:
 8192              	.LFB67:
1330:uECC.c        **** 
1331:uECC.c        **** /* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
1332:uECC.c        ****    the same size as the hash result size. */
1333:uECC.c        **** static void HMAC_init(const uECC_HashContext *hash_context, const uint8_t *K) {
 8193              		.loc 2 1333 0
 8194              		.cfi_startproc
 8195              		@ args = 0, pretend = 0, frame = 16
 8196              		@ frame_needed = 0, uses_anonymous_args = 0
 8197 0000 10B5     		push	{r4, lr}
 8198              		.cfi_def_cfa_offset 8
 8199              		.cfi_offset 4, -8
 8200              		.cfi_offset 14, -4
 8201 0002 84B0     		sub	sp, sp, #16
 8202              		.cfi_def_cfa_offset 24
 8203 0004 0190     		str	r0, [sp, #4]
 8204 0006 0091     		str	r1, [sp]
1334:uECC.c        ****     uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 8205              		.loc 2 1334 0
 8206 0008 019B     		ldr	r3, [sp, #4]
 8207 000a 5A69     		ldr	r2, [r3, #20]
 8208 000c 019B     		ldr	r3, [sp, #4]
 8209 000e 1B69     		ldr	r3, [r3, #16]
 8210 0010 5B00     		lsls	r3, r3, #1
 8211 0012 D318     		adds	r3, r2, r3
 8212 0014 0293     		str	r3, [sp, #8]
1335:uECC.c        ****     unsigned i;
1336:uECC.c        ****     for (i = 0; i < hash_context->result_size; ++i)
 8213              		.loc 2 1336 0
 8214 0016 0023     		movs	r3, #0
 8215 0018 0393     		str	r3, [sp, #12]
 8216 001a 0DE0     		b	.L309
 8217              	.L310:
1337:uECC.c        ****         pad[i] = K[i] ^ 0x36;
 8218              		.loc 2 1337 0 discriminator 3
 8219 001c 029A     		ldr	r2, [sp, #8]
 8220 001e 039B     		ldr	r3, [sp, #12]
 8221 0020 D318     		adds	r3, r2, r3
 8222 0022 0099     		ldr	r1, [sp]
 8223 0024 039A     		ldr	r2, [sp, #12]
 8224 0026 8A18     		adds	r2, r1, r2
 8225 0028 1278     		ldrb	r2, [r2]
 8226 002a 3621     		movs	r1, #54
 8227 002c 4A40     		eors	r2, r1
 8228 002e D2B2     		uxtb	r2, r2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 203


 8229 0030 1A70     		strb	r2, [r3]
1336:uECC.c        ****         pad[i] = K[i] ^ 0x36;
 8230              		.loc 2 1336 0 discriminator 3
 8231 0032 039B     		ldr	r3, [sp, #12]
 8232 0034 0133     		adds	r3, r3, #1
 8233 0036 0393     		str	r3, [sp, #12]
 8234              	.L309:
1336:uECC.c        ****         pad[i] = K[i] ^ 0x36;
 8235              		.loc 2 1336 0 is_stmt 0 discriminator 1
 8236 0038 019B     		ldr	r3, [sp, #4]
 8237 003a 1A69     		ldr	r2, [r3, #16]
 8238 003c 039B     		ldr	r3, [sp, #12]
 8239 003e 9A42     		cmp	r2, r3
 8240 0040 ECD8     		bhi	.L310
1338:uECC.c        ****     for (; i < hash_context->block_size; ++i)
 8241              		.loc 2 1338 0 is_stmt 1
 8242 0042 07E0     		b	.L311
 8243              	.L312:
1339:uECC.c        ****         pad[i] = 0x36;
 8244              		.loc 2 1339 0 discriminator 2
 8245 0044 029A     		ldr	r2, [sp, #8]
 8246 0046 039B     		ldr	r3, [sp, #12]
 8247 0048 D318     		adds	r3, r2, r3
 8248 004a 3622     		movs	r2, #54
 8249 004c 1A70     		strb	r2, [r3]
1338:uECC.c        ****     for (; i < hash_context->block_size; ++i)
 8250              		.loc 2 1338 0 discriminator 2
 8251 004e 039B     		ldr	r3, [sp, #12]
 8252 0050 0133     		adds	r3, r3, #1
 8253 0052 0393     		str	r3, [sp, #12]
 8254              	.L311:
1338:uECC.c        ****     for (; i < hash_context->block_size; ++i)
 8255              		.loc 2 1338 0 is_stmt 0 discriminator 1
 8256 0054 019B     		ldr	r3, [sp, #4]
 8257 0056 DA68     		ldr	r2, [r3, #12]
 8258 0058 039B     		ldr	r3, [sp, #12]
 8259 005a 9A42     		cmp	r2, r3
 8260 005c F2D8     		bhi	.L312
1340:uECC.c        **** 
1341:uECC.c        ****     hash_context->init_hash(hash_context);
 8261              		.loc 2 1341 0 is_stmt 1
 8262 005e 019B     		ldr	r3, [sp, #4]
 8263 0060 1B68     		ldr	r3, [r3]
 8264 0062 019A     		ldr	r2, [sp, #4]
 8265 0064 1000     		movs	r0, r2
 8266 0066 9847     		blx	r3
1342:uECC.c        ****     hash_context->update_hash(hash_context, pad, hash_context->block_size);
 8267              		.loc 2 1342 0
 8268 0068 019B     		ldr	r3, [sp, #4]
 8269 006a 5C68     		ldr	r4, [r3, #4]
 8270 006c 019B     		ldr	r3, [sp, #4]
 8271 006e DA68     		ldr	r2, [r3, #12]
 8272 0070 0299     		ldr	r1, [sp, #8]
 8273 0072 019B     		ldr	r3, [sp, #4]
 8274 0074 1800     		movs	r0, r3
 8275 0076 A047     		blx	r4
1343:uECC.c        **** }
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 204


 8276              		.loc 2 1343 0
 8277 0078 C046     		nop
 8278 007a 04B0     		add	sp, sp, #16
 8279              		@ sp needed
 8280 007c 10BD     		pop	{r4, pc}
 8281              		.cfi_endproc
 8282              	.LFE67:
 8283              		.size	HMAC_init, .-HMAC_init
 8284 007e C046     		.section	.text.HMAC_update,"ax",%progbits
 8285              		.align	2
 8286              		.code	16
 8287              		.thumb_func
 8288              		.type	HMAC_update, %function
 8289              	HMAC_update:
 8290              	.LFB68:
1344:uECC.c        **** 
1345:uECC.c        **** static void HMAC_update(const uECC_HashContext *hash_context,
1346:uECC.c        ****                         const uint8_t *message,
1347:uECC.c        ****                         unsigned message_size) {
 8291              		.loc 2 1347 0
 8292              		.cfi_startproc
 8293              		@ args = 0, pretend = 0, frame = 16
 8294              		@ frame_needed = 0, uses_anonymous_args = 0
 8295 0000 00B5     		push	{lr}
 8296              		.cfi_def_cfa_offset 4
 8297              		.cfi_offset 14, -4
 8298 0002 85B0     		sub	sp, sp, #20
 8299              		.cfi_def_cfa_offset 24
 8300 0004 0390     		str	r0, [sp, #12]
 8301 0006 0291     		str	r1, [sp, #8]
 8302 0008 0192     		str	r2, [sp, #4]
1348:uECC.c        ****     hash_context->update_hash(hash_context, message, message_size);
 8303              		.loc 2 1348 0
 8304 000a 039B     		ldr	r3, [sp, #12]
 8305 000c 5B68     		ldr	r3, [r3, #4]
 8306 000e 019A     		ldr	r2, [sp, #4]
 8307 0010 0299     		ldr	r1, [sp, #8]
 8308 0012 0398     		ldr	r0, [sp, #12]
 8309 0014 9847     		blx	r3
1349:uECC.c        **** }
 8310              		.loc 2 1349 0
 8311 0016 C046     		nop
 8312 0018 05B0     		add	sp, sp, #20
 8313              		@ sp needed
 8314 001a 00BD     		pop	{pc}
 8315              		.cfi_endproc
 8316              	.LFE68:
 8317              		.size	HMAC_update, .-HMAC_update
 8318              		.section	.text.HMAC_finish,"ax",%progbits
 8319              		.align	2
 8320              		.code	16
 8321              		.thumb_func
 8322              		.type	HMAC_finish, %function
 8323              	HMAC_finish:
 8324              	.LFB69:
1350:uECC.c        **** 
1351:uECC.c        **** static void HMAC_finish(const uECC_HashContext *hash_context,
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 205


1352:uECC.c        ****                         const uint8_t *K,
1353:uECC.c        ****                         uint8_t *result) {
 8325              		.loc 2 1353 0
 8326              		.cfi_startproc
 8327              		@ args = 0, pretend = 0, frame = 24
 8328              		@ frame_needed = 0, uses_anonymous_args = 0
 8329 0000 10B5     		push	{r4, lr}
 8330              		.cfi_def_cfa_offset 8
 8331              		.cfi_offset 4, -8
 8332              		.cfi_offset 14, -4
 8333 0002 86B0     		sub	sp, sp, #24
 8334              		.cfi_def_cfa_offset 32
 8335 0004 0390     		str	r0, [sp, #12]
 8336 0006 0291     		str	r1, [sp, #8]
 8337 0008 0192     		str	r2, [sp, #4]
1354:uECC.c        ****     uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 8338              		.loc 2 1354 0
 8339 000a 039B     		ldr	r3, [sp, #12]
 8340 000c 5A69     		ldr	r2, [r3, #20]
 8341 000e 039B     		ldr	r3, [sp, #12]
 8342 0010 1B69     		ldr	r3, [r3, #16]
 8343 0012 5B00     		lsls	r3, r3, #1
 8344 0014 D318     		adds	r3, r2, r3
 8345 0016 0493     		str	r3, [sp, #16]
1355:uECC.c        ****     unsigned i;
1356:uECC.c        ****     for (i = 0; i < hash_context->result_size; ++i)
 8346              		.loc 2 1356 0
 8347 0018 0023     		movs	r3, #0
 8348 001a 0593     		str	r3, [sp, #20]
 8349 001c 0DE0     		b	.L315
 8350              	.L316:
1357:uECC.c        ****         pad[i] = K[i] ^ 0x5c;
 8351              		.loc 2 1357 0 discriminator 3
 8352 001e 049A     		ldr	r2, [sp, #16]
 8353 0020 059B     		ldr	r3, [sp, #20]
 8354 0022 D318     		adds	r3, r2, r3
 8355 0024 0299     		ldr	r1, [sp, #8]
 8356 0026 059A     		ldr	r2, [sp, #20]
 8357 0028 8A18     		adds	r2, r1, r2
 8358 002a 1278     		ldrb	r2, [r2]
 8359 002c 5C21     		movs	r1, #92
 8360 002e 4A40     		eors	r2, r1
 8361 0030 D2B2     		uxtb	r2, r2
 8362 0032 1A70     		strb	r2, [r3]
1356:uECC.c        ****         pad[i] = K[i] ^ 0x5c;
 8363              		.loc 2 1356 0 discriminator 3
 8364 0034 059B     		ldr	r3, [sp, #20]
 8365 0036 0133     		adds	r3, r3, #1
 8366 0038 0593     		str	r3, [sp, #20]
 8367              	.L315:
1356:uECC.c        ****         pad[i] = K[i] ^ 0x5c;
 8368              		.loc 2 1356 0 is_stmt 0 discriminator 1
 8369 003a 039B     		ldr	r3, [sp, #12]
 8370 003c 1A69     		ldr	r2, [r3, #16]
 8371 003e 059B     		ldr	r3, [sp, #20]
 8372 0040 9A42     		cmp	r2, r3
 8373 0042 ECD8     		bhi	.L316
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 206


1358:uECC.c        ****     for (; i < hash_context->block_size; ++i)
 8374              		.loc 2 1358 0 is_stmt 1
 8375 0044 07E0     		b	.L317
 8376              	.L318:
1359:uECC.c        ****         pad[i] = 0x5c;
 8377              		.loc 2 1359 0 discriminator 2
 8378 0046 049A     		ldr	r2, [sp, #16]
 8379 0048 059B     		ldr	r3, [sp, #20]
 8380 004a D318     		adds	r3, r2, r3
 8381 004c 5C22     		movs	r2, #92
 8382 004e 1A70     		strb	r2, [r3]
1358:uECC.c        ****     for (; i < hash_context->block_size; ++i)
 8383              		.loc 2 1358 0 discriminator 2
 8384 0050 059B     		ldr	r3, [sp, #20]
 8385 0052 0133     		adds	r3, r3, #1
 8386 0054 0593     		str	r3, [sp, #20]
 8387              	.L317:
1358:uECC.c        ****     for (; i < hash_context->block_size; ++i)
 8388              		.loc 2 1358 0 is_stmt 0 discriminator 1
 8389 0056 039B     		ldr	r3, [sp, #12]
 8390 0058 DA68     		ldr	r2, [r3, #12]
 8391 005a 059B     		ldr	r3, [sp, #20]
 8392 005c 9A42     		cmp	r2, r3
 8393 005e F2D8     		bhi	.L318
1360:uECC.c        **** 
1361:uECC.c        ****     hash_context->finish_hash(hash_context, result);
 8394              		.loc 2 1361 0 is_stmt 1
 8395 0060 039B     		ldr	r3, [sp, #12]
 8396 0062 9B68     		ldr	r3, [r3, #8]
 8397 0064 0199     		ldr	r1, [sp, #4]
 8398 0066 039A     		ldr	r2, [sp, #12]
 8399 0068 1000     		movs	r0, r2
 8400 006a 9847     		blx	r3
1362:uECC.c        **** 
1363:uECC.c        ****     hash_context->init_hash(hash_context);
 8401              		.loc 2 1363 0
 8402 006c 039B     		ldr	r3, [sp, #12]
 8403 006e 1B68     		ldr	r3, [r3]
 8404 0070 039A     		ldr	r2, [sp, #12]
 8405 0072 1000     		movs	r0, r2
 8406 0074 9847     		blx	r3
1364:uECC.c        ****     hash_context->update_hash(hash_context, pad, hash_context->block_size);
 8407              		.loc 2 1364 0
 8408 0076 039B     		ldr	r3, [sp, #12]
 8409 0078 5C68     		ldr	r4, [r3, #4]
 8410 007a 039B     		ldr	r3, [sp, #12]
 8411 007c DA68     		ldr	r2, [r3, #12]
 8412 007e 0499     		ldr	r1, [sp, #16]
 8413 0080 039B     		ldr	r3, [sp, #12]
 8414 0082 1800     		movs	r0, r3
 8415 0084 A047     		blx	r4
1365:uECC.c        ****     hash_context->update_hash(hash_context, result, hash_context->result_size);
 8416              		.loc 2 1365 0
 8417 0086 039B     		ldr	r3, [sp, #12]
 8418 0088 5C68     		ldr	r4, [r3, #4]
 8419 008a 039B     		ldr	r3, [sp, #12]
 8420 008c 1A69     		ldr	r2, [r3, #16]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 207


 8421 008e 0199     		ldr	r1, [sp, #4]
 8422 0090 039B     		ldr	r3, [sp, #12]
 8423 0092 1800     		movs	r0, r3
 8424 0094 A047     		blx	r4
1366:uECC.c        ****     hash_context->finish_hash(hash_context, result);
 8425              		.loc 2 1366 0
 8426 0096 039B     		ldr	r3, [sp, #12]
 8427 0098 9B68     		ldr	r3, [r3, #8]
 8428 009a 0199     		ldr	r1, [sp, #4]
 8429 009c 039A     		ldr	r2, [sp, #12]
 8430 009e 1000     		movs	r0, r2
 8431 00a0 9847     		blx	r3
1367:uECC.c        **** }
 8432              		.loc 2 1367 0
 8433 00a2 C046     		nop
 8434 00a4 06B0     		add	sp, sp, #24
 8435              		@ sp needed
 8436 00a6 10BD     		pop	{r4, pc}
 8437              		.cfi_endproc
 8438              	.LFE69:
 8439              		.size	HMAC_finish, .-HMAC_finish
 8440              		.section	.text.update_V,"ax",%progbits
 8441              		.align	2
 8442              		.code	16
 8443              		.thumb_func
 8444              		.type	update_V, %function
 8445              	update_V:
 8446              	.LFB70:
1368:uECC.c        **** 
1369:uECC.c        **** /* V = HMAC_K(V) */
1370:uECC.c        **** static void update_V(const uECC_HashContext *hash_context, uint8_t *K, uint8_t *V) {
 8447              		.loc 2 1370 0
 8448              		.cfi_startproc
 8449              		@ args = 0, pretend = 0, frame = 16
 8450              		@ frame_needed = 0, uses_anonymous_args = 0
 8451 0000 00B5     		push	{lr}
 8452              		.cfi_def_cfa_offset 4
 8453              		.cfi_offset 14, -4
 8454 0002 85B0     		sub	sp, sp, #20
 8455              		.cfi_def_cfa_offset 24
 8456 0004 0390     		str	r0, [sp, #12]
 8457 0006 0291     		str	r1, [sp, #8]
 8458 0008 0192     		str	r2, [sp, #4]
1371:uECC.c        ****     HMAC_init(hash_context, K);
 8459              		.loc 2 1371 0
 8460 000a 029A     		ldr	r2, [sp, #8]
 8461 000c 039B     		ldr	r3, [sp, #12]
 8462 000e 1100     		movs	r1, r2
 8463 0010 1800     		movs	r0, r3
 8464 0012 FFF7FEFF 		bl	HMAC_init
1372:uECC.c        ****     HMAC_update(hash_context, V, hash_context->result_size);
 8465              		.loc 2 1372 0
 8466 0016 039B     		ldr	r3, [sp, #12]
 8467 0018 1A69     		ldr	r2, [r3, #16]
 8468 001a 0199     		ldr	r1, [sp, #4]
 8469 001c 039B     		ldr	r3, [sp, #12]
 8470 001e 1800     		movs	r0, r3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 208


 8471 0020 FFF7FEFF 		bl	HMAC_update
1373:uECC.c        ****     HMAC_finish(hash_context, K, V);
 8472              		.loc 2 1373 0
 8473 0024 019A     		ldr	r2, [sp, #4]
 8474 0026 0299     		ldr	r1, [sp, #8]
 8475 0028 039B     		ldr	r3, [sp, #12]
 8476 002a 1800     		movs	r0, r3
 8477 002c FFF7FEFF 		bl	HMAC_finish
1374:uECC.c        **** }
 8478              		.loc 2 1374 0
 8479 0030 C046     		nop
 8480 0032 05B0     		add	sp, sp, #20
 8481              		@ sp needed
 8482 0034 00BD     		pop	{pc}
 8483              		.cfi_endproc
 8484              	.LFE70:
 8485              		.size	update_V, .-update_V
 8486 0036 C046     		.section	.text.uECC_sign_deterministic,"ax",%progbits
 8487              		.align	2
 8488              		.global	uECC_sign_deterministic
 8489              		.code	16
 8490              		.thumb_func
 8491              		.type	uECC_sign_deterministic, %function
 8492              	uECC_sign_deterministic:
 8493              	.LFB71:
1375:uECC.c        **** 
1376:uECC.c        **** /* Deterministic signing, similar to RFC 6979. Differences are:
1377:uECC.c        ****     * We just use H(m) directly rather than bits2octets(H(m))
1378:uECC.c        ****       (it is not reduced modulo curve_n).
1379:uECC.c        ****     * We generate a value for k (aka T) directly rather than converting endianness.
1380:uECC.c        **** 
1381:uECC.c        ****    Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) / <HMAC pad> */
1382:uECC.c        **** int uECC_sign_deterministic(const uint8_t *private_key,
1383:uECC.c        ****                             const uint8_t *message_hash,
1384:uECC.c        ****                             unsigned hash_size,
1385:uECC.c        ****                             const uECC_HashContext *hash_context,
1386:uECC.c        ****                             uint8_t *signature,
1387:uECC.c        ****                             uECC_Curve curve) {
 8494              		.loc 2 1387 0
 8495              		.cfi_startproc
 8496              		@ args = 8, pretend = 0, frame = 80
 8497              		@ frame_needed = 0, uses_anonymous_args = 0
 8498 0000 10B5     		push	{r4, lr}
 8499              		.cfi_def_cfa_offset 8
 8500              		.cfi_offset 4, -8
 8501              		.cfi_offset 14, -4
 8502 0002 96B0     		sub	sp, sp, #88
 8503              		.cfi_def_cfa_offset 96
 8504 0004 0590     		str	r0, [sp, #20]
 8505 0006 0491     		str	r1, [sp, #16]
 8506 0008 0392     		str	r2, [sp, #12]
 8507 000a 0293     		str	r3, [sp, #8]
1388:uECC.c        ****     uint8_t *K = hash_context->tmp;
 8508              		.loc 2 1388 0
 8509 000c 029B     		ldr	r3, [sp, #8]
 8510 000e 5B69     		ldr	r3, [r3, #20]
 8511 0010 1293     		str	r3, [sp, #72]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 209


1389:uECC.c        ****     uint8_t *V = K + hash_context->result_size;
 8512              		.loc 2 1389 0
 8513 0012 029B     		ldr	r3, [sp, #8]
 8514 0014 1B69     		ldr	r3, [r3, #16]
 8515 0016 129A     		ldr	r2, [sp, #72]
 8516 0018 D318     		adds	r3, r2, r3
 8517 001a 1193     		str	r3, [sp, #68]
1390:uECC.c        ****     wordcount_t num_bytes = curve->num_bytes;
 8518              		.loc 2 1390 0
 8519 001c 4323     		movs	r3, #67
 8520 001e 6B44     		add	r3, r3, sp
 8521 0020 199A     		ldr	r2, [sp, #100]
 8522 0022 5278     		ldrb	r2, [r2, #1]
 8523 0024 1A70     		strb	r2, [r3]
1391:uECC.c        ****     wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8524              		.loc 2 1391 0
 8525 0026 199B     		ldr	r3, [sp, #100]
 8526 0028 0222     		movs	r2, #2
 8527 002a 9B5E     		ldrsh	r3, [r3, r2]
 8528 002c 1F33     		adds	r3, r3, #31
 8529 002e 002B     		cmp	r3, #0
 8530 0030 00DA     		bge	.L321
 8531 0032 1F33     		adds	r3, r3, #31
 8532              	.L321:
 8533 0034 5B11     		asrs	r3, r3, #5
 8534 0036 1A00     		movs	r2, r3
 8535 0038 4223     		movs	r3, #66
 8536 003a 6B44     		add	r3, r3, sp
 8537 003c 1A70     		strb	r2, [r3]
1392:uECC.c        ****     bitcount_t num_n_bits = curve->num_n_bits;
 8538              		.loc 2 1392 0
 8539 003e 10AB     		add	r3, sp, #64
 8540 0040 199A     		ldr	r2, [sp, #100]
 8541 0042 5288     		ldrh	r2, [r2, #2]
 8542 0044 1A80     		strh	r2, [r3]
1393:uECC.c        ****     uECC_word_t tries;
1394:uECC.c        ****     unsigned i;
1395:uECC.c        ****     for (i = 0; i < hash_context->result_size; ++i) {
 8543              		.loc 2 1395 0
 8544 0046 0023     		movs	r3, #0
 8545 0048 1493     		str	r3, [sp, #80]
 8546 004a 0CE0     		b	.L322
 8547              	.L323:
1396:uECC.c        ****         V[i] = 0x01;
 8548              		.loc 2 1396 0 discriminator 3
 8549 004c 119A     		ldr	r2, [sp, #68]
 8550 004e 149B     		ldr	r3, [sp, #80]
 8551 0050 D318     		adds	r3, r2, r3
 8552 0052 0122     		movs	r2, #1
 8553 0054 1A70     		strb	r2, [r3]
1397:uECC.c        ****         K[i] = 0;
 8554              		.loc 2 1397 0 discriminator 3
 8555 0056 129A     		ldr	r2, [sp, #72]
 8556 0058 149B     		ldr	r3, [sp, #80]
 8557 005a D318     		adds	r3, r2, r3
 8558 005c 0022     		movs	r2, #0
 8559 005e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 210


1395:uECC.c        ****         V[i] = 0x01;
 8560              		.loc 2 1395 0 discriminator 3
 8561 0060 149B     		ldr	r3, [sp, #80]
 8562 0062 0133     		adds	r3, r3, #1
 8563 0064 1493     		str	r3, [sp, #80]
 8564              	.L322:
1395:uECC.c        ****         V[i] = 0x01;
 8565              		.loc 2 1395 0 is_stmt 0 discriminator 1
 8566 0066 029B     		ldr	r3, [sp, #8]
 8567 0068 1A69     		ldr	r2, [r3, #16]
 8568 006a 149B     		ldr	r3, [sp, #80]
 8569 006c 9A42     		cmp	r2, r3
 8570 006e EDD8     		bhi	.L323
1398:uECC.c        ****     }
1399:uECC.c        **** 
1400:uECC.c        ****     /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
1401:uECC.c        ****     HMAC_init(hash_context, K);
 8571              		.loc 2 1401 0 is_stmt 1
 8572 0070 129A     		ldr	r2, [sp, #72]
 8573 0072 029B     		ldr	r3, [sp, #8]
 8574 0074 1100     		movs	r1, r2
 8575 0076 1800     		movs	r0, r3
 8576 0078 FFF7FEFF 		bl	HMAC_init
1402:uECC.c        ****     V[hash_context->result_size] = 0x00;
 8577              		.loc 2 1402 0
 8578 007c 029B     		ldr	r3, [sp, #8]
 8579 007e 1B69     		ldr	r3, [r3, #16]
 8580 0080 119A     		ldr	r2, [sp, #68]
 8581 0082 D318     		adds	r3, r2, r3
 8582 0084 0022     		movs	r2, #0
 8583 0086 1A70     		strb	r2, [r3]
1403:uECC.c        ****     HMAC_update(hash_context, V, hash_context->result_size + 1);
 8584              		.loc 2 1403 0
 8585 0088 029B     		ldr	r3, [sp, #8]
 8586 008a 1B69     		ldr	r3, [r3, #16]
 8587 008c 5A1C     		adds	r2, r3, #1
 8588 008e 1199     		ldr	r1, [sp, #68]
 8589 0090 029B     		ldr	r3, [sp, #8]
 8590 0092 1800     		movs	r0, r3
 8591 0094 FFF7FEFF 		bl	HMAC_update
1404:uECC.c        ****     HMAC_update(hash_context, private_key, num_bytes);
 8592              		.loc 2 1404 0
 8593 0098 4323     		movs	r3, #67
 8594 009a 6B44     		add	r3, r3, sp
 8595 009c 0022     		movs	r2, #0
 8596 009e 9A56     		ldrsb	r2, [r3, r2]
 8597 00a0 0599     		ldr	r1, [sp, #20]
 8598 00a2 029B     		ldr	r3, [sp, #8]
 8599 00a4 1800     		movs	r0, r3
 8600 00a6 FFF7FEFF 		bl	HMAC_update
1405:uECC.c        ****     HMAC_update(hash_context, message_hash, hash_size);
 8601              		.loc 2 1405 0
 8602 00aa 039A     		ldr	r2, [sp, #12]
 8603 00ac 0499     		ldr	r1, [sp, #16]
 8604 00ae 029B     		ldr	r3, [sp, #8]
 8605 00b0 1800     		movs	r0, r3
 8606 00b2 FFF7FEFF 		bl	HMAC_update
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 211


1406:uECC.c        ****     HMAC_finish(hash_context, K, K);
 8607              		.loc 2 1406 0
 8608 00b6 129A     		ldr	r2, [sp, #72]
 8609 00b8 1299     		ldr	r1, [sp, #72]
 8610 00ba 029B     		ldr	r3, [sp, #8]
 8611 00bc 1800     		movs	r0, r3
 8612 00be FFF7FEFF 		bl	HMAC_finish
1407:uECC.c        **** 
1408:uECC.c        ****     update_V(hash_context, K, V);
 8613              		.loc 2 1408 0
 8614 00c2 119A     		ldr	r2, [sp, #68]
 8615 00c4 1299     		ldr	r1, [sp, #72]
 8616 00c6 029B     		ldr	r3, [sp, #8]
 8617 00c8 1800     		movs	r0, r3
 8618 00ca FFF7FEFF 		bl	update_V
1409:uECC.c        **** 
1410:uECC.c        ****     /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
1411:uECC.c        ****     HMAC_init(hash_context, K);
 8619              		.loc 2 1411 0
 8620 00ce 129A     		ldr	r2, [sp, #72]
 8621 00d0 029B     		ldr	r3, [sp, #8]
 8622 00d2 1100     		movs	r1, r2
 8623 00d4 1800     		movs	r0, r3
 8624 00d6 FFF7FEFF 		bl	HMAC_init
1412:uECC.c        ****     V[hash_context->result_size] = 0x01;
 8625              		.loc 2 1412 0
 8626 00da 029B     		ldr	r3, [sp, #8]
 8627 00dc 1B69     		ldr	r3, [r3, #16]
 8628 00de 119A     		ldr	r2, [sp, #68]
 8629 00e0 D318     		adds	r3, r2, r3
 8630 00e2 0122     		movs	r2, #1
 8631 00e4 1A70     		strb	r2, [r3]
1413:uECC.c        ****     HMAC_update(hash_context, V, hash_context->result_size + 1);
 8632              		.loc 2 1413 0
 8633 00e6 029B     		ldr	r3, [sp, #8]
 8634 00e8 1B69     		ldr	r3, [r3, #16]
 8635 00ea 5A1C     		adds	r2, r3, #1
 8636 00ec 1199     		ldr	r1, [sp, #68]
 8637 00ee 029B     		ldr	r3, [sp, #8]
 8638 00f0 1800     		movs	r0, r3
 8639 00f2 FFF7FEFF 		bl	HMAC_update
1414:uECC.c        ****     HMAC_update(hash_context, private_key, num_bytes);
 8640              		.loc 2 1414 0
 8641 00f6 4323     		movs	r3, #67
 8642 00f8 6B44     		add	r3, r3, sp
 8643 00fa 0022     		movs	r2, #0
 8644 00fc 9A56     		ldrsb	r2, [r3, r2]
 8645 00fe 0599     		ldr	r1, [sp, #20]
 8646 0100 029B     		ldr	r3, [sp, #8]
 8647 0102 1800     		movs	r0, r3
 8648 0104 FFF7FEFF 		bl	HMAC_update
1415:uECC.c        ****     HMAC_update(hash_context, message_hash, hash_size);
 8649              		.loc 2 1415 0
 8650 0108 039A     		ldr	r2, [sp, #12]
 8651 010a 0499     		ldr	r1, [sp, #16]
 8652 010c 029B     		ldr	r3, [sp, #8]
 8653 010e 1800     		movs	r0, r3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 212


 8654 0110 FFF7FEFF 		bl	HMAC_update
1416:uECC.c        ****     HMAC_finish(hash_context, K, K);
 8655              		.loc 2 1416 0
 8656 0114 129A     		ldr	r2, [sp, #72]
 8657 0116 1299     		ldr	r1, [sp, #72]
 8658 0118 029B     		ldr	r3, [sp, #8]
 8659 011a 1800     		movs	r0, r3
 8660 011c FFF7FEFF 		bl	HMAC_finish
1417:uECC.c        **** 
1418:uECC.c        ****     update_V(hash_context, K, V);
 8661              		.loc 2 1418 0
 8662 0120 119A     		ldr	r2, [sp, #68]
 8663 0122 1299     		ldr	r1, [sp, #72]
 8664 0124 029B     		ldr	r3, [sp, #8]
 8665 0126 1800     		movs	r0, r3
 8666 0128 FFF7FEFF 		bl	update_V
1419:uECC.c        **** 
1420:uECC.c        ****     for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 8667              		.loc 2 1420 0
 8668 012c 0023     		movs	r3, #0
 8669 012e 1593     		str	r3, [sp, #84]
 8670 0130 93E0     		b	.L324
 8671              	.L333:
 8672              	.LBB13:
1421:uECC.c        ****         uECC_word_t T[uECC_MAX_WORDS];
1422:uECC.c        ****         uint8_t *T_ptr = (uint8_t *)T;
 8673              		.loc 2 1422 0
 8674 0132 06AB     		add	r3, sp, #24
 8675 0134 0F93     		str	r3, [sp, #60]
1423:uECC.c        ****         wordcount_t T_bytes = 0;
 8676              		.loc 2 1423 0
 8677 0136 4F23     		movs	r3, #79
 8678 0138 6B44     		add	r3, r3, sp
 8679 013a 0022     		movs	r2, #0
 8680 013c 1A70     		strb	r2, [r3]
 8681              	.L329:
1424:uECC.c        ****         for (;;) {
1425:uECC.c        ****             update_V(hash_context, K, V);
 8682              		.loc 2 1425 0
 8683 013e 119A     		ldr	r2, [sp, #68]
 8684 0140 1299     		ldr	r1, [sp, #72]
 8685 0142 029B     		ldr	r3, [sp, #8]
 8686 0144 1800     		movs	r0, r3
 8687 0146 FFF7FEFF 		bl	update_V
1426:uECC.c        ****             for (i = 0; i < hash_context->result_size; ++i) {
 8688              		.loc 2 1426 0
 8689 014a 0023     		movs	r3, #0
 8690 014c 1493     		str	r3, [sp, #80]
 8691 014e 1EE0     		b	.L325
 8692              	.L328:
1427:uECC.c        ****                 T_ptr[T_bytes++] = V[i];
 8693              		.loc 2 1427 0
 8694 0150 4F23     		movs	r3, #79
 8695 0152 6B44     		add	r3, r3, sp
 8696 0154 0022     		movs	r2, #0
 8697 0156 9A56     		ldrsb	r2, [r3, r2]
 8698 0158 D3B2     		uxtb	r3, r2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 213


 8699 015a 0133     		adds	r3, r3, #1
 8700 015c D9B2     		uxtb	r1, r3
 8701 015e 4F23     		movs	r3, #79
 8702 0160 6B44     		add	r3, r3, sp
 8703 0162 1970     		strb	r1, [r3]
 8704 0164 0F9B     		ldr	r3, [sp, #60]
 8705 0166 9B18     		adds	r3, r3, r2
 8706 0168 1199     		ldr	r1, [sp, #68]
 8707 016a 149A     		ldr	r2, [sp, #80]
 8708 016c 8A18     		adds	r2, r1, r2
 8709 016e 1278     		ldrb	r2, [r2]
 8710 0170 1A70     		strb	r2, [r3]
1428:uECC.c        ****                 if (T_bytes >= num_n_words * uECC_WORD_SIZE) {
 8711              		.loc 2 1428 0
 8712 0172 4F23     		movs	r3, #79
 8713 0174 6B44     		add	r3, r3, sp
 8714 0176 0022     		movs	r2, #0
 8715 0178 9A56     		ldrsb	r2, [r3, r2]
 8716 017a 4223     		movs	r3, #66
 8717 017c 6B44     		add	r3, r3, sp
 8718 017e 1B78     		ldrb	r3, [r3]
 8719 0180 5BB2     		sxtb	r3, r3
 8720 0182 9B00     		lsls	r3, r3, #2
 8721 0184 9A42     		cmp	r2, r3
 8722 0186 08DA     		bge	.L335
1426:uECC.c        ****             for (i = 0; i < hash_context->result_size; ++i) {
 8723              		.loc 2 1426 0 discriminator 2
 8724 0188 149B     		ldr	r3, [sp, #80]
 8725 018a 0133     		adds	r3, r3, #1
 8726 018c 1493     		str	r3, [sp, #80]
 8727              	.L325:
1426:uECC.c        ****             for (i = 0; i < hash_context->result_size; ++i) {
 8728              		.loc 2 1426 0 is_stmt 0 discriminator 1
 8729 018e 029B     		ldr	r3, [sp, #8]
 8730 0190 1A69     		ldr	r2, [r3, #16]
 8731 0192 149B     		ldr	r3, [sp, #80]
 8732 0194 9A42     		cmp	r2, r3
 8733 0196 DBD8     		bhi	.L328
1429:uECC.c        ****                     goto filled;
1430:uECC.c        ****                 }
1431:uECC.c        ****             }
1432:uECC.c        ****         }
 8734              		.loc 2 1432 0 is_stmt 1
 8735 0198 D1E7     		b	.L329
 8736              	.L335:
1429:uECC.c        ****                     goto filled;
 8737              		.loc 2 1429 0
 8738 019a C046     		nop
 8739              	.L327:
1433:uECC.c        ****     filled:
1434:uECC.c        ****         if ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8 > num_n_bits) {
 8740              		.loc 2 1434 0
 8741 019c 4223     		movs	r3, #66
 8742 019e 6B44     		add	r3, r3, sp
 8743 01a0 1B78     		ldrb	r3, [r3]
 8744 01a2 5BB2     		sxtb	r3, r3
 8745 01a4 5A01     		lsls	r2, r3, #5
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 214


 8746 01a6 10AB     		add	r3, sp, #64
 8747 01a8 0021     		movs	r1, #0
 8748 01aa 5B5E     		ldrsh	r3, [r3, r1]
 8749 01ac 9A42     		cmp	r2, r3
 8750 01ae 22DD     		ble	.L330
 8751              	.LBB14:
1435:uECC.c        ****             uECC_word_t mask = (uECC_word_t)-1;
 8752              		.loc 2 1435 0
 8753 01b0 0123     		movs	r3, #1
 8754 01b2 5B42     		rsbs	r3, r3, #0
 8755 01b4 0E93     		str	r3, [sp, #56]
1436:uECC.c        ****             T[num_n_words - 1] &=
 8756              		.loc 2 1436 0
 8757 01b6 4223     		movs	r3, #66
 8758 01b8 6B44     		add	r3, r3, sp
 8759 01ba 1B78     		ldrb	r3, [r3]
 8760 01bc 5BB2     		sxtb	r3, r3
 8761 01be 5A1E     		subs	r2, r3, #1
 8762 01c0 4223     		movs	r3, #66
 8763 01c2 6B44     		add	r3, r3, sp
 8764 01c4 1B78     		ldrb	r3, [r3]
 8765 01c6 5BB2     		sxtb	r3, r3
 8766 01c8 591E     		subs	r1, r3, #1
 8767 01ca 06AB     		add	r3, sp, #24
 8768 01cc 8900     		lsls	r1, r1, #2
 8769 01ce CB58     		ldr	r3, [r1, r3]
1437:uECC.c        ****                 mask >> ((bitcount_t)(num_n_words * uECC_WORD_SIZE * 8 - num_n_bits));
 8770              		.loc 2 1437 0
 8771 01d0 4221     		movs	r1, #66
 8772 01d2 6944     		add	r1, r1, sp
 8773 01d4 0978     		ldrb	r1, [r1]
 8774 01d6 49B2     		sxtb	r1, r1
 8775 01d8 89B2     		uxth	r1, r1
 8776 01da 4901     		lsls	r1, r1, #5
 8777 01dc 88B2     		uxth	r0, r1
 8778 01de 10A9     		add	r1, sp, #64
 8779 01e0 0988     		ldrh	r1, [r1]
 8780 01e2 411A     		subs	r1, r0, r1
 8781 01e4 89B2     		uxth	r1, r1
 8782 01e6 09B2     		sxth	r1, r1
 8783 01e8 0800     		movs	r0, r1
 8784 01ea 0E99     		ldr	r1, [sp, #56]
 8785 01ec C140     		lsrs	r1, r1, r0
1436:uECC.c        ****             T[num_n_words - 1] &=
 8786              		.loc 2 1436 0
 8787 01ee 1940     		ands	r1, r3
 8788 01f0 06AB     		add	r3, sp, #24
 8789 01f2 9200     		lsls	r2, r2, #2
 8790 01f4 D150     		str	r1, [r2, r3]
 8791              	.L330:
 8792              	.LBE14:
1438:uECC.c        ****         }
1439:uECC.c        **** 
1440:uECC.c        ****         if (uECC_sign_with_k(private_key, message_hash, hash_size, T, signature, curve)) {
 8793              		.loc 2 1440 0
 8794 01f6 06AC     		add	r4, sp, #24
 8795 01f8 039A     		ldr	r2, [sp, #12]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 215


 8796 01fa 0499     		ldr	r1, [sp, #16]
 8797 01fc 0598     		ldr	r0, [sp, #20]
 8798 01fe 199B     		ldr	r3, [sp, #100]
 8799 0200 0193     		str	r3, [sp, #4]
 8800 0202 189B     		ldr	r3, [sp, #96]
 8801 0204 0093     		str	r3, [sp]
 8802 0206 2300     		movs	r3, r4
 8803 0208 FFF7FEFF 		bl	uECC_sign_with_k
 8804 020c 031E     		subs	r3, r0, #0
 8805 020e 01D0     		beq	.L331
1441:uECC.c        ****             return 1;
 8806              		.loc 2 1441 0
 8807 0210 0123     		movs	r3, #1
 8808 0212 27E0     		b	.L332
 8809              	.L331:
1442:uECC.c        ****         }
1443:uECC.c        **** 
1444:uECC.c        ****         /* K = HMAC_K(V || 0x00) */
1445:uECC.c        ****         HMAC_init(hash_context, K);
 8810              		.loc 2 1445 0
 8811 0214 129A     		ldr	r2, [sp, #72]
 8812 0216 029B     		ldr	r3, [sp, #8]
 8813 0218 1100     		movs	r1, r2
 8814 021a 1800     		movs	r0, r3
 8815 021c FFF7FEFF 		bl	HMAC_init
1446:uECC.c        ****         V[hash_context->result_size] = 0x00;
 8816              		.loc 2 1446 0
 8817 0220 029B     		ldr	r3, [sp, #8]
 8818 0222 1B69     		ldr	r3, [r3, #16]
 8819 0224 119A     		ldr	r2, [sp, #68]
 8820 0226 D318     		adds	r3, r2, r3
 8821 0228 0022     		movs	r2, #0
 8822 022a 1A70     		strb	r2, [r3]
1447:uECC.c        ****         HMAC_update(hash_context, V, hash_context->result_size + 1);
 8823              		.loc 2 1447 0
 8824 022c 029B     		ldr	r3, [sp, #8]
 8825 022e 1B69     		ldr	r3, [r3, #16]
 8826 0230 5A1C     		adds	r2, r3, #1
 8827 0232 1199     		ldr	r1, [sp, #68]
 8828 0234 029B     		ldr	r3, [sp, #8]
 8829 0236 1800     		movs	r0, r3
 8830 0238 FFF7FEFF 		bl	HMAC_update
1448:uECC.c        ****         HMAC_finish(hash_context, K, K);
 8831              		.loc 2 1448 0
 8832 023c 129A     		ldr	r2, [sp, #72]
 8833 023e 1299     		ldr	r1, [sp, #72]
 8834 0240 029B     		ldr	r3, [sp, #8]
 8835 0242 1800     		movs	r0, r3
 8836 0244 FFF7FEFF 		bl	HMAC_finish
1449:uECC.c        **** 
1450:uECC.c        ****         update_V(hash_context, K, V);
 8837              		.loc 2 1450 0
 8838 0248 119A     		ldr	r2, [sp, #68]
 8839 024a 1299     		ldr	r1, [sp, #72]
 8840 024c 029B     		ldr	r3, [sp, #8]
 8841 024e 1800     		movs	r0, r3
 8842 0250 FFF7FEFF 		bl	update_V
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 216


 8843              	.LBE13:
1420:uECC.c        ****         uECC_word_t T[uECC_MAX_WORDS];
 8844              		.loc 2 1420 0
 8845 0254 159B     		ldr	r3, [sp, #84]
 8846 0256 0133     		adds	r3, r3, #1
 8847 0258 1593     		str	r3, [sp, #84]
 8848              	.L324:
1420:uECC.c        ****         uECC_word_t T[uECC_MAX_WORDS];
 8849              		.loc 2 1420 0 is_stmt 0 discriminator 1
 8850 025a 159B     		ldr	r3, [sp, #84]
 8851 025c 3F2B     		cmp	r3, #63
 8852 025e 00D8     		bhi	.LCB7455
 8853 0260 67E7     		b	.L333	@long jump
 8854              	.LCB7455:
1451:uECC.c        ****     }
1452:uECC.c        ****     return 0;
 8855              		.loc 2 1452 0 is_stmt 1
 8856 0262 0023     		movs	r3, #0
 8857              	.L332:
1453:uECC.c        **** }
 8858              		.loc 2 1453 0
 8859 0264 1800     		movs	r0, r3
 8860 0266 16B0     		add	sp, sp, #88
 8861              		@ sp needed
 8862 0268 10BD     		pop	{r4, pc}
 8863              		.cfi_endproc
 8864              	.LFE71:
 8865              		.size	uECC_sign_deterministic, .-uECC_sign_deterministic
 8866 026a C046     		.section	.text.smax,"ax",%progbits
 8867              		.align	2
 8868              		.code	16
 8869              		.thumb_func
 8870              		.type	smax, %function
 8871              	smax:
 8872              	.LFB72:
1454:uECC.c        **** 
1455:uECC.c        **** static bitcount_t smax(bitcount_t a, bitcount_t b) {
 8873              		.loc 2 1455 0
 8874              		.cfi_startproc
 8875              		@ args = 0, pretend = 0, frame = 8
 8876              		@ frame_needed = 0, uses_anonymous_args = 0
 8877              		@ link register save eliminated.
 8878 0000 82B0     		sub	sp, sp, #8
 8879              		.cfi_def_cfa_offset 8
 8880 0002 0200     		movs	r2, r0
 8881 0004 6B46     		mov	r3, sp
 8882 0006 0633     		adds	r3, r3, #6
 8883 0008 1A80     		strh	r2, [r3]
 8884 000a 01AB     		add	r3, sp, #4
 8885 000c 0A1C     		adds	r2, r1, #0
 8886 000e 1A80     		strh	r2, [r3]
1456:uECC.c        ****     return (a > b ? a : b);
 8887              		.loc 2 1456 0
 8888 0010 01AB     		add	r3, sp, #4
 8889 0012 6A46     		mov	r2, sp
 8890 0014 0632     		adds	r2, r2, #6
 8891 0016 1088     		ldrh	r0, [r2]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 217


 8892 0018 1B88     		ldrh	r3, [r3]
 8893 001a 19B2     		sxth	r1, r3
 8894 001c 02B2     		sxth	r2, r0
 8895 001e 9142     		cmp	r1, r2
 8896 0020 00DA     		bge	.L337
 8897 0022 031C     		adds	r3, r0, #0
 8898              	.L337:
 8899 0024 1BB2     		sxth	r3, r3
1457:uECC.c        **** }
 8900              		.loc 2 1457 0
 8901 0026 1800     		movs	r0, r3
 8902 0028 02B0     		add	sp, sp, #8
 8903              		@ sp needed
 8904 002a 7047     		bx	lr
 8905              		.cfi_endproc
 8906              	.LFE72:
 8907              		.size	smax, .-smax
 8908              		.section	.text.uECC_verify,"ax",%progbits
 8909              		.align	2
 8910              		.global	uECC_verify
 8911              		.code	16
 8912              		.thumb_func
 8913              		.type	uECC_verify, %function
 8914              	uECC_verify:
 8915              	.LFB73:
1458:uECC.c        **** 
1459:uECC.c        **** int uECC_verify(const uint8_t *public_key,
1460:uECC.c        ****                 const uint8_t *message_hash,
1461:uECC.c        ****                 unsigned hash_size,
1462:uECC.c        ****                 const uint8_t *signature,
1463:uECC.c        ****                 uECC_Curve curve) {
 8916              		.loc 2 1463 0
 8917              		.cfi_startproc
 8918              		@ args = 4, pretend = 0, frame = 496
 8919              		@ frame_needed = 0, uses_anonymous_args = 0
 8920 0000 30B5     		push	{r4, r5, lr}
 8921              		.cfi_def_cfa_offset 12
 8922              		.cfi_offset 4, -12
 8923              		.cfi_offset 5, -8
 8924              		.cfi_offset 14, -4
 8925 0002 FFB0     		sub	sp, sp, #508
 8926              		.cfi_def_cfa_offset 520
 8927 0004 0590     		str	r0, [sp, #20]
 8928 0006 0491     		str	r1, [sp, #16]
 8929 0008 0392     		str	r2, [sp, #12]
 8930 000a 0293     		str	r3, [sp, #8]
1464:uECC.c        ****     uECC_word_t u1[uECC_MAX_WORDS], u2[uECC_MAX_WORDS];
1465:uECC.c        ****     uECC_word_t z[uECC_MAX_WORDS];
1466:uECC.c        ****     uECC_word_t sum[uECC_MAX_WORDS * 2];
1467:uECC.c        ****     uECC_word_t rx[uECC_MAX_WORDS];
1468:uECC.c        ****     uECC_word_t ry[uECC_MAX_WORDS];
1469:uECC.c        ****     uECC_word_t tx[uECC_MAX_WORDS];
1470:uECC.c        ****     uECC_word_t ty[uECC_MAX_WORDS];
1471:uECC.c        ****     uECC_word_t tz[uECC_MAX_WORDS];
1472:uECC.c        ****     const uECC_word_t *points[4];
1473:uECC.c        ****     const uECC_word_t *point;
1474:uECC.c        ****     bitcount_t num_bits;
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 218


1475:uECC.c        ****     bitcount_t i;
1476:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1477:uECC.c        ****     uECC_word_t *_public = (uECC_word_t *)public_key;
1478:uECC.c        **** #else
1479:uECC.c        ****     uECC_word_t _public[uECC_MAX_WORDS * 2];
1480:uECC.c        **** #endif    
1481:uECC.c        ****     uECC_word_t r[uECC_MAX_WORDS], s[uECC_MAX_WORDS];
1482:uECC.c        ****     wordcount_t num_words = curve->num_words;
 8931              		.loc 2 1482 0
 8932 000c F623     		movs	r3, #246
 8933 000e FF33     		adds	r3, r3, #255
 8934 0010 6B44     		add	r3, r3, sp
 8935 0012 829A     		ldr	r2, [sp, #520]
 8936 0014 1278     		ldrb	r2, [r2]
 8937 0016 1A70     		strb	r2, [r3]
1483:uECC.c        ****     wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8938              		.loc 2 1483 0
 8939 0018 829B     		ldr	r3, [sp, #520]
 8940 001a 0222     		movs	r2, #2
 8941 001c 9B5E     		ldrsh	r3, [r3, r2]
 8942 001e 1F33     		adds	r3, r3, #31
 8943 0020 002B     		cmp	r3, #0
 8944 0022 00DA     		bge	.L340
 8945 0024 1F33     		adds	r3, r3, #31
 8946              	.L340:
 8947 0026 5B11     		asrs	r3, r3, #5
 8948 0028 1A00     		movs	r2, r3
 8949 002a 7DAB     		add	r3, sp, #500
 8950 002c 1A70     		strb	r2, [r3]
1484:uECC.c        **** 
1485:uECC.c        ****     rx[num_n_words - 1] = 0;
 8951              		.loc 2 1485 0
 8952 002e 7DAB     		add	r3, sp, #500
 8953 0030 1B78     		ldrb	r3, [r3]
 8954 0032 5BB2     		sxtb	r3, r3
 8955 0034 5A1E     		subs	r2, r3, #1
 8956 0036 4AAB     		add	r3, sp, #296
 8957 0038 9200     		lsls	r2, r2, #2
 8958 003a 0021     		movs	r1, #0
 8959 003c D150     		str	r1, [r2, r3]
1486:uECC.c        ****     r[num_n_words - 1] = 0;
 8960              		.loc 2 1486 0
 8961 003e 7DAB     		add	r3, sp, #500
 8962 0040 1B78     		ldrb	r3, [r3]
 8963 0042 5BB2     		sxtb	r3, r3
 8964 0044 5A1E     		subs	r2, r3, #1
 8965 0046 DC4B     		ldr	r3, .L355
 8966 0048 7EA9     		add	r1, sp, #504
 8967 004a 8C46     		mov	ip, r1
 8968 004c 6344     		add	r3, r3, ip
 8969 004e 9200     		lsls	r2, r2, #2
 8970 0050 0021     		movs	r1, #0
 8971 0052 D150     		str	r1, [r2, r3]
1487:uECC.c        ****     s[num_n_words - 1] = 0;
 8972              		.loc 2 1487 0
 8973 0054 7DAB     		add	r3, sp, #500
 8974 0056 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 219


 8975 0058 5BB2     		sxtb	r3, r3
 8976 005a 5A1E     		subs	r2, r3, #1
 8977 005c D74B     		ldr	r3, .L355+4
 8978 005e 7EA9     		add	r1, sp, #504
 8979 0060 8C46     		mov	ip, r1
 8980 0062 6344     		add	r3, r3, ip
 8981 0064 9200     		lsls	r2, r2, #2
 8982 0066 0021     		movs	r1, #0
 8983 0068 D150     		str	r1, [r2, r3]
1488:uECC.c        **** 
1489:uECC.c        **** #if uECC_VLI_NATIVE_LITTLE_ENDIAN
1490:uECC.c        ****     bcopy((uint8_t *) r, signature, curve->num_bytes);
1491:uECC.c        ****     bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
1492:uECC.c        **** #else
1493:uECC.c        ****     uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
 8984              		.loc 2 1493 0
 8985 006a 829B     		ldr	r3, [sp, #520]
 8986 006c 5B78     		ldrb	r3, [r3, #1]
 8987 006e 5BB2     		sxtb	r3, r3
 8988 0070 1A00     		movs	r2, r3
 8989 0072 0599     		ldr	r1, [sp, #20]
 8990 0074 16AB     		add	r3, sp, #88
 8991 0076 1800     		movs	r0, r3
 8992 0078 FFF7FEFF 		bl	uECC_vli_bytesToNative
1494:uECC.c        ****     uECC_vli_bytesToNative(
 8993              		.loc 2 1494 0
 8994 007c F623     		movs	r3, #246
 8995 007e FF33     		adds	r3, r3, #255
 8996 0080 6B44     		add	r3, r3, sp
 8997 0082 1B78     		ldrb	r3, [r3]
 8998 0084 5BB2     		sxtb	r3, r3
1495:uECC.c        ****         _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
 8999              		.loc 2 1495 0
 9000 0086 9B00     		lsls	r3, r3, #2
1494:uECC.c        ****     uECC_vli_bytesToNative(
 9001              		.loc 2 1494 0
 9002 0088 16AA     		add	r2, sp, #88
 9003 008a D018     		adds	r0, r2, r3
 9004              		.loc 2 1495 0
 9005 008c 829B     		ldr	r3, [sp, #520]
 9006 008e 5B78     		ldrb	r3, [r3, #1]
 9007 0090 5BB2     		sxtb	r3, r3
1494:uECC.c        ****     uECC_vli_bytesToNative(
 9008              		.loc 2 1494 0
 9009 0092 1A00     		movs	r2, r3
 9010 0094 059B     		ldr	r3, [sp, #20]
 9011 0096 9918     		adds	r1, r3, r2
 9012              		.loc 2 1495 0
 9013 0098 829B     		ldr	r3, [sp, #520]
 9014 009a 5B78     		ldrb	r3, [r3, #1]
 9015 009c 5BB2     		sxtb	r3, r3
1494:uECC.c        ****     uECC_vli_bytesToNative(
 9016              		.loc 2 1494 0
 9017 009e 1A00     		movs	r2, r3
 9018 00a0 FFF7FEFF 		bl	uECC_vli_bytesToNative
1496:uECC.c        ****     uECC_vli_bytesToNative(r, signature, curve->num_bytes);
 9019              		.loc 2 1496 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 220


 9020 00a4 829B     		ldr	r3, [sp, #520]
 9021 00a6 5B78     		ldrb	r3, [r3, #1]
 9022 00a8 5BB2     		sxtb	r3, r3
 9023 00aa 1A00     		movs	r2, r3
 9024 00ac 0299     		ldr	r1, [sp, #8]
 9025 00ae 0EAB     		add	r3, sp, #56
 9026 00b0 1800     		movs	r0, r3
 9027 00b2 FFF7FEFF 		bl	uECC_vli_bytesToNative
1497:uECC.c        ****     uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 9028              		.loc 2 1497 0
 9029 00b6 829B     		ldr	r3, [sp, #520]
 9030 00b8 5B78     		ldrb	r3, [r3, #1]
 9031 00ba 5BB2     		sxtb	r3, r3
 9032 00bc 1A00     		movs	r2, r3
 9033 00be 029B     		ldr	r3, [sp, #8]
 9034 00c0 9918     		adds	r1, r3, r2
 9035 00c2 829B     		ldr	r3, [sp, #520]
 9036 00c4 5B78     		ldrb	r3, [r3, #1]
 9037 00c6 5BB2     		sxtb	r3, r3
 9038 00c8 1A00     		movs	r2, r3
 9039 00ca 06AB     		add	r3, sp, #24
 9040 00cc 1800     		movs	r0, r3
 9041 00ce FFF7FEFF 		bl	uECC_vli_bytesToNative
1498:uECC.c        **** #endif
1499:uECC.c        **** 
1500:uECC.c        ****     /* r, s must not be 0. */
1501:uECC.c        ****     if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
 9042              		.loc 2 1501 0
 9043 00d2 F623     		movs	r3, #246
 9044 00d4 FF33     		adds	r3, r3, #255
 9045 00d6 6B44     		add	r3, r3, sp
 9046 00d8 0022     		movs	r2, #0
 9047 00da 9A56     		ldrsb	r2, [r3, r2]
 9048 00dc 0EAB     		add	r3, sp, #56
 9049 00de 1100     		movs	r1, r2
 9050 00e0 1800     		movs	r0, r3
 9051 00e2 FFF7FEFF 		bl	uECC_vli_isZero
 9052 00e6 031E     		subs	r3, r0, #0
 9053 00e8 0BD1     		bne	.L341
 9054              		.loc 2 1501 0 is_stmt 0 discriminator 1
 9055 00ea F623     		movs	r3, #246
 9056 00ec FF33     		adds	r3, r3, #255
 9057 00ee 6B44     		add	r3, r3, sp
 9058 00f0 0022     		movs	r2, #0
 9059 00f2 9A56     		ldrsb	r2, [r3, r2]
 9060 00f4 06AB     		add	r3, sp, #24
 9061 00f6 1100     		movs	r1, r2
 9062 00f8 1800     		movs	r0, r3
 9063 00fa FFF7FEFF 		bl	uECC_vli_isZero
 9064 00fe 031E     		subs	r3, r0, #0
 9065 0100 01D0     		beq	.L342
 9066              	.L341:
1502:uECC.c        ****         return 0;
 9067              		.loc 2 1502 0 is_stmt 1
 9068 0102 0023     		movs	r3, #0
 9069 0104 14E2     		b	.L354
 9070              	.L342:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 221


1503:uECC.c        ****     }
1504:uECC.c        **** 
1505:uECC.c        ****     /* r, s must be < n. */
1506:uECC.c        ****     if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 9071              		.loc 2 1506 0
 9072 0106 829B     		ldr	r3, [sp, #520]
 9073 0108 2433     		adds	r3, r3, #36
 9074 010a 1800     		movs	r0, r3
 9075 010c 7DAB     		add	r3, sp, #500
 9076 010e 0022     		movs	r2, #0
 9077 0110 9A56     		ldrsb	r2, [r3, r2]
 9078 0112 0EAB     		add	r3, sp, #56
 9079 0114 1900     		movs	r1, r3
 9080 0116 FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 9081 011a 0300     		movs	r3, r0
 9082 011c 012B     		cmp	r3, #1
 9083 011e 0CD1     		bne	.L344
1507:uECC.c        ****             uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 9084              		.loc 2 1507 0 discriminator 1
 9085 0120 829B     		ldr	r3, [sp, #520]
 9086 0122 2433     		adds	r3, r3, #36
 9087 0124 1800     		movs	r0, r3
 9088 0126 7DAB     		add	r3, sp, #500
 9089 0128 0022     		movs	r2, #0
 9090 012a 9A56     		ldrsb	r2, [r3, r2]
 9091 012c 06AB     		add	r3, sp, #24
 9092 012e 1900     		movs	r1, r3
 9093 0130 FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 9094 0134 0300     		movs	r3, r0
1506:uECC.c        ****             uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 9095              		.loc 2 1506 0 discriminator 1
 9096 0136 012B     		cmp	r3, #1
 9097 0138 01D0     		beq	.L345
 9098              	.L344:
1508:uECC.c        ****         return 0;
 9099              		.loc 2 1508 0
 9100 013a 0023     		movs	r3, #0
 9101 013c F8E1     		b	.L354
 9102              	.L345:
1509:uECC.c        ****     }
1510:uECC.c        **** 
1511:uECC.c        ****     /* Calculate u1 and u2. */
1512:uECC.c        ****     uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 9103              		.loc 2 1512 0
 9104 013e 829B     		ldr	r3, [sp, #520]
 9105 0140 2433     		adds	r3, r3, #36
 9106 0142 1A00     		movs	r2, r3
 9107 0144 7DAB     		add	r3, sp, #500
 9108 0146 1B78     		ldrb	r3, [r3]
 9109 0148 5BB2     		sxtb	r3, r3
 9110 014a 06A9     		add	r1, sp, #24
 9111 014c 62A8     		add	r0, sp, #392
 9112 014e FFF7FEFF 		bl	uECC_vli_modInv
1513:uECC.c        ****     u1[num_n_words - 1] = 0;
 9113              		.loc 2 1513 0
 9114 0152 7DAB     		add	r3, sp, #500
 9115 0154 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 222


 9116 0156 5BB2     		sxtb	r3, r3
 9117 0158 5A1E     		subs	r2, r3, #1
 9118 015a 72AB     		add	r3, sp, #456
 9119 015c 9200     		lsls	r2, r2, #2
 9120 015e 0021     		movs	r1, #0
 9121 0160 D150     		str	r1, [r2, r3]
1514:uECC.c        ****     bits2int(u1, message_hash, hash_size, curve);
 9122              		.loc 2 1514 0
 9123 0162 829B     		ldr	r3, [sp, #520]
 9124 0164 039A     		ldr	r2, [sp, #12]
 9125 0166 0499     		ldr	r1, [sp, #16]
 9126 0168 72A8     		add	r0, sp, #456
 9127 016a FFF7FEFF 		bl	bits2int
1515:uECC.c        ****     uECC_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 9128              		.loc 2 1515 0
 9129 016e 829B     		ldr	r3, [sp, #520]
 9130 0170 2433     		adds	r3, r3, #36
 9131 0172 1C00     		movs	r4, r3
 9132 0174 62AA     		add	r2, sp, #392
 9133 0176 72A9     		add	r1, sp, #456
 9134 0178 72A8     		add	r0, sp, #456
 9135 017a 7DAB     		add	r3, sp, #500
 9136 017c 1B78     		ldrb	r3, [r3]
 9137 017e 5BB2     		sxtb	r3, r3
 9138 0180 0093     		str	r3, [sp]
 9139 0182 2300     		movs	r3, r4
 9140 0184 FFF7FEFF 		bl	uECC_vli_modMult
1516:uECC.c        ****     uECC_vli_modMult(u2, r, z, curve->n, num_n_words); /* u2 = r/s */
 9141              		.loc 2 1516 0
 9142 0188 829B     		ldr	r3, [sp, #520]
 9143 018a 2433     		adds	r3, r3, #36
 9144 018c 1C00     		movs	r4, r3
 9145 018e 62AA     		add	r2, sp, #392
 9146 0190 0EA9     		add	r1, sp, #56
 9147 0192 6AA8     		add	r0, sp, #424
 9148 0194 7DAB     		add	r3, sp, #500
 9149 0196 1B78     		ldrb	r3, [r3]
 9150 0198 5BB2     		sxtb	r3, r3
 9151 019a 0093     		str	r3, [sp]
 9152 019c 2300     		movs	r3, r4
 9153 019e FFF7FEFF 		bl	uECC_vli_modMult
1517:uECC.c        **** 
1518:uECC.c        ****     /* Calculate sum = G + Q. */
1519:uECC.c        ****     uECC_vli_set(sum, _public, num_words);
 9154              		.loc 2 1519 0
 9155 01a2 F623     		movs	r3, #246
 9156 01a4 FF33     		adds	r3, r3, #255
 9157 01a6 6B44     		add	r3, r3, sp
 9158 01a8 0022     		movs	r2, #0
 9159 01aa 9A56     		ldrsb	r2, [r3, r2]
 9160 01ac 16A9     		add	r1, sp, #88
 9161 01ae 52AB     		add	r3, sp, #328
 9162 01b0 1800     		movs	r0, r3
 9163 01b2 FFF7FEFF 		bl	uECC_vli_set
1520:uECC.c        ****     uECC_vli_set(sum + num_words, _public + num_words, num_words);
 9164              		.loc 2 1520 0
 9165 01b6 F623     		movs	r3, #246
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 223


 9166 01b8 FF33     		adds	r3, r3, #255
 9167 01ba 6B44     		add	r3, r3, sp
 9168 01bc 1B78     		ldrb	r3, [r3]
 9169 01be 5BB2     		sxtb	r3, r3
 9170 01c0 9B00     		lsls	r3, r3, #2
 9171 01c2 52AA     		add	r2, sp, #328
 9172 01c4 D018     		adds	r0, r2, r3
 9173 01c6 F623     		movs	r3, #246
 9174 01c8 FF33     		adds	r3, r3, #255
 9175 01ca 6B44     		add	r3, r3, sp
 9176 01cc 1B78     		ldrb	r3, [r3]
 9177 01ce 5BB2     		sxtb	r3, r3
 9178 01d0 9B00     		lsls	r3, r3, #2
 9179 01d2 16AA     		add	r2, sp, #88
 9180 01d4 D118     		adds	r1, r2, r3
 9181 01d6 F623     		movs	r3, #246
 9182 01d8 FF33     		adds	r3, r3, #255
 9183 01da 6B44     		add	r3, r3, sp
 9184 01dc 1B78     		ldrb	r3, [r3]
 9185 01de 5BB2     		sxtb	r3, r3
 9186 01e0 1A00     		movs	r2, r3
 9187 01e2 FFF7FEFF 		bl	uECC_vli_set
1521:uECC.c        ****     uECC_vli_set(tx, curve->G, num_words);
 9188              		.loc 2 1521 0
 9189 01e6 829B     		ldr	r3, [sp, #520]
 9190 01e8 4433     		adds	r3, r3, #68
 9191 01ea 1900     		movs	r1, r3
 9192 01ec F623     		movs	r3, #246
 9193 01ee FF33     		adds	r3, r3, #255
 9194 01f0 6B44     		add	r3, r3, sp
 9195 01f2 0022     		movs	r2, #0
 9196 01f4 9A56     		ldrsb	r2, [r3, r2]
 9197 01f6 3AAB     		add	r3, sp, #232
 9198 01f8 1800     		movs	r0, r3
 9199 01fa FFF7FEFF 		bl	uECC_vli_set
1522:uECC.c        ****     uECC_vli_set(ty, curve->G + num_words, num_words);
 9200              		.loc 2 1522 0
 9201 01fe 829B     		ldr	r3, [sp, #520]
 9202 0200 4433     		adds	r3, r3, #68
 9203 0202 1A00     		movs	r2, r3
 9204 0204 F623     		movs	r3, #246
 9205 0206 FF33     		adds	r3, r3, #255
 9206 0208 6B44     		add	r3, r3, sp
 9207 020a 1B78     		ldrb	r3, [r3]
 9208 020c 5BB2     		sxtb	r3, r3
 9209 020e 9B00     		lsls	r3, r3, #2
 9210 0210 D118     		adds	r1, r2, r3
 9211 0212 F623     		movs	r3, #246
 9212 0214 FF33     		adds	r3, r3, #255
 9213 0216 6B44     		add	r3, r3, sp
 9214 0218 0022     		movs	r2, #0
 9215 021a 9A56     		ldrsb	r2, [r3, r2]
 9216 021c 32AB     		add	r3, sp, #200
 9217 021e 1800     		movs	r0, r3
 9218 0220 FFF7FEFF 		bl	uECC_vli_set
1523:uECC.c        ****     uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 9219              		.loc 2 1523 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 224


 9220 0224 829B     		ldr	r3, [sp, #520]
 9221 0226 1C1D     		adds	r4, r3, #4
 9222 0228 3AAA     		add	r2, sp, #232
 9223 022a 52A9     		add	r1, sp, #328
 9224 022c 62A8     		add	r0, sp, #392
 9225 022e F623     		movs	r3, #246
 9226 0230 FF33     		adds	r3, r3, #255
 9227 0232 6B44     		add	r3, r3, sp
 9228 0234 1B78     		ldrb	r3, [r3]
 9229 0236 5BB2     		sxtb	r3, r3
 9230 0238 0093     		str	r3, [sp]
 9231 023a 2300     		movs	r3, r4
 9232 023c FFF7FEFF 		bl	uECC_vli_modSub
1524:uECC.c        ****     XYcZ_add(tx, ty, sum, sum + num_words, curve);
 9233              		.loc 2 1524 0
 9234 0240 F623     		movs	r3, #246
 9235 0242 FF33     		adds	r3, r3, #255
 9236 0244 6B44     		add	r3, r3, sp
 9237 0246 1B78     		ldrb	r3, [r3]
 9238 0248 5BB2     		sxtb	r3, r3
 9239 024a 9B00     		lsls	r3, r3, #2
 9240 024c 52AA     		add	r2, sp, #328
 9241 024e D418     		adds	r4, r2, r3
 9242 0250 52AA     		add	r2, sp, #328
 9243 0252 32A9     		add	r1, sp, #200
 9244 0254 3AA8     		add	r0, sp, #232
 9245 0256 829B     		ldr	r3, [sp, #520]
 9246 0258 0093     		str	r3, [sp]
 9247 025a 2300     		movs	r3, r4
 9248 025c FFF7FEFF 		bl	XYcZ_add
1525:uECC.c        ****     uECC_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 9249              		.loc 2 1525 0
 9250 0260 829B     		ldr	r3, [sp, #520]
 9251 0262 1A1D     		adds	r2, r3, #4
 9252 0264 F623     		movs	r3, #246
 9253 0266 FF33     		adds	r3, r3, #255
 9254 0268 6B44     		add	r3, r3, sp
 9255 026a 1B78     		ldrb	r3, [r3]
 9256 026c 5BB2     		sxtb	r3, r3
 9257 026e 62A9     		add	r1, sp, #392
 9258 0270 62A8     		add	r0, sp, #392
 9259 0272 FFF7FEFF 		bl	uECC_vli_modInv
1526:uECC.c        ****     apply_z(sum, sum + num_words, z, curve);
 9260              		.loc 2 1526 0
 9261 0276 F623     		movs	r3, #246
 9262 0278 FF33     		adds	r3, r3, #255
 9263 027a 6B44     		add	r3, r3, sp
 9264 027c 1B78     		ldrb	r3, [r3]
 9265 027e 5BB2     		sxtb	r3, r3
 9266 0280 9B00     		lsls	r3, r3, #2
 9267 0282 52AA     		add	r2, sp, #328
 9268 0284 D118     		adds	r1, r2, r3
 9269 0286 829B     		ldr	r3, [sp, #520]
 9270 0288 62AA     		add	r2, sp, #392
 9271 028a 52A8     		add	r0, sp, #328
 9272 028c FFF7FEFF 		bl	apply_z
1527:uECC.c        **** 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 225


1528:uECC.c        ****     /* Use Shamir's trick to calculate u1*G + u2*Q */
1529:uECC.c        ****     points[0] = 0;
 9273              		.loc 2 1529 0
 9274 0290 4B4B     		ldr	r3, .L355+8
 9275 0292 7EAA     		add	r2, sp, #504
 9276 0294 9446     		mov	ip, r2
 9277 0296 6344     		add	r3, r3, ip
 9278 0298 0022     		movs	r2, #0
 9279 029a 1A60     		str	r2, [r3]
1530:uECC.c        ****     points[1] = curve->G;
 9280              		.loc 2 1530 0
 9281 029c 829B     		ldr	r3, [sp, #520]
 9282 029e 4433     		adds	r3, r3, #68
 9283 02a0 1A00     		movs	r2, r3
 9284 02a2 474B     		ldr	r3, .L355+8
 9285 02a4 7EA9     		add	r1, sp, #504
 9286 02a6 8C46     		mov	ip, r1
 9287 02a8 6344     		add	r3, r3, ip
 9288 02aa 5A60     		str	r2, [r3, #4]
1531:uECC.c        ****     points[2] = _public;
 9289              		.loc 2 1531 0
 9290 02ac 444B     		ldr	r3, .L355+8
 9291 02ae 7EAA     		add	r2, sp, #504
 9292 02b0 9446     		mov	ip, r2
 9293 02b2 6344     		add	r3, r3, ip
 9294 02b4 16AA     		add	r2, sp, #88
 9295 02b6 9A60     		str	r2, [r3, #8]
1532:uECC.c        ****     points[3] = sum;
 9296              		.loc 2 1532 0
 9297 02b8 414B     		ldr	r3, .L355+8
 9298 02ba 7EAA     		add	r2, sp, #504
 9299 02bc 9446     		mov	ip, r2
 9300 02be 6344     		add	r3, r3, ip
 9301 02c0 52AA     		add	r2, sp, #328
 9302 02c2 DA60     		str	r2, [r3, #12]
1533:uECC.c        ****     num_bits = smax(uECC_vli_numBits(u1, num_n_words),
 9303              		.loc 2 1533 0
 9304 02c4 7DAB     		add	r3, sp, #500
 9305 02c6 0022     		movs	r2, #0
 9306 02c8 9A56     		ldrsb	r2, [r3, r2]
 9307 02ca 72AB     		add	r3, sp, #456
 9308 02cc 1100     		movs	r1, r2
 9309 02ce 1800     		movs	r0, r3
 9310 02d0 FFF7FEFF 		bl	uECC_vli_numBits
 9311 02d4 0300     		movs	r3, r0
 9312 02d6 1D00     		movs	r5, r3
 9313 02d8 7DAB     		add	r3, sp, #500
 9314 02da 0022     		movs	r2, #0
 9315 02dc 9A56     		ldrsb	r2, [r3, r2]
 9316 02de 6AAB     		add	r3, sp, #424
 9317 02e0 1100     		movs	r1, r2
 9318 02e2 1800     		movs	r0, r3
 9319 02e4 FFF7FEFF 		bl	uECC_vli_numBits
 9320 02e8 0300     		movs	r3, r0
 9321 02ea F924     		movs	r4, #249
 9322 02ec 6400     		lsls	r4, r4, #1
 9323 02ee 6C44     		add	r4, r4, sp
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 226


 9324 02f0 1900     		movs	r1, r3
 9325 02f2 2800     		movs	r0, r5
 9326 02f4 FFF7FEFF 		bl	smax
 9327 02f8 0300     		movs	r3, r0
 9328 02fa 2380     		strh	r3, [r4]
1534:uECC.c        ****                     uECC_vli_numBits(u2, num_n_words));
1535:uECC.c        **** 
1536:uECC.c        ****     point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 9329              		.loc 2 1536 0
 9330 02fc F923     		movs	r3, #249
 9331 02fe 5B00     		lsls	r3, r3, #1
 9332 0300 6B44     		add	r3, r3, sp
 9333 0302 1B88     		ldrh	r3, [r3]
 9334 0304 013B     		subs	r3, r3, #1
 9335 0306 9BB2     		uxth	r3, r3
 9336 0308 1AB2     		sxth	r2, r3
 9337 030a 72AB     		add	r3, sp, #456
 9338 030c 1100     		movs	r1, r2
 9339 030e 1800     		movs	r0, r3
 9340 0310 FFF7FEFF 		bl	uECC_vli_testBit
 9341 0314 0300     		movs	r3, r0
 9342 0316 5A1E     		subs	r2, r3, #1
 9343 0318 9341     		sbcs	r3, r3, r2
 9344 031a DBB2     		uxtb	r3, r3
 9345 031c 1C00     		movs	r4, r3
1537:uECC.c        ****                    ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 9346              		.loc 2 1537 0
 9347 031e F923     		movs	r3, #249
 9348 0320 5B00     		lsls	r3, r3, #1
 9349 0322 6B44     		add	r3, r3, sp
 9350 0324 1B88     		ldrh	r3, [r3]
 9351 0326 013B     		subs	r3, r3, #1
 9352 0328 9BB2     		uxth	r3, r3
 9353 032a 1AB2     		sxth	r2, r3
 9354 032c 6AAB     		add	r3, sp, #424
 9355 032e 1100     		movs	r1, r2
 9356 0330 1800     		movs	r0, r3
 9357 0332 FFF7FEFF 		bl	uECC_vli_testBit
 9358 0336 031E     		subs	r3, r0, #0
 9359 0338 01D0     		beq	.L346
 9360              		.loc 2 1537 0 is_stmt 0 discriminator 1
 9361 033a 0223     		movs	r3, #2
 9362 033c 00E0     		b	.L347
 9363              	.L346:
 9364              		.loc 2 1537 0 discriminator 2
 9365 033e 0023     		movs	r3, #0
 9366              	.L347:
1536:uECC.c        ****                    ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 9367              		.loc 2 1536 0 is_stmt 1
 9368 0340 2200     		movs	r2, r4
 9369 0342 1A43     		orrs	r2, r3
 9370 0344 1E4B     		ldr	r3, .L355+8
 9371 0346 7EA9     		add	r1, sp, #504
 9372 0348 8C46     		mov	ip, r1
 9373 034a 6344     		add	r3, r3, ip
 9374 034c 9200     		lsls	r2, r2, #2
 9375 034e D358     		ldr	r3, [r2, r3]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 227


 9376 0350 7B93     		str	r3, [sp, #492]
1538:uECC.c        ****     uECC_vli_set(rx, point, num_words);
 9377              		.loc 2 1538 0
 9378 0352 F623     		movs	r3, #246
 9379 0354 FF33     		adds	r3, r3, #255
 9380 0356 6B44     		add	r3, r3, sp
 9381 0358 0022     		movs	r2, #0
 9382 035a 9A56     		ldrsb	r2, [r3, r2]
 9383 035c 7B99     		ldr	r1, [sp, #492]
 9384 035e 4AAB     		add	r3, sp, #296
 9385 0360 1800     		movs	r0, r3
 9386 0362 FFF7FEFF 		bl	uECC_vli_set
1539:uECC.c        ****     uECC_vli_set(ry, point + num_words, num_words);
 9387              		.loc 2 1539 0
 9388 0366 F623     		movs	r3, #246
 9389 0368 FF33     		adds	r3, r3, #255
 9390 036a 6B44     		add	r3, r3, sp
 9391 036c 1B78     		ldrb	r3, [r3]
 9392 036e 5BB2     		sxtb	r3, r3
 9393 0370 9B00     		lsls	r3, r3, #2
 9394 0372 7B9A     		ldr	r2, [sp, #492]
 9395 0374 D118     		adds	r1, r2, r3
 9396 0376 F623     		movs	r3, #246
 9397 0378 FF33     		adds	r3, r3, #255
 9398 037a 6B44     		add	r3, r3, sp
 9399 037c 0022     		movs	r2, #0
 9400 037e 9A56     		ldrsb	r2, [r3, r2]
 9401 0380 42AB     		add	r3, sp, #264
 9402 0382 1800     		movs	r0, r3
 9403 0384 FFF7FEFF 		bl	uECC_vli_set
1540:uECC.c        ****     uECC_vli_clear(z, num_words);
 9404              		.loc 2 1540 0
 9405 0388 F623     		movs	r3, #246
 9406 038a FF33     		adds	r3, r3, #255
 9407 038c 6B44     		add	r3, r3, sp
 9408 038e 0022     		movs	r2, #0
 9409 0390 9A56     		ldrsb	r2, [r3, r2]
 9410 0392 62AB     		add	r3, sp, #392
 9411 0394 1100     		movs	r1, r2
 9412 0396 1800     		movs	r0, r3
 9413 0398 FFF7FEFF 		bl	uECC_vli_clear
1541:uECC.c        ****     z[0] = 1;
 9414              		.loc 2 1541 0
 9415 039c 62AB     		add	r3, sp, #392
 9416 039e 0122     		movs	r2, #1
 9417 03a0 1A60     		str	r2, [r3]
1542:uECC.c        **** 
1543:uECC.c        ****     for (i = num_bits - 2; i >= 0; --i) {
 9418              		.loc 2 1543 0
 9419 03a2 F923     		movs	r3, #249
 9420 03a4 5B00     		lsls	r3, r3, #1
 9421 03a6 6B44     		add	r3, r3, sp
 9422 03a8 1B88     		ldrh	r3, [r3]
 9423 03aa 023B     		subs	r3, r3, #2
 9424 03ac 9AB2     		uxth	r2, r3
 9425 03ae FB23     		movs	r3, #251
 9426 03b0 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 228


 9427 03b2 6B44     		add	r3, r3, sp
 9428 03b4 1A80     		strh	r2, [r3]
 9429 03b6 80E0     		b	.L348
 9430              	.L356:
 9431              		.align	2
 9432              	.L355:
 9433 03b8 40FEFFFF 		.word	-448
 9434 03bc 20FEFFFF 		.word	-480
 9435 03c0 A0FEFFFF 		.word	-352
 9436              	.L352:
 9437              	.LBB15:
1544:uECC.c        ****         uECC_word_t index;
1545:uECC.c        ****         curve->double_jacobian(rx, ry, z, curve);
 9438              		.loc 2 1545 0
 9439 03c4 829B     		ldr	r3, [sp, #520]
 9440 03c6 A422     		movs	r2, #164
 9441 03c8 9C58     		ldr	r4, [r3, r2]
 9442 03ca 829B     		ldr	r3, [sp, #520]
 9443 03cc 62AA     		add	r2, sp, #392
 9444 03ce 42A9     		add	r1, sp, #264
 9445 03d0 4AA8     		add	r0, sp, #296
 9446 03d2 A047     		blx	r4
1546:uECC.c        **** 
1547:uECC.c        ****         index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
 9447              		.loc 2 1547 0
 9448 03d4 FB23     		movs	r3, #251
 9449 03d6 5B00     		lsls	r3, r3, #1
 9450 03d8 6B44     		add	r3, r3, sp
 9451 03da 0022     		movs	r2, #0
 9452 03dc 9A5E     		ldrsh	r2, [r3, r2]
 9453 03de 72AB     		add	r3, sp, #456
 9454 03e0 1100     		movs	r1, r2
 9455 03e2 1800     		movs	r0, r3
 9456 03e4 FFF7FEFF 		bl	uECC_vli_testBit
 9457 03e8 0300     		movs	r3, r0
 9458 03ea 5A1E     		subs	r2, r3, #1
 9459 03ec 9341     		sbcs	r3, r3, r2
 9460 03ee DBB2     		uxtb	r3, r3
 9461 03f0 1C00     		movs	r4, r3
 9462 03f2 FB23     		movs	r3, #251
 9463 03f4 5B00     		lsls	r3, r3, #1
 9464 03f6 6B44     		add	r3, r3, sp
 9465 03f8 0022     		movs	r2, #0
 9466 03fa 9A5E     		ldrsh	r2, [r3, r2]
 9467 03fc 6AAB     		add	r3, sp, #424
 9468 03fe 1100     		movs	r1, r2
 9469 0400 1800     		movs	r0, r3
 9470 0402 FFF7FEFF 		bl	uECC_vli_testBit
 9471 0406 031E     		subs	r3, r0, #0
 9472 0408 01D0     		beq	.L349
 9473              		.loc 2 1547 0 is_stmt 0 discriminator 1
 9474 040a 0223     		movs	r3, #2
 9475 040c 00E0     		b	.L350
 9476              	.L349:
 9477              		.loc 2 1547 0 discriminator 2
 9478 040e 0023     		movs	r3, #0
 9479              	.L350:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 229


 9480              		.loc 2 1547 0 discriminator 4
 9481 0410 2343     		orrs	r3, r4
 9482 0412 7A93     		str	r3, [sp, #488]
1548:uECC.c        ****         point = points[index];
 9483              		.loc 2 1548 0 is_stmt 1 discriminator 4
 9484 0414 484B     		ldr	r3, .L357
 9485 0416 7EAA     		add	r2, sp, #504
 9486 0418 9446     		mov	ip, r2
 9487 041a 6344     		add	r3, r3, ip
 9488 041c 7A9A     		ldr	r2, [sp, #488]
 9489 041e 9200     		lsls	r2, r2, #2
 9490 0420 D358     		ldr	r3, [r2, r3]
 9491 0422 7B93     		str	r3, [sp, #492]
1549:uECC.c        ****         if (point) {
 9492              		.loc 2 1549 0 discriminator 4
 9493 0424 7B9B     		ldr	r3, [sp, #492]
 9494 0426 002B     		cmp	r3, #0
 9495 0428 3DD0     		beq	.L351
1550:uECC.c        ****             uECC_vli_set(tx, point, num_words);
 9496              		.loc 2 1550 0
 9497 042a F623     		movs	r3, #246
 9498 042c FF33     		adds	r3, r3, #255
 9499 042e 6B44     		add	r3, r3, sp
 9500 0430 0022     		movs	r2, #0
 9501 0432 9A56     		ldrsb	r2, [r3, r2]
 9502 0434 7B99     		ldr	r1, [sp, #492]
 9503 0436 3AAB     		add	r3, sp, #232
 9504 0438 1800     		movs	r0, r3
 9505 043a FFF7FEFF 		bl	uECC_vli_set
1551:uECC.c        ****             uECC_vli_set(ty, point + num_words, num_words);
 9506              		.loc 2 1551 0
 9507 043e F623     		movs	r3, #246
 9508 0440 FF33     		adds	r3, r3, #255
 9509 0442 6B44     		add	r3, r3, sp
 9510 0444 1B78     		ldrb	r3, [r3]
 9511 0446 5BB2     		sxtb	r3, r3
 9512 0448 9B00     		lsls	r3, r3, #2
 9513 044a 7B9A     		ldr	r2, [sp, #492]
 9514 044c D118     		adds	r1, r2, r3
 9515 044e F623     		movs	r3, #246
 9516 0450 FF33     		adds	r3, r3, #255
 9517 0452 6B44     		add	r3, r3, sp
 9518 0454 0022     		movs	r2, #0
 9519 0456 9A56     		ldrsb	r2, [r3, r2]
 9520 0458 32AB     		add	r3, sp, #200
 9521 045a 1800     		movs	r0, r3
 9522 045c FFF7FEFF 		bl	uECC_vli_set
1552:uECC.c        ****             apply_z(tx, ty, z, curve);
 9523              		.loc 2 1552 0
 9524 0460 829B     		ldr	r3, [sp, #520]
 9525 0462 62AA     		add	r2, sp, #392
 9526 0464 32A9     		add	r1, sp, #200
 9527 0466 3AA8     		add	r0, sp, #232
 9528 0468 FFF7FEFF 		bl	apply_z
1553:uECC.c        ****             uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 9529              		.loc 2 1553 0
 9530 046c 829B     		ldr	r3, [sp, #520]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 230


 9531 046e 1C1D     		adds	r4, r3, #4
 9532 0470 3AAA     		add	r2, sp, #232
 9533 0472 4AA9     		add	r1, sp, #296
 9534 0474 2AA8     		add	r0, sp, #168
 9535 0476 F623     		movs	r3, #246
 9536 0478 FF33     		adds	r3, r3, #255
 9537 047a 6B44     		add	r3, r3, sp
 9538 047c 1B78     		ldrb	r3, [r3]
 9539 047e 5BB2     		sxtb	r3, r3
 9540 0480 0093     		str	r3, [sp]
 9541 0482 2300     		movs	r3, r4
 9542 0484 FFF7FEFF 		bl	uECC_vli_modSub
1554:uECC.c        ****             XYcZ_add(tx, ty, rx, ry, curve);
 9543              		.loc 2 1554 0
 9544 0488 42AC     		add	r4, sp, #264
 9545 048a 4AAA     		add	r2, sp, #296
 9546 048c 32A9     		add	r1, sp, #200
 9547 048e 3AA8     		add	r0, sp, #232
 9548 0490 829B     		ldr	r3, [sp, #520]
 9549 0492 0093     		str	r3, [sp]
 9550 0494 2300     		movs	r3, r4
 9551 0496 FFF7FEFF 		bl	XYcZ_add
1555:uECC.c        ****             uECC_vli_modMult_fast(z, z, tz, curve);
 9552              		.loc 2 1555 0
 9553 049a 829B     		ldr	r3, [sp, #520]
 9554 049c 2AAA     		add	r2, sp, #168
 9555 049e 62A9     		add	r1, sp, #392
 9556 04a0 62A8     		add	r0, sp, #392
 9557 04a2 FFF7FEFF 		bl	uECC_vli_modMult_fast
 9558              	.L351:
 9559              	.LBE15:
1543:uECC.c        ****         uECC_word_t index;
 9560              		.loc 2 1543 0 discriminator 2
 9561 04a6 FB23     		movs	r3, #251
 9562 04a8 5B00     		lsls	r3, r3, #1
 9563 04aa 6B44     		add	r3, r3, sp
 9564 04ac 1B88     		ldrh	r3, [r3]
 9565 04ae 013B     		subs	r3, r3, #1
 9566 04b0 9AB2     		uxth	r2, r3
 9567 04b2 FB23     		movs	r3, #251
 9568 04b4 5B00     		lsls	r3, r3, #1
 9569 04b6 6B44     		add	r3, r3, sp
 9570 04b8 1A80     		strh	r2, [r3]
 9571              	.L348:
1543:uECC.c        ****         uECC_word_t index;
 9572              		.loc 2 1543 0 is_stmt 0 discriminator 1
 9573 04ba FB23     		movs	r3, #251
 9574 04bc 5B00     		lsls	r3, r3, #1
 9575 04be 6B44     		add	r3, r3, sp
 9576 04c0 0022     		movs	r2, #0
 9577 04c2 9B5E     		ldrsh	r3, [r3, r2]
 9578 04c4 002B     		cmp	r3, #0
 9579 04c6 00DB     		blt	.LCB8118
 9580 04c8 7CE7     		b	.L352	@long jump
 9581              	.LCB8118:
1556:uECC.c        ****         }
1557:uECC.c        ****     }
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 231


1558:uECC.c        **** 
1559:uECC.c        ****     uECC_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 9582              		.loc 2 1559 0 is_stmt 1
 9583 04ca 829B     		ldr	r3, [sp, #520]
 9584 04cc 1A1D     		adds	r2, r3, #4
 9585 04ce F623     		movs	r3, #246
 9586 04d0 FF33     		adds	r3, r3, #255
 9587 04d2 6B44     		add	r3, r3, sp
 9588 04d4 1B78     		ldrb	r3, [r3]
 9589 04d6 5BB2     		sxtb	r3, r3
 9590 04d8 62A9     		add	r1, sp, #392
 9591 04da 62A8     		add	r0, sp, #392
 9592 04dc FFF7FEFF 		bl	uECC_vli_modInv
1560:uECC.c        ****     apply_z(rx, ry, z, curve);
 9593              		.loc 2 1560 0
 9594 04e0 829B     		ldr	r3, [sp, #520]
 9595 04e2 62AA     		add	r2, sp, #392
 9596 04e4 42A9     		add	r1, sp, #264
 9597 04e6 4AA8     		add	r0, sp, #296
 9598 04e8 FFF7FEFF 		bl	apply_z
1561:uECC.c        **** 
1562:uECC.c        ****     /* v = x1 (mod n) */
1563:uECC.c        ****     if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 9599              		.loc 2 1563 0
 9600 04ec 829B     		ldr	r3, [sp, #520]
 9601 04ee 2433     		adds	r3, r3, #36
 9602 04f0 1800     		movs	r0, r3
 9603 04f2 7DAB     		add	r3, sp, #500
 9604 04f4 0022     		movs	r2, #0
 9605 04f6 9A56     		ldrsb	r2, [r3, r2]
 9606 04f8 4AAB     		add	r3, sp, #296
 9607 04fa 1900     		movs	r1, r3
 9608 04fc FFF7FEFF 		bl	uECC_vli_cmp_unsafe
 9609 0500 0300     		movs	r3, r0
 9610 0502 012B     		cmp	r3, #1
 9611 0504 09D0     		beq	.L353
1564:uECC.c        ****         uECC_vli_sub(rx, rx, curve->n, num_n_words);
 9612              		.loc 2 1564 0
 9613 0506 829B     		ldr	r3, [sp, #520]
 9614 0508 2433     		adds	r3, r3, #36
 9615 050a 1A00     		movs	r2, r3
 9616 050c 7DAB     		add	r3, sp, #500
 9617 050e 1B78     		ldrb	r3, [r3]
 9618 0510 5BB2     		sxtb	r3, r3
 9619 0512 4AA9     		add	r1, sp, #296
 9620 0514 4AA8     		add	r0, sp, #296
 9621 0516 FFF7FEFF 		bl	uECC_vli_sub
 9622              	.L353:
1565:uECC.c        ****     }
1566:uECC.c        **** 
1567:uECC.c        ****     /* Accept only if v == r. */
1568:uECC.c        ****     return (int)(uECC_vli_equal(rx, r, num_words));
 9623              		.loc 2 1568 0
 9624 051a F623     		movs	r3, #246
 9625 051c FF33     		adds	r3, r3, #255
 9626 051e 6B44     		add	r3, r3, sp
 9627 0520 0022     		movs	r2, #0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 232


 9628 0522 9A56     		ldrsb	r2, [r3, r2]
 9629 0524 0EA9     		add	r1, sp, #56
 9630 0526 4AAB     		add	r3, sp, #296
 9631 0528 1800     		movs	r0, r3
 9632 052a FFF7FEFF 		bl	uECC_vli_equal
 9633 052e 0300     		movs	r3, r0
 9634              	.L354:
1569:uECC.c        **** }
 9635              		.loc 2 1569 0 discriminator 1
 9636 0530 1800     		movs	r0, r3
 9637 0532 7FB0     		add	sp, sp, #508
 9638              		@ sp needed
 9639 0534 30BD     		pop	{r4, r5, pc}
 9640              	.L358:
 9641 0536 C046     		.align	2
 9642              	.L357:
 9643 0538 A0FEFFFF 		.word	-352
 9644              		.cfi_endproc
 9645              	.LFE73:
 9646              		.size	uECC_verify, .-uECC_verify
 9647              		.text
 9648              	.Letext0:
 9649              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 9650              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 9651              		.file 6 "uECC.h"
 9652              		.file 7 "types.h"
 9653              		.section	.debug_info,"",%progbits
 9654              	.Ldebug_info0:
 9655 0000 4B240000 		.4byte	0x244b
 9656 0004 0400     		.2byte	0x4
 9657 0006 00000000 		.4byte	.Ldebug_abbrev0
 9658 000a 04       		.byte	0x4
 9659 000b 01       		.uleb128 0x1
 9660 000c D1050000 		.4byte	.LASF179
 9661 0010 0C       		.byte	0xc
 9662 0011 94060000 		.4byte	.LASF180
 9663 0015 A7090000 		.4byte	.LASF181
 9664 0019 00000000 		.4byte	.Ldebug_ranges0+0
 9665 001d 00000000 		.4byte	0
 9666 0021 00000000 		.4byte	.Ldebug_line0
 9667 0025 02       		.uleb128 0x2
 9668 0026 3A010000 		.4byte	.LASF0
 9669 002a 04       		.byte	0x4
 9670 002b 1B       		.byte	0x1b
 9671 002c 30000000 		.4byte	0x30
 9672 0030 03       		.uleb128 0x3
 9673 0031 01       		.byte	0x1
 9674 0032 06       		.byte	0x6
 9675 0033 78010000 		.4byte	.LASF2
 9676 0037 02       		.uleb128 0x2
 9677 0038 82000000 		.4byte	.LASF1
 9678 003c 04       		.byte	0x4
 9679 003d 1D       		.byte	0x1d
 9680 003e 42000000 		.4byte	0x42
 9681 0042 03       		.uleb128 0x3
 9682 0043 01       		.byte	0x1
 9683 0044 08       		.byte	0x8
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 233


 9684 0045 80060000 		.4byte	.LASF3
 9685 0049 02       		.uleb128 0x2
 9686 004a C6020000 		.4byte	.LASF4
 9687 004e 04       		.byte	0x4
 9688 004f 29       		.byte	0x29
 9689 0050 54000000 		.4byte	0x54
 9690 0054 03       		.uleb128 0x3
 9691 0055 02       		.byte	0x2
 9692 0056 05       		.byte	0x5
 9693 0057 D5060000 		.4byte	.LASF5
 9694 005b 03       		.uleb128 0x3
 9695 005c 02       		.byte	0x2
 9696 005d 07       		.byte	0x7
 9697 005e C3030000 		.4byte	.LASF6
 9698 0062 03       		.uleb128 0x3
 9699 0063 04       		.byte	0x4
 9700 0064 05       		.byte	0x5
 9701 0065 D8010000 		.4byte	.LASF7
 9702 0069 02       		.uleb128 0x2
 9703 006a 8C020000 		.4byte	.LASF8
 9704 006e 04       		.byte	0x4
 9705 006f 41       		.byte	0x41
 9706 0070 74000000 		.4byte	0x74
 9707 0074 03       		.uleb128 0x3
 9708 0075 04       		.byte	0x4
 9709 0076 07       		.byte	0x7
 9710 0077 57030000 		.4byte	.LASF9
 9711 007b 03       		.uleb128 0x3
 9712 007c 08       		.byte	0x8
 9713 007d 05       		.byte	0x5
 9714 007e 6A010000 		.4byte	.LASF10
 9715 0082 02       		.uleb128 0x2
 9716 0083 64050000 		.4byte	.LASF11
 9717 0087 04       		.byte	0x4
 9718 0088 5B       		.byte	0x5b
 9719 0089 8D000000 		.4byte	0x8d
 9720 008d 03       		.uleb128 0x3
 9721 008e 08       		.byte	0x8
 9722 008f 07       		.byte	0x7
 9723 0090 EC000000 		.4byte	.LASF12
 9724 0094 04       		.uleb128 0x4
 9725 0095 04       		.byte	0x4
 9726 0096 05       		.byte	0x5
 9727 0097 696E7400 		.ascii	"int\000"
 9728 009b 03       		.uleb128 0x3
 9729 009c 04       		.byte	0x4
 9730 009d 07       		.byte	0x7
 9731 009e 10030000 		.4byte	.LASF13
 9732 00a2 02       		.uleb128 0x2
 9733 00a3 59080000 		.4byte	.LASF14
 9734 00a7 05       		.byte	0x5
 9735 00a8 14       		.byte	0x14
 9736 00a9 25000000 		.4byte	0x25
 9737 00ad 02       		.uleb128 0x2
 9738 00ae D3080000 		.4byte	.LASF15
 9739 00b2 05       		.byte	0x5
 9740 00b3 18       		.byte	0x18
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 234


 9741 00b4 37000000 		.4byte	0x37
 9742 00b8 02       		.uleb128 0x2
 9743 00b9 62010000 		.4byte	.LASF16
 9744 00bd 05       		.byte	0x5
 9745 00be 20       		.byte	0x20
 9746 00bf 49000000 		.4byte	0x49
 9747 00c3 02       		.uleb128 0x2
 9748 00c4 41070000 		.4byte	.LASF17
 9749 00c8 05       		.byte	0x5
 9750 00c9 30       		.byte	0x30
 9751 00ca 69000000 		.4byte	0x69
 9752 00ce 02       		.uleb128 0x2
 9753 00cf 63000000 		.4byte	.LASF18
 9754 00d3 05       		.byte	0x5
 9755 00d4 3C       		.byte	0x3c
 9756 00d5 82000000 		.4byte	0x82
 9757 00d9 02       		.uleb128 0x2
 9758 00da 77000000 		.4byte	.LASF19
 9759 00de 06       		.byte	0x6
 9760 00df 4F       		.byte	0x4f
 9761 00e0 E4000000 		.4byte	0xe4
 9762 00e4 05       		.uleb128 0x5
 9763 00e5 04       		.byte	0x4
 9764 00e6 73010000 		.4byte	0x173
 9765 00ea 06       		.uleb128 0x6
 9766 00eb DA020000 		.4byte	.LASF28
 9767 00ef B4       		.byte	0xb4
 9768 00f0 02       		.byte	0x2
 9769 00f1 8D       		.byte	0x8d
 9770 00f2 73010000 		.4byte	0x173
 9771 00f6 07       		.uleb128 0x7
 9772 00f7 B9030000 		.4byte	.LASF20
 9773 00fb 02       		.byte	0x2
 9774 00fc 8E       		.byte	0x8e
 9775 00fd 63020000 		.4byte	0x263
 9776 0101 00       		.byte	0
 9777 0102 07       		.uleb128 0x7
 9778 0103 6D080000 		.4byte	.LASF21
 9779 0107 02       		.byte	0x2
 9780 0108 8F       		.byte	0x8f
 9781 0109 63020000 		.4byte	0x263
 9782 010d 01       		.byte	0x1
 9783 010e 07       		.uleb128 0x7
 9784 010f 4A040000 		.4byte	.LASF22
 9785 0113 02       		.byte	0x2
 9786 0114 90       		.byte	0x90
 9787 0115 6E020000 		.4byte	0x26e
 9788 0119 02       		.byte	0x2
 9789 011a 08       		.uleb128 0x8
 9790 011b 7000     		.ascii	"p\000"
 9791 011d 02       		.byte	0x2
 9792 011e 91       		.byte	0x91
 9793 011f 8F020000 		.4byte	0x28f
 9794 0123 04       		.byte	0x4
 9795 0124 08       		.uleb128 0x8
 9796 0125 6E00     		.ascii	"n\000"
 9797 0127 02       		.byte	0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 235


 9798 0128 92       		.byte	0x92
 9799 0129 8F020000 		.4byte	0x28f
 9800 012d 24       		.byte	0x24
 9801 012e 08       		.uleb128 0x8
 9802 012f 4700     		.ascii	"G\000"
 9803 0131 02       		.byte	0x2
 9804 0132 93       		.byte	0x93
 9805 0133 A6020000 		.4byte	0x2a6
 9806 0137 44       		.byte	0x44
 9807 0138 08       		.uleb128 0x8
 9808 0139 6200     		.ascii	"b\000"
 9809 013b 02       		.byte	0x2
 9810 013c 94       		.byte	0x94
 9811 013d 8F020000 		.4byte	0x28f
 9812 0141 84       		.byte	0x84
 9813 0142 07       		.uleb128 0x7
 9814 0143 7E080000 		.4byte	.LASF23
 9815 0147 02       		.byte	0x2
 9816 0148 95       		.byte	0x95
 9817 0149 D6020000 		.4byte	0x2d6
 9818 014d A4       		.byte	0xa4
 9819 014e 07       		.uleb128 0x7
 9820 014f 00070000 		.4byte	.LASF24
 9821 0153 02       		.byte	0x2
 9822 0154 9A       		.byte	0x9a
 9823 0155 EC020000 		.4byte	0x2ec
 9824 0159 A8       		.byte	0xa8
 9825 015a 07       		.uleb128 0x7
 9826 015b CA050000 		.4byte	.LASF25
 9827 015f 02       		.byte	0x2
 9828 0160 9C       		.byte	0x9c
 9829 0161 12030000 		.4byte	0x312
 9830 0165 AC       		.byte	0xac
 9831 0166 07       		.uleb128 0x7
 9832 0167 20050000 		.4byte	.LASF26
 9833 016b 02       		.byte	0x2
 9834 016c 9E       		.byte	0x9e
 9835 016d 28030000 		.4byte	0x328
 9836 0171 B0       		.byte	0xb0
 9837 0172 00       		.byte	0
 9838 0173 09       		.uleb128 0x9
 9839 0174 EA000000 		.4byte	0xea
 9840 0178 02       		.uleb128 0x2
 9841 0179 1D030000 		.4byte	.LASF27
 9842 017d 06       		.byte	0x6
 9843 017e 76       		.byte	0x76
 9844 017f 83010000 		.4byte	0x183
 9845 0183 05       		.uleb128 0x5
 9846 0184 04       		.byte	0x4
 9847 0185 89010000 		.4byte	0x189
 9848 0189 0A       		.uleb128 0xa
 9849 018a 94000000 		.4byte	0x94
 9850 018e 9D010000 		.4byte	0x19d
 9851 0192 0B       		.uleb128 0xb
 9852 0193 9D010000 		.4byte	0x19d
 9853 0197 0B       		.uleb128 0xb
 9854 0198 9B000000 		.4byte	0x9b
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 236


 9855 019c 00       		.byte	0
 9856 019d 05       		.uleb128 0x5
 9857 019e 04       		.byte	0x4
 9858 019f AD000000 		.4byte	0xad
 9859 01a3 0C       		.uleb128 0xc
 9860 01a4 80070000 		.4byte	.LASF29
 9861 01a8 18       		.byte	0x18
 9862 01a9 06       		.byte	0x6
 9863 01aa 2E01     		.2byte	0x12e
 9864 01ac FF010000 		.4byte	0x1ff
 9865 01b0 0D       		.uleb128 0xd
 9866 01b1 CF070000 		.4byte	.LASF30
 9867 01b5 06       		.byte	0x6
 9868 01b6 2F01     		.2byte	0x12f
 9869 01b8 15020000 		.4byte	0x215
 9870 01bc 00       		.byte	0
 9871 01bd 0D       		.uleb128 0xd
 9872 01be BB000000 		.4byte	.LASF31
 9873 01c2 06       		.byte	0x6
 9874 01c3 3001     		.2byte	0x130
 9875 01c5 3B020000 		.4byte	0x23b
 9876 01c9 04       		.byte	0x4
 9877 01ca 0D       		.uleb128 0xd
 9878 01cb 74060000 		.4byte	.LASF32
 9879 01cf 06       		.byte	0x6
 9880 01d0 3301     		.2byte	0x133
 9881 01d2 51020000 		.4byte	0x251
 9882 01d6 08       		.byte	0x8
 9883 01d7 0D       		.uleb128 0xd
 9884 01d8 85040000 		.4byte	.LASF33
 9885 01dc 06       		.byte	0x6
 9886 01dd 3401     		.2byte	0x134
 9887 01df 9B000000 		.4byte	0x9b
 9888 01e3 0C       		.byte	0xc
 9889 01e4 0D       		.uleb128 0xd
 9890 01e5 5C090000 		.4byte	.LASF34
 9891 01e9 06       		.byte	0x6
 9892 01ea 3501     		.2byte	0x135
 9893 01ec 9B000000 		.4byte	0x9b
 9894 01f0 10       		.byte	0x10
 9895 01f1 0E       		.uleb128 0xe
 9896 01f2 746D7000 		.ascii	"tmp\000"
 9897 01f6 06       		.byte	0x6
 9898 01f7 3601     		.2byte	0x136
 9899 01f9 9D010000 		.4byte	0x19d
 9900 01fd 14       		.byte	0x14
 9901 01fe 00       		.byte	0
 9902 01ff 0F       		.uleb128 0xf
 9903 0200 0A020000 		.4byte	0x20a
 9904 0204 0B       		.uleb128 0xb
 9905 0205 0A020000 		.4byte	0x20a
 9906 0209 00       		.byte	0
 9907 020a 05       		.uleb128 0x5
 9908 020b 04       		.byte	0x4
 9909 020c 10020000 		.4byte	0x210
 9910 0210 09       		.uleb128 0x9
 9911 0211 A3010000 		.4byte	0x1a3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 237


 9912 0215 05       		.uleb128 0x5
 9913 0216 04       		.byte	0x4
 9914 0217 FF010000 		.4byte	0x1ff
 9915 021b 0F       		.uleb128 0xf
 9916 021c 30020000 		.4byte	0x230
 9917 0220 0B       		.uleb128 0xb
 9918 0221 0A020000 		.4byte	0x20a
 9919 0225 0B       		.uleb128 0xb
 9920 0226 30020000 		.4byte	0x230
 9921 022a 0B       		.uleb128 0xb
 9922 022b 9B000000 		.4byte	0x9b
 9923 022f 00       		.byte	0
 9924 0230 05       		.uleb128 0x5
 9925 0231 04       		.byte	0x4
 9926 0232 36020000 		.4byte	0x236
 9927 0236 09       		.uleb128 0x9
 9928 0237 AD000000 		.4byte	0xad
 9929 023b 05       		.uleb128 0x5
 9930 023c 04       		.byte	0x4
 9931 023d 1B020000 		.4byte	0x21b
 9932 0241 0F       		.uleb128 0xf
 9933 0242 51020000 		.4byte	0x251
 9934 0246 0B       		.uleb128 0xb
 9935 0247 0A020000 		.4byte	0x20a
 9936 024b 0B       		.uleb128 0xb
 9937 024c 9D010000 		.4byte	0x19d
 9938 0250 00       		.byte	0
 9939 0251 05       		.uleb128 0x5
 9940 0252 04       		.byte	0x4
 9941 0253 41020000 		.4byte	0x241
 9942 0257 10       		.uleb128 0x10
 9943 0258 80070000 		.4byte	.LASF29
 9944 025c 06       		.byte	0x6
 9945 025d 3701     		.2byte	0x137
 9946 025f A3010000 		.4byte	0x1a3
 9947 0263 02       		.uleb128 0x2
 9948 0264 36090000 		.4byte	.LASF35
 9949 0268 07       		.byte	0x7
 9950 0269 46       		.byte	0x46
 9951 026a A2000000 		.4byte	0xa2
 9952 026e 02       		.uleb128 0x2
 9953 026f BF040000 		.4byte	.LASF36
 9954 0273 07       		.byte	0x7
 9955 0274 47       		.byte	0x47
 9956 0275 B8000000 		.4byte	0xb8
 9957 0279 02       		.uleb128 0x2
 9958 027a 80020000 		.4byte	.LASF37
 9959 027e 07       		.byte	0x7
 9960 027f 48       		.byte	0x48
 9961 0280 A2000000 		.4byte	0xa2
 9962 0284 02       		.uleb128 0x2
 9963 0285 58070000 		.4byte	.LASF38
 9964 0289 07       		.byte	0x7
 9965 028a 56       		.byte	0x56
 9966 028b C3000000 		.4byte	0xc3
 9967 028f 11       		.uleb128 0x11
 9968 0290 84020000 		.4byte	0x284
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 238


 9969 0294 9F020000 		.4byte	0x29f
 9970 0298 12       		.uleb128 0x12
 9971 0299 9F020000 		.4byte	0x29f
 9972 029d 07       		.byte	0x7
 9973 029e 00       		.byte	0
 9974 029f 03       		.uleb128 0x3
 9975 02a0 04       		.byte	0x4
 9976 02a1 07       		.byte	0x7
 9977 02a2 F6040000 		.4byte	.LASF39
 9978 02a6 11       		.uleb128 0x11
 9979 02a7 84020000 		.4byte	0x284
 9980 02ab B6020000 		.4byte	0x2b6
 9981 02af 12       		.uleb128 0x12
 9982 02b0 9F020000 		.4byte	0x29f
 9983 02b4 0F       		.byte	0xf
 9984 02b5 00       		.byte	0
 9985 02b6 0F       		.uleb128 0xf
 9986 02b7 D0020000 		.4byte	0x2d0
 9987 02bb 0B       		.uleb128 0xb
 9988 02bc D0020000 		.4byte	0x2d0
 9989 02c0 0B       		.uleb128 0xb
 9990 02c1 D0020000 		.4byte	0x2d0
 9991 02c5 0B       		.uleb128 0xb
 9992 02c6 D0020000 		.4byte	0x2d0
 9993 02ca 0B       		.uleb128 0xb
 9994 02cb D9000000 		.4byte	0xd9
 9995 02cf 00       		.byte	0
 9996 02d0 05       		.uleb128 0x5
 9997 02d1 04       		.byte	0x4
 9998 02d2 84020000 		.4byte	0x284
 9999 02d6 05       		.uleb128 0x5
 10000 02d7 04       		.byte	0x4
 10001 02d8 B6020000 		.4byte	0x2b6
 10002 02dc 0F       		.uleb128 0xf
 10003 02dd EC020000 		.4byte	0x2ec
 10004 02e1 0B       		.uleb128 0xb
 10005 02e2 D0020000 		.4byte	0x2d0
 10006 02e6 0B       		.uleb128 0xb
 10007 02e7 D9000000 		.4byte	0xd9
 10008 02eb 00       		.byte	0
 10009 02ec 05       		.uleb128 0x5
 10010 02ed 04       		.byte	0x4
 10011 02ee DC020000 		.4byte	0x2dc
 10012 02f2 0F       		.uleb128 0xf
 10013 02f3 07030000 		.4byte	0x307
 10014 02f7 0B       		.uleb128 0xb
 10015 02f8 D0020000 		.4byte	0x2d0
 10016 02fc 0B       		.uleb128 0xb
 10017 02fd 07030000 		.4byte	0x307
 10018 0301 0B       		.uleb128 0xb
 10019 0302 D9000000 		.4byte	0xd9
 10020 0306 00       		.byte	0
 10021 0307 05       		.uleb128 0x5
 10022 0308 04       		.byte	0x4
 10023 0309 0D030000 		.4byte	0x30d
 10024 030d 09       		.uleb128 0x9
 10025 030e 84020000 		.4byte	0x284
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 239


 10026 0312 05       		.uleb128 0x5
 10027 0313 04       		.byte	0x4
 10028 0314 F2020000 		.4byte	0x2f2
 10029 0318 0F       		.uleb128 0xf
 10030 0319 28030000 		.4byte	0x328
 10031 031d 0B       		.uleb128 0xb
 10032 031e D0020000 		.4byte	0x2d0
 10033 0322 0B       		.uleb128 0xb
 10034 0323 D0020000 		.4byte	0x2d0
 10035 0327 00       		.byte	0
 10036 0328 05       		.uleb128 0x5
 10037 0329 04       		.byte	0x4
 10038 032a 18030000 		.4byte	0x318
 10039 032e 13       		.uleb128 0x13
 10040 032f 3A0A0000 		.4byte	.LASF47
 10041 0333 01       		.byte	0x1
 10042 0334 2E       		.byte	0x2e
 10043 0335 84020000 		.4byte	0x284
 10044 0339 00000000 		.4byte	.LFB0
 10045 033d 8C000000 		.4byte	.LFE0-.LFB0
 10046 0341 01       		.uleb128 0x1
 10047 0342 9C       		.byte	0x9c
 10048 0343 B8030000 		.4byte	0x3b8
 10049 0347 14       		.uleb128 0x14
 10050 0348 330A0000 		.4byte	.LASF40
 10051 034c 01       		.byte	0x1
 10052 034d 2E       		.byte	0x2e
 10053 034e D0020000 		.4byte	0x2d0
 10054 0352 02       		.uleb128 0x2
 10055 0353 91       		.byte	0x91
 10056 0354 5C       		.sleb128 -36
 10057 0355 14       		.uleb128 0x14
 10058 0356 A2090000 		.4byte	.LASF41
 10059 035a 01       		.byte	0x1
 10060 035b 2F       		.byte	0x2f
 10061 035c 07030000 		.4byte	0x307
 10062 0360 02       		.uleb128 0x2
 10063 0361 91       		.byte	0x91
 10064 0362 58       		.sleb128 -40
 10065 0363 14       		.uleb128 0x14
 10066 0364 5C010000 		.4byte	.LASF42
 10067 0368 01       		.byte	0x1
 10068 0369 30       		.byte	0x30
 10069 036a 07030000 		.4byte	0x307
 10070 036e 02       		.uleb128 0x2
 10071 036f 91       		.byte	0x91
 10072 0370 54       		.sleb128 -44
 10073 0371 14       		.uleb128 0x14
 10074 0372 B9030000 		.4byte	.LASF20
 10075 0376 01       		.byte	0x1
 10076 0377 31       		.byte	0x31
 10077 0378 63020000 		.4byte	0x263
 10078 037c 02       		.uleb128 0x2
 10079 037d 91       		.byte	0x91
 10080 037e 53       		.sleb128 -45
 10081 037f 15       		.uleb128 0x15
 10082 0380 EE010000 		.4byte	.LASF43
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 240


 10083 0384 01       		.byte	0x1
 10084 0385 34       		.byte	0x34
 10085 0386 C3000000 		.4byte	0xc3
 10086 038a 02       		.uleb128 0x2
 10087 038b 91       		.byte	0x91
 10088 038c 6C       		.sleb128 -20
 10089 038d 15       		.uleb128 0x15
 10090 038e A5050000 		.4byte	.LASF44
 10091 0392 01       		.byte	0x1
 10092 0393 39       		.byte	0x39
 10093 0394 C3000000 		.4byte	0xc3
 10094 0398 02       		.uleb128 0x2
 10095 0399 91       		.byte	0x91
 10096 039a 68       		.sleb128 -24
 10097 039b 15       		.uleb128 0x15
 10098 039c 5A050000 		.4byte	.LASF45
 10099 03a0 01       		.byte	0x1
 10100 03a1 3A       		.byte	0x3a
 10101 03a2 C3000000 		.4byte	0xc3
 10102 03a6 02       		.uleb128 0x2
 10103 03a7 91       		.byte	0x91
 10104 03a8 64       		.sleb128 -28
 10105 03a9 15       		.uleb128 0x15
 10106 03aa 64070000 		.4byte	.LASF46
 10107 03ae 01       		.byte	0x1
 10108 03af 3B       		.byte	0x3b
 10109 03b0 C3000000 		.4byte	0xc3
 10110 03b4 02       		.uleb128 0x2
 10111 03b5 91       		.byte	0x91
 10112 03b6 60       		.sleb128 -32
 10113 03b7 00       		.byte	0
 10114 03b8 13       		.uleb128 0x13
 10115 03b9 79090000 		.4byte	.LASF48
 10116 03bd 01       		.byte	0x1
 10117 03be 64       		.byte	0x64
 10118 03bf 84020000 		.4byte	0x284
 10119 03c3 00000000 		.4byte	.LFB1
 10120 03c7 92000000 		.4byte	.LFE1-.LFB1
 10121 03cb 01       		.uleb128 0x1
 10122 03cc 9C       		.byte	0x9c
 10123 03cd 42040000 		.4byte	0x442
 10124 03d1 14       		.uleb128 0x14
 10125 03d2 330A0000 		.4byte	.LASF40
 10126 03d6 01       		.byte	0x1
 10127 03d7 64       		.byte	0x64
 10128 03d8 D0020000 		.4byte	0x2d0
 10129 03dc 02       		.uleb128 0x2
 10130 03dd 91       		.byte	0x91
 10131 03de 5C       		.sleb128 -36
 10132 03df 14       		.uleb128 0x14
 10133 03e0 A2090000 		.4byte	.LASF41
 10134 03e4 01       		.byte	0x1
 10135 03e5 65       		.byte	0x65
 10136 03e6 07030000 		.4byte	0x307
 10137 03ea 02       		.uleb128 0x2
 10138 03eb 91       		.byte	0x91
 10139 03ec 58       		.sleb128 -40
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 241


 10140 03ed 14       		.uleb128 0x14
 10141 03ee 5C010000 		.4byte	.LASF42
 10142 03f2 01       		.byte	0x1
 10143 03f3 66       		.byte	0x66
 10144 03f4 07030000 		.4byte	0x307
 10145 03f8 02       		.uleb128 0x2
 10146 03f9 91       		.byte	0x91
 10147 03fa 54       		.sleb128 -44
 10148 03fb 14       		.uleb128 0x14
 10149 03fc B9030000 		.4byte	.LASF20
 10150 0400 01       		.byte	0x1
 10151 0401 67       		.byte	0x67
 10152 0402 63020000 		.4byte	0x263
 10153 0406 02       		.uleb128 0x2
 10154 0407 91       		.byte	0x91
 10155 0408 53       		.sleb128 -45
 10156 0409 15       		.uleb128 0x15
 10157 040a EE010000 		.4byte	.LASF43
 10158 040e 01       		.byte	0x1
 10159 040f 6A       		.byte	0x6a
 10160 0410 C3000000 		.4byte	0xc3
 10161 0414 02       		.uleb128 0x2
 10162 0415 91       		.byte	0x91
 10163 0416 6C       		.sleb128 -20
 10164 0417 15       		.uleb128 0x15
 10165 0418 A5050000 		.4byte	.LASF44
 10166 041c 01       		.byte	0x1
 10167 041d 6F       		.byte	0x6f
 10168 041e C3000000 		.4byte	0xc3
 10169 0422 02       		.uleb128 0x2
 10170 0423 91       		.byte	0x91
 10171 0424 68       		.sleb128 -24
 10172 0425 15       		.uleb128 0x15
 10173 0426 5A050000 		.4byte	.LASF45
 10174 042a 01       		.byte	0x1
 10175 042b 70       		.byte	0x70
 10176 042c C3000000 		.4byte	0xc3
 10177 0430 02       		.uleb128 0x2
 10178 0431 91       		.byte	0x91
 10179 0432 64       		.sleb128 -28
 10180 0433 15       		.uleb128 0x15
 10181 0434 64070000 		.4byte	.LASF46
 10182 0438 01       		.byte	0x1
 10183 0439 71       		.byte	0x71
 10184 043a C3000000 		.4byte	0xc3
 10185 043e 02       		.uleb128 0x2
 10186 043f 91       		.byte	0x91
 10187 0440 60       		.sleb128 -32
 10188 0441 00       		.byte	0
 10189 0442 16       		.uleb128 0x16
 10190 0443 F3010000 		.4byte	.LASF53
 10191 0447 01       		.byte	0x1
 10192 0448 D301     		.2byte	0x1d3
 10193 044a 00000000 		.4byte	.LFB2
 10194 044e C6000000 		.4byte	.LFE2-.LFB2
 10195 0452 01       		.uleb128 0x1
 10196 0453 9C       		.byte	0x9c
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 242


 10197 0454 CF040000 		.4byte	0x4cf
 10198 0458 17       		.uleb128 0x17
 10199 0459 330A0000 		.4byte	.LASF40
 10200 045d 01       		.byte	0x1
 10201 045e D301     		.2byte	0x1d3
 10202 0460 D0020000 		.4byte	0x2d0
 10203 0464 02       		.uleb128 0x2
 10204 0465 91       		.byte	0x91
 10205 0466 44       		.sleb128 -60
 10206 0467 17       		.uleb128 0x17
 10207 0468 A2090000 		.4byte	.LASF41
 10208 046c 01       		.byte	0x1
 10209 046d D401     		.2byte	0x1d4
 10210 046f 07030000 		.4byte	0x307
 10211 0473 02       		.uleb128 0x2
 10212 0474 91       		.byte	0x91
 10213 0475 40       		.sleb128 -64
 10214 0476 17       		.uleb128 0x17
 10215 0477 5C010000 		.4byte	.LASF42
 10216 047b 01       		.byte	0x1
 10217 047c D501     		.2byte	0x1d5
 10218 047e 07030000 		.4byte	0x307
 10219 0482 03       		.uleb128 0x3
 10220 0483 91       		.byte	0x91
 10221 0484 BC7F     		.sleb128 -68
 10222 0486 17       		.uleb128 0x17
 10223 0487 B9030000 		.4byte	.LASF20
 10224 048b 01       		.byte	0x1
 10225 048c D601     		.2byte	0x1d6
 10226 048e 63020000 		.4byte	0x263
 10227 0492 03       		.uleb128 0x3
 10228 0493 91       		.byte	0x91
 10229 0494 BB7F     		.sleb128 -69
 10230 0496 18       		.uleb128 0x18
 10231 0497 723400   		.ascii	"r4\000"
 10232 049a 01       		.byte	0x1
 10233 049b 1302     		.2byte	0x213
 10234 049d C3000000 		.4byte	0xc3
 10235 04a1 02       		.uleb128 0x2
 10236 04a2 91       		.byte	0x91
 10237 04a3 54       		.sleb128 -44
 10238 04a4 18       		.uleb128 0x18
 10239 04a5 723500   		.ascii	"r5\000"
 10240 04a8 01       		.byte	0x1
 10241 04a9 1302     		.2byte	0x213
 10242 04ab C3000000 		.4byte	0xc3
 10243 04af 02       		.uleb128 0x2
 10244 04b0 91       		.byte	0x91
 10245 04b1 50       		.sleb128 -48
 10246 04b2 18       		.uleb128 0x18
 10247 04b3 723600   		.ascii	"r6\000"
 10248 04b6 01       		.byte	0x1
 10249 04b7 1302     		.2byte	0x213
 10250 04b9 C3000000 		.4byte	0xc3
 10251 04bd 02       		.uleb128 0x2
 10252 04be 91       		.byte	0x91
 10253 04bf 4C       		.sleb128 -52
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 243


 10254 04c0 18       		.uleb128 0x18
 10255 04c1 723700   		.ascii	"r7\000"
 10256 04c4 01       		.byte	0x1
 10257 04c5 1302     		.2byte	0x213
 10258 04c7 C3000000 		.4byte	0xc3
 10259 04cb 02       		.uleb128 0x2
 10260 04cc 91       		.byte	0x91
 10261 04cd 48       		.sleb128 -56
 10262 04ce 00       		.byte	0
 10263 04cf 19       		.uleb128 0x19
 10264 04d0 60080000 		.4byte	.LASF145
 10265 04d4 02       		.byte	0x2
 10266 04d5 C0       		.byte	0xc0
 10267 04d6 00000000 		.4byte	.LFB3
 10268 04da 14000000 		.4byte	.LFE3-.LFB3
 10269 04de 01       		.uleb128 0x1
 10270 04df 9C       		.byte	0x9c
 10271 04e0 F3040000 		.4byte	0x4f3
 10272 04e4 14       		.uleb128 0x14
 10273 04e5 61040000 		.4byte	.LASF49
 10274 04e9 02       		.byte	0x2
 10275 04ea C0       		.byte	0xc0
 10276 04eb 78010000 		.4byte	0x178
 10277 04ef 02       		.uleb128 0x2
 10278 04f0 91       		.byte	0x91
 10279 04f1 7C       		.sleb128 -4
 10280 04f2 00       		.byte	0
 10281 04f3 1A       		.uleb128 0x1a
 10282 04f4 94030000 		.4byte	.LASF95
 10283 04f8 02       		.byte	0x2
 10284 04f9 C4       		.byte	0xc4
 10285 04fa 78010000 		.4byte	0x178
 10286 04fe 00000000 		.4byte	.LFB4
 10287 0502 0C000000 		.4byte	.LFE4-.LFB4
 10288 0506 01       		.uleb128 0x1
 10289 0507 9C       		.byte	0x9c
 10290 0508 1B       		.uleb128 0x1b
 10291 0509 64020000 		.4byte	.LASF51
 10292 050d 02       		.byte	0x2
 10293 050e C8       		.byte	0xc8
 10294 050f 94000000 		.4byte	0x94
 10295 0513 00000000 		.4byte	.LFB5
 10296 0517 1A000000 		.4byte	.LFE5-.LFB5
 10297 051b 01       		.uleb128 0x1
 10298 051c 9C       		.byte	0x9c
 10299 051d 30050000 		.4byte	0x530
 10300 0521 14       		.uleb128 0x14
 10301 0522 E5080000 		.4byte	.LASF50
 10302 0526 02       		.byte	0x2
 10303 0527 C8       		.byte	0xc8
 10304 0528 D9000000 		.4byte	0xd9
 10305 052c 02       		.uleb128 0x2
 10306 052d 91       		.byte	0x91
 10307 052e 7C       		.sleb128 -4
 10308 052f 00       		.byte	0
 10309 0530 1B       		.uleb128 0x1b
 10310 0531 69030000 		.4byte	.LASF52
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 244


 10311 0535 02       		.byte	0x2
 10312 0536 CC       		.byte	0xcc
 10313 0537 94000000 		.4byte	0x94
 10314 053b 00000000 		.4byte	.LFB6
 10315 053f 12000000 		.4byte	.LFE6-.LFB6
 10316 0543 01       		.uleb128 0x1
 10317 0544 9C       		.byte	0x9c
 10318 0545 58050000 		.4byte	0x558
 10319 0549 14       		.uleb128 0x14
 10320 054a E5080000 		.4byte	.LASF50
 10321 054e 02       		.byte	0x2
 10322 054f CC       		.byte	0xcc
 10323 0550 D9000000 		.4byte	0xd9
 10324 0554 02       		.uleb128 0x2
 10325 0555 91       		.byte	0x91
 10326 0556 7C       		.sleb128 -4
 10327 0557 00       		.byte	0
 10328 0558 1C       		.uleb128 0x1c
 10329 0559 6F050000 		.4byte	.LASF54
 10330 055d 02       		.byte	0x2
 10331 055e D1       		.byte	0xd1
 10332 055f 00000000 		.4byte	.LFB7
 10333 0563 52000000 		.4byte	.LFE7-.LFB7
 10334 0567 01       		.uleb128 0x1
 10335 0568 9C       		.byte	0x9c
 10336 0569 96050000 		.4byte	0x596
 10337 056d 1D       		.uleb128 0x1d
 10338 056e 766C6900 		.ascii	"vli\000"
 10339 0572 02       		.byte	0x2
 10340 0573 D1       		.byte	0xd1
 10341 0574 D0020000 		.4byte	0x2d0
 10342 0578 02       		.uleb128 0x2
 10343 0579 91       		.byte	0x91
 10344 057a 74       		.sleb128 -12
 10345 057b 14       		.uleb128 0x14
 10346 057c B9030000 		.4byte	.LASF20
 10347 0580 02       		.byte	0x2
 10348 0581 D1       		.byte	0xd1
 10349 0582 63020000 		.4byte	0x263
 10350 0586 02       		.uleb128 0x2
 10351 0587 91       		.byte	0x91
 10352 0588 73       		.sleb128 -13
 10353 0589 1E       		.uleb128 0x1e
 10354 058a 6900     		.ascii	"i\000"
 10355 058c 02       		.byte	0x2
 10356 058d D2       		.byte	0xd2
 10357 058e 63020000 		.4byte	0x263
 10358 0592 02       		.uleb128 0x2
 10359 0593 91       		.byte	0x91
 10360 0594 7F       		.sleb128 -1
 10361 0595 00       		.byte	0
 10362 0596 13       		.uleb128 0x13
 10363 0597 B0080000 		.4byte	.LASF55
 10364 059b 02       		.byte	0x2
 10365 059c DB       		.byte	0xdb
 10366 059d 84020000 		.4byte	0x284
 10367 05a1 00000000 		.4byte	.LFB8
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 245


 10368 05a5 62000000 		.4byte	.LFE8-.LFB8
 10369 05a9 01       		.uleb128 0x1
 10370 05aa 9C       		.byte	0x9c
 10371 05ab E6050000 		.4byte	0x5e6
 10372 05af 1D       		.uleb128 0x1d
 10373 05b0 766C6900 		.ascii	"vli\000"
 10374 05b4 02       		.byte	0x2
 10375 05b5 DB       		.byte	0xdb
 10376 05b6 07030000 		.4byte	0x307
 10377 05ba 02       		.uleb128 0x2
 10378 05bb 91       		.byte	0x91
 10379 05bc 74       		.sleb128 -12
 10380 05bd 14       		.uleb128 0x14
 10381 05be B9030000 		.4byte	.LASF20
 10382 05c2 02       		.byte	0x2
 10383 05c3 DB       		.byte	0xdb
 10384 05c4 63020000 		.4byte	0x263
 10385 05c8 02       		.uleb128 0x2
 10386 05c9 91       		.byte	0x91
 10387 05ca 73       		.sleb128 -13
 10388 05cb 15       		.uleb128 0x15
 10389 05cc D3010000 		.4byte	.LASF56
 10390 05d0 02       		.byte	0x2
 10391 05d1 DC       		.byte	0xdc
 10392 05d2 84020000 		.4byte	0x284
 10393 05d6 02       		.uleb128 0x2
 10394 05d7 91       		.byte	0x91
 10395 05d8 7C       		.sleb128 -4
 10396 05d9 1E       		.uleb128 0x1e
 10397 05da 6900     		.ascii	"i\000"
 10398 05dc 02       		.byte	0x2
 10399 05dd DD       		.byte	0xdd
 10400 05de 63020000 		.4byte	0x263
 10401 05e2 02       		.uleb128 0x2
 10402 05e3 91       		.byte	0x91
 10403 05e4 7B       		.sleb128 -5
 10404 05e5 00       		.byte	0
 10405 05e6 13       		.uleb128 0x13
 10406 05e7 B3070000 		.4byte	.LASF57
 10407 05eb 02       		.byte	0x2
 10408 05ec E5       		.byte	0xe5
 10409 05ed 84020000 		.4byte	0x284
 10410 05f1 00000000 		.4byte	.LFB9
 10411 05f5 3A000000 		.4byte	.LFE9-.LFB9
 10412 05f9 01       		.uleb128 0x1
 10413 05fa 9C       		.byte	0x9c
 10414 05fb 1C060000 		.4byte	0x61c
 10415 05ff 1D       		.uleb128 0x1d
 10416 0600 766C6900 		.ascii	"vli\000"
 10417 0604 02       		.byte	0x2
 10418 0605 E5       		.byte	0xe5
 10419 0606 07030000 		.4byte	0x307
 10420 060a 02       		.uleb128 0x2
 10421 060b 91       		.byte	0x91
 10422 060c 7C       		.sleb128 -4
 10423 060d 1D       		.uleb128 0x1d
 10424 060e 62697400 		.ascii	"bit\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 246


 10425 0612 02       		.byte	0x2
 10426 0613 E5       		.byte	0xe5
 10427 0614 6E020000 		.4byte	0x26e
 10428 0618 02       		.uleb128 0x2
 10429 0619 91       		.byte	0x91
 10430 061a 7A       		.sleb128 -6
 10431 061b 00       		.byte	0
 10432 061c 13       		.uleb128 0x13
 10433 061d 12050000 		.4byte	.LASF58
 10434 0621 02       		.byte	0x2
 10435 0622 EA       		.byte	0xea
 10436 0623 63020000 		.4byte	0x263
 10437 0627 00000000 		.4byte	.LFB10
 10438 062b 5E000000 		.4byte	.LFE10-.LFB10
 10439 062f 01       		.uleb128 0x1
 10440 0630 9C       		.byte	0x9c
 10441 0631 5E060000 		.4byte	0x65e
 10442 0635 1D       		.uleb128 0x1d
 10443 0636 766C6900 		.ascii	"vli\000"
 10444 063a 02       		.byte	0x2
 10445 063b EA       		.byte	0xea
 10446 063c 07030000 		.4byte	0x307
 10447 0640 02       		.uleb128 0x2
 10448 0641 91       		.byte	0x91
 10449 0642 74       		.sleb128 -12
 10450 0643 14       		.uleb128 0x14
 10451 0644 47030000 		.4byte	.LASF59
 10452 0648 02       		.byte	0x2
 10453 0649 EA       		.byte	0xea
 10454 064a 5E060000 		.4byte	0x65e
 10455 064e 02       		.uleb128 0x2
 10456 064f 91       		.byte	0x91
 10457 0650 73       		.sleb128 -13
 10458 0651 1E       		.uleb128 0x1e
 10459 0652 6900     		.ascii	"i\000"
 10460 0654 02       		.byte	0x2
 10461 0655 EB       		.byte	0xeb
 10462 0656 63020000 		.4byte	0x263
 10463 065a 02       		.uleb128 0x2
 10464 065b 91       		.byte	0x91
 10465 065c 7F       		.sleb128 -1
 10466 065d 00       		.byte	0
 10467 065e 09       		.uleb128 0x9
 10468 065f 63020000 		.4byte	0x263
 10469 0663 1F       		.uleb128 0x1f
 10470 0664 3D020000 		.4byte	.LASF60
 10471 0668 02       		.byte	0x2
 10472 0669 F5       		.byte	0xf5
 10473 066a 6E020000 		.4byte	0x26e
 10474 066e 00000000 		.4byte	.LFB11
 10475 0672 90000000 		.4byte	.LFE11-.LFB11
 10476 0676 01       		.uleb128 0x1
 10477 0677 9C       		.byte	0x9c
 10478 0678 C1060000 		.4byte	0x6c1
 10479 067c 1D       		.uleb128 0x1d
 10480 067d 766C6900 		.ascii	"vli\000"
 10481 0681 02       		.byte	0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 247


 10482 0682 F5       		.byte	0xf5
 10483 0683 07030000 		.4byte	0x307
 10484 0687 02       		.uleb128 0x2
 10485 0688 91       		.byte	0x91
 10486 0689 64       		.sleb128 -28
 10487 068a 14       		.uleb128 0x14
 10488 068b 47030000 		.4byte	.LASF59
 10489 068f 02       		.byte	0x2
 10490 0690 F5       		.byte	0xf5
 10491 0691 5E060000 		.4byte	0x65e
 10492 0695 02       		.uleb128 0x2
 10493 0696 91       		.byte	0x91
 10494 0697 63       		.sleb128 -29
 10495 0698 1E       		.uleb128 0x1e
 10496 0699 6900     		.ascii	"i\000"
 10497 069b 02       		.byte	0x2
 10498 069c F6       		.byte	0xf6
 10499 069d 84020000 		.4byte	0x284
 10500 06a1 02       		.uleb128 0x2
 10501 06a2 91       		.byte	0x91
 10502 06a3 74       		.sleb128 -12
 10503 06a4 15       		.uleb128 0x15
 10504 06a5 A9010000 		.4byte	.LASF61
 10505 06a9 02       		.byte	0x2
 10506 06aa F7       		.byte	0xf7
 10507 06ab 84020000 		.4byte	0x284
 10508 06af 02       		.uleb128 0x2
 10509 06b0 91       		.byte	0x91
 10510 06b1 70       		.sleb128 -16
 10511 06b2 15       		.uleb128 0x15
 10512 06b3 6C000000 		.4byte	.LASF62
 10513 06b7 02       		.byte	0x2
 10514 06b8 F9       		.byte	0xf9
 10515 06b9 63020000 		.4byte	0x263
 10516 06bd 02       		.uleb128 0x2
 10517 06be 91       		.byte	0x91
 10518 06bf 6F       		.sleb128 -17
 10519 06c0 00       		.byte	0
 10520 06c1 16       		.uleb128 0x16
 10521 06c2 C0080000 		.4byte	.LASF63
 10522 06c6 02       		.byte	0x2
 10523 06c7 0801     		.2byte	0x108
 10524 06c9 00000000 		.4byte	.LFB12
 10525 06cd 60000000 		.4byte	.LFE12-.LFB12
 10526 06d1 01       		.uleb128 0x1
 10527 06d2 9C       		.byte	0x9c
 10528 06d3 12070000 		.4byte	0x712
 10529 06d7 17       		.uleb128 0x17
 10530 06d8 49050000 		.4byte	.LASF64
 10531 06dc 02       		.byte	0x2
 10532 06dd 0801     		.2byte	0x108
 10533 06df D0020000 		.4byte	0x2d0
 10534 06e3 02       		.uleb128 0x2
 10535 06e4 91       		.byte	0x91
 10536 06e5 74       		.sleb128 -12
 10537 06e6 20       		.uleb128 0x20
 10538 06e7 73726300 		.ascii	"src\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 248


 10539 06eb 02       		.byte	0x2
 10540 06ec 0801     		.2byte	0x108
 10541 06ee 07030000 		.4byte	0x307
 10542 06f2 02       		.uleb128 0x2
 10543 06f3 91       		.byte	0x91
 10544 06f4 70       		.sleb128 -16
 10545 06f5 17       		.uleb128 0x17
 10546 06f6 B9030000 		.4byte	.LASF20
 10547 06fa 02       		.byte	0x2
 10548 06fb 0801     		.2byte	0x108
 10549 06fd 63020000 		.4byte	0x263
 10550 0701 02       		.uleb128 0x2
 10551 0702 91       		.byte	0x91
 10552 0703 6F       		.sleb128 -17
 10553 0704 18       		.uleb128 0x18
 10554 0705 6900     		.ascii	"i\000"
 10555 0707 02       		.byte	0x2
 10556 0708 0901     		.2byte	0x109
 10557 070a 63020000 		.4byte	0x263
 10558 070e 02       		.uleb128 0x2
 10559 070f 91       		.byte	0x91
 10560 0710 7F       		.sleb128 -1
 10561 0711 00       		.byte	0
 10562 0712 21       		.uleb128 0x21
 10563 0713 02080000 		.4byte	.LASF65
 10564 0717 02       		.byte	0x2
 10565 0718 1101     		.2byte	0x111
 10566 071a 79020000 		.4byte	0x279
 10567 071e 00000000 		.4byte	.LFB13
 10568 0722 92000000 		.4byte	.LFE13-.LFB13
 10569 0726 01       		.uleb128 0x1
 10570 0727 9C       		.byte	0x9c
 10571 0728 67070000 		.4byte	0x767
 10572 072c 17       		.uleb128 0x17
 10573 072d A2090000 		.4byte	.LASF41
 10574 0731 02       		.byte	0x2
 10575 0732 1101     		.2byte	0x111
 10576 0734 07030000 		.4byte	0x307
 10577 0738 02       		.uleb128 0x2
 10578 0739 91       		.byte	0x91
 10579 073a 74       		.sleb128 -12
 10580 073b 17       		.uleb128 0x17
 10581 073c 5C010000 		.4byte	.LASF42
 10582 0740 02       		.byte	0x2
 10583 0741 1201     		.2byte	0x112
 10584 0743 07030000 		.4byte	0x307
 10585 0747 02       		.uleb128 0x2
 10586 0748 91       		.byte	0x91
 10587 0749 70       		.sleb128 -16
 10588 074a 17       		.uleb128 0x17
 10589 074b B9030000 		.4byte	.LASF20
 10590 074f 02       		.byte	0x2
 10591 0750 1301     		.2byte	0x113
 10592 0752 63020000 		.4byte	0x263
 10593 0756 02       		.uleb128 0x2
 10594 0757 91       		.byte	0x91
 10595 0758 6F       		.sleb128 -17
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 249


 10596 0759 18       		.uleb128 0x18
 10597 075a 6900     		.ascii	"i\000"
 10598 075c 02       		.byte	0x2
 10599 075d 1401     		.2byte	0x114
 10600 075f 63020000 		.4byte	0x263
 10601 0763 02       		.uleb128 0x2
 10602 0764 91       		.byte	0x91
 10603 0765 7F       		.sleb128 -1
 10604 0766 00       		.byte	0
 10605 0767 21       		.uleb128 0x21
 10606 0768 1F040000 		.4byte	.LASF66
 10607 076c 02       		.byte	0x2
 10608 076d 2101     		.2byte	0x121
 10609 076f 84020000 		.4byte	0x284
 10610 0773 00000000 		.4byte	.LFB14
 10611 0777 7A000000 		.4byte	.LFE14-.LFB14
 10612 077b 01       		.uleb128 0x1
 10613 077c 9C       		.byte	0x9c
 10614 077d EF070000 		.4byte	0x7ef
 10615 0781 17       		.uleb128 0x17
 10616 0782 A2090000 		.4byte	.LASF41
 10617 0786 02       		.byte	0x2
 10618 0787 2101     		.2byte	0x121
 10619 0789 07030000 		.4byte	0x307
 10620 078d 02       		.uleb128 0x2
 10621 078e 91       		.byte	0x91
 10622 078f 6C       		.sleb128 -20
 10623 0790 17       		.uleb128 0x17
 10624 0791 5C010000 		.4byte	.LASF42
 10625 0795 02       		.byte	0x2
 10626 0796 2201     		.2byte	0x122
 10627 0798 07030000 		.4byte	0x307
 10628 079c 02       		.uleb128 0x2
 10629 079d 91       		.byte	0x91
 10630 079e 68       		.sleb128 -24
 10631 079f 17       		.uleb128 0x17
 10632 07a0 B9030000 		.4byte	.LASF20
 10633 07a4 02       		.byte	0x2
 10634 07a5 2301     		.2byte	0x123
 10635 07a7 63020000 		.4byte	0x263
 10636 07ab 02       		.uleb128 0x2
 10637 07ac 91       		.byte	0x91
 10638 07ad 67       		.sleb128 -25
 10639 07ae 22       		.uleb128 0x22
 10640 07af 08010000 		.4byte	.LASF67
 10641 07b3 02       		.byte	0x2
 10642 07b4 2401     		.2byte	0x124
 10643 07b6 84020000 		.4byte	0x284
 10644 07ba 02       		.uleb128 0x2
 10645 07bb 91       		.byte	0x91
 10646 07bc 7C       		.sleb128 -4
 10647 07bd 18       		.uleb128 0x18
 10648 07be 6900     		.ascii	"i\000"
 10649 07c0 02       		.byte	0x2
 10650 07c1 2501     		.2byte	0x125
 10651 07c3 63020000 		.4byte	0x263
 10652 07c7 02       		.uleb128 0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 250


 10653 07c8 91       		.byte	0x91
 10654 07c9 7B       		.sleb128 -5
 10655 07ca 23       		.uleb128 0x23
 10656 07cb 22000000 		.4byte	.LBB2
 10657 07cf 30000000 		.4byte	.LBE2-.LBB2
 10658 07d3 18       		.uleb128 0x18
 10659 07d4 6C00     		.ascii	"l\000"
 10660 07d6 02       		.byte	0x2
 10661 07d7 2701     		.2byte	0x127
 10662 07d9 84020000 		.4byte	0x284
 10663 07dd 02       		.uleb128 0x2
 10664 07de 91       		.byte	0x91
 10665 07df 74       		.sleb128 -12
 10666 07e0 18       		.uleb128 0x18
 10667 07e1 7200     		.ascii	"r\000"
 10668 07e3 02       		.byte	0x2
 10669 07e4 2801     		.2byte	0x128
 10670 07e6 84020000 		.4byte	0x284
 10671 07ea 02       		.uleb128 0x2
 10672 07eb 91       		.byte	0x91
 10673 07ec 70       		.sleb128 -16
 10674 07ed 00       		.byte	0
 10675 07ee 00       		.byte	0
 10676 07ef 24       		.uleb128 0x24
 10677 07f0 32080000 		.4byte	.LASF68
 10678 07f4 02       		.byte	0x2
 10679 07f5 3501     		.2byte	0x135
 10680 07f7 79020000 		.4byte	0x279
 10681 07fb 00000000 		.4byte	.LFB15
 10682 07ff 5E000000 		.4byte	.LFE15-.LFB15
 10683 0803 01       		.uleb128 0x1
 10684 0804 9C       		.byte	0x9c
 10685 0805 64080000 		.4byte	0x864
 10686 0809 17       		.uleb128 0x17
 10687 080a A2090000 		.4byte	.LASF41
 10688 080e 02       		.byte	0x2
 10689 080f 3501     		.2byte	0x135
 10690 0811 07030000 		.4byte	0x307
 10691 0815 02       		.uleb128 0x2
 10692 0816 91       		.byte	0x91
 10693 0817 4C       		.sleb128 -52
 10694 0818 17       		.uleb128 0x17
 10695 0819 5C010000 		.4byte	.LASF42
 10696 081d 02       		.byte	0x2
 10697 081e 3601     		.2byte	0x136
 10698 0820 07030000 		.4byte	0x307
 10699 0824 02       		.uleb128 0x2
 10700 0825 91       		.byte	0x91
 10701 0826 48       		.sleb128 -56
 10702 0827 17       		.uleb128 0x17
 10703 0828 B9030000 		.4byte	.LASF20
 10704 082c 02       		.byte	0x2
 10705 082d 3701     		.2byte	0x137
 10706 082f 63020000 		.4byte	0x263
 10707 0833 02       		.uleb128 0x2
 10708 0834 91       		.byte	0x91
 10709 0835 47       		.sleb128 -57
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 251


 10710 0836 18       		.uleb128 0x18
 10711 0837 746D7000 		.ascii	"tmp\000"
 10712 083b 02       		.byte	0x2
 10713 083c 3801     		.2byte	0x138
 10714 083e 8F020000 		.4byte	0x28f
 10715 0842 02       		.uleb128 0x2
 10716 0843 91       		.byte	0x91
 10717 0844 50       		.sleb128 -48
 10718 0845 18       		.uleb128 0x18
 10719 0846 6E656700 		.ascii	"neg\000"
 10720 084a 02       		.byte	0x2
 10721 084b 3901     		.2byte	0x139
 10722 084d 84020000 		.4byte	0x284
 10723 0851 02       		.uleb128 0x2
 10724 0852 91       		.byte	0x91
 10725 0853 74       		.sleb128 -12
 10726 0854 22       		.uleb128 0x22
 10727 0855 EC020000 		.4byte	.LASF69
 10728 0859 02       		.byte	0x2
 10729 085a 3A01     		.2byte	0x13a
 10730 085c 84020000 		.4byte	0x284
 10731 0860 02       		.uleb128 0x2
 10732 0861 91       		.byte	0x91
 10733 0862 70       		.sleb128 -16
 10734 0863 00       		.byte	0
 10735 0864 16       		.uleb128 0x16
 10736 0865 6F070000 		.4byte	.LASF70
 10737 0869 02       		.byte	0x2
 10738 086a 4001     		.2byte	0x140
 10739 086c 00000000 		.4byte	.LFB16
 10740 0870 50000000 		.4byte	.LFE16-.LFB16
 10741 0874 01       		.uleb128 0x1
 10742 0875 9C       		.byte	0x9c
 10743 0876 D0080000 		.4byte	0x8d0
 10744 087a 20       		.uleb128 0x20
 10745 087b 766C6900 		.ascii	"vli\000"
 10746 087f 02       		.byte	0x2
 10747 0880 4001     		.2byte	0x140
 10748 0882 D0020000 		.4byte	0x2d0
 10749 0886 02       		.uleb128 0x2
 10750 0887 91       		.byte	0x91
 10751 0888 6C       		.sleb128 -20
 10752 0889 17       		.uleb128 0x17
 10753 088a B9030000 		.4byte	.LASF20
 10754 088e 02       		.byte	0x2
 10755 088f 4001     		.2byte	0x140
 10756 0891 63020000 		.4byte	0x263
 10757 0895 02       		.uleb128 0x2
 10758 0896 91       		.byte	0x91
 10759 0897 6B       		.sleb128 -21
 10760 0898 18       		.uleb128 0x18
 10761 0899 656E6400 		.ascii	"end\000"
 10762 089d 02       		.byte	0x2
 10763 089e 4101     		.2byte	0x141
 10764 08a0 D0020000 		.4byte	0x2d0
 10765 08a4 02       		.uleb128 0x2
 10766 08a5 91       		.byte	0x91
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 252


 10767 08a6 78       		.sleb128 -8
 10768 08a7 22       		.uleb128 0x22
 10769 08a8 A5050000 		.4byte	.LASF44
 10770 08ac 02       		.byte	0x2
 10771 08ad 4201     		.2byte	0x142
 10772 08af 84020000 		.4byte	0x284
 10773 08b3 02       		.uleb128 0x2
 10774 08b4 91       		.byte	0x91
 10775 08b5 7C       		.sleb128 -4
 10776 08b6 23       		.uleb128 0x23
 10777 08b7 26000000 		.4byte	.LBB3
 10778 08bb 18000000 		.4byte	.LBE3-.LBB3
 10779 08bf 22       		.uleb128 0x22
 10780 08c0 E7020000 		.4byte	.LASF71
 10781 08c4 02       		.byte	0x2
 10782 08c5 4601     		.2byte	0x146
 10783 08c7 84020000 		.4byte	0x284
 10784 08cb 02       		.uleb128 0x2
 10785 08cc 91       		.byte	0x91
 10786 08cd 74       		.sleb128 -12
 10787 08ce 00       		.byte	0
 10788 08cf 00       		.byte	0
 10789 08d0 25       		.uleb128 0x25
 10790 08d1 19070000 		.4byte	.LASF72
 10791 08d5 02       		.byte	0x2
 10792 08d6 1C02     		.2byte	0x21c
 10793 08d8 00000000 		.4byte	.LFB17
 10794 08dc 52000000 		.4byte	.LFE17-.LFB17
 10795 08e0 01       		.uleb128 0x1
 10796 08e1 9C       		.byte	0x9c
 10797 08e2 41090000 		.4byte	0x941
 10798 08e6 17       		.uleb128 0x17
 10799 08e7 330A0000 		.4byte	.LASF40
 10800 08eb 02       		.byte	0x2
 10801 08ec 1C02     		.2byte	0x21c
 10802 08ee D0020000 		.4byte	0x2d0
 10803 08f2 02       		.uleb128 0x2
 10804 08f3 91       		.byte	0x91
 10805 08f4 6C       		.sleb128 -20
 10806 08f5 17       		.uleb128 0x17
 10807 08f6 A2090000 		.4byte	.LASF41
 10808 08fa 02       		.byte	0x2
 10809 08fb 1D02     		.2byte	0x21d
 10810 08fd 07030000 		.4byte	0x307
 10811 0901 02       		.uleb128 0x2
 10812 0902 91       		.byte	0x91
 10813 0903 68       		.sleb128 -24
 10814 0904 17       		.uleb128 0x17
 10815 0905 5C010000 		.4byte	.LASF42
 10816 0909 02       		.byte	0x2
 10817 090a 1E02     		.2byte	0x21e
 10818 090c 07030000 		.4byte	0x307
 10819 0910 02       		.uleb128 0x2
 10820 0911 91       		.byte	0x91
 10821 0912 64       		.sleb128 -28
 10822 0913 20       		.uleb128 0x20
 10823 0914 6D6F6400 		.ascii	"mod\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 253


 10824 0918 02       		.byte	0x2
 10825 0919 1F02     		.2byte	0x21f
 10826 091b 07030000 		.4byte	0x307
 10827 091f 02       		.uleb128 0x2
 10828 0920 91       		.byte	0x91
 10829 0921 60       		.sleb128 -32
 10830 0922 17       		.uleb128 0x17
 10831 0923 B9030000 		.4byte	.LASF20
 10832 0927 02       		.byte	0x2
 10833 0928 2002     		.2byte	0x220
 10834 092a 63020000 		.4byte	0x263
 10835 092e 02       		.uleb128 0x2
 10836 092f 91       		.byte	0x91
 10837 0930 00       		.sleb128 0
 10838 0931 22       		.uleb128 0x22
 10839 0932 A5050000 		.4byte	.LASF44
 10840 0936 02       		.byte	0x2
 10841 0937 2102     		.2byte	0x221
 10842 0939 84020000 		.4byte	0x284
 10843 093d 02       		.uleb128 0x2
 10844 093e 91       		.byte	0x91
 10845 093f 74       		.sleb128 -12
 10846 0940 00       		.byte	0
 10847 0941 25       		.uleb128 0x25
 10848 0942 09070000 		.4byte	.LASF73
 10849 0946 02       		.byte	0x2
 10850 0947 2A02     		.2byte	0x22a
 10851 0949 00000000 		.4byte	.LFB18
 10852 094d 3C000000 		.4byte	.LFE18-.LFB18
 10853 0951 01       		.uleb128 0x1
 10854 0952 9C       		.byte	0x9c
 10855 0953 B2090000 		.4byte	0x9b2
 10856 0957 17       		.uleb128 0x17
 10857 0958 330A0000 		.4byte	.LASF40
 10858 095c 02       		.byte	0x2
 10859 095d 2A02     		.2byte	0x22a
 10860 095f D0020000 		.4byte	0x2d0
 10861 0963 02       		.uleb128 0x2
 10862 0964 91       		.byte	0x91
 10863 0965 6C       		.sleb128 -20
 10864 0966 17       		.uleb128 0x17
 10865 0967 A2090000 		.4byte	.LASF41
 10866 096b 02       		.byte	0x2
 10867 096c 2B02     		.2byte	0x22b
 10868 096e 07030000 		.4byte	0x307
 10869 0972 02       		.uleb128 0x2
 10870 0973 91       		.byte	0x91
 10871 0974 68       		.sleb128 -24
 10872 0975 17       		.uleb128 0x17
 10873 0976 5C010000 		.4byte	.LASF42
 10874 097a 02       		.byte	0x2
 10875 097b 2C02     		.2byte	0x22c
 10876 097d 07030000 		.4byte	0x307
 10877 0981 02       		.uleb128 0x2
 10878 0982 91       		.byte	0x91
 10879 0983 64       		.sleb128 -28
 10880 0984 20       		.uleb128 0x20
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 254


 10881 0985 6D6F6400 		.ascii	"mod\000"
 10882 0989 02       		.byte	0x2
 10883 098a 2D02     		.2byte	0x22d
 10884 098c 07030000 		.4byte	0x307
 10885 0990 02       		.uleb128 0x2
 10886 0991 91       		.byte	0x91
 10887 0992 60       		.sleb128 -32
 10888 0993 17       		.uleb128 0x17
 10889 0994 B9030000 		.4byte	.LASF20
 10890 0998 02       		.byte	0x2
 10891 0999 2E02     		.2byte	0x22e
 10892 099b 63020000 		.4byte	0x263
 10893 099f 02       		.uleb128 0x2
 10894 09a0 91       		.byte	0x91
 10895 09a1 00       		.sleb128 0
 10896 09a2 22       		.uleb128 0x22
 10897 09a3 8B030000 		.4byte	.LASF74
 10898 09a7 02       		.byte	0x2
 10899 09a8 2F02     		.2byte	0x22f
 10900 09aa 84020000 		.4byte	0x284
 10901 09ae 02       		.uleb128 0x2
 10902 09af 91       		.byte	0x91
 10903 09b0 74       		.sleb128 -12
 10904 09b1 00       		.byte	0
 10905 09b2 25       		.uleb128 0x25
 10906 09b3 1E000000 		.4byte	.LASF75
 10907 09b7 02       		.byte	0x2
 10908 09b8 3902     		.2byte	0x239
 10909 09ba 00000000 		.4byte	.LFB19
 10910 09be 98020000 		.4byte	.LFE19-.LFB19
 10911 09c2 01       		.uleb128 0x1
 10912 09c3 9C       		.byte	0x9c
 10913 09c4 C10A0000 		.4byte	0xac1
 10914 09c8 17       		.uleb128 0x17
 10915 09c9 330A0000 		.4byte	.LASF40
 10916 09cd 02       		.byte	0x2
 10917 09ce 3902     		.2byte	0x239
 10918 09d0 D0020000 		.4byte	0x2d0
 10919 09d4 03       		.uleb128 0x3
 10920 09d5 91       		.byte	0x91
 10921 09d6 D47E     		.sleb128 -172
 10922 09d8 17       		.uleb128 0x17
 10923 09d9 01020000 		.4byte	.LASF76
 10924 09dd 02       		.byte	0x2
 10925 09de 3A02     		.2byte	0x23a
 10926 09e0 D0020000 		.4byte	0x2d0
 10927 09e4 03       		.uleb128 0x3
 10928 09e5 91       		.byte	0x91
 10929 09e6 D07E     		.sleb128 -176
 10930 09e8 20       		.uleb128 0x20
 10931 09e9 6D6F6400 		.ascii	"mod\000"
 10932 09ed 02       		.byte	0x2
 10933 09ee 3B02     		.2byte	0x23b
 10934 09f0 07030000 		.4byte	0x307
 10935 09f4 03       		.uleb128 0x3
 10936 09f5 91       		.byte	0x91
 10937 09f6 CC7E     		.sleb128 -180
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 255


 10938 09f8 17       		.uleb128 0x17
 10939 09f9 B9030000 		.4byte	.LASF20
 10940 09fd 02       		.byte	0x2
 10941 09fe 3C02     		.2byte	0x23c
 10942 0a00 63020000 		.4byte	0x263
 10943 0a04 03       		.uleb128 0x3
 10944 0a05 91       		.byte	0x91
 10945 0a06 CB7E     		.sleb128 -181
 10946 0a08 22       		.uleb128 0x22
 10947 0a09 05050000 		.4byte	.LASF77
 10948 0a0d 02       		.byte	0x2
 10949 0a0e 3D02     		.2byte	0x23d
 10950 0a10 A6020000 		.4byte	0x2a6
 10951 0a14 03       		.uleb128 0x3
 10952 0a15 91       		.byte	0x91
 10953 0a16 A07F     		.sleb128 -96
 10954 0a18 18       		.uleb128 0x18
 10955 0a19 746D7000 		.ascii	"tmp\000"
 10956 0a1d 02       		.byte	0x2
 10957 0a1e 3E02     		.2byte	0x23e
 10958 0a20 A6020000 		.4byte	0x2a6
 10959 0a24 03       		.uleb128 0x3
 10960 0a25 91       		.byte	0x91
 10961 0a26 E07E     		.sleb128 -160
 10962 0a28 18       		.uleb128 0x18
 10963 0a29 7600     		.ascii	"v\000"
 10964 0a2b 02       		.byte	0x2
 10965 0a2c 3F02     		.2byte	0x23f
 10966 0a2e C10A0000 		.4byte	0xac1
 10967 0a32 03       		.uleb128 0x3
 10968 0a33 91       		.byte	0x91
 10969 0a34 D87E     		.sleb128 -168
 10970 0a36 22       		.uleb128 0x22
 10971 0a37 D9070000 		.4byte	.LASF78
 10972 0a3b 02       		.byte	0x2
 10973 0a3c 4002     		.2byte	0x240
 10974 0a3e 84020000 		.4byte	0x284
 10975 0a42 02       		.uleb128 0x2
 10976 0a43 91       		.byte	0x91
 10977 0a44 74       		.sleb128 -12
 10978 0a45 22       		.uleb128 0x22
 10979 0a46 20020000 		.4byte	.LASF79
 10980 0a4a 02       		.byte	0x2
 10981 0a4b 4302     		.2byte	0x243
 10982 0a4d 6E020000 		.4byte	0x26e
 10983 0a51 02       		.uleb128 0x2
 10984 0a52 91       		.byte	0x91
 10985 0a53 72       		.sleb128 -14
 10986 0a54 22       		.uleb128 0x22
 10987 0a55 DF060000 		.4byte	.LASF80
 10988 0a59 02       		.byte	0x2
 10989 0a5a 4402     		.2byte	0x244
 10990 0a5c 63020000 		.4byte	0x263
 10991 0a60 02       		.uleb128 0x2
 10992 0a61 91       		.byte	0x91
 10993 0a62 66       		.sleb128 -26
 10994 0a63 22       		.uleb128 0x22
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 256


 10995 0a64 13090000 		.4byte	.LASF81
 10996 0a68 02       		.byte	0x2
 10997 0a69 4502     		.2byte	0x245
 10998 0a6b 63020000 		.4byte	0x263
 10999 0a6f 02       		.uleb128 0x2
 11000 0a70 91       		.byte	0x91
 11001 0a71 65       		.sleb128 -27
 11002 0a72 22       		.uleb128 0x22
 11003 0a73 A5050000 		.4byte	.LASF44
 11004 0a77 02       		.byte	0x2
 11005 0a78 4602     		.2byte	0x246
 11006 0a7a 84020000 		.4byte	0x284
 11007 0a7e 02       		.uleb128 0x2
 11008 0a7f 91       		.byte	0x91
 11009 0a80 6C       		.sleb128 -20
 11010 0a81 23       		.uleb128 0x23
 11011 0a82 2C010000 		.4byte	.LBB4
 11012 0a86 2A010000 		.4byte	.LBE4-.LBB4
 11013 0a8a 22       		.uleb128 0x22
 11014 0a8b 77080000 		.4byte	.LASF82
 11015 0a8f 02       		.byte	0x2
 11016 0a90 5202     		.2byte	0x252
 11017 0a92 84020000 		.4byte	0x284
 11018 0a96 02       		.uleb128 0x2
 11019 0a97 91       		.byte	0x91
 11020 0a98 68       		.sleb128 -24
 11021 0a99 18       		.uleb128 0x18
 11022 0a9a 6900     		.ascii	"i\000"
 11023 0a9c 02       		.byte	0x2
 11024 0a9d 5302     		.2byte	0x253
 11025 0a9f 63020000 		.4byte	0x263
 11026 0aa3 02       		.uleb128 0x2
 11027 0aa4 91       		.byte	0x91
 11028 0aa5 67       		.sleb128 -25
 11029 0aa6 23       		.uleb128 0x23
 11030 0aa7 3A010000 		.4byte	.LBB5
 11031 0aab 86000000 		.4byte	.LBE5-.LBB5
 11032 0aaf 22       		.uleb128 0x22
 11033 0ab0 08010000 		.4byte	.LASF67
 11034 0ab4 02       		.byte	0x2
 11035 0ab5 5502     		.2byte	0x255
 11036 0ab7 84020000 		.4byte	0x284
 11037 0abb 02       		.uleb128 0x2
 11038 0abc 91       		.byte	0x91
 11039 0abd 60       		.sleb128 -32
 11040 0abe 00       		.byte	0
 11041 0abf 00       		.byte	0
 11042 0ac0 00       		.byte	0
 11043 0ac1 11       		.uleb128 0x11
 11044 0ac2 D0020000 		.4byte	0x2d0
 11045 0ac6 D10A0000 		.4byte	0xad1
 11046 0aca 12       		.uleb128 0x12
 11047 0acb 9F020000 		.4byte	0x29f
 11048 0acf 01       		.byte	0x1
 11049 0ad0 00       		.byte	0
 11050 0ad1 25       		.uleb128 0x25
 11051 0ad2 FF030000 		.4byte	.LASF83
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 257


 11052 0ad6 02       		.byte	0x2
 11053 0ad7 6402     		.2byte	0x264
 11054 0ad9 00000000 		.4byte	.LFB20
 11055 0add 32000000 		.4byte	.LFE20-.LFB20
 11056 0ae1 01       		.uleb128 0x1
 11057 0ae2 9C       		.byte	0x9c
 11058 0ae3 470B0000 		.4byte	0xb47
 11059 0ae7 17       		.uleb128 0x17
 11060 0ae8 330A0000 		.4byte	.LASF40
 11061 0aec 02       		.byte	0x2
 11062 0aed 6402     		.2byte	0x264
 11063 0aef D0020000 		.4byte	0x2d0
 11064 0af3 03       		.uleb128 0x3
 11065 0af4 91       		.byte	0x91
 11066 0af5 B47F     		.sleb128 -76
 11067 0af7 17       		.uleb128 0x17
 11068 0af8 A2090000 		.4byte	.LASF41
 11069 0afc 02       		.byte	0x2
 11070 0afd 6502     		.2byte	0x265
 11071 0aff 07030000 		.4byte	0x307
 11072 0b03 03       		.uleb128 0x3
 11073 0b04 91       		.byte	0x91
 11074 0b05 B07F     		.sleb128 -80
 11075 0b07 17       		.uleb128 0x17
 11076 0b08 5C010000 		.4byte	.LASF42
 11077 0b0c 02       		.byte	0x2
 11078 0b0d 6602     		.2byte	0x266
 11079 0b0f 07030000 		.4byte	0x307
 11080 0b13 03       		.uleb128 0x3
 11081 0b14 91       		.byte	0x91
 11082 0b15 AC7F     		.sleb128 -84
 11083 0b17 20       		.uleb128 0x20
 11084 0b18 6D6F6400 		.ascii	"mod\000"
 11085 0b1c 02       		.byte	0x2
 11086 0b1d 6702     		.2byte	0x267
 11087 0b1f 07030000 		.4byte	0x307
 11088 0b23 03       		.uleb128 0x3
 11089 0b24 91       		.byte	0x91
 11090 0b25 A87F     		.sleb128 -88
 11091 0b27 17       		.uleb128 0x17
 11092 0b28 B9030000 		.4byte	.LASF20
 11093 0b2c 02       		.byte	0x2
 11094 0b2d 6802     		.2byte	0x268
 11095 0b2f 63020000 		.4byte	0x263
 11096 0b33 02       		.uleb128 0x2
 11097 0b34 91       		.byte	0x91
 11098 0b35 00       		.sleb128 0
 11099 0b36 22       		.uleb128 0x22
 11100 0b37 01020000 		.4byte	.LASF76
 11101 0b3b 02       		.byte	0x2
 11102 0b3c 6902     		.2byte	0x269
 11103 0b3e A6020000 		.4byte	0x2a6
 11104 0b42 03       		.uleb128 0x3
 11105 0b43 91       		.byte	0x91
 11106 0b44 B87F     		.sleb128 -72
 11107 0b46 00       		.byte	0
 11108 0b47 25       		.uleb128 0x25
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 258


 11109 0b48 4E020000 		.4byte	.LASF84
 11110 0b4c 02       		.byte	0x2
 11111 0b4d 6E02     		.2byte	0x26e
 11112 0b4f 00000000 		.4byte	.LFB21
 11113 0b53 30000000 		.4byte	.LFE21-.LFB21
 11114 0b57 01       		.uleb128 0x1
 11115 0b58 9C       		.byte	0x9c
 11116 0b59 AE0B0000 		.4byte	0xbae
 11117 0b5d 17       		.uleb128 0x17
 11118 0b5e 330A0000 		.4byte	.LASF40
 11119 0b62 02       		.byte	0x2
 11120 0b63 6E02     		.2byte	0x26e
 11121 0b65 D0020000 		.4byte	0x2d0
 11122 0b69 03       		.uleb128 0x3
 11123 0b6a 91       		.byte	0x91
 11124 0b6b B47F     		.sleb128 -76
 11125 0b6d 17       		.uleb128 0x17
 11126 0b6e A2090000 		.4byte	.LASF41
 11127 0b72 02       		.byte	0x2
 11128 0b73 6F02     		.2byte	0x26f
 11129 0b75 07030000 		.4byte	0x307
 11130 0b79 03       		.uleb128 0x3
 11131 0b7a 91       		.byte	0x91
 11132 0b7b B07F     		.sleb128 -80
 11133 0b7d 17       		.uleb128 0x17
 11134 0b7e 5C010000 		.4byte	.LASF42
 11135 0b82 02       		.byte	0x2
 11136 0b83 7002     		.2byte	0x270
 11137 0b85 07030000 		.4byte	0x307
 11138 0b89 03       		.uleb128 0x3
 11139 0b8a 91       		.byte	0x91
 11140 0b8b AC7F     		.sleb128 -84
 11141 0b8d 17       		.uleb128 0x17
 11142 0b8e E5080000 		.4byte	.LASF50
 11143 0b92 02       		.byte	0x2
 11144 0b93 7102     		.2byte	0x271
 11145 0b95 D9000000 		.4byte	0xd9
 11146 0b99 03       		.uleb128 0x3
 11147 0b9a 91       		.byte	0x91
 11148 0b9b A87F     		.sleb128 -88
 11149 0b9d 22       		.uleb128 0x22
 11150 0b9e 01020000 		.4byte	.LASF76
 11151 0ba2 02       		.byte	0x2
 11152 0ba3 7202     		.2byte	0x272
 11153 0ba5 A6020000 		.4byte	0x2a6
 11154 0ba9 03       		.uleb128 0x3
 11155 0baa 91       		.byte	0x91
 11156 0bab B87F     		.sleb128 -72
 11157 0bad 00       		.byte	0
 11158 0bae 25       		.uleb128 0x25
 11159 0baf DE040000 		.4byte	.LASF85
 11160 0bb3 02       		.byte	0x2
 11161 0bb4 A002     		.2byte	0x2a0
 11162 0bb6 00000000 		.4byte	.LFB22
 11163 0bba 1C000000 		.4byte	.LFE22-.LFB22
 11164 0bbe 01       		.uleb128 0x1
 11165 0bbf 9C       		.byte	0x9c
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 259


 11166 0bc0 F20B0000 		.4byte	0xbf2
 11167 0bc4 17       		.uleb128 0x17
 11168 0bc5 330A0000 		.4byte	.LASF40
 11169 0bc9 02       		.byte	0x2
 11170 0bca A002     		.2byte	0x2a0
 11171 0bcc D0020000 		.4byte	0x2d0
 11172 0bd0 02       		.uleb128 0x2
 11173 0bd1 91       		.byte	0x91
 11174 0bd2 74       		.sleb128 -12
 11175 0bd3 17       		.uleb128 0x17
 11176 0bd4 A2090000 		.4byte	.LASF41
 11177 0bd8 02       		.byte	0x2
 11178 0bd9 A102     		.2byte	0x2a1
 11179 0bdb 07030000 		.4byte	0x307
 11180 0bdf 02       		.uleb128 0x2
 11181 0be0 91       		.byte	0x91
 11182 0be1 70       		.sleb128 -16
 11183 0be2 17       		.uleb128 0x17
 11184 0be3 E5080000 		.4byte	.LASF50
 11185 0be7 02       		.byte	0x2
 11186 0be8 A202     		.2byte	0x2a2
 11187 0bea D9000000 		.4byte	0xd9
 11188 0bee 02       		.uleb128 0x2
 11189 0bef 91       		.byte	0x91
 11190 0bf0 6C       		.sleb128 -20
 11191 0bf1 00       		.byte	0
 11192 0bf2 25       		.uleb128 0x25
 11193 0bf3 A8020000 		.4byte	.LASF86
 11194 0bf7 02       		.byte	0x2
 11195 0bf8 A902     		.2byte	0x2a9
 11196 0bfa 00000000 		.4byte	.LFB23
 11197 0bfe 88000000 		.4byte	.LFE23-.LFB23
 11198 0c02 01       		.uleb128 0x1
 11199 0c03 9C       		.byte	0x9c
 11200 0c04 440C0000 		.4byte	0xc44
 11201 0c08 20       		.uleb128 0x20
 11202 0c09 757600   		.ascii	"uv\000"
 11203 0c0c 02       		.byte	0x2
 11204 0c0d A902     		.2byte	0x2a9
 11205 0c0f D0020000 		.4byte	0x2d0
 11206 0c13 02       		.uleb128 0x2
 11207 0c14 91       		.byte	0x91
 11208 0c15 6C       		.sleb128 -20
 11209 0c16 20       		.uleb128 0x20
 11210 0c17 6D6F6400 		.ascii	"mod\000"
 11211 0c1b 02       		.byte	0x2
 11212 0c1c AA02     		.2byte	0x2aa
 11213 0c1e 07030000 		.4byte	0x307
 11214 0c22 02       		.uleb128 0x2
 11215 0c23 91       		.byte	0x91
 11216 0c24 68       		.sleb128 -24
 11217 0c25 17       		.uleb128 0x17
 11218 0c26 B9030000 		.4byte	.LASF20
 11219 0c2a 02       		.byte	0x2
 11220 0c2b AB02     		.2byte	0x2ab
 11221 0c2d 63020000 		.4byte	0x263
 11222 0c31 02       		.uleb128 0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 260


 11223 0c32 91       		.byte	0x91
 11224 0c33 67       		.sleb128 -25
 11225 0c34 22       		.uleb128 0x22
 11226 0c35 A5050000 		.4byte	.LASF44
 11227 0c39 02       		.byte	0x2
 11228 0c3a AC02     		.2byte	0x2ac
 11229 0c3c 84020000 		.4byte	0x284
 11230 0c40 02       		.uleb128 0x2
 11231 0c41 91       		.byte	0x91
 11232 0c42 74       		.sleb128 -12
 11233 0c43 00       		.byte	0
 11234 0c44 25       		.uleb128 0x25
 11235 0c45 16080000 		.4byte	.LASF87
 11236 0c49 02       		.byte	0x2
 11237 0c4a B802     		.2byte	0x2b8
 11238 0c4c 00000000 		.4byte	.LFB24
 11239 0c50 18020000 		.4byte	.LFE24-.LFB24
 11240 0c54 01       		.uleb128 0x1
 11241 0c55 9C       		.byte	0x9c
 11242 0c56 E10C0000 		.4byte	0xce1
 11243 0c5a 17       		.uleb128 0x17
 11244 0c5b 330A0000 		.4byte	.LASF40
 11245 0c5f 02       		.byte	0x2
 11246 0c60 B802     		.2byte	0x2b8
 11247 0c62 D0020000 		.4byte	0x2d0
 11248 0c66 03       		.uleb128 0x3
 11249 0c67 91       		.byte	0x91
 11250 0c68 EC7E     		.sleb128 -148
 11251 0c6a 17       		.uleb128 0x17
 11252 0c6b 29070000 		.4byte	.LASF88
 11253 0c6f 02       		.byte	0x2
 11254 0c70 B902     		.2byte	0x2b9
 11255 0c72 07030000 		.4byte	0x307
 11256 0c76 03       		.uleb128 0x3
 11257 0c77 91       		.byte	0x91
 11258 0c78 E87E     		.sleb128 -152
 11259 0c7a 20       		.uleb128 0x20
 11260 0c7b 6D6F6400 		.ascii	"mod\000"
 11261 0c7f 02       		.byte	0x2
 11262 0c80 BA02     		.2byte	0x2ba
 11263 0c82 07030000 		.4byte	0x307
 11264 0c86 03       		.uleb128 0x3
 11265 0c87 91       		.byte	0x91
 11266 0c88 E47E     		.sleb128 -156
 11267 0c8a 17       		.uleb128 0x17
 11268 0c8b B9030000 		.4byte	.LASF20
 11269 0c8f 02       		.byte	0x2
 11270 0c90 BB02     		.2byte	0x2bb
 11271 0c92 63020000 		.4byte	0x263
 11272 0c96 03       		.uleb128 0x3
 11273 0c97 91       		.byte	0x91
 11274 0c98 E37E     		.sleb128 -157
 11275 0c9a 18       		.uleb128 0x18
 11276 0c9b 6100     		.ascii	"a\000"
 11277 0c9d 02       		.byte	0x2
 11278 0c9e BC02     		.2byte	0x2bc
 11279 0ca0 8F020000 		.4byte	0x28f
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 261


 11280 0ca4 02       		.uleb128 0x2
 11281 0ca5 91       		.byte	0x91
 11282 0ca6 54       		.sleb128 -44
 11283 0ca7 18       		.uleb128 0x18
 11284 0ca8 6200     		.ascii	"b\000"
 11285 0caa 02       		.byte	0x2
 11286 0cab BC02     		.2byte	0x2bc
 11287 0cad 8F020000 		.4byte	0x28f
 11288 0cb1 03       		.uleb128 0x3
 11289 0cb2 91       		.byte	0x91
 11290 0cb3 B47F     		.sleb128 -76
 11291 0cb5 18       		.uleb128 0x18
 11292 0cb6 7500     		.ascii	"u\000"
 11293 0cb8 02       		.byte	0x2
 11294 0cb9 BC02     		.2byte	0x2bc
 11295 0cbb 8F020000 		.4byte	0x28f
 11296 0cbf 03       		.uleb128 0x3
 11297 0cc0 91       		.byte	0x91
 11298 0cc1 947F     		.sleb128 -108
 11299 0cc3 18       		.uleb128 0x18
 11300 0cc4 7600     		.ascii	"v\000"
 11301 0cc6 02       		.byte	0x2
 11302 0cc7 BC02     		.2byte	0x2bc
 11303 0cc9 8F020000 		.4byte	0x28f
 11304 0ccd 03       		.uleb128 0x3
 11305 0cce 91       		.byte	0x91
 11306 0ccf F47E     		.sleb128 -140
 11307 0cd1 22       		.uleb128 0x22
 11308 0cd2 4F080000 		.4byte	.LASF89
 11309 0cd6 02       		.byte	0x2
 11310 0cd7 BD02     		.2byte	0x2bd
 11311 0cd9 79020000 		.4byte	0x279
 11312 0cdd 02       		.uleb128 0x2
 11313 0cde 91       		.byte	0x91
 11314 0cdf 77       		.sleb128 -9
 11315 0ce0 00       		.byte	0
 11316 0ce1 26       		.uleb128 0x26
 11317 0ce2 90040000 		.4byte	.LASF90
 11318 0ce6 03       		.byte	0x3
 11319 0ce7 32       		.byte	0x32
 11320 0ce8 00000000 		.4byte	.LFB25
 11321 0cec 38020000 		.4byte	.LFE25-.LFB25
 11322 0cf0 01       		.uleb128 0x1
 11323 0cf1 9C       		.byte	0x9c
 11324 0cf2 710D0000 		.4byte	0xd71
 11325 0cf6 1D       		.uleb128 0x1d
 11326 0cf7 583100   		.ascii	"X1\000"
 11327 0cfa 03       		.byte	0x3
 11328 0cfb 32       		.byte	0x32
 11329 0cfc D0020000 		.4byte	0x2d0
 11330 0d00 03       		.uleb128 0x3
 11331 0d01 91       		.byte	0x91
 11332 0d02 AC7F     		.sleb128 -84
 11333 0d04 1D       		.uleb128 0x1d
 11334 0d05 593100   		.ascii	"Y1\000"
 11335 0d08 03       		.byte	0x3
 11336 0d09 33       		.byte	0x33
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 262


 11337 0d0a D0020000 		.4byte	0x2d0
 11338 0d0e 03       		.uleb128 0x3
 11339 0d0f 91       		.byte	0x91
 11340 0d10 A87F     		.sleb128 -88
 11341 0d12 1D       		.uleb128 0x1d
 11342 0d13 5A3100   		.ascii	"Z1\000"
 11343 0d16 03       		.byte	0x3
 11344 0d17 34       		.byte	0x34
 11345 0d18 D0020000 		.4byte	0x2d0
 11346 0d1c 03       		.uleb128 0x3
 11347 0d1d 91       		.byte	0x91
 11348 0d1e A47F     		.sleb128 -92
 11349 0d20 14       		.uleb128 0x14
 11350 0d21 E5080000 		.4byte	.LASF50
 11351 0d25 03       		.byte	0x3
 11352 0d26 35       		.byte	0x35
 11353 0d27 D9000000 		.4byte	0xd9
 11354 0d2b 03       		.uleb128 0x3
 11355 0d2c 91       		.byte	0x91
 11356 0d2d A07F     		.sleb128 -96
 11357 0d2f 1E       		.uleb128 0x1e
 11358 0d30 743400   		.ascii	"t4\000"
 11359 0d33 03       		.byte	0x3
 11360 0d34 37       		.byte	0x37
 11361 0d35 8F020000 		.4byte	0x28f
 11362 0d39 02       		.uleb128 0x2
 11363 0d3a 91       		.byte	0x91
 11364 0d3b 50       		.sleb128 -48
 11365 0d3c 1E       		.uleb128 0x1e
 11366 0d3d 743500   		.ascii	"t5\000"
 11367 0d40 03       		.byte	0x3
 11368 0d41 38       		.byte	0x38
 11369 0d42 8F020000 		.4byte	0x28f
 11370 0d46 03       		.uleb128 0x3
 11371 0d47 91       		.byte	0x91
 11372 0d48 B07F     		.sleb128 -80
 11373 0d4a 15       		.uleb128 0x15
 11374 0d4b B9030000 		.4byte	.LASF20
 11375 0d4f 03       		.byte	0x3
 11376 0d50 39       		.byte	0x39
 11377 0d51 63020000 		.4byte	0x263
 11378 0d55 02       		.uleb128 0x2
 11379 0d56 91       		.byte	0x91
 11380 0d57 77       		.sleb128 -9
 11381 0d58 23       		.uleb128 0x23
 11382 0d59 06010000 		.4byte	.LBB6
 11383 0d5d 5C000000 		.4byte	.LBE6-.LBB6
 11384 0d61 15       		.uleb128 0x15
 11385 0d62 5B000000 		.4byte	.LASF91
 11386 0d66 03       		.byte	0x3
 11387 0d67 4D       		.byte	0x4d
 11388 0d68 84020000 		.4byte	0x284
 11389 0d6c 02       		.uleb128 0x2
 11390 0d6d 91       		.byte	0x91
 11391 0d6e 70       		.sleb128 -16
 11392 0d6f 00       		.byte	0
 11393 0d70 00       		.byte	0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 263


 11394 0d71 26       		.uleb128 0x26
 11395 0d72 DF030000 		.4byte	.LASF92
 11396 0d76 03       		.byte	0x3
 11397 0d77 62       		.byte	0x62
 11398 0d78 00000000 		.4byte	.LFB26
 11399 0d7c 7E000000 		.4byte	.LFE26-.LFB26
 11400 0d80 01       		.uleb128 0x1
 11401 0d81 9C       		.byte	0x9c
 11402 0d82 CA0D0000 		.4byte	0xdca
 11403 0d86 14       		.uleb128 0x14
 11404 0d87 330A0000 		.4byte	.LASF40
 11405 0d8b 03       		.byte	0x3
 11406 0d8c 62       		.byte	0x62
 11407 0d8d D0020000 		.4byte	0x2d0
 11408 0d91 02       		.uleb128 0x2
 11409 0d92 91       		.byte	0x91
 11410 0d93 4C       		.sleb128 -52
 11411 0d94 1D       		.uleb128 0x1d
 11412 0d95 7800     		.ascii	"x\000"
 11413 0d97 03       		.byte	0x3
 11414 0d98 62       		.byte	0x62
 11415 0d99 07030000 		.4byte	0x307
 11416 0d9d 02       		.uleb128 0x2
 11417 0d9e 91       		.byte	0x91
 11418 0d9f 48       		.sleb128 -56
 11419 0da0 14       		.uleb128 0x14
 11420 0da1 E5080000 		.4byte	.LASF50
 11421 0da5 03       		.byte	0x3
 11422 0da6 62       		.byte	0x62
 11423 0da7 D9000000 		.4byte	0xd9
 11424 0dab 02       		.uleb128 0x2
 11425 0dac 91       		.byte	0x91
 11426 0dad 44       		.sleb128 -60
 11427 0dae 1E       		.uleb128 0x1e
 11428 0daf 5F3300   		.ascii	"_3\000"
 11429 0db2 03       		.byte	0x3
 11430 0db3 63       		.byte	0x63
 11431 0db4 8F020000 		.4byte	0x28f
 11432 0db8 02       		.uleb128 0x2
 11433 0db9 91       		.byte	0x91
 11434 0dba 54       		.sleb128 -44
 11435 0dbb 15       		.uleb128 0x15
 11436 0dbc B9030000 		.4byte	.LASF20
 11437 0dc0 03       		.byte	0x3
 11438 0dc1 64       		.byte	0x64
 11439 0dc2 63020000 		.4byte	0x263
 11440 0dc6 02       		.uleb128 0x2
 11441 0dc7 91       		.byte	0x91
 11442 0dc8 77       		.sleb128 -9
 11443 0dc9 00       		.byte	0
 11444 0dca 26       		.uleb128 0x26
 11445 0dcb EE030000 		.4byte	.LASF93
 11446 0dcf 03       		.byte	0x3
 11447 0dd0 71       		.byte	0x71
 11448 0dd1 00000000 		.4byte	.LFB27
 11449 0dd5 D2000000 		.4byte	.LFE27-.LFB27
 11450 0dd9 01       		.uleb128 0x1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 264


 11451 0dda 9C       		.byte	0x9c
 11452 0ddb 320E0000 		.4byte	0xe32
 11453 0ddf 1D       		.uleb128 0x1d
 11454 0de0 6100     		.ascii	"a\000"
 11455 0de2 03       		.byte	0x3
 11456 0de3 71       		.byte	0x71
 11457 0de4 D0020000 		.4byte	0x2d0
 11458 0de8 03       		.uleb128 0x3
 11459 0de9 91       		.byte	0x91
 11460 0dea AC7F     		.sleb128 -84
 11461 0dec 14       		.uleb128 0x14
 11462 0ded E5080000 		.4byte	.LASF50
 11463 0df1 03       		.byte	0x3
 11464 0df2 71       		.byte	0x71
 11465 0df3 D9000000 		.4byte	0xd9
 11466 0df7 03       		.uleb128 0x3
 11467 0df8 91       		.byte	0x91
 11468 0df9 A87F     		.sleb128 -88
 11469 0dfb 1E       		.uleb128 0x1e
 11470 0dfc 6900     		.ascii	"i\000"
 11471 0dfe 03       		.byte	0x3
 11472 0dff 72       		.byte	0x72
 11473 0e00 6E020000 		.4byte	0x26e
 11474 0e04 02       		.uleb128 0x2
 11475 0e05 91       		.byte	0x91
 11476 0e06 76       		.sleb128 -10
 11477 0e07 1E       		.uleb128 0x1e
 11478 0e08 703100   		.ascii	"p1\000"
 11479 0e0b 03       		.byte	0x3
 11480 0e0c 73       		.byte	0x73
 11481 0e0d 8F020000 		.4byte	0x28f
 11482 0e11 02       		.uleb128 0x2
 11483 0e12 91       		.byte	0x91
 11484 0e13 54       		.sleb128 -44
 11485 0e14 15       		.uleb128 0x15
 11486 0e15 AB050000 		.4byte	.LASF94
 11487 0e19 03       		.byte	0x3
 11488 0e1a 74       		.byte	0x74
 11489 0e1b 8F020000 		.4byte	0x28f
 11490 0e1f 03       		.uleb128 0x3
 11491 0e20 91       		.byte	0x91
 11492 0e21 B47F     		.sleb128 -76
 11493 0e23 15       		.uleb128 0x15
 11494 0e24 B9030000 		.4byte	.LASF20
 11495 0e28 03       		.byte	0x3
 11496 0e29 75       		.byte	0x75
 11497 0e2a 63020000 		.4byte	0x263
 11498 0e2e 02       		.uleb128 0x2
 11499 0e2f 91       		.byte	0x91
 11500 0e30 75       		.sleb128 -11
 11501 0e31 00       		.byte	0
 11502 0e32 1A       		.uleb128 0x1a
 11503 0e33 B1060000 		.4byte	.LASF96
 11504 0e37 03       		.byte	0x3
 11505 0e38 A9       		.byte	0xa9
 11506 0e39 D9000000 		.4byte	0xd9
 11507 0e3d 00000000 		.4byte	.LFB28
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 265


 11508 0e41 0C000000 		.4byte	.LFE28-.LFB28
 11509 0e45 01       		.uleb128 0x1
 11510 0e46 9C       		.byte	0x9c
 11511 0e47 26       		.uleb128 0x26
 11512 0e48 00000000 		.4byte	.LASF97
 11513 0e4c 03       		.byte	0x3
 11514 0e4d D7       		.byte	0xd7
 11515 0e4e 00000000 		.4byte	.LFB29
 11516 0e52 AC000000 		.4byte	.LFE29-.LFB29
 11517 0e56 01       		.uleb128 0x1
 11518 0e57 9C       		.byte	0x9c
 11519 0e58 950E0000 		.4byte	0xe95
 11520 0e5c 14       		.uleb128 0x14
 11521 0e5d 330A0000 		.4byte	.LASF40
 11522 0e61 03       		.byte	0x3
 11523 0e62 D7       		.byte	0xd7
 11524 0e63 D0020000 		.4byte	0x2d0
 11525 0e67 02       		.uleb128 0x2
 11526 0e68 91       		.byte	0x91
 11527 0e69 44       		.sleb128 -60
 11528 0e6a 14       		.uleb128 0x14
 11529 0e6b 01020000 		.4byte	.LASF76
 11530 0e6f 03       		.byte	0x3
 11531 0e70 D7       		.byte	0xd7
 11532 0e71 D0020000 		.4byte	0x2d0
 11533 0e75 02       		.uleb128 0x2
 11534 0e76 91       		.byte	0x91
 11535 0e77 40       		.sleb128 -64
 11536 0e78 1E       		.uleb128 0x1e
 11537 0e79 746D7000 		.ascii	"tmp\000"
 11538 0e7d 03       		.byte	0x3
 11539 0e7e D8       		.byte	0xd8
 11540 0e7f 950E0000 		.4byte	0xe95
 11541 0e83 02       		.uleb128 0x2
 11542 0e84 91       		.byte	0x91
 11543 0e85 4C       		.sleb128 -52
 11544 0e86 15       		.uleb128 0x15
 11545 0e87 A5050000 		.4byte	.LASF44
 11546 0e8b 03       		.byte	0x3
 11547 0e8c D9       		.byte	0xd9
 11548 0e8d 84020000 		.4byte	0x284
 11549 0e91 02       		.uleb128 0x2
 11550 0e92 91       		.byte	0x91
 11551 0e93 74       		.sleb128 -12
 11552 0e94 00       		.byte	0
 11553 0e95 11       		.uleb128 0x11
 11554 0e96 84020000 		.4byte	0x284
 11555 0e9a A50E0000 		.4byte	0xea5
 11556 0e9e 12       		.uleb128 0x12
 11557 0e9f 9F020000 		.4byte	0x29f
 11558 0ea3 09       		.byte	0x9
 11559 0ea4 00       		.byte	0
 11560 0ea5 25       		.uleb128 0x25
 11561 0ea6 C0060000 		.4byte	.LASF98
 11562 0eaa 03       		.byte	0x3
 11563 0eab 0101     		.2byte	0x101
 11564 0ead 00000000 		.4byte	.LFB30
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 266


 11565 0eb1 92000000 		.4byte	.LFE30-.LFB30
 11566 0eb5 01       		.uleb128 0x1
 11567 0eb6 9C       		.byte	0x9c
 11568 0eb7 0F0F0000 		.4byte	0xf0f
 11569 0ebb 17       		.uleb128 0x17
 11570 0ebc 330A0000 		.4byte	.LASF40
 11571 0ec0 03       		.byte	0x3
 11572 0ec1 0101     		.2byte	0x101
 11573 0ec3 0F0F0000 		.4byte	0xf0f
 11574 0ec7 02       		.uleb128 0x2
 11575 0ec8 91       		.byte	0x91
 11576 0ec9 5C       		.sleb128 -36
 11577 0eca 17       		.uleb128 0x17
 11578 0ecb 5C010000 		.4byte	.LASF42
 11579 0ecf 03       		.byte	0x3
 11580 0ed0 0101     		.2byte	0x101
 11581 0ed2 150F0000 		.4byte	0xf15
 11582 0ed6 02       		.uleb128 0x2
 11583 0ed7 91       		.byte	0x91
 11584 0ed8 58       		.sleb128 -40
 11585 0ed9 22       		.uleb128 0x22
 11586 0eda A5050000 		.4byte	.LASF44
 11587 0ede 03       		.byte	0x3
 11588 0edf 0201     		.2byte	0x102
 11589 0ee1 C3000000 		.4byte	0xc3
 11590 0ee5 02       		.uleb128 0x2
 11591 0ee6 91       		.byte	0x91
 11592 0ee7 6C       		.sleb128 -20
 11593 0ee8 18       		.uleb128 0x18
 11594 0ee9 6900     		.ascii	"i\000"
 11595 0eeb 03       		.byte	0x3
 11596 0eec 0301     		.2byte	0x103
 11597 0eee 9B000000 		.4byte	0x9b
 11598 0ef2 02       		.uleb128 0x2
 11599 0ef3 91       		.byte	0x91
 11600 0ef4 68       		.sleb128 -24
 11601 0ef5 23       		.uleb128 0x23
 11602 0ef6 42000000 		.4byte	.LBB7
 11603 0efa 3E000000 		.4byte	.LBE7-.LBB7
 11604 0efe 18       		.uleb128 0x18
 11605 0eff 73756D00 		.ascii	"sum\000"
 11606 0f03 03       		.byte	0x3
 11607 0f04 0C01     		.2byte	0x10c
 11608 0f06 CE000000 		.4byte	0xce
 11609 0f0a 02       		.uleb128 0x2
 11610 0f0b 91       		.byte	0x91
 11611 0f0c 60       		.sleb128 -32
 11612 0f0d 00       		.byte	0
 11613 0f0e 00       		.byte	0
 11614 0f0f 05       		.uleb128 0x5
 11615 0f10 04       		.byte	0x4
 11616 0f11 C3000000 		.4byte	0xc3
 11617 0f15 05       		.uleb128 0x5
 11618 0f16 04       		.byte	0x4
 11619 0f17 1B0F0000 		.4byte	0xf1b
 11620 0f1b 09       		.uleb128 0x9
 11621 0f1c C3000000 		.4byte	0xc3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 267


 11622 0f20 27       		.uleb128 0x27
 11623 0f21 93090000 		.4byte	.LASF99
 11624 0f25 03       		.byte	0x3
 11625 0f26 3A01     		.2byte	0x13a
 11626 0f28 D9000000 		.4byte	0xd9
 11627 0f2c 00000000 		.4byte	.LFB31
 11628 0f30 0C000000 		.4byte	.LFE31-.LFB31
 11629 0f34 01       		.uleb128 0x1
 11630 0f35 9C       		.byte	0x9c
 11631 0f36 25       		.uleb128 0x25
 11632 0f37 2F030000 		.4byte	.LASF100
 11633 0f3b 03       		.byte	0x3
 11634 0f3c 6001     		.2byte	0x160
 11635 0f3e 00000000 		.4byte	.LFB32
 11636 0f42 F0000000 		.4byte	.LFE32-.LFB32
 11637 0f46 01       		.uleb128 0x1
 11638 0f47 9C       		.byte	0x9c
 11639 0f48 890F0000 		.4byte	0xf89
 11640 0f4c 17       		.uleb128 0x17
 11641 0f4d 330A0000 		.4byte	.LASF40
 11642 0f51 03       		.byte	0x3
 11643 0f52 6001     		.2byte	0x160
 11644 0f54 0F0F0000 		.4byte	0xf0f
 11645 0f58 02       		.uleb128 0x2
 11646 0f59 91       		.byte	0x91
 11647 0f5a 54       		.sleb128 -44
 11648 0f5b 17       		.uleb128 0x17
 11649 0f5c 01020000 		.4byte	.LASF76
 11650 0f60 03       		.byte	0x3
 11651 0f61 6001     		.2byte	0x160
 11652 0f63 0F0F0000 		.4byte	0xf0f
 11653 0f67 02       		.uleb128 0x2
 11654 0f68 91       		.byte	0x91
 11655 0f69 50       		.sleb128 -48
 11656 0f6a 18       		.uleb128 0x18
 11657 0f6b 746D7000 		.ascii	"tmp\000"
 11658 0f6f 03       		.byte	0x3
 11659 0f70 6101     		.2byte	0x161
 11660 0f72 890F0000 		.4byte	0xf89
 11661 0f76 02       		.uleb128 0x2
 11662 0f77 91       		.byte	0x91
 11663 0f78 5C       		.sleb128 -36
 11664 0f79 22       		.uleb128 0x22
 11665 0f7a A5050000 		.4byte	.LASF44
 11666 0f7e 03       		.byte	0x3
 11667 0f7f 6201     		.2byte	0x162
 11668 0f81 94000000 		.4byte	0x94
 11669 0f85 02       		.uleb128 0x2
 11670 0f86 91       		.byte	0x91
 11671 0f87 74       		.sleb128 -12
 11672 0f88 00       		.byte	0
 11673 0f89 11       		.uleb128 0x11
 11674 0f8a C3000000 		.4byte	0xc3
 11675 0f8e 990F0000 		.4byte	0xf99
 11676 0f92 12       		.uleb128 0x12
 11677 0f93 9F020000 		.4byte	0x29f
 11678 0f97 05       		.byte	0x5
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 268


 11679 0f98 00       		.byte	0
 11680 0f99 27       		.uleb128 0x27
 11681 0f9a 10040000 		.4byte	.LASF101
 11682 0f9e 03       		.byte	0x3
 11683 0f9f C101     		.2byte	0x1c1
 11684 0fa1 D9000000 		.4byte	0xd9
 11685 0fa5 00000000 		.4byte	.LFB33
 11686 0fa9 0C000000 		.4byte	.LFE33-.LFB33
 11687 0fad 01       		.uleb128 0x1
 11688 0fae 9C       		.byte	0x9c
 11689 0faf 25       		.uleb128 0x25
 11690 0fb0 EA060000 		.4byte	.LASF102
 11691 0fb4 03       		.byte	0x3
 11692 0fb5 C601     		.2byte	0x1c6
 11693 0fb7 00000000 		.4byte	.LFB34
 11694 0fbb 88000000 		.4byte	.LFE34-.LFB34
 11695 0fbf 01       		.uleb128 0x1
 11696 0fc0 9C       		.byte	0x9c
 11697 0fc1 27100000 		.4byte	0x1027
 11698 0fc5 20       		.uleb128 0x20
 11699 0fc6 643100   		.ascii	"d1\000"
 11700 0fc9 03       		.byte	0x3
 11701 0fca C601     		.2byte	0x1c6
 11702 0fcc D0020000 		.4byte	0x2d0
 11703 0fd0 02       		.uleb128 0x2
 11704 0fd1 91       		.byte	0x91
 11705 0fd2 54       		.sleb128 -44
 11706 0fd3 20       		.uleb128 0x20
 11707 0fd4 653100   		.ascii	"e1\000"
 11708 0fd7 03       		.byte	0x3
 11709 0fd8 C701     		.2byte	0x1c7
 11710 0fda D0020000 		.4byte	0x2d0
 11711 0fde 02       		.uleb128 0x2
 11712 0fdf 91       		.byte	0x91
 11713 0fe0 50       		.sleb128 -48
 11714 0fe1 20       		.uleb128 0x20
 11715 0fe2 663100   		.ascii	"f1\000"
 11716 0fe5 03       		.byte	0x3
 11717 0fe6 C801     		.2byte	0x1c8
 11718 0fe8 D0020000 		.4byte	0x2d0
 11719 0fec 02       		.uleb128 0x2
 11720 0fed 91       		.byte	0x91
 11721 0fee 4C       		.sleb128 -52
 11722 0fef 20       		.uleb128 0x20
 11723 0ff0 643000   		.ascii	"d0\000"
 11724 0ff3 03       		.byte	0x3
 11725 0ff4 C901     		.2byte	0x1c9
 11726 0ff6 07030000 		.4byte	0x307
 11727 0ffa 02       		.uleb128 0x2
 11728 0ffb 91       		.byte	0x91
 11729 0ffc 48       		.sleb128 -56
 11730 0ffd 20       		.uleb128 0x20
 11731 0ffe 653000   		.ascii	"e0\000"
 11732 1001 03       		.byte	0x3
 11733 1002 CA01     		.2byte	0x1ca
 11734 1004 07030000 		.4byte	0x307
 11735 1008 02       		.uleb128 0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 269


 11736 1009 91       		.byte	0x91
 11737 100a 00       		.sleb128 0
 11738 100b 20       		.uleb128 0x20
 11739 100c 663000   		.ascii	"f0\000"
 11740 100f 03       		.byte	0x3
 11741 1010 CB01     		.2byte	0x1cb
 11742 1012 07030000 		.4byte	0x307
 11743 1016 02       		.uleb128 0x2
 11744 1017 91       		.byte	0x91
 11745 1018 04       		.sleb128 4
 11746 1019 18       		.uleb128 0x18
 11747 101a 7400     		.ascii	"t\000"
 11748 101c 03       		.byte	0x3
 11749 101d CC01     		.2byte	0x1cc
 11750 101f 27100000 		.4byte	0x1027
 11751 1023 02       		.uleb128 0x2
 11752 1024 91       		.byte	0x91
 11753 1025 5C       		.sleb128 -36
 11754 1026 00       		.byte	0
 11755 1027 11       		.uleb128 0x11
 11756 1028 84020000 		.4byte	0x284
 11757 102c 37100000 		.4byte	0x1037
 11758 1030 12       		.uleb128 0x12
 11759 1031 9F020000 		.4byte	0x29f
 11760 1035 06       		.byte	0x6
 11761 1036 00       		.byte	0
 11762 1037 25       		.uleb128 0x25
 11763 1038 23010000 		.4byte	.LASF103
 11764 103c 03       		.byte	0x3
 11765 103d D801     		.2byte	0x1d8
 11766 103f 00000000 		.4byte	.LFB35
 11767 1043 7C000000 		.4byte	.LFE35-.LFB35
 11768 1047 01       		.uleb128 0x1
 11769 1048 9C       		.byte	0x9c
 11770 1049 BC100000 		.4byte	0x10bc
 11771 104d 20       		.uleb128 0x20
 11772 104e 643100   		.ascii	"d1\000"
 11773 1051 03       		.byte	0x3
 11774 1052 D801     		.2byte	0x1d8
 11775 1054 D0020000 		.4byte	0x2d0
 11776 1058 02       		.uleb128 0x2
 11777 1059 91       		.byte	0x91
 11778 105a 6C       		.sleb128 -20
 11779 105b 20       		.uleb128 0x20
 11780 105c 653100   		.ascii	"e1\000"
 11781 105f 03       		.byte	0x3
 11782 1060 D901     		.2byte	0x1d9
 11783 1062 D0020000 		.4byte	0x2d0
 11784 1066 02       		.uleb128 0x2
 11785 1067 91       		.byte	0x91
 11786 1068 68       		.sleb128 -24
 11787 1069 20       		.uleb128 0x20
 11788 106a 663100   		.ascii	"f1\000"
 11789 106d 03       		.byte	0x3
 11790 106e DA01     		.2byte	0x1da
 11791 1070 D0020000 		.4byte	0x2d0
 11792 1074 02       		.uleb128 0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 270


 11793 1075 91       		.byte	0x91
 11794 1076 64       		.sleb128 -28
 11795 1077 20       		.uleb128 0x20
 11796 1078 643000   		.ascii	"d0\000"
 11797 107b 03       		.byte	0x3
 11798 107c DB01     		.2byte	0x1db
 11799 107e 07030000 		.4byte	0x307
 11800 1082 02       		.uleb128 0x2
 11801 1083 91       		.byte	0x91
 11802 1084 60       		.sleb128 -32
 11803 1085 20       		.uleb128 0x20
 11804 1086 653000   		.ascii	"e0\000"
 11805 1089 03       		.byte	0x3
 11806 108a DC01     		.2byte	0x1dc
 11807 108c 07030000 		.4byte	0x307
 11808 1090 02       		.uleb128 0x2
 11809 1091 91       		.byte	0x91
 11810 1092 00       		.sleb128 0
 11811 1093 20       		.uleb128 0x20
 11812 1094 663000   		.ascii	"f0\000"
 11813 1097 03       		.byte	0x3
 11814 1098 DD01     		.2byte	0x1dd
 11815 109a 07030000 		.4byte	0x307
 11816 109e 02       		.uleb128 0x2
 11817 109f 91       		.byte	0x91
 11818 10a0 04       		.sleb128 4
 11819 10a1 20       		.uleb128 0x20
 11820 10a2 6A00     		.ascii	"j\000"
 11821 10a4 03       		.byte	0x3
 11822 10a5 DE01     		.2byte	0x1de
 11823 10a7 BC100000 		.4byte	0x10bc
 11824 10ab 02       		.uleb128 0x2
 11825 10ac 91       		.byte	0x91
 11826 10ad 08       		.sleb128 8
 11827 10ae 18       		.uleb128 0x18
 11828 10af 6900     		.ascii	"i\000"
 11829 10b1 03       		.byte	0x3
 11830 10b2 DF01     		.2byte	0x1df
 11831 10b4 6E020000 		.4byte	0x26e
 11832 10b8 02       		.uleb128 0x2
 11833 10b9 91       		.byte	0x91
 11834 10ba 76       		.sleb128 -10
 11835 10bb 00       		.byte	0
 11836 10bc 09       		.uleb128 0x9
 11837 10bd 6E020000 		.4byte	0x26e
 11838 10c1 25       		.uleb128 0x25
 11839 10c2 B4050000 		.4byte	.LASF104
 11840 10c6 03       		.byte	0x3
 11841 10c7 EA01     		.2byte	0x1ea
 11842 10c9 00000000 		.4byte	.LFB36
 11843 10cd C4000000 		.4byte	.LFE36-.LFB36
 11844 10d1 01       		.uleb128 0x1
 11845 10d2 9C       		.byte	0x9c
 11846 10d3 67110000 		.4byte	0x1167
 11847 10d7 20       		.uleb128 0x20
 11848 10d8 643200   		.ascii	"d2\000"
 11849 10db 03       		.byte	0x3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 271


 11850 10dc EA01     		.2byte	0x1ea
 11851 10de D0020000 		.4byte	0x2d0
 11852 10e2 03       		.uleb128 0x3
 11853 10e3 91       		.byte	0x91
 11854 10e4 BC7F     		.sleb128 -68
 11855 10e6 20       		.uleb128 0x20
 11856 10e7 653200   		.ascii	"e2\000"
 11857 10ea 03       		.byte	0x3
 11858 10eb EB01     		.2byte	0x1eb
 11859 10ed D0020000 		.4byte	0x2d0
 11860 10f1 03       		.uleb128 0x3
 11861 10f2 91       		.byte	0x91
 11862 10f3 B87F     		.sleb128 -72
 11863 10f5 20       		.uleb128 0x20
 11864 10f6 663200   		.ascii	"f2\000"
 11865 10f9 03       		.byte	0x3
 11866 10fa EC01     		.2byte	0x1ec
 11867 10fc D0020000 		.4byte	0x2d0
 11868 1100 03       		.uleb128 0x3
 11869 1101 91       		.byte	0x91
 11870 1102 B47F     		.sleb128 -76
 11871 1104 20       		.uleb128 0x20
 11872 1105 6300     		.ascii	"c\000"
 11873 1107 03       		.byte	0x3
 11874 1108 ED01     		.2byte	0x1ed
 11875 110a 07030000 		.4byte	0x307
 11876 110e 03       		.uleb128 0x3
 11877 110f 91       		.byte	0x91
 11878 1110 B07F     		.sleb128 -80
 11879 1112 20       		.uleb128 0x20
 11880 1113 643000   		.ascii	"d0\000"
 11881 1116 03       		.byte	0x3
 11882 1117 EE01     		.2byte	0x1ee
 11883 1119 07030000 		.4byte	0x307
 11884 111d 02       		.uleb128 0x2
 11885 111e 91       		.byte	0x91
 11886 111f 00       		.sleb128 0
 11887 1120 20       		.uleb128 0x20
 11888 1121 653000   		.ascii	"e0\000"
 11889 1124 03       		.byte	0x3
 11890 1125 EF01     		.2byte	0x1ef
 11891 1127 07030000 		.4byte	0x307
 11892 112b 02       		.uleb128 0x2
 11893 112c 91       		.byte	0x91
 11894 112d 04       		.sleb128 4
 11895 112e 20       		.uleb128 0x20
 11896 112f 643100   		.ascii	"d1\000"
 11897 1132 03       		.byte	0x3
 11898 1133 F001     		.2byte	0x1f0
 11899 1135 07030000 		.4byte	0x307
 11900 1139 02       		.uleb128 0x2
 11901 113a 91       		.byte	0x91
 11902 113b 08       		.sleb128 8
 11903 113c 20       		.uleb128 0x20
 11904 113d 653100   		.ascii	"e1\000"
 11905 1140 03       		.byte	0x3
 11906 1141 F101     		.2byte	0x1f1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 272


 11907 1143 07030000 		.4byte	0x307
 11908 1147 02       		.uleb128 0x2
 11909 1148 91       		.byte	0x91
 11910 1149 0C       		.sleb128 12
 11911 114a 18       		.uleb128 0x18
 11912 114b 743100   		.ascii	"t1\000"
 11913 114e 03       		.byte	0x3
 11914 114f F201     		.2byte	0x1f2
 11915 1151 27100000 		.4byte	0x1027
 11916 1155 02       		.uleb128 0x2
 11917 1156 91       		.byte	0x91
 11918 1157 5C       		.sleb128 -36
 11919 1158 18       		.uleb128 0x18
 11920 1159 743200   		.ascii	"t2\000"
 11921 115c 03       		.byte	0x3
 11922 115d F301     		.2byte	0x1f3
 11923 115f 27100000 		.4byte	0x1027
 11924 1163 02       		.uleb128 0x2
 11925 1164 91       		.byte	0x91
 11926 1165 40       		.sleb128 -64
 11927 1166 00       		.byte	0
 11928 1167 25       		.uleb128 0x25
 11929 1168 9B060000 		.4byte	.LASF105
 11930 116c 03       		.byte	0x3
 11931 116d 0602     		.2byte	0x206
 11932 116f 00000000 		.4byte	.LFB37
 11933 1173 F0000000 		.4byte	.LFE37-.LFB37
 11934 1177 01       		.uleb128 0x1
 11935 1178 9C       		.byte	0x9c
 11936 1179 0E120000 		.4byte	0x120e
 11937 117d 20       		.uleb128 0x20
 11938 117e 643100   		.ascii	"d1\000"
 11939 1181 03       		.byte	0x3
 11940 1182 0602     		.2byte	0x206
 11941 1184 D0020000 		.4byte	0x2d0
 11942 1188 03       		.uleb128 0x3
 11943 1189 91       		.byte	0x91
 11944 118a 9C7F     		.sleb128 -100
 11945 118c 20       		.uleb128 0x20
 11946 118d 653100   		.ascii	"e1\000"
 11947 1190 03       		.byte	0x3
 11948 1191 0702     		.2byte	0x207
 11949 1193 D0020000 		.4byte	0x2d0
 11950 1197 03       		.uleb128 0x3
 11951 1198 91       		.byte	0x91
 11952 1199 987F     		.sleb128 -104
 11953 119b 20       		.uleb128 0x20
 11954 119c 663100   		.ascii	"f1\000"
 11955 119f 03       		.byte	0x3
 11956 11a0 0802     		.2byte	0x208
 11957 11a2 D0020000 		.4byte	0x2d0
 11958 11a6 03       		.uleb128 0x3
 11959 11a7 91       		.byte	0x91
 11960 11a8 947F     		.sleb128 -108
 11961 11aa 20       		.uleb128 0x20
 11962 11ab 6300     		.ascii	"c\000"
 11963 11ad 03       		.byte	0x3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 273


 11964 11ae 0902     		.2byte	0x209
 11965 11b0 07030000 		.4byte	0x307
 11966 11b4 03       		.uleb128 0x3
 11967 11b5 91       		.byte	0x91
 11968 11b6 907F     		.sleb128 -112
 11969 11b8 20       		.uleb128 0x20
 11970 11b9 7200     		.ascii	"r\000"
 11971 11bb 03       		.byte	0x3
 11972 11bc 0A02     		.2byte	0x20a
 11973 11be 07030000 		.4byte	0x307
 11974 11c2 02       		.uleb128 0x2
 11975 11c3 91       		.byte	0x91
 11976 11c4 00       		.sleb128 0
 11977 11c5 18       		.uleb128 0x18
 11978 11c6 6900     		.ascii	"i\000"
 11979 11c8 03       		.byte	0x3
 11980 11c9 0B02     		.2byte	0x20b
 11981 11cb 63020000 		.4byte	0x263
 11982 11cf 02       		.uleb128 0x2
 11983 11d0 91       		.byte	0x91
 11984 11d1 77       		.sleb128 -9
 11985 11d2 22       		.uleb128 0x22
 11986 11d3 CD080000 		.4byte	.LASF106
 11987 11d7 03       		.byte	0x3
 11988 11d8 0C02     		.2byte	0x20c
 11989 11da 63020000 		.4byte	0x263
 11990 11de 02       		.uleb128 0x2
 11991 11df 91       		.byte	0x91
 11992 11e0 76       		.sleb128 -10
 11993 11e1 18       		.uleb128 0x18
 11994 11e2 643000   		.ascii	"d0\000"
 11995 11e5 03       		.byte	0x3
 11996 11e6 0D02     		.2byte	0x20d
 11997 11e8 27100000 		.4byte	0x1027
 11998 11ec 02       		.uleb128 0x2
 11999 11ed 91       		.byte	0x91
 12000 11ee 58       		.sleb128 -40
 12001 11ef 18       		.uleb128 0x18
 12002 11f0 653000   		.ascii	"e0\000"
 12003 11f3 03       		.byte	0x3
 12004 11f4 0E02     		.2byte	0x20e
 12005 11f6 27100000 		.4byte	0x1027
 12006 11fa 03       		.uleb128 0x3
 12007 11fb 91       		.byte	0x91
 12008 11fc BC7F     		.sleb128 -68
 12009 11fe 18       		.uleb128 0x18
 12010 11ff 663000   		.ascii	"f0\000"
 12011 1202 03       		.byte	0x3
 12012 1203 0F02     		.2byte	0x20f
 12013 1205 27100000 		.4byte	0x1027
 12014 1209 03       		.uleb128 0x3
 12015 120a 91       		.byte	0x91
 12016 120b A07F     		.sleb128 -96
 12017 120d 00       		.byte	0
 12018 120e 25       		.uleb128 0x25
 12019 120f DF070000 		.4byte	.LASF107
 12020 1213 03       		.byte	0x3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 274


 12021 1214 2002     		.2byte	0x220
 12022 1216 00000000 		.4byte	.LFB38
 12023 121a CC000000 		.4byte	.LFE38-.LFB38
 12024 121e 01       		.uleb128 0x1
 12025 121f 9C       		.byte	0x9c
 12026 1220 A9120000 		.4byte	0x12a9
 12027 1224 20       		.uleb128 0x20
 12028 1225 6100     		.ascii	"a\000"
 12029 1227 03       		.byte	0x3
 12030 1228 2002     		.2byte	0x220
 12031 122a D0020000 		.4byte	0x2d0
 12032 122e 03       		.uleb128 0x3
 12033 122f 91       		.byte	0x91
 12034 1230 C47E     		.sleb128 -188
 12035 1232 17       		.uleb128 0x17
 12036 1233 E5080000 		.4byte	.LASF50
 12037 1237 03       		.byte	0x3
 12038 1238 2002     		.2byte	0x220
 12039 123a D9000000 		.4byte	0xd9
 12040 123e 03       		.uleb128 0x3
 12041 123f 91       		.byte	0x91
 12042 1240 C07E     		.sleb128 -192
 12043 1242 18       		.uleb128 0x18
 12044 1243 6900     		.ascii	"i\000"
 12045 1245 03       		.byte	0x3
 12046 1246 2102     		.2byte	0x221
 12047 1248 6E020000 		.4byte	0x26e
 12048 124c 02       		.uleb128 0x2
 12049 124d 91       		.byte	0x91
 12050 124e 76       		.sleb128 -10
 12051 124f 18       		.uleb128 0x18
 12052 1250 653100   		.ascii	"e1\000"
 12053 1253 03       		.byte	0x3
 12054 1254 2202     		.2byte	0x222
 12055 1256 27100000 		.4byte	0x1027
 12056 125a 02       		.uleb128 0x2
 12057 125b 91       		.byte	0x91
 12058 125c 58       		.sleb128 -40
 12059 125d 18       		.uleb128 0x18
 12060 125e 663100   		.ascii	"f1\000"
 12061 1261 03       		.byte	0x3
 12062 1262 2302     		.2byte	0x223
 12063 1264 27100000 		.4byte	0x1027
 12064 1268 03       		.uleb128 0x3
 12065 1269 91       		.byte	0x91
 12066 126a BC7F     		.sleb128 -68
 12067 126c 18       		.uleb128 0x18
 12068 126d 643000   		.ascii	"d0\000"
 12069 1270 03       		.byte	0x3
 12070 1271 2402     		.2byte	0x224
 12071 1273 27100000 		.4byte	0x1027
 12072 1277 03       		.uleb128 0x3
 12073 1278 91       		.byte	0x91
 12074 1279 A07F     		.sleb128 -96
 12075 127b 18       		.uleb128 0x18
 12076 127c 653000   		.ascii	"e0\000"
 12077 127f 03       		.byte	0x3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 275


 12078 1280 2502     		.2byte	0x225
 12079 1282 27100000 		.4byte	0x1027
 12080 1286 03       		.uleb128 0x3
 12081 1287 91       		.byte	0x91
 12082 1288 847F     		.sleb128 -124
 12083 128a 18       		.uleb128 0x18
 12084 128b 663000   		.ascii	"f0\000"
 12085 128e 03       		.byte	0x3
 12086 128f 2602     		.2byte	0x226
 12087 1291 27100000 		.4byte	0x1027
 12088 1295 03       		.uleb128 0x3
 12089 1296 91       		.byte	0x91
 12090 1297 E87E     		.sleb128 -152
 12091 1299 18       		.uleb128 0x18
 12092 129a 643100   		.ascii	"d1\000"
 12093 129d 03       		.byte	0x3
 12094 129e 2702     		.2byte	0x227
 12095 12a0 27100000 		.4byte	0x1027
 12096 12a4 03       		.uleb128 0x3
 12097 12a5 91       		.byte	0x91
 12098 12a6 CC7E     		.sleb128 -180
 12099 12a8 00       		.byte	0
 12100 12a9 25       		.uleb128 0x25
 12101 12aa A1030000 		.4byte	.LASF108
 12102 12ae 03       		.byte	0x3
 12103 12af 7502     		.2byte	0x275
 12104 12b1 00000000 		.4byte	.LFB39
 12105 12b5 7C010000 		.4byte	.LFE39-.LFB39
 12106 12b9 01       		.uleb128 0x1
 12107 12ba 9C       		.byte	0x9c
 12108 12bb FC120000 		.4byte	0x12fc
 12109 12bf 17       		.uleb128 0x17
 12110 12c0 330A0000 		.4byte	.LASF40
 12111 12c4 03       		.byte	0x3
 12112 12c5 7502     		.2byte	0x275
 12113 12c7 0F0F0000 		.4byte	0xf0f
 12114 12cb 02       		.uleb128 0x2
 12115 12cc 91       		.byte	0x91
 12116 12cd 54       		.sleb128 -44
 12117 12ce 17       		.uleb128 0x17
 12118 12cf 01020000 		.4byte	.LASF76
 12119 12d3 03       		.byte	0x3
 12120 12d4 7502     		.2byte	0x275
 12121 12d6 0F0F0000 		.4byte	0xf0f
 12122 12da 02       		.uleb128 0x2
 12123 12db 91       		.byte	0x91
 12124 12dc 50       		.sleb128 -48
 12125 12dd 18       		.uleb128 0x18
 12126 12de 746D7000 		.ascii	"tmp\000"
 12127 12e2 03       		.byte	0x3
 12128 12e3 7702     		.2byte	0x277
 12129 12e5 FC120000 		.4byte	0x12fc
 12130 12e9 02       		.uleb128 0x2
 12131 12ea 91       		.byte	0x91
 12132 12eb 58       		.sleb128 -40
 12133 12ec 22       		.uleb128 0x22
 12134 12ed A5050000 		.4byte	.LASF44
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 276


 12135 12f1 03       		.byte	0x3
 12136 12f2 7802     		.2byte	0x278
 12137 12f4 94000000 		.4byte	0x94
 12138 12f8 02       		.uleb128 0x2
 12139 12f9 91       		.byte	0x91
 12140 12fa 74       		.sleb128 -12
 12141 12fb 00       		.byte	0
 12142 12fc 11       		.uleb128 0x11
 12143 12fd C3000000 		.4byte	0xc3
 12144 1301 0C130000 		.4byte	0x130c
 12145 1305 12       		.uleb128 0x12
 12146 1306 9F020000 		.4byte	0x29f
 12147 130a 06       		.byte	0x6
 12148 130b 00       		.byte	0
 12149 130c 27       		.uleb128 0x27
 12150 130d F2020000 		.4byte	.LASF109
 12151 1311 03       		.byte	0x3
 12152 1312 0303     		.2byte	0x303
 12153 1314 D9000000 		.4byte	0xd9
 12154 1318 00000000 		.4byte	.LFB40
 12155 131c 0C000000 		.4byte	.LFE40-.LFB40
 12156 1320 01       		.uleb128 0x1
 12157 1321 9C       		.byte	0x9c
 12158 1322 25       		.uleb128 0x25
 12159 1323 34000000 		.4byte	.LASF110
 12160 1327 03       		.byte	0x3
 12161 1328 7303     		.2byte	0x373
 12162 132a 00000000 		.4byte	.LFB41
 12163 132e 08030000 		.4byte	.LFE41-.LFB41
 12164 1332 01       		.uleb128 0x1
 12165 1333 9C       		.byte	0x9c
 12166 1334 75130000 		.4byte	0x1375
 12167 1338 17       		.uleb128 0x17
 12168 1339 330A0000 		.4byte	.LASF40
 12169 133d 03       		.byte	0x3
 12170 133e 7303     		.2byte	0x373
 12171 1340 0F0F0000 		.4byte	0xf0f
 12172 1344 02       		.uleb128 0x2
 12173 1345 91       		.byte	0x91
 12174 1346 4C       		.sleb128 -52
 12175 1347 17       		.uleb128 0x17
 12176 1348 01020000 		.4byte	.LASF76
 12177 134c 03       		.byte	0x3
 12178 134d 7303     		.2byte	0x373
 12179 134f 0F0F0000 		.4byte	0xf0f
 12180 1353 02       		.uleb128 0x2
 12181 1354 91       		.byte	0x91
 12182 1355 48       		.sleb128 -56
 12183 1356 18       		.uleb128 0x18
 12184 1357 746D7000 		.ascii	"tmp\000"
 12185 135b 03       		.byte	0x3
 12186 135c 7403     		.2byte	0x374
 12187 135e 75130000 		.4byte	0x1375
 12188 1362 02       		.uleb128 0x2
 12189 1363 91       		.byte	0x91
 12190 1364 54       		.sleb128 -44
 12191 1365 22       		.uleb128 0x22
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 277


 12192 1366 A5050000 		.4byte	.LASF44
 12193 136a 03       		.byte	0x3
 12194 136b 7503     		.2byte	0x375
 12195 136d 94000000 		.4byte	0x94
 12196 1371 02       		.uleb128 0x2
 12197 1372 91       		.byte	0x91
 12198 1373 74       		.sleb128 -12
 12199 1374 00       		.byte	0
 12200 1375 11       		.uleb128 0x11
 12201 1376 C3000000 		.4byte	0xc3
 12202 137a 85130000 		.4byte	0x1385
 12203 137e 12       		.uleb128 0x12
 12204 137f 9F020000 		.4byte	0x29f
 12205 1383 07       		.byte	0x7
 12206 1384 00       		.byte	0
 12207 1385 27       		.uleb128 0x27
 12208 1386 4C000000 		.4byte	.LASF111
 12209 138a 03       		.byte	0x3
 12210 138b 5204     		.2byte	0x452
 12211 138d D9000000 		.4byte	0xd9
 12212 1391 00000000 		.4byte	.LFB42
 12213 1395 0C000000 		.4byte	.LFE42-.LFB42
 12214 1399 01       		.uleb128 0x1
 12215 139a 9C       		.byte	0x9c
 12216 139b 25       		.uleb128 0x25
 12217 139c 42090000 		.4byte	.LASF112
 12218 13a0 03       		.byte	0x3
 12219 13a1 5604     		.2byte	0x456
 12220 13a3 00000000 		.4byte	.LFB43
 12221 13a7 38010000 		.4byte	.LFE43-.LFB43
 12222 13ab 01       		.uleb128 0x1
 12223 13ac 9C       		.byte	0x9c
 12224 13ad 25140000 		.4byte	0x1425
 12225 13b1 20       		.uleb128 0x20
 12226 13b2 583100   		.ascii	"X1\000"
 12227 13b5 03       		.byte	0x3
 12228 13b6 5604     		.2byte	0x456
 12229 13b8 D0020000 		.4byte	0x2d0
 12230 13bc 03       		.uleb128 0x3
 12231 13bd 91       		.byte	0x91
 12232 13be AC7F     		.sleb128 -84
 12233 13c0 20       		.uleb128 0x20
 12234 13c1 593100   		.ascii	"Y1\000"
 12235 13c4 03       		.byte	0x3
 12236 13c5 5704     		.2byte	0x457
 12237 13c7 D0020000 		.4byte	0x2d0
 12238 13cb 03       		.uleb128 0x3
 12239 13cc 91       		.byte	0x91
 12240 13cd A87F     		.sleb128 -88
 12241 13cf 20       		.uleb128 0x20
 12242 13d0 5A3100   		.ascii	"Z1\000"
 12243 13d3 03       		.byte	0x3
 12244 13d4 5804     		.2byte	0x458
 12245 13d6 D0020000 		.4byte	0x2d0
 12246 13da 03       		.uleb128 0x3
 12247 13db 91       		.byte	0x91
 12248 13dc A47F     		.sleb128 -92
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 278


 12249 13de 17       		.uleb128 0x17
 12250 13df E5080000 		.4byte	.LASF50
 12251 13e3 03       		.byte	0x3
 12252 13e4 5904     		.2byte	0x459
 12253 13e6 D9000000 		.4byte	0xd9
 12254 13ea 03       		.uleb128 0x3
 12255 13eb 91       		.byte	0x91
 12256 13ec A07F     		.sleb128 -96
 12257 13ee 18       		.uleb128 0x18
 12258 13ef 743400   		.ascii	"t4\000"
 12259 13f2 03       		.byte	0x3
 12260 13f3 5B04     		.2byte	0x45b
 12261 13f5 8F020000 		.4byte	0x28f
 12262 13f9 02       		.uleb128 0x2
 12263 13fa 91       		.byte	0x91
 12264 13fb 54       		.sleb128 -44
 12265 13fc 18       		.uleb128 0x18
 12266 13fd 743500   		.ascii	"t5\000"
 12267 1400 03       		.byte	0x3
 12268 1401 5C04     		.2byte	0x45c
 12269 1403 8F020000 		.4byte	0x28f
 12270 1407 03       		.uleb128 0x3
 12271 1408 91       		.byte	0x91
 12272 1409 B47F     		.sleb128 -76
 12273 140b 23       		.uleb128 0x23
 12274 140c 8E000000 		.4byte	.LBB8
 12275 1410 2E000000 		.4byte	.LBE8-.LBB8
 12276 1414 22       		.uleb128 0x22
 12277 1415 A5050000 		.4byte	.LASF44
 12278 1419 03       		.byte	0x3
 12279 141a 6B04     		.2byte	0x46b
 12280 141c 84020000 		.4byte	0x284
 12281 1420 02       		.uleb128 0x2
 12282 1421 91       		.byte	0x91
 12283 1422 74       		.sleb128 -12
 12284 1423 00       		.byte	0
 12285 1424 00       		.byte	0
 12286 1425 25       		.uleb128 0x25
 12287 1426 C2010000 		.4byte	.LASF113
 12288 142a 03       		.byte	0x3
 12289 142b 7D04     		.2byte	0x47d
 12290 142d 00000000 		.4byte	.LFB44
 12291 1431 40000000 		.4byte	.LFE44-.LFB44
 12292 1435 01       		.uleb128 0x1
 12293 1436 9C       		.byte	0x9c
 12294 1437 67140000 		.4byte	0x1467
 12295 143b 17       		.uleb128 0x17
 12296 143c 330A0000 		.4byte	.LASF40
 12297 1440 03       		.byte	0x3
 12298 1441 7D04     		.2byte	0x47d
 12299 1443 D0020000 		.4byte	0x2d0
 12300 1447 02       		.uleb128 0x2
 12301 1448 91       		.byte	0x91
 12302 1449 74       		.sleb128 -12
 12303 144a 20       		.uleb128 0x20
 12304 144b 7800     		.ascii	"x\000"
 12305 144d 03       		.byte	0x3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 279


 12306 144e 7D04     		.2byte	0x47d
 12307 1450 07030000 		.4byte	0x307
 12308 1454 02       		.uleb128 0x2
 12309 1455 91       		.byte	0x91
 12310 1456 70       		.sleb128 -16
 12311 1457 17       		.uleb128 0x17
 12312 1458 E5080000 		.4byte	.LASF50
 12313 145c 03       		.byte	0x3
 12314 145d 7D04     		.2byte	0x47d
 12315 145f D9000000 		.4byte	0xd9
 12316 1463 02       		.uleb128 0x2
 12317 1464 91       		.byte	0x91
 12318 1465 6C       		.sleb128 -20
 12319 1466 00       		.byte	0
 12320 1467 25       		.uleb128 0x25
 12321 1468 8C000000 		.4byte	.LASF114
 12322 146c 03       		.byte	0x3
 12323 146d 8504     		.2byte	0x485
 12324 146f 00000000 		.4byte	.LFB45
 12325 1473 AC000000 		.4byte	.LFE45-.LFB45
 12326 1477 01       		.uleb128 0x1
 12327 1478 9C       		.byte	0x9c
 12328 1479 BD140000 		.4byte	0x14bd
 12329 147d 17       		.uleb128 0x17
 12330 147e 330A0000 		.4byte	.LASF40
 12331 1482 03       		.byte	0x3
 12332 1483 8504     		.2byte	0x485
 12333 1485 D0020000 		.4byte	0x2d0
 12334 1489 03       		.uleb128 0x3
 12335 148a 91       		.byte	0x91
 12336 148b AC7F     		.sleb128 -84
 12337 148d 17       		.uleb128 0x17
 12338 148e 01020000 		.4byte	.LASF76
 12339 1492 03       		.byte	0x3
 12340 1493 8504     		.2byte	0x485
 12341 1495 D0020000 		.4byte	0x2d0
 12342 1499 03       		.uleb128 0x3
 12343 149a 91       		.byte	0x91
 12344 149b A87F     		.sleb128 -88
 12345 149d 18       		.uleb128 0x18
 12346 149e 746D7000 		.ascii	"tmp\000"
 12347 14a2 03       		.byte	0x3
 12348 14a3 8604     		.2byte	0x486
 12349 14a5 A6020000 		.4byte	0x2a6
 12350 14a9 03       		.uleb128 0x3
 12351 14aa 91       		.byte	0x91
 12352 14ab B47F     		.sleb128 -76
 12353 14ad 22       		.uleb128 0x22
 12354 14ae A5050000 		.4byte	.LASF44
 12355 14b2 03       		.byte	0x3
 12356 14b3 8704     		.2byte	0x487
 12357 14b5 84020000 		.4byte	0x284
 12358 14b9 02       		.uleb128 0x2
 12359 14ba 91       		.byte	0x91
 12360 14bb 74       		.sleb128 -12
 12361 14bc 00       		.byte	0
 12362 14bd 25       		.uleb128 0x25
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 280


 12363 14be C7000000 		.4byte	.LASF115
 12364 14c2 03       		.byte	0x3
 12365 14c3 BB04     		.2byte	0x4bb
 12366 14c5 00000000 		.4byte	.LFB46
 12367 14c9 CC000000 		.4byte	.LFE46-.LFB46
 12368 14cd 01       		.uleb128 0x1
 12369 14ce 9C       		.byte	0x9c
 12370 14cf 25150000 		.4byte	0x1525
 12371 14d3 17       		.uleb128 0x17
 12372 14d4 330A0000 		.4byte	.LASF40
 12373 14d8 03       		.byte	0x3
 12374 14d9 BB04     		.2byte	0x4bb
 12375 14db 0F0F0000 		.4byte	0xf0f
 12376 14df 02       		.uleb128 0x2
 12377 14e0 91       		.byte	0x91
 12378 14e1 5C       		.sleb128 -36
 12379 14e2 17       		.uleb128 0x17
 12380 14e3 5C010000 		.4byte	.LASF42
 12381 14e7 03       		.byte	0x3
 12382 14e8 BB04     		.2byte	0x4bb
 12383 14ea 150F0000 		.4byte	0xf15
 12384 14ee 02       		.uleb128 0x2
 12385 14ef 91       		.byte	0x91
 12386 14f0 58       		.sleb128 -40
 12387 14f1 22       		.uleb128 0x22
 12388 14f2 A5050000 		.4byte	.LASF44
 12389 14f6 03       		.byte	0x3
 12390 14f7 BD04     		.2byte	0x4bd
 12391 14f9 C3000000 		.4byte	0xc3
 12392 14fd 02       		.uleb128 0x2
 12393 14fe 91       		.byte	0x91
 12394 14ff 6C       		.sleb128 -20
 12395 1500 18       		.uleb128 0x18
 12396 1501 6B00     		.ascii	"k\000"
 12397 1503 03       		.byte	0x3
 12398 1504 BE04     		.2byte	0x4be
 12399 1506 63020000 		.4byte	0x263
 12400 150a 02       		.uleb128 0x2
 12401 150b 91       		.byte	0x91
 12402 150c 6B       		.sleb128 -21
 12403 150d 23       		.uleb128 0x23
 12404 150e 1A000000 		.4byte	.LBB9
 12405 1512 5E000000 		.4byte	.LBE9-.LBB9
 12406 1516 18       		.uleb128 0x18
 12407 1517 7000     		.ascii	"p\000"
 12408 1519 03       		.byte	0x3
 12409 151a C104     		.2byte	0x4c1
 12410 151c CE000000 		.4byte	0xce
 12411 1520 02       		.uleb128 0x2
 12412 1521 91       		.byte	0x91
 12413 1522 60       		.sleb128 -32
 12414 1523 00       		.byte	0
 12415 1524 00       		.byte	0
 12416 1525 25       		.uleb128 0x25
 12417 1526 A1010000 		.4byte	.LASF116
 12418 152a 02       		.byte	0x2
 12419 152b F102     		.2byte	0x2f1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 281


 12420 152d 00000000 		.4byte	.LFB47
 12421 1531 42000000 		.4byte	.LFE47-.LFB47
 12422 1535 01       		.uleb128 0x1
 12423 1536 9C       		.byte	0x9c
 12424 1537 82150000 		.4byte	0x1582
 12425 153b 20       		.uleb128 0x20
 12426 153c 583100   		.ascii	"X1\000"
 12427 153f 02       		.byte	0x2
 12428 1540 F102     		.2byte	0x2f1
 12429 1542 D0020000 		.4byte	0x2d0
 12430 1546 02       		.uleb128 0x2
 12431 1547 91       		.byte	0x91
 12432 1548 54       		.sleb128 -44
 12433 1549 20       		.uleb128 0x20
 12434 154a 593100   		.ascii	"Y1\000"
 12435 154d 02       		.byte	0x2
 12436 154e F202     		.2byte	0x2f2
 12437 1550 D0020000 		.4byte	0x2d0
 12438 1554 02       		.uleb128 0x2
 12439 1555 91       		.byte	0x91
 12440 1556 50       		.sleb128 -48
 12441 1557 20       		.uleb128 0x20
 12442 1558 5A00     		.ascii	"Z\000"
 12443 155a 02       		.byte	0x2
 12444 155b F302     		.2byte	0x2f3
 12445 155d 82150000 		.4byte	0x1582
 12446 1561 02       		.uleb128 0x2
 12447 1562 91       		.byte	0x91
 12448 1563 4C       		.sleb128 -52
 12449 1564 17       		.uleb128 0x17
 12450 1565 E5080000 		.4byte	.LASF50
 12451 1569 02       		.byte	0x2
 12452 156a F402     		.2byte	0x2f4
 12453 156c D9000000 		.4byte	0xd9
 12454 1570 02       		.uleb128 0x2
 12455 1571 91       		.byte	0x91
 12456 1572 48       		.sleb128 -56
 12457 1573 18       		.uleb128 0x18
 12458 1574 743100   		.ascii	"t1\000"
 12459 1577 02       		.byte	0x2
 12460 1578 F502     		.2byte	0x2f5
 12461 157a 8F020000 		.4byte	0x28f
 12462 157e 02       		.uleb128 0x2
 12463 157f 91       		.byte	0x91
 12464 1580 58       		.sleb128 -40
 12465 1581 00       		.byte	0
 12466 1582 09       		.uleb128 0x9
 12467 1583 07030000 		.4byte	0x307
 12468 1587 25       		.uleb128 0x25
 12469 1588 43010000 		.4byte	.LASF117
 12470 158c 02       		.byte	0x2
 12471 158d FE02     		.2byte	0x2fe
 12472 158f 00000000 		.4byte	.LFB48
 12473 1593 9A000000 		.4byte	.LFE48-.LFB48
 12474 1597 01       		.uleb128 0x1
 12475 1598 9C       		.byte	0x9c
 12476 1599 10160000 		.4byte	0x1610
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 282


 12477 159d 20       		.uleb128 0x20
 12478 159e 583100   		.ascii	"X1\000"
 12479 15a1 02       		.byte	0x2
 12480 15a2 FE02     		.2byte	0x2fe
 12481 15a4 D0020000 		.4byte	0x2d0
 12482 15a8 02       		.uleb128 0x2
 12483 15a9 91       		.byte	0x91
 12484 15aa 4C       		.sleb128 -52
 12485 15ab 20       		.uleb128 0x20
 12486 15ac 593100   		.ascii	"Y1\000"
 12487 15af 02       		.byte	0x2
 12488 15b0 FF02     		.2byte	0x2ff
 12489 15b2 D0020000 		.4byte	0x2d0
 12490 15b6 02       		.uleb128 0x2
 12491 15b7 91       		.byte	0x91
 12492 15b8 48       		.sleb128 -56
 12493 15b9 20       		.uleb128 0x20
 12494 15ba 583200   		.ascii	"X2\000"
 12495 15bd 02       		.byte	0x2
 12496 15be 0003     		.2byte	0x300
 12497 15c0 D0020000 		.4byte	0x2d0
 12498 15c4 02       		.uleb128 0x2
 12499 15c5 91       		.byte	0x91
 12500 15c6 44       		.sleb128 -60
 12501 15c7 20       		.uleb128 0x20
 12502 15c8 593200   		.ascii	"Y2\000"
 12503 15cb 02       		.byte	0x2
 12504 15cc 0103     		.2byte	0x301
 12505 15ce D0020000 		.4byte	0x2d0
 12506 15d2 02       		.uleb128 0x2
 12507 15d3 91       		.byte	0x91
 12508 15d4 40       		.sleb128 -64
 12509 15d5 17       		.uleb128 0x17
 12510 15d6 B8010000 		.4byte	.LASF118
 12511 15da 02       		.byte	0x2
 12512 15db 0203     		.2byte	0x302
 12513 15dd 82150000 		.4byte	0x1582
 12514 15e1 02       		.uleb128 0x2
 12515 15e2 91       		.byte	0x91
 12516 15e3 00       		.sleb128 0
 12517 15e4 17       		.uleb128 0x17
 12518 15e5 E5080000 		.4byte	.LASF50
 12519 15e9 02       		.byte	0x2
 12520 15ea 0303     		.2byte	0x303
 12521 15ec D9000000 		.4byte	0xd9
 12522 15f0 02       		.uleb128 0x2
 12523 15f1 91       		.byte	0x91
 12524 15f2 04       		.sleb128 4
 12525 15f3 18       		.uleb128 0x18
 12526 15f4 7A00     		.ascii	"z\000"
 12527 15f6 02       		.byte	0x2
 12528 15f7 0403     		.2byte	0x304
 12529 15f9 8F020000 		.4byte	0x28f
 12530 15fd 02       		.uleb128 0x2
 12531 15fe 91       		.byte	0x91
 12532 15ff 54       		.sleb128 -44
 12533 1600 22       		.uleb128 0x22
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 283


 12534 1601 B9030000 		.4byte	.LASF20
 12535 1605 02       		.byte	0x2
 12536 1606 0503     		.2byte	0x305
 12537 1608 63020000 		.4byte	0x263
 12538 160c 02       		.uleb128 0x2
 12539 160d 91       		.byte	0x91
 12540 160e 77       		.sleb128 -9
 12541 160f 00       		.byte	0
 12542 1610 25       		.uleb128 0x25
 12543 1611 7C040000 		.4byte	.LASF119
 12544 1615 02       		.byte	0x2
 12545 1616 1903     		.2byte	0x319
 12546 1618 00000000 		.4byte	.LFB49
 12547 161c 2C010000 		.4byte	.LFE49-.LFB49
 12548 1620 01       		.uleb128 0x1
 12549 1621 9C       		.byte	0x9c
 12550 1622 8B160000 		.4byte	0x168b
 12551 1626 20       		.uleb128 0x20
 12552 1627 583100   		.ascii	"X1\000"
 12553 162a 02       		.byte	0x2
 12554 162b 1903     		.2byte	0x319
 12555 162d D0020000 		.4byte	0x2d0
 12556 1631 02       		.uleb128 0x2
 12557 1632 91       		.byte	0x91
 12558 1633 4C       		.sleb128 -52
 12559 1634 20       		.uleb128 0x20
 12560 1635 593100   		.ascii	"Y1\000"
 12561 1638 02       		.byte	0x2
 12562 1639 1A03     		.2byte	0x31a
 12563 163b D0020000 		.4byte	0x2d0
 12564 163f 02       		.uleb128 0x2
 12565 1640 91       		.byte	0x91
 12566 1641 48       		.sleb128 -56
 12567 1642 20       		.uleb128 0x20
 12568 1643 583200   		.ascii	"X2\000"
 12569 1646 02       		.byte	0x2
 12570 1647 1B03     		.2byte	0x31b
 12571 1649 D0020000 		.4byte	0x2d0
 12572 164d 02       		.uleb128 0x2
 12573 164e 91       		.byte	0x91
 12574 164f 44       		.sleb128 -60
 12575 1650 20       		.uleb128 0x20
 12576 1651 593200   		.ascii	"Y2\000"
 12577 1654 02       		.byte	0x2
 12578 1655 1C03     		.2byte	0x31c
 12579 1657 D0020000 		.4byte	0x2d0
 12580 165b 02       		.uleb128 0x2
 12581 165c 91       		.byte	0x91
 12582 165d 40       		.sleb128 -64
 12583 165e 17       		.uleb128 0x17
 12584 165f E5080000 		.4byte	.LASF50
 12585 1663 02       		.byte	0x2
 12586 1664 1D03     		.2byte	0x31d
 12587 1666 D9000000 		.4byte	0xd9
 12588 166a 02       		.uleb128 0x2
 12589 166b 91       		.byte	0x91
 12590 166c 00       		.sleb128 0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 284


 12591 166d 18       		.uleb128 0x18
 12592 166e 743500   		.ascii	"t5\000"
 12593 1671 02       		.byte	0x2
 12594 1672 1F03     		.2byte	0x31f
 12595 1674 8F020000 		.4byte	0x28f
 12596 1678 02       		.uleb128 0x2
 12597 1679 91       		.byte	0x91
 12598 167a 54       		.sleb128 -44
 12599 167b 22       		.uleb128 0x22
 12600 167c B9030000 		.4byte	.LASF20
 12601 1680 02       		.byte	0x2
 12602 1681 2003     		.2byte	0x320
 12603 1683 63020000 		.4byte	0x263
 12604 1687 02       		.uleb128 0x2
 12605 1688 91       		.byte	0x91
 12606 1689 77       		.sleb128 -9
 12607 168a 00       		.byte	0
 12608 168b 25       		.uleb128 0x25
 12609 168c 93080000 		.4byte	.LASF120
 12610 1690 02       		.byte	0x2
 12611 1691 3803     		.2byte	0x338
 12612 1693 00000000 		.4byte	.LFB50
 12613 1697 AC010000 		.4byte	.LFE50-.LFB50
 12614 169b 01       		.uleb128 0x1
 12615 169c 9C       		.byte	0x9c
 12616 169d 28170000 		.4byte	0x1728
 12617 16a1 20       		.uleb128 0x20
 12618 16a2 583100   		.ascii	"X1\000"
 12619 16a5 02       		.byte	0x2
 12620 16a6 3803     		.2byte	0x338
 12621 16a8 D0020000 		.4byte	0x2d0
 12622 16ac 03       		.uleb128 0x3
 12623 16ad 91       		.byte	0x91
 12624 16ae 8C7F     		.sleb128 -116
 12625 16b0 20       		.uleb128 0x20
 12626 16b1 593100   		.ascii	"Y1\000"
 12627 16b4 02       		.byte	0x2
 12628 16b5 3903     		.2byte	0x339
 12629 16b7 D0020000 		.4byte	0x2d0
 12630 16bb 03       		.uleb128 0x3
 12631 16bc 91       		.byte	0x91
 12632 16bd 887F     		.sleb128 -120
 12633 16bf 20       		.uleb128 0x20
 12634 16c0 583200   		.ascii	"X2\000"
 12635 16c3 02       		.byte	0x2
 12636 16c4 3A03     		.2byte	0x33a
 12637 16c6 D0020000 		.4byte	0x2d0
 12638 16ca 03       		.uleb128 0x3
 12639 16cb 91       		.byte	0x91
 12640 16cc 847F     		.sleb128 -124
 12641 16ce 20       		.uleb128 0x20
 12642 16cf 593200   		.ascii	"Y2\000"
 12643 16d2 02       		.byte	0x2
 12644 16d3 3B03     		.2byte	0x33b
 12645 16d5 D0020000 		.4byte	0x2d0
 12646 16d9 03       		.uleb128 0x3
 12647 16da 91       		.byte	0x91
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 285


 12648 16db 807F     		.sleb128 -128
 12649 16dd 17       		.uleb128 0x17
 12650 16de E5080000 		.4byte	.LASF50
 12651 16e2 02       		.byte	0x2
 12652 16e3 3C03     		.2byte	0x33c
 12653 16e5 D9000000 		.4byte	0xd9
 12654 16e9 02       		.uleb128 0x2
 12655 16ea 91       		.byte	0x91
 12656 16eb 00       		.sleb128 0
 12657 16ec 18       		.uleb128 0x18
 12658 16ed 743500   		.ascii	"t5\000"
 12659 16f0 02       		.byte	0x2
 12660 16f1 3E03     		.2byte	0x33e
 12661 16f3 8F020000 		.4byte	0x28f
 12662 16f7 02       		.uleb128 0x2
 12663 16f8 91       		.byte	0x91
 12664 16f9 54       		.sleb128 -44
 12665 16fa 18       		.uleb128 0x18
 12666 16fb 743600   		.ascii	"t6\000"
 12667 16fe 02       		.byte	0x2
 12668 16ff 3F03     		.2byte	0x33f
 12669 1701 8F020000 		.4byte	0x28f
 12670 1705 03       		.uleb128 0x3
 12671 1706 91       		.byte	0x91
 12672 1707 B47F     		.sleb128 -76
 12673 1709 18       		.uleb128 0x18
 12674 170a 743700   		.ascii	"t7\000"
 12675 170d 02       		.byte	0x2
 12676 170e 4003     		.2byte	0x340
 12677 1710 8F020000 		.4byte	0x28f
 12678 1714 03       		.uleb128 0x3
 12679 1715 91       		.byte	0x91
 12680 1716 947F     		.sleb128 -108
 12681 1718 22       		.uleb128 0x22
 12682 1719 B9030000 		.4byte	.LASF20
 12683 171d 02       		.byte	0x2
 12684 171e 4103     		.2byte	0x341
 12685 1720 63020000 		.4byte	0x263
 12686 1724 02       		.uleb128 0x2
 12687 1725 91       		.byte	0x91
 12688 1726 77       		.sleb128 -9
 12689 1727 00       		.byte	0
 12690 1728 25       		.uleb128 0x25
 12691 1729 4A070000 		.4byte	.LASF121
 12692 172d 02       		.byte	0x2
 12693 172e 5E03     		.2byte	0x35e
 12694 1730 00000000 		.4byte	.LFB51
 12695 1734 58020000 		.4byte	.LFE51-.LFB51
 12696 1738 01       		.uleb128 0x1
 12697 1739 9C       		.byte	0x9c
 12698 173a F3170000 		.4byte	0x17f3
 12699 173e 17       		.uleb128 0x17
 12700 173f 330A0000 		.4byte	.LASF40
 12701 1743 02       		.byte	0x2
 12702 1744 5E03     		.2byte	0x35e
 12703 1746 D0020000 		.4byte	0x2d0
 12704 174a 03       		.uleb128 0x3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 286


 12705 174b 91       		.byte	0x91
 12706 174c CC7E     		.sleb128 -180
 12707 174e 17       		.uleb128 0x17
 12708 174f 51030000 		.4byte	.LASF122
 12709 1753 02       		.byte	0x2
 12710 1754 5F03     		.2byte	0x35f
 12711 1756 07030000 		.4byte	0x307
 12712 175a 03       		.uleb128 0x3
 12713 175b 91       		.byte	0x91
 12714 175c C87E     		.sleb128 -184
 12715 175e 17       		.uleb128 0x17
 12716 175f 84030000 		.4byte	.LASF123
 12717 1763 02       		.byte	0x2
 12718 1764 6003     		.2byte	0x360
 12719 1766 07030000 		.4byte	0x307
 12720 176a 03       		.uleb128 0x3
 12721 176b 91       		.byte	0x91
 12722 176c C47E     		.sleb128 -188
 12723 176e 17       		.uleb128 0x17
 12724 176f B8010000 		.4byte	.LASF118
 12725 1773 02       		.byte	0x2
 12726 1774 6103     		.2byte	0x361
 12727 1776 07030000 		.4byte	0x307
 12728 177a 03       		.uleb128 0x3
 12729 177b 91       		.byte	0x91
 12730 177c C07E     		.sleb128 -192
 12731 177e 17       		.uleb128 0x17
 12732 177f 70090000 		.4byte	.LASF124
 12733 1783 02       		.byte	0x2
 12734 1784 6203     		.2byte	0x362
 12735 1786 6E020000 		.4byte	0x26e
 12736 178a 02       		.uleb128 0x2
 12737 178b 91       		.byte	0x91
 12738 178c 00       		.sleb128 0
 12739 178d 17       		.uleb128 0x17
 12740 178e E5080000 		.4byte	.LASF50
 12741 1792 02       		.byte	0x2
 12742 1793 6303     		.2byte	0x363
 12743 1795 D9000000 		.4byte	0xd9
 12744 1799 02       		.uleb128 0x2
 12745 179a 91       		.byte	0x91
 12746 179b 04       		.sleb128 4
 12747 179c 18       		.uleb128 0x18
 12748 179d 527800   		.ascii	"Rx\000"
 12749 17a0 02       		.byte	0x2
 12750 17a1 6503     		.2byte	0x365
 12751 17a3 F3170000 		.4byte	0x17f3
 12752 17a7 03       		.uleb128 0x3
 12753 17a8 91       		.byte	0x91
 12754 17a9 B07F     		.sleb128 -80
 12755 17ab 18       		.uleb128 0x18
 12756 17ac 527900   		.ascii	"Ry\000"
 12757 17af 02       		.byte	0x2
 12758 17b0 6603     		.2byte	0x366
 12759 17b2 F3170000 		.4byte	0x17f3
 12760 17b6 03       		.uleb128 0x3
 12761 17b7 91       		.byte	0x91
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 287


 12762 17b8 F07E     		.sleb128 -144
 12763 17ba 18       		.uleb128 0x18
 12764 17bb 7A00     		.ascii	"z\000"
 12765 17bd 02       		.byte	0x2
 12766 17be 6703     		.2byte	0x367
 12767 17c0 8F020000 		.4byte	0x28f
 12768 17c4 03       		.uleb128 0x3
 12769 17c5 91       		.byte	0x91
 12770 17c6 D07E     		.sleb128 -176
 12771 17c8 18       		.uleb128 0x18
 12772 17c9 6900     		.ascii	"i\000"
 12773 17cb 02       		.byte	0x2
 12774 17cc 6803     		.2byte	0x368
 12775 17ce 6E020000 		.4byte	0x26e
 12776 17d2 02       		.uleb128 0x2
 12777 17d3 91       		.byte	0x91
 12778 17d4 76       		.sleb128 -10
 12779 17d5 18       		.uleb128 0x18
 12780 17d6 6E6200   		.ascii	"nb\000"
 12781 17d9 02       		.byte	0x2
 12782 17da 6903     		.2byte	0x369
 12783 17dc 84020000 		.4byte	0x284
 12784 17e0 02       		.uleb128 0x2
 12785 17e1 91       		.byte	0x91
 12786 17e2 70       		.sleb128 -16
 12787 17e3 22       		.uleb128 0x22
 12788 17e4 B9030000 		.4byte	.LASF20
 12789 17e8 02       		.byte	0x2
 12790 17e9 6A03     		.2byte	0x36a
 12791 17eb 63020000 		.4byte	0x263
 12792 17ef 02       		.uleb128 0x2
 12793 17f0 91       		.byte	0x91
 12794 17f1 75       		.sleb128 -11
 12795 17f2 00       		.byte	0
 12796 17f3 11       		.uleb128 0x11
 12797 17f4 84020000 		.4byte	0x284
 12798 17f8 09180000 		.4byte	0x1809
 12799 17fc 12       		.uleb128 0x12
 12800 17fd 9F020000 		.4byte	0x29f
 12801 1801 01       		.byte	0x1
 12802 1802 12       		.uleb128 0x12
 12803 1803 9F020000 		.4byte	0x29f
 12804 1807 07       		.byte	0x7
 12805 1808 00       		.byte	0
 12806 1809 24       		.uleb128 0x24
 12807 180a E1010000 		.4byte	.LASF125
 12808 180e 02       		.byte	0x2
 12809 180f 8B03     		.2byte	0x38b
 12810 1811 84020000 		.4byte	0x284
 12811 1815 00000000 		.4byte	.LFB52
 12812 1819 94000000 		.4byte	.LFE52-.LFB52
 12813 181d 01       		.uleb128 0x1
 12814 181e 9C       		.byte	0x9c
 12815 181f 89180000 		.4byte	0x1889
 12816 1823 20       		.uleb128 0x20
 12817 1824 6B00     		.ascii	"k\000"
 12818 1826 02       		.byte	0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 288


 12819 1827 8B03     		.2byte	0x38b
 12820 1829 82150000 		.4byte	0x1582
 12821 182d 02       		.uleb128 0x2
 12822 182e 91       		.byte	0x91
 12823 182f 6C       		.sleb128 -20
 12824 1830 20       		.uleb128 0x20
 12825 1831 6B3000   		.ascii	"k0\000"
 12826 1834 02       		.byte	0x2
 12827 1835 8C03     		.2byte	0x38c
 12828 1837 D0020000 		.4byte	0x2d0
 12829 183b 02       		.uleb128 0x2
 12830 183c 91       		.byte	0x91
 12831 183d 68       		.sleb128 -24
 12832 183e 20       		.uleb128 0x20
 12833 183f 6B3100   		.ascii	"k1\000"
 12834 1842 02       		.byte	0x2
 12835 1843 8D03     		.2byte	0x38d
 12836 1845 D0020000 		.4byte	0x2d0
 12837 1849 02       		.uleb128 0x2
 12838 184a 91       		.byte	0x91
 12839 184b 64       		.sleb128 -28
 12840 184c 17       		.uleb128 0x17
 12841 184d E5080000 		.4byte	.LASF50
 12842 1851 02       		.byte	0x2
 12843 1852 8E03     		.2byte	0x38e
 12844 1854 D9000000 		.4byte	0xd9
 12845 1858 02       		.uleb128 0x2
 12846 1859 91       		.byte	0x91
 12847 185a 60       		.sleb128 -32
 12848 185b 22       		.uleb128 0x22
 12849 185c 55040000 		.4byte	.LASF126
 12850 1860 02       		.byte	0x2
 12851 1861 8F03     		.2byte	0x38f
 12852 1863 63020000 		.4byte	0x263
 12853 1867 02       		.uleb128 0x2
 12854 1868 91       		.byte	0x91
 12855 1869 77       		.sleb128 -9
 12856 186a 22       		.uleb128 0x22
 12857 186b 4A040000 		.4byte	.LASF22
 12858 186f 02       		.byte	0x2
 12859 1870 9003     		.2byte	0x390
 12860 1872 6E020000 		.4byte	0x26e
 12861 1876 02       		.uleb128 0x2
 12862 1877 91       		.byte	0x91
 12863 1878 74       		.sleb128 -12
 12864 1879 22       		.uleb128 0x22
 12865 187a A5050000 		.4byte	.LASF44
 12866 187e 02       		.byte	0x2
 12867 187f 9103     		.2byte	0x391
 12868 1881 84020000 		.4byte	0x284
 12869 1885 02       		.uleb128 0x2
 12870 1886 91       		.byte	0x91
 12871 1887 70       		.sleb128 -16
 12872 1888 00       		.byte	0
 12873 1889 24       		.uleb128 0x24
 12874 188a EB080000 		.4byte	.LASF127
 12875 188e 02       		.byte	0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 289


 12876 188f 9803     		.2byte	0x398
 12877 1891 84020000 		.4byte	0x284
 12878 1895 00000000 		.4byte	.LFB53
 12879 1899 82000000 		.4byte	.LFE53-.LFB53
 12880 189d 01       		.uleb128 0x1
 12881 189e 9C       		.byte	0x9c
 12882 189f 11190000 		.4byte	0x1911
 12883 18a3 17       		.uleb128 0x17
 12884 18a4 330A0000 		.4byte	.LASF40
 12885 18a8 02       		.byte	0x2
 12886 18a9 9803     		.2byte	0x398
 12887 18ab D0020000 		.4byte	0x2d0
 12888 18af 03       		.uleb128 0x3
 12889 18b0 91       		.byte	0x91
 12890 18b1 A47F     		.sleb128 -92
 12891 18b3 17       		.uleb128 0x17
 12892 18b4 07090000 		.4byte	.LASF128
 12893 18b8 02       		.byte	0x2
 12894 18b9 9903     		.2byte	0x399
 12895 18bb D0020000 		.4byte	0x2d0
 12896 18bf 03       		.uleb128 0x3
 12897 18c0 91       		.byte	0x91
 12898 18c1 A07F     		.sleb128 -96
 12899 18c3 17       		.uleb128 0x17
 12900 18c4 E5080000 		.4byte	.LASF50
 12901 18c8 02       		.byte	0x2
 12902 18c9 9A03     		.2byte	0x39a
 12903 18cb D9000000 		.4byte	0xd9
 12904 18cf 03       		.uleb128 0x3
 12905 18d0 91       		.byte	0x91
 12906 18d1 9C7F     		.sleb128 -100
 12907 18d3 22       		.uleb128 0x22
 12908 18d4 57010000 		.4byte	.LASF129
 12909 18d8 02       		.byte	0x2
 12910 18d9 9B03     		.2byte	0x39b
 12911 18db 8F020000 		.4byte	0x28f
 12912 18df 02       		.uleb128 0x2
 12913 18e0 91       		.byte	0x91
 12914 18e1 54       		.sleb128 -44
 12915 18e2 22       		.uleb128 0x22
 12916 18e3 03010000 		.4byte	.LASF130
 12917 18e7 02       		.byte	0x2
 12918 18e8 9C03     		.2byte	0x39c
 12919 18ea 8F020000 		.4byte	0x28f
 12920 18ee 03       		.uleb128 0x3
 12921 18ef 91       		.byte	0x91
 12922 18f0 B47F     		.sleb128 -76
 12923 18f2 18       		.uleb128 0x18
 12924 18f3 703200   		.ascii	"p2\000"
 12925 18f6 02       		.byte	0x2
 12926 18f7 9D03     		.2byte	0x39d
 12927 18f9 C10A0000 		.4byte	0xac1
 12928 18fd 03       		.uleb128 0x3
 12929 18fe 91       		.byte	0x91
 12930 18ff AC7F     		.sleb128 -84
 12931 1901 22       		.uleb128 0x22
 12932 1902 A5050000 		.4byte	.LASF44
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 290


 12933 1906 02       		.byte	0x2
 12934 1907 9E03     		.2byte	0x39e
 12935 1909 84020000 		.4byte	0x284
 12936 190d 02       		.uleb128 0x2
 12937 190e 91       		.byte	0x91
 12938 190f 74       		.sleb128 -12
 12939 1910 00       		.byte	0
 12940 1911 16       		.uleb128 0x16
 12941 1912 A4000000 		.4byte	.LASF131
 12942 1916 02       		.byte	0x2
 12943 1917 BF03     		.2byte	0x3bf
 12944 1919 00000000 		.4byte	.LFB54
 12945 191d 6E000000 		.4byte	.LFE54-.LFB54
 12946 1921 01       		.uleb128 0x1
 12947 1922 9C       		.byte	0x9c
 12948 1923 79190000 		.4byte	0x1979
 12949 1927 17       		.uleb128 0x17
 12950 1928 FF040000 		.4byte	.LASF132
 12951 192c 02       		.byte	0x2
 12952 192d BF03     		.2byte	0x3bf
 12953 192f 9D010000 		.4byte	0x19d
 12954 1933 02       		.uleb128 0x2
 12955 1934 91       		.byte	0x91
 12956 1935 74       		.sleb128 -12
 12957 1936 17       		.uleb128 0x17
 12958 1937 6D080000 		.4byte	.LASF21
 12959 193b 02       		.byte	0x2
 12960 193c C003     		.2byte	0x3c0
 12961 193e 94000000 		.4byte	0x94
 12962 1942 02       		.uleb128 0x2
 12963 1943 91       		.byte	0x91
 12964 1944 70       		.sleb128 -16
 12965 1945 17       		.uleb128 0x17
 12966 1946 2F070000 		.4byte	.LASF133
 12967 194a 02       		.byte	0x2
 12968 194b C103     		.2byte	0x3c1
 12969 194d 07030000 		.4byte	0x307
 12970 1951 02       		.uleb128 0x2
 12971 1952 91       		.byte	0x91
 12972 1953 6C       		.sleb128 -20
 12973 1954 18       		.uleb128 0x18
 12974 1955 6900     		.ascii	"i\000"
 12975 1957 02       		.byte	0x2
 12976 1958 C203     		.2byte	0x3c2
 12977 195a 63020000 		.4byte	0x263
 12978 195e 02       		.uleb128 0x2
 12979 195f 91       		.byte	0x91
 12980 1960 7F       		.sleb128 -1
 12981 1961 23       		.uleb128 0x23
 12982 1962 12000000 		.4byte	.LBB10
 12983 1966 38000000 		.4byte	.LBE10-.LBB10
 12984 196a 18       		.uleb128 0x18
 12985 196b 6200     		.ascii	"b\000"
 12986 196d 02       		.byte	0x2
 12987 196e C403     		.2byte	0x3c4
 12988 1970 9B000000 		.4byte	0x9b
 12989 1974 02       		.uleb128 0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 291


 12990 1975 91       		.byte	0x91
 12991 1976 78       		.sleb128 -8
 12992 1977 00       		.byte	0
 12993 1978 00       		.byte	0
 12994 1979 25       		.uleb128 0x25
 12995 197a 7E050000 		.4byte	.LASF134
 12996 197e 02       		.byte	0x2
 12997 197f C903     		.2byte	0x3c9
 12998 1981 00000000 		.4byte	.LFB55
 12999 1985 92000000 		.4byte	.LFE55-.LFB55
 13000 1989 01       		.uleb128 0x1
 13001 198a 9C       		.byte	0x9c
 13002 198b E1190000 		.4byte	0x19e1
 13003 198f 17       		.uleb128 0x17
 13004 1990 2F070000 		.4byte	.LASF133
 13005 1994 02       		.byte	0x2
 13006 1995 C903     		.2byte	0x3c9
 13007 1997 D0020000 		.4byte	0x2d0
 13008 199b 02       		.uleb128 0x2
 13009 199c 91       		.byte	0x91
 13010 199d 6C       		.sleb128 -20
 13011 199e 17       		.uleb128 0x17
 13012 199f FF040000 		.4byte	.LASF132
 13013 19a3 02       		.byte	0x2
 13014 19a4 CA03     		.2byte	0x3ca
 13015 19a6 30020000 		.4byte	0x230
 13016 19aa 02       		.uleb128 0x2
 13017 19ab 91       		.byte	0x91
 13018 19ac 68       		.sleb128 -24
 13019 19ad 17       		.uleb128 0x17
 13020 19ae 6D080000 		.4byte	.LASF21
 13021 19b2 02       		.byte	0x2
 13022 19b3 CB03     		.2byte	0x3cb
 13023 19b5 94000000 		.4byte	0x94
 13024 19b9 02       		.uleb128 0x2
 13025 19ba 91       		.byte	0x91
 13026 19bb 64       		.sleb128 -28
 13027 19bc 18       		.uleb128 0x18
 13028 19bd 6900     		.ascii	"i\000"
 13029 19bf 02       		.byte	0x2
 13030 19c0 CC03     		.2byte	0x3cc
 13031 19c2 63020000 		.4byte	0x263
 13032 19c6 02       		.uleb128 0x2
 13033 19c7 91       		.byte	0x91
 13034 19c8 77       		.sleb128 -9
 13035 19c9 23       		.uleb128 0x23
 13036 19ca 2C000000 		.4byte	.LBB11
 13037 19ce 42000000 		.4byte	.LBE11-.LBB11
 13038 19d2 18       		.uleb128 0x18
 13039 19d3 6200     		.ascii	"b\000"
 13040 19d5 02       		.byte	0x2
 13041 19d6 CF03     		.2byte	0x3cf
 13042 19d8 9B000000 		.4byte	0x9b
 13043 19dc 02       		.uleb128 0x2
 13044 19dd 91       		.byte	0x91
 13045 19de 70       		.sleb128 -16
 13046 19df 00       		.byte	0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 292


 13047 19e0 00       		.byte	0
 13048 19e1 24       		.uleb128 0x24
 13049 19e2 1D090000 		.4byte	.LASF135
 13050 19e6 02       		.byte	0x2
 13051 19e7 D903     		.2byte	0x3d9
 13052 19e9 94000000 		.4byte	0x94
 13053 19ed 00000000 		.4byte	.LFB56
 13054 19f1 FC000000 		.4byte	.LFE56-.LFB56
 13055 19f5 01       		.uleb128 0x1
 13056 19f6 9C       		.byte	0x9c
 13057 19f7 561A0000 		.4byte	0x1a56
 13058 19fb 17       		.uleb128 0x17
 13059 19fc B8040000 		.4byte	.LASF136
 13060 1a00 02       		.byte	0x2
 13061 1a01 D903     		.2byte	0x3d9
 13062 1a03 D0020000 		.4byte	0x2d0
 13063 1a07 02       		.uleb128 0x2
 13064 1a08 91       		.byte	0x91
 13065 1a09 64       		.sleb128 -28
 13066 1a0a 20       		.uleb128 0x20
 13067 1a0b 746F7000 		.ascii	"top\000"
 13068 1a0f 02       		.byte	0x2
 13069 1a10 DA03     		.2byte	0x3da
 13070 1a12 07030000 		.4byte	0x307
 13071 1a16 02       		.uleb128 0x2
 13072 1a17 91       		.byte	0x91
 13073 1a18 60       		.sleb128 -32
 13074 1a19 17       		.uleb128 0x17
 13075 1a1a B9030000 		.4byte	.LASF20
 13076 1a1e 02       		.byte	0x2
 13077 1a1f DB03     		.2byte	0x3db
 13078 1a21 63020000 		.4byte	0x263
 13079 1a25 02       		.uleb128 0x2
 13080 1a26 91       		.byte	0x91
 13081 1a27 5F       		.sleb128 -33
 13082 1a28 22       		.uleb128 0x22
 13083 1a29 8E080000 		.4byte	.LASF137
 13084 1a2d 02       		.byte	0x2
 13085 1a2e DC03     		.2byte	0x3dc
 13086 1a30 84020000 		.4byte	0x284
 13087 1a34 02       		.uleb128 0x2
 13088 1a35 91       		.byte	0x91
 13089 1a36 70       		.sleb128 -16
 13090 1a37 22       		.uleb128 0x22
 13091 1a38 8E060000 		.4byte	.LASF138
 13092 1a3c 02       		.byte	0x2
 13093 1a3d DD03     		.2byte	0x3dd
 13094 1a3f 84020000 		.4byte	0x284
 13095 1a43 02       		.uleb128 0x2
 13096 1a44 91       		.byte	0x91
 13097 1a45 74       		.sleb128 -12
 13098 1a46 22       		.uleb128 0x22
 13099 1a47 70090000 		.4byte	.LASF124
 13100 1a4b 02       		.byte	0x2
 13101 1a4c DE03     		.2byte	0x3de
 13102 1a4e 6E020000 		.4byte	0x26e
 13103 1a52 02       		.uleb128 0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 293


 13104 1a53 91       		.byte	0x91
 13105 1a54 6E       		.sleb128 -18
 13106 1a55 00       		.byte	0
 13107 1a56 28       		.uleb128 0x28
 13108 1a57 3C040000 		.4byte	.LASF139
 13109 1a5b 02       		.byte	0x2
 13110 1a5c F103     		.2byte	0x3f1
 13111 1a5e 94000000 		.4byte	0x94
 13112 1a62 00000000 		.4byte	.LFB57
 13113 1a66 B4000000 		.4byte	.LFE57-.LFB57
 13114 1a6a 01       		.uleb128 0x1
 13115 1a6b 9C       		.byte	0x9c
 13116 1a6c CF1A0000 		.4byte	0x1acf
 13117 1a70 17       		.uleb128 0x17
 13118 1a71 C4070000 		.4byte	.LASF140
 13119 1a75 02       		.byte	0x2
 13120 1a76 F103     		.2byte	0x3f1
 13121 1a78 9D010000 		.4byte	0x19d
 13122 1a7c 03       		.uleb128 0x3
 13123 1a7d 91       		.byte	0x91
 13124 1a7e 8C7F     		.sleb128 -116
 13125 1a80 17       		.uleb128 0x17
 13126 1a81 07090000 		.4byte	.LASF128
 13127 1a85 02       		.byte	0x2
 13128 1a86 F203     		.2byte	0x3f2
 13129 1a88 9D010000 		.4byte	0x19d
 13130 1a8c 03       		.uleb128 0x3
 13131 1a8d 91       		.byte	0x91
 13132 1a8e 887F     		.sleb128 -120
 13133 1a90 17       		.uleb128 0x17
 13134 1a91 E5080000 		.4byte	.LASF50
 13135 1a95 02       		.byte	0x2
 13136 1a96 F303     		.2byte	0x3f3
 13137 1a98 D9000000 		.4byte	0xd9
 13138 1a9c 03       		.uleb128 0x3
 13139 1a9d 91       		.byte	0x91
 13140 1a9e 847F     		.sleb128 -124
 13141 1aa0 22       		.uleb128 0x22
 13142 1aa1 D6030000 		.4byte	.LASF141
 13143 1aa5 02       		.byte	0x2
 13144 1aa6 F803     		.2byte	0x3f8
 13145 1aa8 8F020000 		.4byte	0x28f
 13146 1aac 02       		.uleb128 0x2
 13147 1aad 91       		.byte	0x91
 13148 1aae 54       		.sleb128 -44
 13149 1aaf 22       		.uleb128 0x22
 13150 1ab0 510A0000 		.4byte	.LASF142
 13151 1ab4 02       		.byte	0x2
 13152 1ab5 F903     		.2byte	0x3f9
 13153 1ab7 A6020000 		.4byte	0x2a6
 13154 1abb 03       		.uleb128 0x3
 13155 1abc 91       		.byte	0x91
 13156 1abd 947F     		.sleb128 -108
 13157 1abf 22       		.uleb128 0x22
 13158 1ac0 8E060000 		.4byte	.LASF138
 13159 1ac4 02       		.byte	0x2
 13160 1ac5 FB03     		.2byte	0x3fb
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 294


 13161 1ac7 84020000 		.4byte	0x284
 13162 1acb 02       		.uleb128 0x2
 13163 1acc 91       		.byte	0x91
 13164 1acd 74       		.sleb128 -12
 13165 1ace 00       		.byte	0
 13166 1acf 28       		.uleb128 0x28
 13167 1ad0 9D080000 		.4byte	.LASF143
 13168 1ad4 02       		.byte	0x2
 13169 1ad5 0F04     		.2byte	0x40f
 13170 1ad7 94000000 		.4byte	0x94
 13171 1adb 00000000 		.4byte	.LFB58
 13172 1adf 38010000 		.4byte	.LFE58-.LFB58
 13173 1ae3 01       		.uleb128 0x1
 13174 1ae4 9C       		.byte	0x9c
 13175 1ae5 A51B0000 		.4byte	0x1ba5
 13176 1ae9 17       		.uleb128 0x17
 13177 1aea C4070000 		.4byte	.LASF140
 13178 1aee 02       		.byte	0x2
 13179 1aef 0F04     		.2byte	0x40f
 13180 1af1 30020000 		.4byte	0x230
 13181 1af5 03       		.uleb128 0x3
 13182 1af6 91       		.byte	0x91
 13183 1af7 D47E     		.sleb128 -172
 13184 1af9 17       		.uleb128 0x17
 13185 1afa 07090000 		.4byte	.LASF128
 13186 1afe 02       		.byte	0x2
 13187 1aff 1004     		.2byte	0x410
 13188 1b01 30020000 		.4byte	0x230
 13189 1b05 03       		.uleb128 0x3
 13190 1b06 91       		.byte	0x91
 13191 1b07 D07E     		.sleb128 -176
 13192 1b09 17       		.uleb128 0x17
 13193 1b0a CA040000 		.4byte	.LASF144
 13194 1b0e 02       		.byte	0x2
 13195 1b0f 1104     		.2byte	0x411
 13196 1b11 9D010000 		.4byte	0x19d
 13197 1b15 03       		.uleb128 0x3
 13198 1b16 91       		.byte	0x91
 13199 1b17 CC7E     		.sleb128 -180
 13200 1b19 17       		.uleb128 0x17
 13201 1b1a E5080000 		.4byte	.LASF50
 13202 1b1e 02       		.byte	0x2
 13203 1b1f 1204     		.2byte	0x412
 13204 1b21 D9000000 		.4byte	0xd9
 13205 1b25 03       		.uleb128 0x3
 13206 1b26 91       		.byte	0x91
 13207 1b27 C87E     		.sleb128 -184
 13208 1b29 22       		.uleb128 0x22
 13209 1b2a 510A0000 		.4byte	.LASF142
 13210 1b2e 02       		.byte	0x2
 13211 1b2f 1304     		.2byte	0x413
 13212 1b31 A6020000 		.4byte	0x2a6
 13213 1b35 03       		.uleb128 0x3
 13214 1b36 91       		.byte	0x91
 13215 1b37 A47F     		.sleb128 -92
 13216 1b39 22       		.uleb128 0x22
 13217 1b3a D6030000 		.4byte	.LASF141
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 295


 13218 1b3e 02       		.byte	0x2
 13219 1b3f 1404     		.2byte	0x414
 13220 1b41 8F020000 		.4byte	0x28f
 13221 1b45 03       		.uleb128 0x3
 13222 1b46 91       		.byte	0x91
 13223 1b47 847F     		.sleb128 -124
 13224 1b49 18       		.uleb128 0x18
 13225 1b4a 746D7000 		.ascii	"tmp\000"
 13226 1b4e 02       		.byte	0x2
 13227 1b4f 1604     		.2byte	0x416
 13228 1b51 8F020000 		.4byte	0x28f
 13229 1b55 03       		.uleb128 0x3
 13230 1b56 91       		.byte	0x91
 13231 1b57 E47E     		.sleb128 -156
 13232 1b59 18       		.uleb128 0x18
 13233 1b5a 703200   		.ascii	"p2\000"
 13234 1b5d 02       		.byte	0x2
 13235 1b5e 1704     		.2byte	0x417
 13236 1b60 C10A0000 		.4byte	0xac1
 13237 1b64 03       		.uleb128 0x3
 13238 1b65 91       		.byte	0x91
 13239 1b66 DC7E     		.sleb128 -164
 13240 1b68 22       		.uleb128 0x22
 13241 1b69 B8010000 		.4byte	.LASF118
 13242 1b6d 02       		.byte	0x2
 13243 1b6e 1804     		.2byte	0x418
 13244 1b70 D0020000 		.4byte	0x2d0
 13245 1b74 02       		.uleb128 0x2
 13246 1b75 91       		.byte	0x91
 13247 1b76 6C       		.sleb128 -20
 13248 1b77 22       		.uleb128 0x22
 13249 1b78 A5050000 		.4byte	.LASF44
 13250 1b7c 02       		.byte	0x2
 13251 1b7d 1904     		.2byte	0x419
 13252 1b7f 84020000 		.4byte	0x284
 13253 1b83 02       		.uleb128 0x2
 13254 1b84 91       		.byte	0x91
 13255 1b85 64       		.sleb128 -28
 13256 1b86 22       		.uleb128 0x22
 13257 1b87 B9030000 		.4byte	.LASF20
 13258 1b8b 02       		.byte	0x2
 13259 1b8c 1A04     		.2byte	0x41a
 13260 1b8e 63020000 		.4byte	0x263
 13261 1b92 02       		.uleb128 0x2
 13262 1b93 91       		.byte	0x91
 13263 1b94 6B       		.sleb128 -21
 13264 1b95 22       		.uleb128 0x22
 13265 1b96 6D080000 		.4byte	.LASF21
 13266 1b9a 02       		.byte	0x2
 13267 1b9b 1B04     		.2byte	0x41b
 13268 1b9d 63020000 		.4byte	0x263
 13269 1ba1 02       		.uleb128 0x2
 13270 1ba2 91       		.byte	0x91
 13271 1ba3 6A       		.sleb128 -22
 13272 1ba4 00       		.byte	0
 13273 1ba5 29       		.uleb128 0x29
 13274 1ba6 6E040000 		.4byte	.LASF146
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 296


 13275 1baa 02       		.byte	0x2
 13276 1bab 3D04     		.2byte	0x43d
 13277 1bad 00000000 		.4byte	.LFB59
 13278 1bb1 76000000 		.4byte	.LFE59-.LFB59
 13279 1bb5 01       		.uleb128 0x1
 13280 1bb6 9C       		.byte	0x9c
 13281 1bb7 F61B0000 		.4byte	0x1bf6
 13282 1bbb 17       		.uleb128 0x17
 13283 1bbc C4070000 		.4byte	.LASF140
 13284 1bc0 02       		.byte	0x2
 13285 1bc1 3D04     		.2byte	0x43d
 13286 1bc3 30020000 		.4byte	0x230
 13287 1bc7 02       		.uleb128 0x2
 13288 1bc8 91       		.byte	0x91
 13289 1bc9 74       		.sleb128 -12
 13290 1bca 17       		.uleb128 0x17
 13291 1bcb 36070000 		.4byte	.LASF147
 13292 1bcf 02       		.byte	0x2
 13293 1bd0 3D04     		.2byte	0x43d
 13294 1bd2 9D010000 		.4byte	0x19d
 13295 1bd6 02       		.uleb128 0x2
 13296 1bd7 91       		.byte	0x91
 13297 1bd8 70       		.sleb128 -16
 13298 1bd9 17       		.uleb128 0x17
 13299 1bda E5080000 		.4byte	.LASF50
 13300 1bde 02       		.byte	0x2
 13301 1bdf 3D04     		.2byte	0x43d
 13302 1be1 D9000000 		.4byte	0xd9
 13303 1be5 02       		.uleb128 0x2
 13304 1be6 91       		.byte	0x91
 13305 1be7 6C       		.sleb128 -20
 13306 1be8 18       		.uleb128 0x18
 13307 1be9 6900     		.ascii	"i\000"
 13308 1beb 02       		.byte	0x2
 13309 1bec 3E04     		.2byte	0x43e
 13310 1bee 63020000 		.4byte	0x263
 13311 1bf2 02       		.uleb128 0x2
 13312 1bf3 91       		.byte	0x91
 13313 1bf4 7F       		.sleb128 -1
 13314 1bf5 00       		.byte	0
 13315 1bf6 2A       		.uleb128 0x2a
 13316 1bf7 3F080000 		.4byte	.LASF148
 13317 1bfb 02       		.byte	0x2
 13318 1bfc 4904     		.2byte	0x449
 13319 1bfe 00000000 		.4byte	.LFB60
 13320 1c02 9E000000 		.4byte	.LFE60-.LFB60
 13321 1c06 01       		.uleb128 0x1
 13322 1c07 9C       		.byte	0x9c
 13323 1c08 5A1C0000 		.4byte	0x1c5a
 13324 1c0c 17       		.uleb128 0x17
 13325 1c0d 36070000 		.4byte	.LASF147
 13326 1c11 02       		.byte	0x2
 13327 1c12 4904     		.2byte	0x449
 13328 1c14 30020000 		.4byte	0x230
 13329 1c18 03       		.uleb128 0x3
 13330 1c19 91       		.byte	0x91
 13331 1c1a AC7F     		.sleb128 -84
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 297


 13332 1c1c 17       		.uleb128 0x17
 13333 1c1d C4070000 		.4byte	.LASF140
 13334 1c21 02       		.byte	0x2
 13335 1c22 4904     		.2byte	0x449
 13336 1c24 9D010000 		.4byte	0x19d
 13337 1c28 03       		.uleb128 0x3
 13338 1c29 91       		.byte	0x91
 13339 1c2a A87F     		.sleb128 -88
 13340 1c2c 17       		.uleb128 0x17
 13341 1c2d E5080000 		.4byte	.LASF50
 13342 1c31 02       		.byte	0x2
 13343 1c32 4904     		.2byte	0x449
 13344 1c34 D9000000 		.4byte	0xd9
 13345 1c38 03       		.uleb128 0x3
 13346 1c39 91       		.byte	0x91
 13347 1c3a A47F     		.sleb128 -92
 13348 1c3c 22       		.uleb128 0x22
 13349 1c3d 51030000 		.4byte	.LASF122
 13350 1c41 02       		.byte	0x2
 13351 1c42 4D04     		.2byte	0x44d
 13352 1c44 A6020000 		.4byte	0x2a6
 13353 1c48 03       		.uleb128 0x3
 13354 1c49 91       		.byte	0x91
 13355 1c4a B47F     		.sleb128 -76
 13356 1c4c 18       		.uleb128 0x18
 13357 1c4d 7900     		.ascii	"y\000"
 13358 1c4f 02       		.byte	0x2
 13359 1c50 4F04     		.2byte	0x44f
 13360 1c52 D0020000 		.4byte	0x2d0
 13361 1c56 02       		.uleb128 0x2
 13362 1c57 91       		.byte	0x91
 13363 1c58 74       		.sleb128 -12
 13364 1c59 00       		.byte	0
 13365 1c5a 28       		.uleb128 0x28
 13366 1c5b 90010000 		.4byte	.LASF149
 13367 1c5f 02       		.byte	0x2
 13368 1c60 6304     		.2byte	0x463
 13369 1c62 94000000 		.4byte	0x94
 13370 1c66 00000000 		.4byte	.LFB61
 13371 1c6a B6000000 		.4byte	.LFE61-.LFB61
 13372 1c6e 01       		.uleb128 0x1
 13373 1c6f 9C       		.byte	0x9c
 13374 1c70 C31C0000 		.4byte	0x1cc3
 13375 1c74 17       		.uleb128 0x17
 13376 1c75 51030000 		.4byte	.LASF122
 13377 1c79 02       		.byte	0x2
 13378 1c7a 6304     		.2byte	0x463
 13379 1c7c 07030000 		.4byte	0x307
 13380 1c80 03       		.uleb128 0x3
 13381 1c81 91       		.byte	0x91
 13382 1c82 AC7F     		.sleb128 -84
 13383 1c84 17       		.uleb128 0x17
 13384 1c85 E5080000 		.4byte	.LASF50
 13385 1c89 02       		.byte	0x2
 13386 1c8a 6304     		.2byte	0x463
 13387 1c8c D9000000 		.4byte	0xd9
 13388 1c90 03       		.uleb128 0x3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 298


 13389 1c91 91       		.byte	0x91
 13390 1c92 A87F     		.sleb128 -88
 13391 1c94 22       		.uleb128 0x22
 13392 1c95 57010000 		.4byte	.LASF129
 13393 1c99 02       		.byte	0x2
 13394 1c9a 6404     		.2byte	0x464
 13395 1c9c 8F020000 		.4byte	0x28f
 13396 1ca0 02       		.uleb128 0x2
 13397 1ca1 91       		.byte	0x91
 13398 1ca2 54       		.sleb128 -44
 13399 1ca3 22       		.uleb128 0x22
 13400 1ca4 03010000 		.4byte	.LASF130
 13401 1ca8 02       		.byte	0x2
 13402 1ca9 6504     		.2byte	0x465
 13403 1cab 8F020000 		.4byte	0x28f
 13404 1caf 03       		.uleb128 0x3
 13405 1cb0 91       		.byte	0x91
 13406 1cb1 B47F     		.sleb128 -76
 13407 1cb3 22       		.uleb128 0x22
 13408 1cb4 B9030000 		.4byte	.LASF20
 13409 1cb8 02       		.byte	0x2
 13410 1cb9 6604     		.2byte	0x466
 13411 1cbb 63020000 		.4byte	0x263
 13412 1cbf 02       		.uleb128 0x2
 13413 1cc0 91       		.byte	0x91
 13414 1cc1 77       		.sleb128 -9
 13415 1cc2 00       		.byte	0
 13416 1cc3 28       		.uleb128 0x28
 13417 1cc4 0D010000 		.4byte	.LASF150
 13418 1cc8 02       		.byte	0x2
 13419 1cc9 7A04     		.2byte	0x47a
 13420 1ccb 94000000 		.4byte	0x94
 13421 1ccf 00000000 		.4byte	.LFB62
 13422 1cd3 52000000 		.4byte	.LFE62-.LFB62
 13423 1cd7 01       		.uleb128 0x1
 13424 1cd8 9C       		.byte	0x9c
 13425 1cd9 0E1D0000 		.4byte	0x1d0e
 13426 1cdd 17       		.uleb128 0x17
 13427 1cde C4070000 		.4byte	.LASF140
 13428 1ce2 02       		.byte	0x2
 13429 1ce3 7A04     		.2byte	0x47a
 13430 1ce5 30020000 		.4byte	0x230
 13431 1ce9 03       		.uleb128 0x3
 13432 1cea 91       		.byte	0x91
 13433 1ceb B47F     		.sleb128 -76
 13434 1ced 17       		.uleb128 0x17
 13435 1cee E5080000 		.4byte	.LASF50
 13436 1cf2 02       		.byte	0x2
 13437 1cf3 7A04     		.2byte	0x47a
 13438 1cf5 D9000000 		.4byte	0xd9
 13439 1cf9 03       		.uleb128 0x3
 13440 1cfa 91       		.byte	0x91
 13441 1cfb B07F     		.sleb128 -80
 13442 1cfd 22       		.uleb128 0x22
 13443 1cfe 510A0000 		.4byte	.LASF142
 13444 1d02 02       		.byte	0x2
 13445 1d03 7E04     		.2byte	0x47e
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 299


 13446 1d05 A6020000 		.4byte	0x2a6
 13447 1d09 03       		.uleb128 0x3
 13448 1d0a 91       		.byte	0x91
 13449 1d0b B87F     		.sleb128 -72
 13450 1d0d 00       		.byte	0
 13451 1d0e 28       		.uleb128 0x28
 13452 1d0f 9B070000 		.4byte	.LASF151
 13453 1d13 02       		.byte	0x2
 13454 1d14 8904     		.2byte	0x489
 13455 1d16 94000000 		.4byte	0x94
 13456 1d1a 00000000 		.4byte	.LFB63
 13457 1d1e C8000000 		.4byte	.LFE63-.LFB63
 13458 1d22 01       		.uleb128 0x1
 13459 1d23 9C       		.byte	0x9c
 13460 1d24 781D0000 		.4byte	0x1d78
 13461 1d28 17       		.uleb128 0x17
 13462 1d29 07090000 		.4byte	.LASF128
 13463 1d2d 02       		.byte	0x2
 13464 1d2e 8904     		.2byte	0x489
 13465 1d30 30020000 		.4byte	0x230
 13466 1d34 03       		.uleb128 0x3
 13467 1d35 91       		.byte	0x91
 13468 1d36 947F     		.sleb128 -108
 13469 1d38 17       		.uleb128 0x17
 13470 1d39 C4070000 		.4byte	.LASF140
 13471 1d3d 02       		.byte	0x2
 13472 1d3e 8904     		.2byte	0x489
 13473 1d40 9D010000 		.4byte	0x19d
 13474 1d44 03       		.uleb128 0x3
 13475 1d45 91       		.byte	0x91
 13476 1d46 907F     		.sleb128 -112
 13477 1d48 17       		.uleb128 0x17
 13478 1d49 E5080000 		.4byte	.LASF50
 13479 1d4d 02       		.byte	0x2
 13480 1d4e 8904     		.2byte	0x489
 13481 1d50 D9000000 		.4byte	0xd9
 13482 1d54 03       		.uleb128 0x3
 13483 1d55 91       		.byte	0x91
 13484 1d56 8C7F     		.sleb128 -116
 13485 1d58 22       		.uleb128 0x22
 13486 1d59 D6030000 		.4byte	.LASF141
 13487 1d5d 02       		.byte	0x2
 13488 1d5e 8E04     		.2byte	0x48e
 13489 1d60 8F020000 		.4byte	0x28f
 13490 1d64 02       		.uleb128 0x2
 13491 1d65 91       		.byte	0x91
 13492 1d66 58       		.sleb128 -40
 13493 1d67 22       		.uleb128 0x22
 13494 1d68 510A0000 		.4byte	.LASF142
 13495 1d6c 02       		.byte	0x2
 13496 1d6d 8F04     		.2byte	0x48f
 13497 1d6f A6020000 		.4byte	0x2a6
 13498 1d73 03       		.uleb128 0x3
 13499 1d74 91       		.byte	0x91
 13500 1d75 987F     		.sleb128 -104
 13501 1d77 00       		.byte	0
 13502 1d78 25       		.uleb128 0x25
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 300


 13503 1d79 33040000 		.4byte	.LASF152
 13504 1d7d 02       		.byte	0x2
 13505 1d7e AF04     		.2byte	0x4af
 13506 1d80 00000000 		.4byte	.LFB64
 13507 1d84 E0000000 		.4byte	.LFE64-.LFB64
 13508 1d88 01       		.uleb128 0x1
 13509 1d89 9C       		.byte	0x9c
 13510 1d8a 2F1E0000 		.4byte	0x1e2f
 13511 1d8e 17       		.uleb128 0x17
 13512 1d8f 2F070000 		.4byte	.LASF133
 13513 1d93 02       		.byte	0x2
 13514 1d94 AF04     		.2byte	0x4af
 13515 1d96 D0020000 		.4byte	0x2d0
 13516 1d9a 02       		.uleb128 0x2
 13517 1d9b 91       		.byte	0x91
 13518 1d9c 5C       		.sleb128 -36
 13519 1d9d 17       		.uleb128 0x17
 13520 1d9e D3010000 		.4byte	.LASF56
 13521 1da2 02       		.byte	0x2
 13522 1da3 B004     		.2byte	0x4b0
 13523 1da5 30020000 		.4byte	0x230
 13524 1da9 02       		.uleb128 0x2
 13525 1daa 91       		.byte	0x91
 13526 1dab 58       		.sleb128 -40
 13527 1dac 17       		.uleb128 0x17
 13528 1dad 91070000 		.4byte	.LASF153
 13529 1db1 02       		.byte	0x2
 13530 1db2 B104     		.2byte	0x4b1
 13531 1db4 9B000000 		.4byte	0x9b
 13532 1db8 02       		.uleb128 0x2
 13533 1db9 91       		.byte	0x91
 13534 1dba 54       		.sleb128 -44
 13535 1dbb 17       		.uleb128 0x17
 13536 1dbc E5080000 		.4byte	.LASF50
 13537 1dc0 02       		.byte	0x2
 13538 1dc1 B204     		.2byte	0x4b2
 13539 1dc3 D9000000 		.4byte	0xd9
 13540 1dc7 02       		.uleb128 0x2
 13541 1dc8 91       		.byte	0x91
 13542 1dc9 50       		.sleb128 -48
 13543 1dca 22       		.uleb128 0x22
 13544 1dcb 84010000 		.4byte	.LASF154
 13545 1dcf 02       		.byte	0x2
 13546 1dd0 B304     		.2byte	0x4b3
 13547 1dd2 9B000000 		.4byte	0x9b
 13548 1dd6 02       		.uleb128 0x2
 13549 1dd7 91       		.byte	0x91
 13550 1dd8 6C       		.sleb128 -20
 13551 1dd9 22       		.uleb128 0x22
 13552 1dda 55040000 		.4byte	.LASF126
 13553 1dde 02       		.byte	0x2
 13554 1ddf B404     		.2byte	0x4b4
 13555 1de1 9B000000 		.4byte	0x9b
 13556 1de5 02       		.uleb128 0x2
 13557 1de6 91       		.byte	0x91
 13558 1de7 68       		.sleb128 -24
 13559 1de8 22       		.uleb128 0x22
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 301


 13560 1de9 20020000 		.4byte	.LASF79
 13561 1ded 02       		.byte	0x2
 13562 1dee B504     		.2byte	0x4b5
 13563 1df0 94000000 		.4byte	0x94
 13564 1df4 02       		.uleb128 0x2
 13565 1df5 91       		.byte	0x91
 13566 1df6 64       		.sleb128 -28
 13567 1df7 22       		.uleb128 0x22
 13568 1df8 A5050000 		.4byte	.LASF44
 13569 1dfc 02       		.byte	0x2
 13570 1dfd B604     		.2byte	0x4b6
 13571 1dff 84020000 		.4byte	0x284
 13572 1e03 02       		.uleb128 0x2
 13573 1e04 91       		.byte	0x91
 13574 1e05 74       		.sleb128 -12
 13575 1e06 18       		.uleb128 0x18
 13576 1e07 70747200 		.ascii	"ptr\000"
 13577 1e0b 02       		.byte	0x2
 13578 1e0c B704     		.2byte	0x4b7
 13579 1e0e D0020000 		.4byte	0x2d0
 13580 1e12 02       		.uleb128 0x2
 13581 1e13 91       		.byte	0x91
 13582 1e14 70       		.sleb128 -16
 13583 1e15 23       		.uleb128 0x23
 13584 1e16 82000000 		.4byte	.LBB12
 13585 1e1a 22000000 		.4byte	.LBE12-.LBB12
 13586 1e1e 22       		.uleb128 0x22
 13587 1e1f E7020000 		.4byte	.LASF71
 13588 1e23 02       		.byte	0x2
 13589 1e24 CA04     		.2byte	0x4ca
 13590 1e26 84020000 		.4byte	0x284
 13591 1e2a 02       		.uleb128 0x2
 13592 1e2b 91       		.byte	0x91
 13593 1e2c 60       		.sleb128 -32
 13594 1e2d 00       		.byte	0
 13595 1e2e 00       		.byte	0
 13596 1e2f 24       		.uleb128 0x24
 13597 1e30 97020000 		.4byte	.LASF155
 13598 1e34 02       		.byte	0x2
 13599 1e35 D504     		.2byte	0x4d5
 13600 1e37 94000000 		.4byte	0x94
 13601 1e3b 00000000 		.4byte	.LFB65
 13602 1e3f 60020000 		.4byte	.LFE65-.LFB65
 13603 1e43 01       		.uleb128 0x1
 13604 1e44 9C       		.byte	0x9c
 13605 1e45 1C1F0000 		.4byte	0x1f1c
 13606 1e49 17       		.uleb128 0x17
 13607 1e4a 07090000 		.4byte	.LASF128
 13608 1e4e 02       		.byte	0x2
 13609 1e4f D504     		.2byte	0x4d5
 13610 1e51 30020000 		.4byte	0x230
 13611 1e55 03       		.uleb128 0x3
 13612 1e56 91       		.byte	0x91
 13613 1e57 E47E     		.sleb128 -156
 13614 1e59 17       		.uleb128 0x17
 13615 1e5a D1040000 		.4byte	.LASF156
 13616 1e5e 02       		.byte	0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 302


 13617 1e5f D604     		.2byte	0x4d6
 13618 1e61 30020000 		.4byte	0x230
 13619 1e65 03       		.uleb128 0x3
 13620 1e66 91       		.byte	0x91
 13621 1e67 E07E     		.sleb128 -160
 13622 1e69 17       		.uleb128 0x17
 13623 1e6a 470A0000 		.4byte	.LASF157
 13624 1e6e 02       		.byte	0x2
 13625 1e6f D704     		.2byte	0x4d7
 13626 1e71 9B000000 		.4byte	0x9b
 13627 1e75 03       		.uleb128 0x3
 13628 1e76 91       		.byte	0x91
 13629 1e77 DC7E     		.sleb128 -164
 13630 1e79 20       		.uleb128 0x20
 13631 1e7a 6B00     		.ascii	"k\000"
 13632 1e7c 02       		.byte	0x2
 13633 1e7d D804     		.2byte	0x4d8
 13634 1e7f D0020000 		.4byte	0x2d0
 13635 1e83 03       		.uleb128 0x3
 13636 1e84 91       		.byte	0x91
 13637 1e85 D87E     		.sleb128 -168
 13638 1e87 17       		.uleb128 0x17
 13639 1e88 D0020000 		.4byte	.LASF158
 13640 1e8c 02       		.byte	0x2
 13641 1e8d D904     		.2byte	0x4d9
 13642 1e8f 9D010000 		.4byte	0x19d
 13643 1e93 02       		.uleb128 0x2
 13644 1e94 91       		.byte	0x91
 13645 1e95 00       		.sleb128 0
 13646 1e96 17       		.uleb128 0x17
 13647 1e97 E5080000 		.4byte	.LASF50
 13648 1e9b 02       		.byte	0x2
 13649 1e9c DA04     		.2byte	0x4da
 13650 1e9e D9000000 		.4byte	0xd9
 13651 1ea2 02       		.uleb128 0x2
 13652 1ea3 91       		.byte	0x91
 13653 1ea4 04       		.sleb128 4
 13654 1ea5 18       		.uleb128 0x18
 13655 1ea6 746D7000 		.ascii	"tmp\000"
 13656 1eaa 02       		.byte	0x2
 13657 1eab DC04     		.2byte	0x4dc
 13658 1ead 8F020000 		.4byte	0x28f
 13659 1eb1 02       		.uleb128 0x2
 13660 1eb2 91       		.byte	0x91
 13661 1eb3 50       		.sleb128 -48
 13662 1eb4 18       		.uleb128 0x18
 13663 1eb5 7300     		.ascii	"s\000"
 13664 1eb7 02       		.byte	0x2
 13665 1eb8 DD04     		.2byte	0x4dd
 13666 1eba 8F020000 		.4byte	0x28f
 13667 1ebe 03       		.uleb128 0x3
 13668 1ebf 91       		.byte	0x91
 13669 1ec0 B07F     		.sleb128 -80
 13670 1ec2 18       		.uleb128 0x18
 13671 1ec3 6B3200   		.ascii	"k2\000"
 13672 1ec6 02       		.byte	0x2
 13673 1ec7 DE04     		.2byte	0x4de
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 303


 13674 1ec9 C10A0000 		.4byte	0xac1
 13675 1ecd 03       		.uleb128 0x3
 13676 1ece 91       		.byte	0x91
 13677 1ecf A87F     		.sleb128 -88
 13678 1ed1 18       		.uleb128 0x18
 13679 1ed2 7000     		.ascii	"p\000"
 13680 1ed4 02       		.byte	0x2
 13681 1ed5 E204     		.2byte	0x4e2
 13682 1ed7 A6020000 		.4byte	0x2a6
 13683 1edb 03       		.uleb128 0x3
 13684 1edc 91       		.byte	0x91
 13685 1edd E87E     		.sleb128 -152
 13686 1edf 22       		.uleb128 0x22
 13687 1ee0 A5050000 		.4byte	.LASF44
 13688 1ee4 02       		.byte	0x2
 13689 1ee5 E404     		.2byte	0x4e4
 13690 1ee7 84020000 		.4byte	0x284
 13691 1eeb 02       		.uleb128 0x2
 13692 1eec 91       		.byte	0x91
 13693 1eed 70       		.sleb128 -16
 13694 1eee 22       		.uleb128 0x22
 13695 1eef B9030000 		.4byte	.LASF20
 13696 1ef3 02       		.byte	0x2
 13697 1ef4 E504     		.2byte	0x4e5
 13698 1ef6 63020000 		.4byte	0x263
 13699 1efa 02       		.uleb128 0x2
 13700 1efb 91       		.byte	0x91
 13701 1efc 77       		.sleb128 -9
 13702 1efd 22       		.uleb128 0x22
 13703 1efe 55040000 		.4byte	.LASF126
 13704 1f02 02       		.byte	0x2
 13705 1f03 E604     		.2byte	0x4e6
 13706 1f05 63020000 		.4byte	0x263
 13707 1f09 02       		.uleb128 0x2
 13708 1f0a 91       		.byte	0x91
 13709 1f0b 76       		.sleb128 -10
 13710 1f0c 22       		.uleb128 0x22
 13711 1f0d 4A040000 		.4byte	.LASF22
 13712 1f11 02       		.byte	0x2
 13713 1f12 E704     		.2byte	0x4e7
 13714 1f14 6E020000 		.4byte	0x26e
 13715 1f18 02       		.uleb128 0x2
 13716 1f19 91       		.byte	0x91
 13717 1f1a 74       		.sleb128 -12
 13718 1f1b 00       		.byte	0
 13719 1f1c 28       		.uleb128 0x28
 13720 1f1d 26020000 		.4byte	.LASF159
 13721 1f21 02       		.byte	0x2
 13722 1f22 1F05     		.2byte	0x51f
 13723 1f24 94000000 		.4byte	0x94
 13724 1f28 00000000 		.4byte	.LFB66
 13725 1f2c 6C000000 		.4byte	.LFE66-.LFB66
 13726 1f30 01       		.uleb128 0x1
 13727 1f31 9C       		.byte	0x9c
 13728 1f32 9E1F0000 		.4byte	0x1f9e
 13729 1f36 17       		.uleb128 0x17
 13730 1f37 07090000 		.4byte	.LASF128
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 304


 13731 1f3b 02       		.byte	0x2
 13732 1f3c 1F05     		.2byte	0x51f
 13733 1f3e 30020000 		.4byte	0x230
 13734 1f42 02       		.uleb128 0x2
 13735 1f43 91       		.byte	0x91
 13736 1f44 4C       		.sleb128 -52
 13737 1f45 17       		.uleb128 0x17
 13738 1f46 D1040000 		.4byte	.LASF156
 13739 1f4a 02       		.byte	0x2
 13740 1f4b 2005     		.2byte	0x520
 13741 1f4d 30020000 		.4byte	0x230
 13742 1f51 02       		.uleb128 0x2
 13743 1f52 91       		.byte	0x91
 13744 1f53 48       		.sleb128 -56
 13745 1f54 17       		.uleb128 0x17
 13746 1f55 470A0000 		.4byte	.LASF157
 13747 1f59 02       		.byte	0x2
 13748 1f5a 2105     		.2byte	0x521
 13749 1f5c 9B000000 		.4byte	0x9b
 13750 1f60 02       		.uleb128 0x2
 13751 1f61 91       		.byte	0x91
 13752 1f62 44       		.sleb128 -60
 13753 1f63 17       		.uleb128 0x17
 13754 1f64 D0020000 		.4byte	.LASF158
 13755 1f68 02       		.byte	0x2
 13756 1f69 2205     		.2byte	0x522
 13757 1f6b 9D010000 		.4byte	0x19d
 13758 1f6f 02       		.uleb128 0x2
 13759 1f70 91       		.byte	0x91
 13760 1f71 40       		.sleb128 -64
 13761 1f72 17       		.uleb128 0x17
 13762 1f73 E5080000 		.4byte	.LASF50
 13763 1f77 02       		.byte	0x2
 13764 1f78 2305     		.2byte	0x523
 13765 1f7a D9000000 		.4byte	0xd9
 13766 1f7e 02       		.uleb128 0x2
 13767 1f7f 91       		.byte	0x91
 13768 1f80 00       		.sleb128 0
 13769 1f81 18       		.uleb128 0x18
 13770 1f82 6B00     		.ascii	"k\000"
 13771 1f84 02       		.byte	0x2
 13772 1f85 2405     		.2byte	0x524
 13773 1f87 8F020000 		.4byte	0x28f
 13774 1f8b 02       		.uleb128 0x2
 13775 1f8c 91       		.byte	0x91
 13776 1f8d 54       		.sleb128 -44
 13777 1f8e 22       		.uleb128 0x22
 13778 1f8f 8E060000 		.4byte	.LASF138
 13779 1f93 02       		.byte	0x2
 13780 1f94 2505     		.2byte	0x525
 13781 1f96 84020000 		.4byte	0x284
 13782 1f9a 02       		.uleb128 0x2
 13783 1f9b 91       		.byte	0x91
 13784 1f9c 74       		.sleb128 -12
 13785 1f9d 00       		.byte	0
 13786 1f9e 25       		.uleb128 0x25
 13787 1f9f DB080000 		.4byte	.LASF160
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 305


 13788 1fa3 02       		.byte	0x2
 13789 1fa4 3505     		.2byte	0x535
 13790 1fa6 00000000 		.4byte	.LFB67
 13791 1faa 7E000000 		.4byte	.LFE67-.LFB67
 13792 1fae 01       		.uleb128 0x1
 13793 1faf 9C       		.byte	0x9c
 13794 1fb0 ED1F0000 		.4byte	0x1fed
 13795 1fb4 17       		.uleb128 0x17
 13796 1fb5 86090000 		.4byte	.LASF161
 13797 1fb9 02       		.byte	0x2
 13798 1fba 3505     		.2byte	0x535
 13799 1fbc ED1F0000 		.4byte	0x1fed
 13800 1fc0 02       		.uleb128 0x2
 13801 1fc1 91       		.byte	0x91
 13802 1fc2 6C       		.sleb128 -20
 13803 1fc3 20       		.uleb128 0x20
 13804 1fc4 4B00     		.ascii	"K\000"
 13805 1fc6 02       		.byte	0x2
 13806 1fc7 3505     		.2byte	0x535
 13807 1fc9 30020000 		.4byte	0x230
 13808 1fcd 02       		.uleb128 0x2
 13809 1fce 91       		.byte	0x91
 13810 1fcf 68       		.sleb128 -24
 13811 1fd0 18       		.uleb128 0x18
 13812 1fd1 70616400 		.ascii	"pad\000"
 13813 1fd5 02       		.byte	0x2
 13814 1fd6 3605     		.2byte	0x536
 13815 1fd8 9D010000 		.4byte	0x19d
 13816 1fdc 02       		.uleb128 0x2
 13817 1fdd 91       		.byte	0x91
 13818 1fde 70       		.sleb128 -16
 13819 1fdf 18       		.uleb128 0x18
 13820 1fe0 6900     		.ascii	"i\000"
 13821 1fe2 02       		.byte	0x2
 13822 1fe3 3705     		.2byte	0x537
 13823 1fe5 9B000000 		.4byte	0x9b
 13824 1fe9 02       		.uleb128 0x2
 13825 1fea 91       		.byte	0x91
 13826 1feb 74       		.sleb128 -12
 13827 1fec 00       		.byte	0
 13828 1fed 05       		.uleb128 0x5
 13829 1fee 04       		.byte	0x4
 13830 1fef F31F0000 		.4byte	0x1ff3
 13831 1ff3 09       		.uleb128 0x9
 13832 1ff4 57020000 		.4byte	0x257
 13833 1ff8 25       		.uleb128 0x25
 13834 1ff9 BA020000 		.4byte	.LASF162
 13835 1ffd 02       		.byte	0x2
 13836 1ffe 4105     		.2byte	0x541
 13837 2000 00000000 		.4byte	.LFB68
 13838 2004 1C000000 		.4byte	.LFE68-.LFB68
 13839 2008 01       		.uleb128 0x1
 13840 2009 9C       		.byte	0x9c
 13841 200a 3C200000 		.4byte	0x203c
 13842 200e 17       		.uleb128 0x17
 13843 200f 86090000 		.4byte	.LASF161
 13844 2013 02       		.byte	0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 306


 13845 2014 4105     		.2byte	0x541
 13846 2016 ED1F0000 		.4byte	0x1fed
 13847 201a 02       		.uleb128 0x2
 13848 201b 91       		.byte	0x91
 13849 201c 74       		.sleb128 -12
 13850 201d 17       		.uleb128 0x17
 13851 201e 68090000 		.4byte	.LASF163
 13852 2022 02       		.byte	0x2
 13853 2023 4205     		.2byte	0x542
 13854 2025 30020000 		.4byte	0x230
 13855 2029 02       		.uleb128 0x2
 13856 202a 91       		.byte	0x91
 13857 202b 70       		.sleb128 -16
 13858 202c 17       		.uleb128 0x17
 13859 202d 30020000 		.4byte	.LASF164
 13860 2031 02       		.byte	0x2
 13861 2032 4305     		.2byte	0x543
 13862 2034 9B000000 		.4byte	0x9b
 13863 2038 02       		.uleb128 0x2
 13864 2039 91       		.byte	0x91
 13865 203a 6C       		.sleb128 -20
 13866 203b 00       		.byte	0
 13867 203c 25       		.uleb128 0x25
 13868 203d 4E050000 		.4byte	.LASF165
 13869 2041 02       		.byte	0x2
 13870 2042 4705     		.2byte	0x547
 13871 2044 00000000 		.4byte	.LFB69
 13872 2048 A8000000 		.4byte	.LFE69-.LFB69
 13873 204c 01       		.uleb128 0x1
 13874 204d 9C       		.byte	0x9c
 13875 204e 9A200000 		.4byte	0x209a
 13876 2052 17       		.uleb128 0x17
 13877 2053 86090000 		.4byte	.LASF161
 13878 2057 02       		.byte	0x2
 13879 2058 4705     		.2byte	0x547
 13880 205a ED1F0000 		.4byte	0x1fed
 13881 205e 02       		.uleb128 0x2
 13882 205f 91       		.byte	0x91
 13883 2060 6C       		.sleb128 -20
 13884 2061 20       		.uleb128 0x20
 13885 2062 4B00     		.ascii	"K\000"
 13886 2064 02       		.byte	0x2
 13887 2065 4805     		.2byte	0x548
 13888 2067 30020000 		.4byte	0x230
 13889 206b 02       		.uleb128 0x2
 13890 206c 91       		.byte	0x91
 13891 206d 68       		.sleb128 -24
 13892 206e 17       		.uleb128 0x17
 13893 206f 330A0000 		.4byte	.LASF40
 13894 2073 02       		.byte	0x2
 13895 2074 4905     		.2byte	0x549
 13896 2076 9D010000 		.4byte	0x19d
 13897 207a 02       		.uleb128 0x2
 13898 207b 91       		.byte	0x91
 13899 207c 64       		.sleb128 -28
 13900 207d 18       		.uleb128 0x18
 13901 207e 70616400 		.ascii	"pad\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 307


 13902 2082 02       		.byte	0x2
 13903 2083 4A05     		.2byte	0x54a
 13904 2085 9D010000 		.4byte	0x19d
 13905 2089 02       		.uleb128 0x2
 13906 208a 91       		.byte	0x91
 13907 208b 70       		.sleb128 -16
 13908 208c 18       		.uleb128 0x18
 13909 208d 6900     		.ascii	"i\000"
 13910 208f 02       		.byte	0x2
 13911 2090 4B05     		.2byte	0x54b
 13912 2092 9B000000 		.4byte	0x9b
 13913 2096 02       		.uleb128 0x2
 13914 2097 91       		.byte	0x91
 13915 2098 74       		.sleb128 -12
 13916 2099 00       		.byte	0
 13917 209a 25       		.uleb128 0x25
 13918 209b AF010000 		.4byte	.LASF166
 13919 209f 02       		.byte	0x2
 13920 20a0 5A05     		.2byte	0x55a
 13921 20a2 00000000 		.4byte	.LFB70
 13922 20a6 36000000 		.4byte	.LFE70-.LFB70
 13923 20aa 01       		.uleb128 0x1
 13924 20ab 9C       		.byte	0x9c
 13925 20ac DA200000 		.4byte	0x20da
 13926 20b0 17       		.uleb128 0x17
 13927 20b1 86090000 		.4byte	.LASF161
 13928 20b5 02       		.byte	0x2
 13929 20b6 5A05     		.2byte	0x55a
 13930 20b8 ED1F0000 		.4byte	0x1fed
 13931 20bc 02       		.uleb128 0x2
 13932 20bd 91       		.byte	0x91
 13933 20be 74       		.sleb128 -12
 13934 20bf 20       		.uleb128 0x20
 13935 20c0 4B00     		.ascii	"K\000"
 13936 20c2 02       		.byte	0x2
 13937 20c3 5A05     		.2byte	0x55a
 13938 20c5 9D010000 		.4byte	0x19d
 13939 20c9 02       		.uleb128 0x2
 13940 20ca 91       		.byte	0x91
 13941 20cb 70       		.sleb128 -16
 13942 20cc 20       		.uleb128 0x20
 13943 20cd 5600     		.ascii	"V\000"
 13944 20cf 02       		.byte	0x2
 13945 20d0 5A05     		.2byte	0x55a
 13946 20d2 9D010000 		.4byte	0x19d
 13947 20d6 02       		.uleb128 0x2
 13948 20d7 91       		.byte	0x91
 13949 20d8 6C       		.sleb128 -20
 13950 20d9 00       		.byte	0
 13951 20da 28       		.uleb128 0x28
 13952 20db 31050000 		.4byte	.LASF167
 13953 20df 02       		.byte	0x2
 13954 20e0 6605     		.2byte	0x566
 13955 20e2 94000000 		.4byte	0x94
 13956 20e6 00000000 		.4byte	.LFB71
 13957 20ea 6A020000 		.4byte	.LFE71-.LFB71
 13958 20ee 01       		.uleb128 0x1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 308


 13959 20ef 9C       		.byte	0x9c
 13960 20f0 11220000 		.4byte	0x2211
 13961 20f4 17       		.uleb128 0x17
 13962 20f5 07090000 		.4byte	.LASF128
 13963 20f9 02       		.byte	0x2
 13964 20fa 6605     		.2byte	0x566
 13965 20fc 30020000 		.4byte	0x230
 13966 2100 03       		.uleb128 0x3
 13967 2101 91       		.byte	0x91
 13968 2102 B47F     		.sleb128 -76
 13969 2104 17       		.uleb128 0x17
 13970 2105 D1040000 		.4byte	.LASF156
 13971 2109 02       		.byte	0x2
 13972 210a 6705     		.2byte	0x567
 13973 210c 30020000 		.4byte	0x230
 13974 2110 03       		.uleb128 0x3
 13975 2111 91       		.byte	0x91
 13976 2112 B07F     		.sleb128 -80
 13977 2114 17       		.uleb128 0x17
 13978 2115 470A0000 		.4byte	.LASF157
 13979 2119 02       		.byte	0x2
 13980 211a 6805     		.2byte	0x568
 13981 211c 9B000000 		.4byte	0x9b
 13982 2120 03       		.uleb128 0x3
 13983 2121 91       		.byte	0x91
 13984 2122 AC7F     		.sleb128 -84
 13985 2124 17       		.uleb128 0x17
 13986 2125 86090000 		.4byte	.LASF161
 13987 2129 02       		.byte	0x2
 13988 212a 6905     		.2byte	0x569
 13989 212c ED1F0000 		.4byte	0x1fed
 13990 2130 03       		.uleb128 0x3
 13991 2131 91       		.byte	0x91
 13992 2132 A87F     		.sleb128 -88
 13993 2134 17       		.uleb128 0x17
 13994 2135 D0020000 		.4byte	.LASF158
 13995 2139 02       		.byte	0x2
 13996 213a 6A05     		.2byte	0x56a
 13997 213c 9D010000 		.4byte	0x19d
 13998 2140 02       		.uleb128 0x2
 13999 2141 91       		.byte	0x91
 14000 2142 00       		.sleb128 0
 14001 2143 17       		.uleb128 0x17
 14002 2144 E5080000 		.4byte	.LASF50
 14003 2148 02       		.byte	0x2
 14004 2149 6B05     		.2byte	0x56b
 14005 214b D9000000 		.4byte	0xd9
 14006 214f 02       		.uleb128 0x2
 14007 2150 91       		.byte	0x91
 14008 2151 04       		.sleb128 4
 14009 2152 18       		.uleb128 0x18
 14010 2153 4B00     		.ascii	"K\000"
 14011 2155 02       		.byte	0x2
 14012 2156 6C05     		.2byte	0x56c
 14013 2158 9D010000 		.4byte	0x19d
 14014 215c 02       		.uleb128 0x2
 14015 215d 91       		.byte	0x91
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 309


 14016 215e 68       		.sleb128 -24
 14017 215f 18       		.uleb128 0x18
 14018 2160 5600     		.ascii	"V\000"
 14019 2162 02       		.byte	0x2
 14020 2163 6D05     		.2byte	0x56d
 14021 2165 9D010000 		.4byte	0x19d
 14022 2169 02       		.uleb128 0x2
 14023 216a 91       		.byte	0x91
 14024 216b 64       		.sleb128 -28
 14025 216c 22       		.uleb128 0x22
 14026 216d 6D080000 		.4byte	.LASF21
 14027 2171 02       		.byte	0x2
 14028 2172 6E05     		.2byte	0x56e
 14029 2174 63020000 		.4byte	0x263
 14030 2178 02       		.uleb128 0x2
 14031 2179 91       		.byte	0x91
 14032 217a 63       		.sleb128 -29
 14033 217b 22       		.uleb128 0x22
 14034 217c 55040000 		.4byte	.LASF126
 14035 2180 02       		.byte	0x2
 14036 2181 6F05     		.2byte	0x56f
 14037 2183 63020000 		.4byte	0x263
 14038 2187 02       		.uleb128 0x2
 14039 2188 91       		.byte	0x91
 14040 2189 62       		.sleb128 -30
 14041 218a 22       		.uleb128 0x22
 14042 218b 4A040000 		.4byte	.LASF22
 14043 218f 02       		.byte	0x2
 14044 2190 7005     		.2byte	0x570
 14045 2192 6E020000 		.4byte	0x26e
 14046 2196 02       		.uleb128 0x2
 14047 2197 91       		.byte	0x91
 14048 2198 60       		.sleb128 -32
 14049 2199 22       		.uleb128 0x22
 14050 219a 8E060000 		.4byte	.LASF138
 14051 219e 02       		.byte	0x2
 14052 219f 7105     		.2byte	0x571
 14053 21a1 84020000 		.4byte	0x284
 14054 21a5 02       		.uleb128 0x2
 14055 21a6 91       		.byte	0x91
 14056 21a7 74       		.sleb128 -12
 14057 21a8 18       		.uleb128 0x18
 14058 21a9 6900     		.ascii	"i\000"
 14059 21ab 02       		.byte	0x2
 14060 21ac 7205     		.2byte	0x572
 14061 21ae 9B000000 		.4byte	0x9b
 14062 21b2 02       		.uleb128 0x2
 14063 21b3 91       		.byte	0x91
 14064 21b4 70       		.sleb128 -16
 14065 21b5 2B       		.uleb128 0x2b
 14066 21b6 19020000 		.4byte	.LASF182
 14067 21ba 02       		.byte	0x2
 14068 21bb 9905     		.2byte	0x599
 14069 21bd 9C010000 		.4byte	.L327
 14070 21c1 23       		.uleb128 0x23
 14071 21c2 32010000 		.4byte	.LBB13
 14072 21c6 22010000 		.4byte	.LBE13-.LBB13
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 310


 14073 21ca 18       		.uleb128 0x18
 14074 21cb 5400     		.ascii	"T\000"
 14075 21cd 02       		.byte	0x2
 14076 21ce 8D05     		.2byte	0x58d
 14077 21d0 8F020000 		.4byte	0x28f
 14078 21d4 03       		.uleb128 0x3
 14079 21d5 91       		.byte	0x91
 14080 21d6 B87F     		.sleb128 -72
 14081 21d8 22       		.uleb128 0x22
 14082 21d9 18000000 		.4byte	.LASF168
 14083 21dd 02       		.byte	0x2
 14084 21de 8E05     		.2byte	0x58e
 14085 21e0 9D010000 		.4byte	0x19d
 14086 21e4 02       		.uleb128 0x2
 14087 21e5 91       		.byte	0x91
 14088 21e6 5C       		.sleb128 -36
 14089 21e7 22       		.uleb128 0x22
 14090 21e8 2C000000 		.4byte	.LASF169
 14091 21ec 02       		.byte	0x2
 14092 21ed 8F05     		.2byte	0x58f
 14093 21ef 63020000 		.4byte	0x263
 14094 21f3 02       		.uleb128 0x2
 14095 21f4 91       		.byte	0x91
 14096 21f5 6F       		.sleb128 -17
 14097 21f6 23       		.uleb128 0x23
 14098 21f7 B0010000 		.4byte	.LBB14
 14099 21fb 46000000 		.4byte	.LBE14-.LBB14
 14100 21ff 22       		.uleb128 0x22
 14101 2200 8E080000 		.4byte	.LASF137
 14102 2204 02       		.byte	0x2
 14103 2205 9B05     		.2byte	0x59b
 14104 2207 84020000 		.4byte	0x284
 14105 220b 02       		.uleb128 0x2
 14106 220c 91       		.byte	0x91
 14107 220d 58       		.sleb128 -40
 14108 220e 00       		.byte	0
 14109 220f 00       		.byte	0
 14110 2210 00       		.byte	0
 14111 2211 21       		.uleb128 0x21
 14112 2212 2E040000 		.4byte	.LASF170
 14113 2216 02       		.byte	0x2
 14114 2217 AF05     		.2byte	0x5af
 14115 2219 6E020000 		.4byte	0x26e
 14116 221d 00000000 		.4byte	.LFB72
 14117 2221 2C000000 		.4byte	.LFE72-.LFB72
 14118 2225 01       		.uleb128 0x1
 14119 2226 9C       		.byte	0x9c
 14120 2227 46220000 		.4byte	0x2246
 14121 222b 20       		.uleb128 0x20
 14122 222c 6100     		.ascii	"a\000"
 14123 222e 02       		.byte	0x2
 14124 222f AF05     		.2byte	0x5af
 14125 2231 6E020000 		.4byte	0x26e
 14126 2235 02       		.uleb128 0x2
 14127 2236 91       		.byte	0x91
 14128 2237 7E       		.sleb128 -2
 14129 2238 20       		.uleb128 0x20
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 311


 14130 2239 6200     		.ascii	"b\000"
 14131 223b 02       		.byte	0x2
 14132 223c AF05     		.2byte	0x5af
 14133 223e 6E020000 		.4byte	0x26e
 14134 2242 02       		.uleb128 0x2
 14135 2243 91       		.byte	0x91
 14136 2244 7C       		.sleb128 -4
 14137 2245 00       		.byte	0
 14138 2246 28       		.uleb128 0x28
 14139 2247 26080000 		.4byte	.LASF171
 14140 224b 02       		.byte	0x2
 14141 224c B305     		.2byte	0x5b3
 14142 224e 94000000 		.4byte	0x94
 14143 2252 00000000 		.4byte	.LFB73
 14144 2256 3C050000 		.4byte	.LFE73-.LFB73
 14145 225a 01       		.uleb128 0x1
 14146 225b 9C       		.byte	0x9c
 14147 225c D4230000 		.4byte	0x23d4
 14148 2260 17       		.uleb128 0x17
 14149 2261 C4070000 		.4byte	.LASF140
 14150 2265 02       		.byte	0x2
 14151 2266 B305     		.2byte	0x5b3
 14152 2268 30020000 		.4byte	0x230
 14153 226c 03       		.uleb128 0x3
 14154 226d 91       		.byte	0x91
 14155 226e 8C7C     		.sleb128 -500
 14156 2270 17       		.uleb128 0x17
 14157 2271 D1040000 		.4byte	.LASF156
 14158 2275 02       		.byte	0x2
 14159 2276 B405     		.2byte	0x5b4
 14160 2278 30020000 		.4byte	0x230
 14161 227c 03       		.uleb128 0x3
 14162 227d 91       		.byte	0x91
 14163 227e 887C     		.sleb128 -504
 14164 2280 17       		.uleb128 0x17
 14165 2281 470A0000 		.4byte	.LASF157
 14166 2285 02       		.byte	0x2
 14167 2286 B505     		.2byte	0x5b5
 14168 2288 9B000000 		.4byte	0x9b
 14169 228c 03       		.uleb128 0x3
 14170 228d 91       		.byte	0x91
 14171 228e 847C     		.sleb128 -508
 14172 2290 17       		.uleb128 0x17
 14173 2291 D0020000 		.4byte	.LASF158
 14174 2295 02       		.byte	0x2
 14175 2296 B605     		.2byte	0x5b6
 14176 2298 30020000 		.4byte	0x230
 14177 229c 03       		.uleb128 0x3
 14178 229d 91       		.byte	0x91
 14179 229e 807C     		.sleb128 -512
 14180 22a0 17       		.uleb128 0x17
 14181 22a1 E5080000 		.4byte	.LASF50
 14182 22a5 02       		.byte	0x2
 14183 22a6 B705     		.2byte	0x5b7
 14184 22a8 D9000000 		.4byte	0xd9
 14185 22ac 02       		.uleb128 0x2
 14186 22ad 91       		.byte	0x91
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 312


 14187 22ae 00       		.sleb128 0
 14188 22af 18       		.uleb128 0x18
 14189 22b0 753100   		.ascii	"u1\000"
 14190 22b3 02       		.byte	0x2
 14191 22b4 B805     		.2byte	0x5b8
 14192 22b6 8F020000 		.4byte	0x28f
 14193 22ba 02       		.uleb128 0x2
 14194 22bb 91       		.byte	0x91
 14195 22bc 40       		.sleb128 -64
 14196 22bd 18       		.uleb128 0x18
 14197 22be 753200   		.ascii	"u2\000"
 14198 22c1 02       		.byte	0x2
 14199 22c2 B805     		.2byte	0x5b8
 14200 22c4 8F020000 		.4byte	0x28f
 14201 22c8 03       		.uleb128 0x3
 14202 22c9 91       		.byte	0x91
 14203 22ca A07F     		.sleb128 -96
 14204 22cc 18       		.uleb128 0x18
 14205 22cd 7A00     		.ascii	"z\000"
 14206 22cf 02       		.byte	0x2
 14207 22d0 B905     		.2byte	0x5b9
 14208 22d2 8F020000 		.4byte	0x28f
 14209 22d6 03       		.uleb128 0x3
 14210 22d7 91       		.byte	0x91
 14211 22d8 807F     		.sleb128 -128
 14212 22da 18       		.uleb128 0x18
 14213 22db 73756D00 		.ascii	"sum\000"
 14214 22df 02       		.byte	0x2
 14215 22e0 BA05     		.2byte	0x5ba
 14216 22e2 A6020000 		.4byte	0x2a6
 14217 22e6 03       		.uleb128 0x3
 14218 22e7 91       		.byte	0x91
 14219 22e8 C07E     		.sleb128 -192
 14220 22ea 18       		.uleb128 0x18
 14221 22eb 727800   		.ascii	"rx\000"
 14222 22ee 02       		.byte	0x2
 14223 22ef BB05     		.2byte	0x5bb
 14224 22f1 8F020000 		.4byte	0x28f
 14225 22f5 03       		.uleb128 0x3
 14226 22f6 91       		.byte	0x91
 14227 22f7 A07E     		.sleb128 -224
 14228 22f9 18       		.uleb128 0x18
 14229 22fa 727900   		.ascii	"ry\000"
 14230 22fd 02       		.byte	0x2
 14231 22fe BC05     		.2byte	0x5bc
 14232 2300 8F020000 		.4byte	0x28f
 14233 2304 03       		.uleb128 0x3
 14234 2305 91       		.byte	0x91
 14235 2306 807E     		.sleb128 -256
 14236 2308 18       		.uleb128 0x18
 14237 2309 747800   		.ascii	"tx\000"
 14238 230c 02       		.byte	0x2
 14239 230d BD05     		.2byte	0x5bd
 14240 230f 8F020000 		.4byte	0x28f
 14241 2313 03       		.uleb128 0x3
 14242 2314 91       		.byte	0x91
 14243 2315 E07D     		.sleb128 -288
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 313


 14244 2317 18       		.uleb128 0x18
 14245 2318 747900   		.ascii	"ty\000"
 14246 231b 02       		.byte	0x2
 14247 231c BE05     		.2byte	0x5be
 14248 231e 8F020000 		.4byte	0x28f
 14249 2322 03       		.uleb128 0x3
 14250 2323 91       		.byte	0x91
 14251 2324 C07D     		.sleb128 -320
 14252 2326 18       		.uleb128 0x18
 14253 2327 747A00   		.ascii	"tz\000"
 14254 232a 02       		.byte	0x2
 14255 232b BF05     		.2byte	0x5bf
 14256 232d 8F020000 		.4byte	0x28f
 14257 2331 03       		.uleb128 0x3
 14258 2332 91       		.byte	0x91
 14259 2333 A07D     		.sleb128 -352
 14260 2335 22       		.uleb128 0x22
 14261 2336 2A050000 		.4byte	.LASF172
 14262 233a 02       		.byte	0x2
 14263 233b C005     		.2byte	0x5c0
 14264 233d D4230000 		.4byte	0x23d4
 14265 2341 03       		.uleb128 0x3
 14266 2342 91       		.byte	0x91
 14267 2343 907D     		.sleb128 -368
 14268 2345 22       		.uleb128 0x22
 14269 2346 51030000 		.4byte	.LASF122
 14270 234a 02       		.byte	0x2
 14271 234b C105     		.2byte	0x5c1
 14272 234d 07030000 		.4byte	0x307
 14273 2351 02       		.uleb128 0x2
 14274 2352 91       		.byte	0x91
 14275 2353 64       		.sleb128 -28
 14276 2354 22       		.uleb128 0x22
 14277 2355 70090000 		.4byte	.LASF124
 14278 2359 02       		.byte	0x2
 14279 235a C205     		.2byte	0x5c2
 14280 235c 6E020000 		.4byte	0x26e
 14281 2360 02       		.uleb128 0x2
 14282 2361 91       		.byte	0x91
 14283 2362 6A       		.sleb128 -22
 14284 2363 18       		.uleb128 0x18
 14285 2364 6900     		.ascii	"i\000"
 14286 2366 02       		.byte	0x2
 14287 2367 C305     		.2byte	0x5c3
 14288 2369 6E020000 		.4byte	0x26e
 14289 236d 02       		.uleb128 0x2
 14290 236e 91       		.byte	0x91
 14291 236f 6E       		.sleb128 -18
 14292 2370 22       		.uleb128 0x22
 14293 2371 510A0000 		.4byte	.LASF142
 14294 2375 02       		.byte	0x2
 14295 2376 C705     		.2byte	0x5c7
 14296 2378 A6020000 		.4byte	0x2a6
 14297 237c 03       		.uleb128 0x3
 14298 237d 91       		.byte	0x91
 14299 237e D07C     		.sleb128 -432
 14300 2380 18       		.uleb128 0x18
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 314


 14301 2381 7200     		.ascii	"r\000"
 14302 2383 02       		.byte	0x2
 14303 2384 C905     		.2byte	0x5c9
 14304 2386 8F020000 		.4byte	0x28f
 14305 238a 03       		.uleb128 0x3
 14306 238b 91       		.byte	0x91
 14307 238c B07C     		.sleb128 -464
 14308 238e 18       		.uleb128 0x18
 14309 238f 7300     		.ascii	"s\000"
 14310 2391 02       		.byte	0x2
 14311 2392 C905     		.2byte	0x5c9
 14312 2394 8F020000 		.4byte	0x28f
 14313 2398 03       		.uleb128 0x3
 14314 2399 91       		.byte	0x91
 14315 239a 907C     		.sleb128 -496
 14316 239c 22       		.uleb128 0x22
 14317 239d B9030000 		.4byte	.LASF20
 14318 23a1 02       		.byte	0x2
 14319 23a2 CA05     		.2byte	0x5ca
 14320 23a4 63020000 		.4byte	0x263
 14321 23a8 02       		.uleb128 0x2
 14322 23a9 91       		.byte	0x91
 14323 23aa 6D       		.sleb128 -19
 14324 23ab 22       		.uleb128 0x22
 14325 23ac 55040000 		.4byte	.LASF126
 14326 23b0 02       		.byte	0x2
 14327 23b1 CB05     		.2byte	0x5cb
 14328 23b3 63020000 		.4byte	0x263
 14329 23b7 02       		.uleb128 0x2
 14330 23b8 91       		.byte	0x91
 14331 23b9 6C       		.sleb128 -20
 14332 23ba 23       		.uleb128 0x23
 14333 23bb C4030000 		.4byte	.LBB15
 14334 23bf E2000000 		.4byte	.LBE15-.LBB15
 14335 23c3 22       		.uleb128 0x22
 14336 23c4 D9070000 		.4byte	.LASF78
 14337 23c8 02       		.byte	0x2
 14338 23c9 0806     		.2byte	0x608
 14339 23cb 84020000 		.4byte	0x284
 14340 23cf 02       		.uleb128 0x2
 14341 23d0 91       		.byte	0x91
 14342 23d1 60       		.sleb128 -32
 14343 23d2 00       		.byte	0
 14344 23d3 00       		.byte	0
 14345 23d4 11       		.uleb128 0x11
 14346 23d5 07030000 		.4byte	0x307
 14347 23d9 E4230000 		.4byte	0x23e4
 14348 23dd 12       		.uleb128 0x12
 14349 23de 9F020000 		.4byte	0x29f
 14350 23e2 03       		.byte	0x3
 14351 23e3 00       		.byte	0
 14352 23e4 15       		.uleb128 0x15
 14353 23e5 01030000 		.4byte	.LASF173
 14354 23e9 02       		.byte	0x2
 14355 23ea BD       		.byte	0xbd
 14356 23eb 78010000 		.4byte	0x178
 14357 23ef 05       		.uleb128 0x5
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 315


 14358 23f0 03       		.byte	0x3
 14359 23f1 00000000 		.4byte	g_rng_function
 14360 23f5 15       		.uleb128 0x15
 14361 23f6 95050000 		.4byte	.LASF174
 14362 23fa 03       		.byte	0x3
 14363 23fb 8B       		.byte	0x8b
 14364 23fc 73010000 		.4byte	0x173
 14365 2400 05       		.uleb128 0x5
 14366 2401 03       		.byte	0x3
 14367 2402 00000000 		.4byte	curve_secp160r1
 14368 2406 22       		.uleb128 0x22
 14369 2407 09020000 		.4byte	.LASF175
 14370 240b 03       		.byte	0x3
 14371 240c 1C01     		.2byte	0x11c
 14372 240e 73010000 		.4byte	0x173
 14373 2412 05       		.uleb128 0x5
 14374 2413 03       		.byte	0x3
 14375 2414 B4000000 		.4byte	curve_secp192r1
 14376 2418 22       		.uleb128 0x22
 14377 2419 DC000000 		.4byte	.LASF176
 14378 241d 03       		.byte	0x3
 14379 241e 9E01     		.2byte	0x19e
 14380 2420 73010000 		.4byte	0x173
 14381 2424 05       		.uleb128 0x5
 14382 2425 03       		.byte	0x3
 14383 2426 68010000 		.4byte	curve_secp224r1
 14384 242a 22       		.uleb128 0x22
 14385 242b F2070000 		.4byte	.LASF177
 14386 242f 03       		.byte	0x3
 14387 2430 E002     		.2byte	0x2e0
 14388 2432 73010000 		.4byte	0x173
 14389 2436 05       		.uleb128 0x5
 14390 2437 03       		.byte	0x3
 14391 2438 1C020000 		.4byte	curve_secp256r1
 14392 243c 22       		.uleb128 0x22
 14393 243d A8040000 		.4byte	.LASF178
 14394 2441 03       		.byte	0x3
 14395 2442 2F04     		.2byte	0x42f
 14396 2444 73010000 		.4byte	0x173
 14397 2448 05       		.uleb128 0x5
 14398 2449 03       		.byte	0x3
 14399 244a D0020000 		.4byte	curve_secp256k1
 14400 244e 00       		.byte	0
 14401              		.section	.debug_abbrev,"",%progbits
 14402              	.Ldebug_abbrev0:
 14403 0000 01       		.uleb128 0x1
 14404 0001 11       		.uleb128 0x11
 14405 0002 01       		.byte	0x1
 14406 0003 25       		.uleb128 0x25
 14407 0004 0E       		.uleb128 0xe
 14408 0005 13       		.uleb128 0x13
 14409 0006 0B       		.uleb128 0xb
 14410 0007 03       		.uleb128 0x3
 14411 0008 0E       		.uleb128 0xe
 14412 0009 1B       		.uleb128 0x1b
 14413 000a 0E       		.uleb128 0xe
 14414 000b 55       		.uleb128 0x55
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 316


 14415 000c 17       		.uleb128 0x17
 14416 000d 11       		.uleb128 0x11
 14417 000e 01       		.uleb128 0x1
 14418 000f 10       		.uleb128 0x10
 14419 0010 17       		.uleb128 0x17
 14420 0011 00       		.byte	0
 14421 0012 00       		.byte	0
 14422 0013 02       		.uleb128 0x2
 14423 0014 16       		.uleb128 0x16
 14424 0015 00       		.byte	0
 14425 0016 03       		.uleb128 0x3
 14426 0017 0E       		.uleb128 0xe
 14427 0018 3A       		.uleb128 0x3a
 14428 0019 0B       		.uleb128 0xb
 14429 001a 3B       		.uleb128 0x3b
 14430 001b 0B       		.uleb128 0xb
 14431 001c 49       		.uleb128 0x49
 14432 001d 13       		.uleb128 0x13
 14433 001e 00       		.byte	0
 14434 001f 00       		.byte	0
 14435 0020 03       		.uleb128 0x3
 14436 0021 24       		.uleb128 0x24
 14437 0022 00       		.byte	0
 14438 0023 0B       		.uleb128 0xb
 14439 0024 0B       		.uleb128 0xb
 14440 0025 3E       		.uleb128 0x3e
 14441 0026 0B       		.uleb128 0xb
 14442 0027 03       		.uleb128 0x3
 14443 0028 0E       		.uleb128 0xe
 14444 0029 00       		.byte	0
 14445 002a 00       		.byte	0
 14446 002b 04       		.uleb128 0x4
 14447 002c 24       		.uleb128 0x24
 14448 002d 00       		.byte	0
 14449 002e 0B       		.uleb128 0xb
 14450 002f 0B       		.uleb128 0xb
 14451 0030 3E       		.uleb128 0x3e
 14452 0031 0B       		.uleb128 0xb
 14453 0032 03       		.uleb128 0x3
 14454 0033 08       		.uleb128 0x8
 14455 0034 00       		.byte	0
 14456 0035 00       		.byte	0
 14457 0036 05       		.uleb128 0x5
 14458 0037 0F       		.uleb128 0xf
 14459 0038 00       		.byte	0
 14460 0039 0B       		.uleb128 0xb
 14461 003a 0B       		.uleb128 0xb
 14462 003b 49       		.uleb128 0x49
 14463 003c 13       		.uleb128 0x13
 14464 003d 00       		.byte	0
 14465 003e 00       		.byte	0
 14466 003f 06       		.uleb128 0x6
 14467 0040 13       		.uleb128 0x13
 14468 0041 01       		.byte	0x1
 14469 0042 03       		.uleb128 0x3
 14470 0043 0E       		.uleb128 0xe
 14471 0044 0B       		.uleb128 0xb
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 317


 14472 0045 0B       		.uleb128 0xb
 14473 0046 3A       		.uleb128 0x3a
 14474 0047 0B       		.uleb128 0xb
 14475 0048 3B       		.uleb128 0x3b
 14476 0049 0B       		.uleb128 0xb
 14477 004a 01       		.uleb128 0x1
 14478 004b 13       		.uleb128 0x13
 14479 004c 00       		.byte	0
 14480 004d 00       		.byte	0
 14481 004e 07       		.uleb128 0x7
 14482 004f 0D       		.uleb128 0xd
 14483 0050 00       		.byte	0
 14484 0051 03       		.uleb128 0x3
 14485 0052 0E       		.uleb128 0xe
 14486 0053 3A       		.uleb128 0x3a
 14487 0054 0B       		.uleb128 0xb
 14488 0055 3B       		.uleb128 0x3b
 14489 0056 0B       		.uleb128 0xb
 14490 0057 49       		.uleb128 0x49
 14491 0058 13       		.uleb128 0x13
 14492 0059 38       		.uleb128 0x38
 14493 005a 0B       		.uleb128 0xb
 14494 005b 00       		.byte	0
 14495 005c 00       		.byte	0
 14496 005d 08       		.uleb128 0x8
 14497 005e 0D       		.uleb128 0xd
 14498 005f 00       		.byte	0
 14499 0060 03       		.uleb128 0x3
 14500 0061 08       		.uleb128 0x8
 14501 0062 3A       		.uleb128 0x3a
 14502 0063 0B       		.uleb128 0xb
 14503 0064 3B       		.uleb128 0x3b
 14504 0065 0B       		.uleb128 0xb
 14505 0066 49       		.uleb128 0x49
 14506 0067 13       		.uleb128 0x13
 14507 0068 38       		.uleb128 0x38
 14508 0069 0B       		.uleb128 0xb
 14509 006a 00       		.byte	0
 14510 006b 00       		.byte	0
 14511 006c 09       		.uleb128 0x9
 14512 006d 26       		.uleb128 0x26
 14513 006e 00       		.byte	0
 14514 006f 49       		.uleb128 0x49
 14515 0070 13       		.uleb128 0x13
 14516 0071 00       		.byte	0
 14517 0072 00       		.byte	0
 14518 0073 0A       		.uleb128 0xa
 14519 0074 15       		.uleb128 0x15
 14520 0075 01       		.byte	0x1
 14521 0076 27       		.uleb128 0x27
 14522 0077 19       		.uleb128 0x19
 14523 0078 49       		.uleb128 0x49
 14524 0079 13       		.uleb128 0x13
 14525 007a 01       		.uleb128 0x1
 14526 007b 13       		.uleb128 0x13
 14527 007c 00       		.byte	0
 14528 007d 00       		.byte	0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 318


 14529 007e 0B       		.uleb128 0xb
 14530 007f 05       		.uleb128 0x5
 14531 0080 00       		.byte	0
 14532 0081 49       		.uleb128 0x49
 14533 0082 13       		.uleb128 0x13
 14534 0083 00       		.byte	0
 14535 0084 00       		.byte	0
 14536 0085 0C       		.uleb128 0xc
 14537 0086 13       		.uleb128 0x13
 14538 0087 01       		.byte	0x1
 14539 0088 03       		.uleb128 0x3
 14540 0089 0E       		.uleb128 0xe
 14541 008a 0B       		.uleb128 0xb
 14542 008b 0B       		.uleb128 0xb
 14543 008c 3A       		.uleb128 0x3a
 14544 008d 0B       		.uleb128 0xb
 14545 008e 3B       		.uleb128 0x3b
 14546 008f 05       		.uleb128 0x5
 14547 0090 01       		.uleb128 0x1
 14548 0091 13       		.uleb128 0x13
 14549 0092 00       		.byte	0
 14550 0093 00       		.byte	0
 14551 0094 0D       		.uleb128 0xd
 14552 0095 0D       		.uleb128 0xd
 14553 0096 00       		.byte	0
 14554 0097 03       		.uleb128 0x3
 14555 0098 0E       		.uleb128 0xe
 14556 0099 3A       		.uleb128 0x3a
 14557 009a 0B       		.uleb128 0xb
 14558 009b 3B       		.uleb128 0x3b
 14559 009c 05       		.uleb128 0x5
 14560 009d 49       		.uleb128 0x49
 14561 009e 13       		.uleb128 0x13
 14562 009f 38       		.uleb128 0x38
 14563 00a0 0B       		.uleb128 0xb
 14564 00a1 00       		.byte	0
 14565 00a2 00       		.byte	0
 14566 00a3 0E       		.uleb128 0xe
 14567 00a4 0D       		.uleb128 0xd
 14568 00a5 00       		.byte	0
 14569 00a6 03       		.uleb128 0x3
 14570 00a7 08       		.uleb128 0x8
 14571 00a8 3A       		.uleb128 0x3a
 14572 00a9 0B       		.uleb128 0xb
 14573 00aa 3B       		.uleb128 0x3b
 14574 00ab 05       		.uleb128 0x5
 14575 00ac 49       		.uleb128 0x49
 14576 00ad 13       		.uleb128 0x13
 14577 00ae 38       		.uleb128 0x38
 14578 00af 0B       		.uleb128 0xb
 14579 00b0 00       		.byte	0
 14580 00b1 00       		.byte	0
 14581 00b2 0F       		.uleb128 0xf
 14582 00b3 15       		.uleb128 0x15
 14583 00b4 01       		.byte	0x1
 14584 00b5 27       		.uleb128 0x27
 14585 00b6 19       		.uleb128 0x19
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 319


 14586 00b7 01       		.uleb128 0x1
 14587 00b8 13       		.uleb128 0x13
 14588 00b9 00       		.byte	0
 14589 00ba 00       		.byte	0
 14590 00bb 10       		.uleb128 0x10
 14591 00bc 16       		.uleb128 0x16
 14592 00bd 00       		.byte	0
 14593 00be 03       		.uleb128 0x3
 14594 00bf 0E       		.uleb128 0xe
 14595 00c0 3A       		.uleb128 0x3a
 14596 00c1 0B       		.uleb128 0xb
 14597 00c2 3B       		.uleb128 0x3b
 14598 00c3 05       		.uleb128 0x5
 14599 00c4 49       		.uleb128 0x49
 14600 00c5 13       		.uleb128 0x13
 14601 00c6 00       		.byte	0
 14602 00c7 00       		.byte	0
 14603 00c8 11       		.uleb128 0x11
 14604 00c9 01       		.uleb128 0x1
 14605 00ca 01       		.byte	0x1
 14606 00cb 49       		.uleb128 0x49
 14607 00cc 13       		.uleb128 0x13
 14608 00cd 01       		.uleb128 0x1
 14609 00ce 13       		.uleb128 0x13
 14610 00cf 00       		.byte	0
 14611 00d0 00       		.byte	0
 14612 00d1 12       		.uleb128 0x12
 14613 00d2 21       		.uleb128 0x21
 14614 00d3 00       		.byte	0
 14615 00d4 49       		.uleb128 0x49
 14616 00d5 13       		.uleb128 0x13
 14617 00d6 2F       		.uleb128 0x2f
 14618 00d7 0B       		.uleb128 0xb
 14619 00d8 00       		.byte	0
 14620 00d9 00       		.byte	0
 14621 00da 13       		.uleb128 0x13
 14622 00db 2E       		.uleb128 0x2e
 14623 00dc 01       		.byte	0x1
 14624 00dd 03       		.uleb128 0x3
 14625 00de 0E       		.uleb128 0xe
 14626 00df 3A       		.uleb128 0x3a
 14627 00e0 0B       		.uleb128 0xb
 14628 00e1 3B       		.uleb128 0x3b
 14629 00e2 0B       		.uleb128 0xb
 14630 00e3 27       		.uleb128 0x27
 14631 00e4 19       		.uleb128 0x19
 14632 00e5 49       		.uleb128 0x49
 14633 00e6 13       		.uleb128 0x13
 14634 00e7 11       		.uleb128 0x11
 14635 00e8 01       		.uleb128 0x1
 14636 00e9 12       		.uleb128 0x12
 14637 00ea 06       		.uleb128 0x6
 14638 00eb 40       		.uleb128 0x40
 14639 00ec 18       		.uleb128 0x18
 14640 00ed 9742     		.uleb128 0x2117
 14641 00ef 19       		.uleb128 0x19
 14642 00f0 01       		.uleb128 0x1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 320


 14643 00f1 13       		.uleb128 0x13
 14644 00f2 00       		.byte	0
 14645 00f3 00       		.byte	0
 14646 00f4 14       		.uleb128 0x14
 14647 00f5 05       		.uleb128 0x5
 14648 00f6 00       		.byte	0
 14649 00f7 03       		.uleb128 0x3
 14650 00f8 0E       		.uleb128 0xe
 14651 00f9 3A       		.uleb128 0x3a
 14652 00fa 0B       		.uleb128 0xb
 14653 00fb 3B       		.uleb128 0x3b
 14654 00fc 0B       		.uleb128 0xb
 14655 00fd 49       		.uleb128 0x49
 14656 00fe 13       		.uleb128 0x13
 14657 00ff 02       		.uleb128 0x2
 14658 0100 18       		.uleb128 0x18
 14659 0101 00       		.byte	0
 14660 0102 00       		.byte	0
 14661 0103 15       		.uleb128 0x15
 14662 0104 34       		.uleb128 0x34
 14663 0105 00       		.byte	0
 14664 0106 03       		.uleb128 0x3
 14665 0107 0E       		.uleb128 0xe
 14666 0108 3A       		.uleb128 0x3a
 14667 0109 0B       		.uleb128 0xb
 14668 010a 3B       		.uleb128 0x3b
 14669 010b 0B       		.uleb128 0xb
 14670 010c 49       		.uleb128 0x49
 14671 010d 13       		.uleb128 0x13
 14672 010e 02       		.uleb128 0x2
 14673 010f 18       		.uleb128 0x18
 14674 0110 00       		.byte	0
 14675 0111 00       		.byte	0
 14676 0112 16       		.uleb128 0x16
 14677 0113 2E       		.uleb128 0x2e
 14678 0114 01       		.byte	0x1
 14679 0115 03       		.uleb128 0x3
 14680 0116 0E       		.uleb128 0xe
 14681 0117 3A       		.uleb128 0x3a
 14682 0118 0B       		.uleb128 0xb
 14683 0119 3B       		.uleb128 0x3b
 14684 011a 05       		.uleb128 0x5
 14685 011b 27       		.uleb128 0x27
 14686 011c 19       		.uleb128 0x19
 14687 011d 11       		.uleb128 0x11
 14688 011e 01       		.uleb128 0x1
 14689 011f 12       		.uleb128 0x12
 14690 0120 06       		.uleb128 0x6
 14691 0121 40       		.uleb128 0x40
 14692 0122 18       		.uleb128 0x18
 14693 0123 9742     		.uleb128 0x2117
 14694 0125 19       		.uleb128 0x19
 14695 0126 01       		.uleb128 0x1
 14696 0127 13       		.uleb128 0x13
 14697 0128 00       		.byte	0
 14698 0129 00       		.byte	0
 14699 012a 17       		.uleb128 0x17
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 321


 14700 012b 05       		.uleb128 0x5
 14701 012c 00       		.byte	0
 14702 012d 03       		.uleb128 0x3
 14703 012e 0E       		.uleb128 0xe
 14704 012f 3A       		.uleb128 0x3a
 14705 0130 0B       		.uleb128 0xb
 14706 0131 3B       		.uleb128 0x3b
 14707 0132 05       		.uleb128 0x5
 14708 0133 49       		.uleb128 0x49
 14709 0134 13       		.uleb128 0x13
 14710 0135 02       		.uleb128 0x2
 14711 0136 18       		.uleb128 0x18
 14712 0137 00       		.byte	0
 14713 0138 00       		.byte	0
 14714 0139 18       		.uleb128 0x18
 14715 013a 34       		.uleb128 0x34
 14716 013b 00       		.byte	0
 14717 013c 03       		.uleb128 0x3
 14718 013d 08       		.uleb128 0x8
 14719 013e 3A       		.uleb128 0x3a
 14720 013f 0B       		.uleb128 0xb
 14721 0140 3B       		.uleb128 0x3b
 14722 0141 05       		.uleb128 0x5
 14723 0142 49       		.uleb128 0x49
 14724 0143 13       		.uleb128 0x13
 14725 0144 02       		.uleb128 0x2
 14726 0145 18       		.uleb128 0x18
 14727 0146 00       		.byte	0
 14728 0147 00       		.byte	0
 14729 0148 19       		.uleb128 0x19
 14730 0149 2E       		.uleb128 0x2e
 14731 014a 01       		.byte	0x1
 14732 014b 3F       		.uleb128 0x3f
 14733 014c 19       		.uleb128 0x19
 14734 014d 03       		.uleb128 0x3
 14735 014e 0E       		.uleb128 0xe
 14736 014f 3A       		.uleb128 0x3a
 14737 0150 0B       		.uleb128 0xb
 14738 0151 3B       		.uleb128 0x3b
 14739 0152 0B       		.uleb128 0xb
 14740 0153 27       		.uleb128 0x27
 14741 0154 19       		.uleb128 0x19
 14742 0155 11       		.uleb128 0x11
 14743 0156 01       		.uleb128 0x1
 14744 0157 12       		.uleb128 0x12
 14745 0158 06       		.uleb128 0x6
 14746 0159 40       		.uleb128 0x40
 14747 015a 18       		.uleb128 0x18
 14748 015b 9742     		.uleb128 0x2117
 14749 015d 19       		.uleb128 0x19
 14750 015e 01       		.uleb128 0x1
 14751 015f 13       		.uleb128 0x13
 14752 0160 00       		.byte	0
 14753 0161 00       		.byte	0
 14754 0162 1A       		.uleb128 0x1a
 14755 0163 2E       		.uleb128 0x2e
 14756 0164 00       		.byte	0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 322


 14757 0165 3F       		.uleb128 0x3f
 14758 0166 19       		.uleb128 0x19
 14759 0167 03       		.uleb128 0x3
 14760 0168 0E       		.uleb128 0xe
 14761 0169 3A       		.uleb128 0x3a
 14762 016a 0B       		.uleb128 0xb
 14763 016b 3B       		.uleb128 0x3b
 14764 016c 0B       		.uleb128 0xb
 14765 016d 27       		.uleb128 0x27
 14766 016e 19       		.uleb128 0x19
 14767 016f 49       		.uleb128 0x49
 14768 0170 13       		.uleb128 0x13
 14769 0171 11       		.uleb128 0x11
 14770 0172 01       		.uleb128 0x1
 14771 0173 12       		.uleb128 0x12
 14772 0174 06       		.uleb128 0x6
 14773 0175 40       		.uleb128 0x40
 14774 0176 18       		.uleb128 0x18
 14775 0177 9742     		.uleb128 0x2117
 14776 0179 19       		.uleb128 0x19
 14777 017a 00       		.byte	0
 14778 017b 00       		.byte	0
 14779 017c 1B       		.uleb128 0x1b
 14780 017d 2E       		.uleb128 0x2e
 14781 017e 01       		.byte	0x1
 14782 017f 3F       		.uleb128 0x3f
 14783 0180 19       		.uleb128 0x19
 14784 0181 03       		.uleb128 0x3
 14785 0182 0E       		.uleb128 0xe
 14786 0183 3A       		.uleb128 0x3a
 14787 0184 0B       		.uleb128 0xb
 14788 0185 3B       		.uleb128 0x3b
 14789 0186 0B       		.uleb128 0xb
 14790 0187 27       		.uleb128 0x27
 14791 0188 19       		.uleb128 0x19
 14792 0189 49       		.uleb128 0x49
 14793 018a 13       		.uleb128 0x13
 14794 018b 11       		.uleb128 0x11
 14795 018c 01       		.uleb128 0x1
 14796 018d 12       		.uleb128 0x12
 14797 018e 06       		.uleb128 0x6
 14798 018f 40       		.uleb128 0x40
 14799 0190 18       		.uleb128 0x18
 14800 0191 9742     		.uleb128 0x2117
 14801 0193 19       		.uleb128 0x19
 14802 0194 01       		.uleb128 0x1
 14803 0195 13       		.uleb128 0x13
 14804 0196 00       		.byte	0
 14805 0197 00       		.byte	0
 14806 0198 1C       		.uleb128 0x1c
 14807 0199 2E       		.uleb128 0x2e
 14808 019a 01       		.byte	0x1
 14809 019b 03       		.uleb128 0x3
 14810 019c 0E       		.uleb128 0xe
 14811 019d 3A       		.uleb128 0x3a
 14812 019e 0B       		.uleb128 0xb
 14813 019f 3B       		.uleb128 0x3b
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 323


 14814 01a0 0B       		.uleb128 0xb
 14815 01a1 27       		.uleb128 0x27
 14816 01a2 19       		.uleb128 0x19
 14817 01a3 11       		.uleb128 0x11
 14818 01a4 01       		.uleb128 0x1
 14819 01a5 12       		.uleb128 0x12
 14820 01a6 06       		.uleb128 0x6
 14821 01a7 40       		.uleb128 0x40
 14822 01a8 18       		.uleb128 0x18
 14823 01a9 9742     		.uleb128 0x2117
 14824 01ab 19       		.uleb128 0x19
 14825 01ac 01       		.uleb128 0x1
 14826 01ad 13       		.uleb128 0x13
 14827 01ae 00       		.byte	0
 14828 01af 00       		.byte	0
 14829 01b0 1D       		.uleb128 0x1d
 14830 01b1 05       		.uleb128 0x5
 14831 01b2 00       		.byte	0
 14832 01b3 03       		.uleb128 0x3
 14833 01b4 08       		.uleb128 0x8
 14834 01b5 3A       		.uleb128 0x3a
 14835 01b6 0B       		.uleb128 0xb
 14836 01b7 3B       		.uleb128 0x3b
 14837 01b8 0B       		.uleb128 0xb
 14838 01b9 49       		.uleb128 0x49
 14839 01ba 13       		.uleb128 0x13
 14840 01bb 02       		.uleb128 0x2
 14841 01bc 18       		.uleb128 0x18
 14842 01bd 00       		.byte	0
 14843 01be 00       		.byte	0
 14844 01bf 1E       		.uleb128 0x1e
 14845 01c0 34       		.uleb128 0x34
 14846 01c1 00       		.byte	0
 14847 01c2 03       		.uleb128 0x3
 14848 01c3 08       		.uleb128 0x8
 14849 01c4 3A       		.uleb128 0x3a
 14850 01c5 0B       		.uleb128 0xb
 14851 01c6 3B       		.uleb128 0x3b
 14852 01c7 0B       		.uleb128 0xb
 14853 01c8 49       		.uleb128 0x49
 14854 01c9 13       		.uleb128 0x13
 14855 01ca 02       		.uleb128 0x2
 14856 01cb 18       		.uleb128 0x18
 14857 01cc 00       		.byte	0
 14858 01cd 00       		.byte	0
 14859 01ce 1F       		.uleb128 0x1f
 14860 01cf 2E       		.uleb128 0x2e
 14861 01d0 01       		.byte	0x1
 14862 01d1 03       		.uleb128 0x3
 14863 01d2 0E       		.uleb128 0xe
 14864 01d3 3A       		.uleb128 0x3a
 14865 01d4 0B       		.uleb128 0xb
 14866 01d5 3B       		.uleb128 0x3b
 14867 01d6 0B       		.uleb128 0xb
 14868 01d7 27       		.uleb128 0x27
 14869 01d8 19       		.uleb128 0x19
 14870 01d9 49       		.uleb128 0x49
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 324


 14871 01da 13       		.uleb128 0x13
 14872 01db 11       		.uleb128 0x11
 14873 01dc 01       		.uleb128 0x1
 14874 01dd 12       		.uleb128 0x12
 14875 01de 06       		.uleb128 0x6
 14876 01df 40       		.uleb128 0x40
 14877 01e0 18       		.uleb128 0x18
 14878 01e1 9642     		.uleb128 0x2116
 14879 01e3 19       		.uleb128 0x19
 14880 01e4 01       		.uleb128 0x1
 14881 01e5 13       		.uleb128 0x13
 14882 01e6 00       		.byte	0
 14883 01e7 00       		.byte	0
 14884 01e8 20       		.uleb128 0x20
 14885 01e9 05       		.uleb128 0x5
 14886 01ea 00       		.byte	0
 14887 01eb 03       		.uleb128 0x3
 14888 01ec 08       		.uleb128 0x8
 14889 01ed 3A       		.uleb128 0x3a
 14890 01ee 0B       		.uleb128 0xb
 14891 01ef 3B       		.uleb128 0x3b
 14892 01f0 05       		.uleb128 0x5
 14893 01f1 49       		.uleb128 0x49
 14894 01f2 13       		.uleb128 0x13
 14895 01f3 02       		.uleb128 0x2
 14896 01f4 18       		.uleb128 0x18
 14897 01f5 00       		.byte	0
 14898 01f6 00       		.byte	0
 14899 01f7 21       		.uleb128 0x21
 14900 01f8 2E       		.uleb128 0x2e
 14901 01f9 01       		.byte	0x1
 14902 01fa 03       		.uleb128 0x3
 14903 01fb 0E       		.uleb128 0xe
 14904 01fc 3A       		.uleb128 0x3a
 14905 01fd 0B       		.uleb128 0xb
 14906 01fe 3B       		.uleb128 0x3b
 14907 01ff 05       		.uleb128 0x5
 14908 0200 27       		.uleb128 0x27
 14909 0201 19       		.uleb128 0x19
 14910 0202 49       		.uleb128 0x49
 14911 0203 13       		.uleb128 0x13
 14912 0204 11       		.uleb128 0x11
 14913 0205 01       		.uleb128 0x1
 14914 0206 12       		.uleb128 0x12
 14915 0207 06       		.uleb128 0x6
 14916 0208 40       		.uleb128 0x40
 14917 0209 18       		.uleb128 0x18
 14918 020a 9742     		.uleb128 0x2117
 14919 020c 19       		.uleb128 0x19
 14920 020d 01       		.uleb128 0x1
 14921 020e 13       		.uleb128 0x13
 14922 020f 00       		.byte	0
 14923 0210 00       		.byte	0
 14924 0211 22       		.uleb128 0x22
 14925 0212 34       		.uleb128 0x34
 14926 0213 00       		.byte	0
 14927 0214 03       		.uleb128 0x3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 325


 14928 0215 0E       		.uleb128 0xe
 14929 0216 3A       		.uleb128 0x3a
 14930 0217 0B       		.uleb128 0xb
 14931 0218 3B       		.uleb128 0x3b
 14932 0219 05       		.uleb128 0x5
 14933 021a 49       		.uleb128 0x49
 14934 021b 13       		.uleb128 0x13
 14935 021c 02       		.uleb128 0x2
 14936 021d 18       		.uleb128 0x18
 14937 021e 00       		.byte	0
 14938 021f 00       		.byte	0
 14939 0220 23       		.uleb128 0x23
 14940 0221 0B       		.uleb128 0xb
 14941 0222 01       		.byte	0x1
 14942 0223 11       		.uleb128 0x11
 14943 0224 01       		.uleb128 0x1
 14944 0225 12       		.uleb128 0x12
 14945 0226 06       		.uleb128 0x6
 14946 0227 00       		.byte	0
 14947 0228 00       		.byte	0
 14948 0229 24       		.uleb128 0x24
 14949 022a 2E       		.uleb128 0x2e
 14950 022b 01       		.byte	0x1
 14951 022c 03       		.uleb128 0x3
 14952 022d 0E       		.uleb128 0xe
 14953 022e 3A       		.uleb128 0x3a
 14954 022f 0B       		.uleb128 0xb
 14955 0230 3B       		.uleb128 0x3b
 14956 0231 05       		.uleb128 0x5
 14957 0232 27       		.uleb128 0x27
 14958 0233 19       		.uleb128 0x19
 14959 0234 49       		.uleb128 0x49
 14960 0235 13       		.uleb128 0x13
 14961 0236 11       		.uleb128 0x11
 14962 0237 01       		.uleb128 0x1
 14963 0238 12       		.uleb128 0x12
 14964 0239 06       		.uleb128 0x6
 14965 023a 40       		.uleb128 0x40
 14966 023b 18       		.uleb128 0x18
 14967 023c 9642     		.uleb128 0x2116
 14968 023e 19       		.uleb128 0x19
 14969 023f 01       		.uleb128 0x1
 14970 0240 13       		.uleb128 0x13
 14971 0241 00       		.byte	0
 14972 0242 00       		.byte	0
 14973 0243 25       		.uleb128 0x25
 14974 0244 2E       		.uleb128 0x2e
 14975 0245 01       		.byte	0x1
 14976 0246 03       		.uleb128 0x3
 14977 0247 0E       		.uleb128 0xe
 14978 0248 3A       		.uleb128 0x3a
 14979 0249 0B       		.uleb128 0xb
 14980 024a 3B       		.uleb128 0x3b
 14981 024b 05       		.uleb128 0x5
 14982 024c 27       		.uleb128 0x27
 14983 024d 19       		.uleb128 0x19
 14984 024e 11       		.uleb128 0x11
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 326


 14985 024f 01       		.uleb128 0x1
 14986 0250 12       		.uleb128 0x12
 14987 0251 06       		.uleb128 0x6
 14988 0252 40       		.uleb128 0x40
 14989 0253 18       		.uleb128 0x18
 14990 0254 9642     		.uleb128 0x2116
 14991 0256 19       		.uleb128 0x19
 14992 0257 01       		.uleb128 0x1
 14993 0258 13       		.uleb128 0x13
 14994 0259 00       		.byte	0
 14995 025a 00       		.byte	0
 14996 025b 26       		.uleb128 0x26
 14997 025c 2E       		.uleb128 0x2e
 14998 025d 01       		.byte	0x1
 14999 025e 03       		.uleb128 0x3
 15000 025f 0E       		.uleb128 0xe
 15001 0260 3A       		.uleb128 0x3a
 15002 0261 0B       		.uleb128 0xb
 15003 0262 3B       		.uleb128 0x3b
 15004 0263 0B       		.uleb128 0xb
 15005 0264 27       		.uleb128 0x27
 15006 0265 19       		.uleb128 0x19
 15007 0266 11       		.uleb128 0x11
 15008 0267 01       		.uleb128 0x1
 15009 0268 12       		.uleb128 0x12
 15010 0269 06       		.uleb128 0x6
 15011 026a 40       		.uleb128 0x40
 15012 026b 18       		.uleb128 0x18
 15013 026c 9642     		.uleb128 0x2116
 15014 026e 19       		.uleb128 0x19
 15015 026f 01       		.uleb128 0x1
 15016 0270 13       		.uleb128 0x13
 15017 0271 00       		.byte	0
 15018 0272 00       		.byte	0
 15019 0273 27       		.uleb128 0x27
 15020 0274 2E       		.uleb128 0x2e
 15021 0275 00       		.byte	0
 15022 0276 3F       		.uleb128 0x3f
 15023 0277 19       		.uleb128 0x19
 15024 0278 03       		.uleb128 0x3
 15025 0279 0E       		.uleb128 0xe
 15026 027a 3A       		.uleb128 0x3a
 15027 027b 0B       		.uleb128 0xb
 15028 027c 3B       		.uleb128 0x3b
 15029 027d 05       		.uleb128 0x5
 15030 027e 27       		.uleb128 0x27
 15031 027f 19       		.uleb128 0x19
 15032 0280 49       		.uleb128 0x49
 15033 0281 13       		.uleb128 0x13
 15034 0282 11       		.uleb128 0x11
 15035 0283 01       		.uleb128 0x1
 15036 0284 12       		.uleb128 0x12
 15037 0285 06       		.uleb128 0x6
 15038 0286 40       		.uleb128 0x40
 15039 0287 18       		.uleb128 0x18
 15040 0288 9742     		.uleb128 0x2117
 15041 028a 19       		.uleb128 0x19
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 327


 15042 028b 00       		.byte	0
 15043 028c 00       		.byte	0
 15044 028d 28       		.uleb128 0x28
 15045 028e 2E       		.uleb128 0x2e
 15046 028f 01       		.byte	0x1
 15047 0290 3F       		.uleb128 0x3f
 15048 0291 19       		.uleb128 0x19
 15049 0292 03       		.uleb128 0x3
 15050 0293 0E       		.uleb128 0xe
 15051 0294 3A       		.uleb128 0x3a
 15052 0295 0B       		.uleb128 0xb
 15053 0296 3B       		.uleb128 0x3b
 15054 0297 05       		.uleb128 0x5
 15055 0298 27       		.uleb128 0x27
 15056 0299 19       		.uleb128 0x19
 15057 029a 49       		.uleb128 0x49
 15058 029b 13       		.uleb128 0x13
 15059 029c 11       		.uleb128 0x11
 15060 029d 01       		.uleb128 0x1
 15061 029e 12       		.uleb128 0x12
 15062 029f 06       		.uleb128 0x6
 15063 02a0 40       		.uleb128 0x40
 15064 02a1 18       		.uleb128 0x18
 15065 02a2 9642     		.uleb128 0x2116
 15066 02a4 19       		.uleb128 0x19
 15067 02a5 01       		.uleb128 0x1
 15068 02a6 13       		.uleb128 0x13
 15069 02a7 00       		.byte	0
 15070 02a8 00       		.byte	0
 15071 02a9 29       		.uleb128 0x29
 15072 02aa 2E       		.uleb128 0x2e
 15073 02ab 01       		.byte	0x1
 15074 02ac 3F       		.uleb128 0x3f
 15075 02ad 19       		.uleb128 0x19
 15076 02ae 03       		.uleb128 0x3
 15077 02af 0E       		.uleb128 0xe
 15078 02b0 3A       		.uleb128 0x3a
 15079 02b1 0B       		.uleb128 0xb
 15080 02b2 3B       		.uleb128 0x3b
 15081 02b3 05       		.uleb128 0x5
 15082 02b4 27       		.uleb128 0x27
 15083 02b5 19       		.uleb128 0x19
 15084 02b6 11       		.uleb128 0x11
 15085 02b7 01       		.uleb128 0x1
 15086 02b8 12       		.uleb128 0x12
 15087 02b9 06       		.uleb128 0x6
 15088 02ba 40       		.uleb128 0x40
 15089 02bb 18       		.uleb128 0x18
 15090 02bc 9742     		.uleb128 0x2117
 15091 02be 19       		.uleb128 0x19
 15092 02bf 01       		.uleb128 0x1
 15093 02c0 13       		.uleb128 0x13
 15094 02c1 00       		.byte	0
 15095 02c2 00       		.byte	0
 15096 02c3 2A       		.uleb128 0x2a
 15097 02c4 2E       		.uleb128 0x2e
 15098 02c5 01       		.byte	0x1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 328


 15099 02c6 3F       		.uleb128 0x3f
 15100 02c7 19       		.uleb128 0x19
 15101 02c8 03       		.uleb128 0x3
 15102 02c9 0E       		.uleb128 0xe
 15103 02ca 3A       		.uleb128 0x3a
 15104 02cb 0B       		.uleb128 0xb
 15105 02cc 3B       		.uleb128 0x3b
 15106 02cd 05       		.uleb128 0x5
 15107 02ce 27       		.uleb128 0x27
 15108 02cf 19       		.uleb128 0x19
 15109 02d0 11       		.uleb128 0x11
 15110 02d1 01       		.uleb128 0x1
 15111 02d2 12       		.uleb128 0x12
 15112 02d3 06       		.uleb128 0x6
 15113 02d4 40       		.uleb128 0x40
 15114 02d5 18       		.uleb128 0x18
 15115 02d6 9642     		.uleb128 0x2116
 15116 02d8 19       		.uleb128 0x19
 15117 02d9 01       		.uleb128 0x1
 15118 02da 13       		.uleb128 0x13
 15119 02db 00       		.byte	0
 15120 02dc 00       		.byte	0
 15121 02dd 2B       		.uleb128 0x2b
 15122 02de 0A       		.uleb128 0xa
 15123 02df 00       		.byte	0
 15124 02e0 03       		.uleb128 0x3
 15125 02e1 0E       		.uleb128 0xe
 15126 02e2 3A       		.uleb128 0x3a
 15127 02e3 0B       		.uleb128 0xb
 15128 02e4 3B       		.uleb128 0x3b
 15129 02e5 05       		.uleb128 0x5
 15130 02e6 11       		.uleb128 0x11
 15131 02e7 01       		.uleb128 0x1
 15132 02e8 00       		.byte	0
 15133 02e9 00       		.byte	0
 15134 02ea 00       		.byte	0
 15135              		.section	.debug_aranges,"",%progbits
 15136 0000 64020000 		.4byte	0x264
 15137 0004 0200     		.2byte	0x2
 15138 0006 00000000 		.4byte	.Ldebug_info0
 15139 000a 04       		.byte	0x4
 15140 000b 00       		.byte	0
 15141 000c 0000     		.2byte	0
 15142 000e 0000     		.2byte	0
 15143 0010 00000000 		.4byte	.LFB0
 15144 0014 8C000000 		.4byte	.LFE0-.LFB0
 15145 0018 00000000 		.4byte	.LFB1
 15146 001c 92000000 		.4byte	.LFE1-.LFB1
 15147 0020 00000000 		.4byte	.LFB2
 15148 0024 C6000000 		.4byte	.LFE2-.LFB2
 15149 0028 00000000 		.4byte	.LFB3
 15150 002c 14000000 		.4byte	.LFE3-.LFB3
 15151 0030 00000000 		.4byte	.LFB4
 15152 0034 0C000000 		.4byte	.LFE4-.LFB4
 15153 0038 00000000 		.4byte	.LFB5
 15154 003c 1A000000 		.4byte	.LFE5-.LFB5
 15155 0040 00000000 		.4byte	.LFB6
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 329


 15156 0044 12000000 		.4byte	.LFE6-.LFB6
 15157 0048 00000000 		.4byte	.LFB7
 15158 004c 52000000 		.4byte	.LFE7-.LFB7
 15159 0050 00000000 		.4byte	.LFB8
 15160 0054 62000000 		.4byte	.LFE8-.LFB8
 15161 0058 00000000 		.4byte	.LFB9
 15162 005c 3A000000 		.4byte	.LFE9-.LFB9
 15163 0060 00000000 		.4byte	.LFB10
 15164 0064 5E000000 		.4byte	.LFE10-.LFB10
 15165 0068 00000000 		.4byte	.LFB11
 15166 006c 90000000 		.4byte	.LFE11-.LFB11
 15167 0070 00000000 		.4byte	.LFB12
 15168 0074 60000000 		.4byte	.LFE12-.LFB12
 15169 0078 00000000 		.4byte	.LFB13
 15170 007c 92000000 		.4byte	.LFE13-.LFB13
 15171 0080 00000000 		.4byte	.LFB14
 15172 0084 7A000000 		.4byte	.LFE14-.LFB14
 15173 0088 00000000 		.4byte	.LFB15
 15174 008c 5E000000 		.4byte	.LFE15-.LFB15
 15175 0090 00000000 		.4byte	.LFB16
 15176 0094 50000000 		.4byte	.LFE16-.LFB16
 15177 0098 00000000 		.4byte	.LFB17
 15178 009c 52000000 		.4byte	.LFE17-.LFB17
 15179 00a0 00000000 		.4byte	.LFB18
 15180 00a4 3C000000 		.4byte	.LFE18-.LFB18
 15181 00a8 00000000 		.4byte	.LFB19
 15182 00ac 98020000 		.4byte	.LFE19-.LFB19
 15183 00b0 00000000 		.4byte	.LFB20
 15184 00b4 32000000 		.4byte	.LFE20-.LFB20
 15185 00b8 00000000 		.4byte	.LFB21
 15186 00bc 30000000 		.4byte	.LFE21-.LFB21
 15187 00c0 00000000 		.4byte	.LFB22
 15188 00c4 1C000000 		.4byte	.LFE22-.LFB22
 15189 00c8 00000000 		.4byte	.LFB23
 15190 00cc 88000000 		.4byte	.LFE23-.LFB23
 15191 00d0 00000000 		.4byte	.LFB24
 15192 00d4 18020000 		.4byte	.LFE24-.LFB24
 15193 00d8 00000000 		.4byte	.LFB25
 15194 00dc 38020000 		.4byte	.LFE25-.LFB25
 15195 00e0 00000000 		.4byte	.LFB26
 15196 00e4 7E000000 		.4byte	.LFE26-.LFB26
 15197 00e8 00000000 		.4byte	.LFB27
 15198 00ec D2000000 		.4byte	.LFE27-.LFB27
 15199 00f0 00000000 		.4byte	.LFB28
 15200 00f4 0C000000 		.4byte	.LFE28-.LFB28
 15201 00f8 00000000 		.4byte	.LFB29
 15202 00fc AC000000 		.4byte	.LFE29-.LFB29
 15203 0100 00000000 		.4byte	.LFB30
 15204 0104 92000000 		.4byte	.LFE30-.LFB30
 15205 0108 00000000 		.4byte	.LFB31
 15206 010c 0C000000 		.4byte	.LFE31-.LFB31
 15207 0110 00000000 		.4byte	.LFB32
 15208 0114 F0000000 		.4byte	.LFE32-.LFB32
 15209 0118 00000000 		.4byte	.LFB33
 15210 011c 0C000000 		.4byte	.LFE33-.LFB33
 15211 0120 00000000 		.4byte	.LFB34
 15212 0124 88000000 		.4byte	.LFE34-.LFB34
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 330


 15213 0128 00000000 		.4byte	.LFB35
 15214 012c 7C000000 		.4byte	.LFE35-.LFB35
 15215 0130 00000000 		.4byte	.LFB36
 15216 0134 C4000000 		.4byte	.LFE36-.LFB36
 15217 0138 00000000 		.4byte	.LFB37
 15218 013c F0000000 		.4byte	.LFE37-.LFB37
 15219 0140 00000000 		.4byte	.LFB38
 15220 0144 CC000000 		.4byte	.LFE38-.LFB38
 15221 0148 00000000 		.4byte	.LFB39
 15222 014c 7C010000 		.4byte	.LFE39-.LFB39
 15223 0150 00000000 		.4byte	.LFB40
 15224 0154 0C000000 		.4byte	.LFE40-.LFB40
 15225 0158 00000000 		.4byte	.LFB41
 15226 015c 08030000 		.4byte	.LFE41-.LFB41
 15227 0160 00000000 		.4byte	.LFB42
 15228 0164 0C000000 		.4byte	.LFE42-.LFB42
 15229 0168 00000000 		.4byte	.LFB43
 15230 016c 38010000 		.4byte	.LFE43-.LFB43
 15231 0170 00000000 		.4byte	.LFB44
 15232 0174 40000000 		.4byte	.LFE44-.LFB44
 15233 0178 00000000 		.4byte	.LFB45
 15234 017c AC000000 		.4byte	.LFE45-.LFB45
 15235 0180 00000000 		.4byte	.LFB46
 15236 0184 CC000000 		.4byte	.LFE46-.LFB46
 15237 0188 00000000 		.4byte	.LFB47
 15238 018c 42000000 		.4byte	.LFE47-.LFB47
 15239 0190 00000000 		.4byte	.LFB48
 15240 0194 9A000000 		.4byte	.LFE48-.LFB48
 15241 0198 00000000 		.4byte	.LFB49
 15242 019c 2C010000 		.4byte	.LFE49-.LFB49
 15243 01a0 00000000 		.4byte	.LFB50
 15244 01a4 AC010000 		.4byte	.LFE50-.LFB50
 15245 01a8 00000000 		.4byte	.LFB51
 15246 01ac 58020000 		.4byte	.LFE51-.LFB51
 15247 01b0 00000000 		.4byte	.LFB52
 15248 01b4 94000000 		.4byte	.LFE52-.LFB52
 15249 01b8 00000000 		.4byte	.LFB53
 15250 01bc 82000000 		.4byte	.LFE53-.LFB53
 15251 01c0 00000000 		.4byte	.LFB54
 15252 01c4 6E000000 		.4byte	.LFE54-.LFB54
 15253 01c8 00000000 		.4byte	.LFB55
 15254 01cc 92000000 		.4byte	.LFE55-.LFB55
 15255 01d0 00000000 		.4byte	.LFB56
 15256 01d4 FC000000 		.4byte	.LFE56-.LFB56
 15257 01d8 00000000 		.4byte	.LFB57
 15258 01dc B4000000 		.4byte	.LFE57-.LFB57
 15259 01e0 00000000 		.4byte	.LFB58
 15260 01e4 38010000 		.4byte	.LFE58-.LFB58
 15261 01e8 00000000 		.4byte	.LFB59
 15262 01ec 76000000 		.4byte	.LFE59-.LFB59
 15263 01f0 00000000 		.4byte	.LFB60
 15264 01f4 9E000000 		.4byte	.LFE60-.LFB60
 15265 01f8 00000000 		.4byte	.LFB61
 15266 01fc B6000000 		.4byte	.LFE61-.LFB61
 15267 0200 00000000 		.4byte	.LFB62
 15268 0204 52000000 		.4byte	.LFE62-.LFB62
 15269 0208 00000000 		.4byte	.LFB63
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 331


 15270 020c C8000000 		.4byte	.LFE63-.LFB63
 15271 0210 00000000 		.4byte	.LFB64
 15272 0214 E0000000 		.4byte	.LFE64-.LFB64
 15273 0218 00000000 		.4byte	.LFB65
 15274 021c 60020000 		.4byte	.LFE65-.LFB65
 15275 0220 00000000 		.4byte	.LFB66
 15276 0224 6C000000 		.4byte	.LFE66-.LFB66
 15277 0228 00000000 		.4byte	.LFB67
 15278 022c 7E000000 		.4byte	.LFE67-.LFB67
 15279 0230 00000000 		.4byte	.LFB68
 15280 0234 1C000000 		.4byte	.LFE68-.LFB68
 15281 0238 00000000 		.4byte	.LFB69
 15282 023c A8000000 		.4byte	.LFE69-.LFB69
 15283 0240 00000000 		.4byte	.LFB70
 15284 0244 36000000 		.4byte	.LFE70-.LFB70
 15285 0248 00000000 		.4byte	.LFB71
 15286 024c 6A020000 		.4byte	.LFE71-.LFB71
 15287 0250 00000000 		.4byte	.LFB72
 15288 0254 2C000000 		.4byte	.LFE72-.LFB72
 15289 0258 00000000 		.4byte	.LFB73
 15290 025c 3C050000 		.4byte	.LFE73-.LFB73
 15291 0260 00000000 		.4byte	0
 15292 0264 00000000 		.4byte	0
 15293              		.section	.debug_ranges,"",%progbits
 15294              	.Ldebug_ranges0:
 15295 0000 00000000 		.4byte	.LFB0
 15296 0004 8C000000 		.4byte	.LFE0
 15297 0008 00000000 		.4byte	.LFB1
 15298 000c 92000000 		.4byte	.LFE1
 15299 0010 00000000 		.4byte	.LFB2
 15300 0014 C6000000 		.4byte	.LFE2
 15301 0018 00000000 		.4byte	.LFB3
 15302 001c 14000000 		.4byte	.LFE3
 15303 0020 00000000 		.4byte	.LFB4
 15304 0024 0C000000 		.4byte	.LFE4
 15305 0028 00000000 		.4byte	.LFB5
 15306 002c 1A000000 		.4byte	.LFE5
 15307 0030 00000000 		.4byte	.LFB6
 15308 0034 12000000 		.4byte	.LFE6
 15309 0038 00000000 		.4byte	.LFB7
 15310 003c 52000000 		.4byte	.LFE7
 15311 0040 00000000 		.4byte	.LFB8
 15312 0044 62000000 		.4byte	.LFE8
 15313 0048 00000000 		.4byte	.LFB9
 15314 004c 3A000000 		.4byte	.LFE9
 15315 0050 00000000 		.4byte	.LFB10
 15316 0054 5E000000 		.4byte	.LFE10
 15317 0058 00000000 		.4byte	.LFB11
 15318 005c 90000000 		.4byte	.LFE11
 15319 0060 00000000 		.4byte	.LFB12
 15320 0064 60000000 		.4byte	.LFE12
 15321 0068 00000000 		.4byte	.LFB13
 15322 006c 92000000 		.4byte	.LFE13
 15323 0070 00000000 		.4byte	.LFB14
 15324 0074 7A000000 		.4byte	.LFE14
 15325 0078 00000000 		.4byte	.LFB15
 15326 007c 5E000000 		.4byte	.LFE15
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 332


 15327 0080 00000000 		.4byte	.LFB16
 15328 0084 50000000 		.4byte	.LFE16
 15329 0088 00000000 		.4byte	.LFB17
 15330 008c 52000000 		.4byte	.LFE17
 15331 0090 00000000 		.4byte	.LFB18
 15332 0094 3C000000 		.4byte	.LFE18
 15333 0098 00000000 		.4byte	.LFB19
 15334 009c 98020000 		.4byte	.LFE19
 15335 00a0 00000000 		.4byte	.LFB20
 15336 00a4 32000000 		.4byte	.LFE20
 15337 00a8 00000000 		.4byte	.LFB21
 15338 00ac 30000000 		.4byte	.LFE21
 15339 00b0 00000000 		.4byte	.LFB22
 15340 00b4 1C000000 		.4byte	.LFE22
 15341 00b8 00000000 		.4byte	.LFB23
 15342 00bc 88000000 		.4byte	.LFE23
 15343 00c0 00000000 		.4byte	.LFB24
 15344 00c4 18020000 		.4byte	.LFE24
 15345 00c8 00000000 		.4byte	.LFB25
 15346 00cc 38020000 		.4byte	.LFE25
 15347 00d0 00000000 		.4byte	.LFB26
 15348 00d4 7E000000 		.4byte	.LFE26
 15349 00d8 00000000 		.4byte	.LFB27
 15350 00dc D2000000 		.4byte	.LFE27
 15351 00e0 00000000 		.4byte	.LFB28
 15352 00e4 0C000000 		.4byte	.LFE28
 15353 00e8 00000000 		.4byte	.LFB29
 15354 00ec AC000000 		.4byte	.LFE29
 15355 00f0 00000000 		.4byte	.LFB30
 15356 00f4 92000000 		.4byte	.LFE30
 15357 00f8 00000000 		.4byte	.LFB31
 15358 00fc 0C000000 		.4byte	.LFE31
 15359 0100 00000000 		.4byte	.LFB32
 15360 0104 F0000000 		.4byte	.LFE32
 15361 0108 00000000 		.4byte	.LFB33
 15362 010c 0C000000 		.4byte	.LFE33
 15363 0110 00000000 		.4byte	.LFB34
 15364 0114 88000000 		.4byte	.LFE34
 15365 0118 00000000 		.4byte	.LFB35
 15366 011c 7C000000 		.4byte	.LFE35
 15367 0120 00000000 		.4byte	.LFB36
 15368 0124 C4000000 		.4byte	.LFE36
 15369 0128 00000000 		.4byte	.LFB37
 15370 012c F0000000 		.4byte	.LFE37
 15371 0130 00000000 		.4byte	.LFB38
 15372 0134 CC000000 		.4byte	.LFE38
 15373 0138 00000000 		.4byte	.LFB39
 15374 013c 7C010000 		.4byte	.LFE39
 15375 0140 00000000 		.4byte	.LFB40
 15376 0144 0C000000 		.4byte	.LFE40
 15377 0148 00000000 		.4byte	.LFB41
 15378 014c 08030000 		.4byte	.LFE41
 15379 0150 00000000 		.4byte	.LFB42
 15380 0154 0C000000 		.4byte	.LFE42
 15381 0158 00000000 		.4byte	.LFB43
 15382 015c 38010000 		.4byte	.LFE43
 15383 0160 00000000 		.4byte	.LFB44
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 333


 15384 0164 40000000 		.4byte	.LFE44
 15385 0168 00000000 		.4byte	.LFB45
 15386 016c AC000000 		.4byte	.LFE45
 15387 0170 00000000 		.4byte	.LFB46
 15388 0174 CC000000 		.4byte	.LFE46
 15389 0178 00000000 		.4byte	.LFB47
 15390 017c 42000000 		.4byte	.LFE47
 15391 0180 00000000 		.4byte	.LFB48
 15392 0184 9A000000 		.4byte	.LFE48
 15393 0188 00000000 		.4byte	.LFB49
 15394 018c 2C010000 		.4byte	.LFE49
 15395 0190 00000000 		.4byte	.LFB50
 15396 0194 AC010000 		.4byte	.LFE50
 15397 0198 00000000 		.4byte	.LFB51
 15398 019c 58020000 		.4byte	.LFE51
 15399 01a0 00000000 		.4byte	.LFB52
 15400 01a4 94000000 		.4byte	.LFE52
 15401 01a8 00000000 		.4byte	.LFB53
 15402 01ac 82000000 		.4byte	.LFE53
 15403 01b0 00000000 		.4byte	.LFB54
 15404 01b4 6E000000 		.4byte	.LFE54
 15405 01b8 00000000 		.4byte	.LFB55
 15406 01bc 92000000 		.4byte	.LFE55
 15407 01c0 00000000 		.4byte	.LFB56
 15408 01c4 FC000000 		.4byte	.LFE56
 15409 01c8 00000000 		.4byte	.LFB57
 15410 01cc B4000000 		.4byte	.LFE57
 15411 01d0 00000000 		.4byte	.LFB58
 15412 01d4 38010000 		.4byte	.LFE58
 15413 01d8 00000000 		.4byte	.LFB59
 15414 01dc 76000000 		.4byte	.LFE59
 15415 01e0 00000000 		.4byte	.LFB60
 15416 01e4 9E000000 		.4byte	.LFE60
 15417 01e8 00000000 		.4byte	.LFB61
 15418 01ec B6000000 		.4byte	.LFE61
 15419 01f0 00000000 		.4byte	.LFB62
 15420 01f4 52000000 		.4byte	.LFE62
 15421 01f8 00000000 		.4byte	.LFB63
 15422 01fc C8000000 		.4byte	.LFE63
 15423 0200 00000000 		.4byte	.LFB64
 15424 0204 E0000000 		.4byte	.LFE64
 15425 0208 00000000 		.4byte	.LFB65
 15426 020c 60020000 		.4byte	.LFE65
 15427 0210 00000000 		.4byte	.LFB66
 15428 0214 6C000000 		.4byte	.LFE66
 15429 0218 00000000 		.4byte	.LFB67
 15430 021c 7E000000 		.4byte	.LFE67
 15431 0220 00000000 		.4byte	.LFB68
 15432 0224 1C000000 		.4byte	.LFE68
 15433 0228 00000000 		.4byte	.LFB69
 15434 022c A8000000 		.4byte	.LFE69
 15435 0230 00000000 		.4byte	.LFB70
 15436 0234 36000000 		.4byte	.LFE70
 15437 0238 00000000 		.4byte	.LFB71
 15438 023c 6A020000 		.4byte	.LFE71
 15439 0240 00000000 		.4byte	.LFB72
 15440 0244 2C000000 		.4byte	.LFE72
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 334


 15441 0248 00000000 		.4byte	.LFB73
 15442 024c 3C050000 		.4byte	.LFE73
 15443 0250 00000000 		.4byte	0
 15444 0254 00000000 		.4byte	0
 15445              		.section	.debug_line,"",%progbits
 15446              	.Ldebug_line0:
 15447 0000 0D0D0000 		.section	.debug_str,"MS",%progbits,1
 15447      02005401 
 15447      00000201 
 15447      FB0E0D00 
 15447      01010101 
 15448              	.LASF97:
 15449 0000 766C695F 		.ascii	"vli_mmod_fast_secp160r1\000"
 15449      6D6D6F64 
 15449      5F666173 
 15449      745F7365 
 15449      63703136 
 15450              	.LASF168:
 15451 0018 545F7074 		.ascii	"T_ptr\000"
 15451      7200
 15452              	.LASF75:
 15453 001e 75454343 		.ascii	"uECC_vli_mmod\000"
 15453      5F766C69 
 15453      5F6D6D6F 
 15453      6400
 15454              	.LASF169:
 15455 002c 545F6279 		.ascii	"T_bytes\000"
 15455      74657300 
 15456              	.LASF110:
 15457 0034 766C695F 		.ascii	"vli_mmod_fast_secp256r1\000"
 15457      6D6D6F64 
 15457      5F666173 
 15457      745F7365 
 15457      63703235 
 15458              	.LASF111:
 15459 004c 75454343 		.ascii	"uECC_secp256k1\000"
 15459      5F736563 
 15459      70323536 
 15459      6B3100
 15460              	.LASF91:
 15461 005b 6C5F6361 		.ascii	"l_carry\000"
 15461      72727900 
 15462              	.LASF18:
 15463 0063 75696E74 		.ascii	"uint64_t\000"
 15463      36345F74 
 15463      00
 15464              	.LASF62:
 15465 006c 6E756D5F 		.ascii	"num_digits\000"
 15465      64696769 
 15465      747300
 15466              	.LASF19:
 15467 0077 75454343 		.ascii	"uECC_Curve\000"
 15467      5F437572 
 15467      766500
 15468              	.LASF1:
 15469 0082 5F5F7569 		.ascii	"__uint8_t\000"
 15469      6E74385F 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 335


 15469      7400
 15470              	.LASF114:
 15471 008c 766C695F 		.ascii	"vli_mmod_fast_secp256k1\000"
 15471      6D6D6F64 
 15471      5F666173 
 15471      745F7365 
 15471      63703235 
 15472              	.LASF131:
 15473 00a4 75454343 		.ascii	"uECC_vli_nativeToBytes\000"
 15473      5F766C69 
 15473      5F6E6174 
 15473      69766554 
 15473      6F427974 
 15474              	.LASF31:
 15475 00bb 75706461 		.ascii	"update_hash\000"
 15475      74655F68 
 15475      61736800 
 15476              	.LASF115:
 15477 00c7 6F6D6567 		.ascii	"omega_mult_secp256k1\000"
 15477      615F6D75 
 15477      6C745F73 
 15477      65637032 
 15477      35366B31 
 15478              	.LASF176:
 15479 00dc 63757276 		.ascii	"curve_secp224r1\000"
 15479      655F7365 
 15479      63703232 
 15479      34723100 
 15480              	.LASF12:
 15481 00ec 6C6F6E67 		.ascii	"long long unsigned int\000"
 15481      206C6F6E 
 15481      6720756E 
 15481      7369676E 
 15481      65642069 
 15482              	.LASF130:
 15483 0103 746D7032 		.ascii	"tmp2\000"
 15483      00
 15484              	.LASF67:
 15485 0108 64696666 		.ascii	"diff\000"
 15485      00
 15486              	.LASF150:
 15487 010d 75454343 		.ascii	"uECC_valid_public_key\000"
 15487      5F76616C 
 15487      69645F70 
 15487      75626C69 
 15487      635F6B65 
 15488              	.LASF103:
 15489 0123 6D6F645F 		.ascii	"mod_sqrt_secp224r1_rss\000"
 15489      73717274 
 15489      5F736563 
 15489      70323234 
 15489      72315F72 
 15490              	.LASF0:
 15491 013a 5F5F696E 		.ascii	"__int8_t\000"
 15491      74385F74 
 15491      00
 15492              	.LASF117:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 336


 15493 0143 5859635A 		.ascii	"XYcZ_initial_double\000"
 15493      5F696E69 
 15493      7469616C 
 15493      5F646F75 
 15493      626C6500 
 15494              	.LASF129:
 15495 0157 746D7031 		.ascii	"tmp1\000"
 15495      00
 15496              	.LASF42:
 15497 015c 72696768 		.ascii	"right\000"
 15497      7400
 15498              	.LASF16:
 15499 0162 696E7431 		.ascii	"int16_t\000"
 15499      365F7400 
 15500              	.LASF10:
 15501 016a 6C6F6E67 		.ascii	"long long int\000"
 15501      206C6F6E 
 15501      6720696E 
 15501      7400
 15502              	.LASF2:
 15503 0178 7369676E 		.ascii	"signed char\000"
 15503      65642063 
 15503      68617200 
 15504              	.LASF154:
 15505 0184 6E756D5F 		.ascii	"num_n_bytes\000"
 15505      6E5F6279 
 15505      74657300 
 15506              	.LASF149:
 15507 0190 75454343 		.ascii	"uECC_valid_point\000"
 15507      5F76616C 
 15507      69645F70 
 15507      6F696E74 
 15507      00
 15508              	.LASF116:
 15509 01a1 6170706C 		.ascii	"apply_z\000"
 15509      795F7A00 
 15510              	.LASF61:
 15511 01a9 64696769 		.ascii	"digit\000"
 15511      7400
 15512              	.LASF166:
 15513 01af 75706461 		.ascii	"update_V\000"
 15513      74655F56 
 15513      00
 15514              	.LASF118:
 15515 01b8 696E6974 		.ascii	"initial_Z\000"
 15515      69616C5F 
 15515      5A00
 15516              	.LASF113:
 15517 01c2 785F7369 		.ascii	"x_side_secp256k1\000"
 15517      64655F73 
 15517      65637032 
 15517      35366B31 
 15517      00
 15518              	.LASF56:
 15519 01d3 62697473 		.ascii	"bits\000"
 15519      00
 15520              	.LASF7:
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 337


 15521 01d8 6C6F6E67 		.ascii	"long int\000"
 15521      20696E74 
 15521      00
 15522              	.LASF125:
 15523 01e1 72656775 		.ascii	"regularize_k\000"
 15523      6C617269 
 15523      7A655F6B 
 15523      00
 15524              	.LASF43:
 15525 01ee 6A756D70 		.ascii	"jump\000"
 15525      00
 15526              	.LASF53:
 15527 01f3 75454343 		.ascii	"uECC_vli_mult\000"
 15527      5F766C69 
 15527      5F6D756C 
 15527      7400
 15528              	.LASF76:
 15529 0201 70726F64 		.ascii	"product\000"
 15529      75637400 
 15530              	.LASF175:
 15531 0209 63757276 		.ascii	"curve_secp192r1\000"
 15531      655F7365 
 15531      63703139 
 15531      32723100 
 15532              	.LASF182:
 15533 0219 66696C6C 		.ascii	"filled\000"
 15533      656400
 15534              	.LASF79:
 15535 0220 73686966 		.ascii	"shift\000"
 15535      7400
 15536              	.LASF159:
 15537 0226 75454343 		.ascii	"uECC_sign\000"
 15537      5F736967 
 15537      6E00
 15538              	.LASF164:
 15539 0230 6D657373 		.ascii	"message_size\000"
 15539      6167655F 
 15539      73697A65 
 15539      00
 15540              	.LASF60:
 15541 023d 75454343 		.ascii	"uECC_vli_numBits\000"
 15541      5F766C69 
 15541      5F6E756D 
 15541      42697473 
 15541      00
 15542              	.LASF84:
 15543 024e 75454343 		.ascii	"uECC_vli_modMult_fast\000"
 15543      5F766C69 
 15543      5F6D6F64 
 15543      4D756C74 
 15543      5F666173 
 15544              	.LASF51:
 15545 0264 75454343 		.ascii	"uECC_curve_private_key_size\000"
 15545      5F637572 
 15545      76655F70 
 15545      72697661 
 15545      74655F6B 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 338


 15546              	.LASF37:
 15547 0280 636D7072 		.ascii	"cmpresult_t\000"
 15547      6573756C 
 15547      745F7400 
 15548              	.LASF8:
 15549 028c 5F5F7569 		.ascii	"__uint32_t\000"
 15549      6E743332 
 15549      5F7400
 15550              	.LASF155:
 15551 0297 75454343 		.ascii	"uECC_sign_with_k\000"
 15551      5F736967 
 15551      6E5F7769 
 15551      74685F6B 
 15551      00
 15552              	.LASF86:
 15553 02a8 766C695F 		.ascii	"vli_modInv_update\000"
 15553      6D6F6449 
 15553      6E765F75 
 15553      70646174 
 15553      6500
 15554              	.LASF162:
 15555 02ba 484D4143 		.ascii	"HMAC_update\000"
 15555      5F757064 
 15555      61746500 
 15556              	.LASF4:
 15557 02c6 5F5F696E 		.ascii	"__int16_t\000"
 15557      7431365F 
 15557      7400
 15558              	.LASF158:
 15559 02d0 7369676E 		.ascii	"signature\000"
 15559      61747572 
 15559      6500
 15560              	.LASF28:
 15561 02da 75454343 		.ascii	"uECC_Curve_t\000"
 15561      5F437572 
 15561      76655F74 
 15561      00
 15562              	.LASF71:
 15563 02e7 74656D70 		.ascii	"temp\000"
 15563      00
 15564              	.LASF69:
 15565 02ec 65717561 		.ascii	"equal\000"
 15565      6C00
 15566              	.LASF109:
 15567 02f2 75454343 		.ascii	"uECC_secp256r1\000"
 15567      5F736563 
 15567      70323536 
 15567      723100
 15568              	.LASF173:
 15569 0301 675F726E 		.ascii	"g_rng_function\000"
 15569      675F6675 
 15569      6E637469 
 15569      6F6E00
 15570              	.LASF13:
 15571 0310 756E7369 		.ascii	"unsigned int\000"
 15571      676E6564 
 15571      20696E74 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 339


 15571      00
 15572              	.LASF27:
 15573 031d 75454343 		.ascii	"uECC_RNG_Function\000"
 15573      5F524E47 
 15573      5F46756E 
 15573      6374696F 
 15573      6E00
 15574              	.LASF100:
 15575 032f 766C695F 		.ascii	"vli_mmod_fast_secp192r1\000"
 15575      6D6D6F64 
 15575      5F666173 
 15575      745F7365 
 15575      63703139 
 15576              	.LASF59:
 15577 0347 6D61785F 		.ascii	"max_words\000"
 15577      776F7264 
 15577      7300
 15578              	.LASF122:
 15579 0351 706F696E 		.ascii	"point\000"
 15579      7400
 15580              	.LASF9:
 15581 0357 6C6F6E67 		.ascii	"long unsigned int\000"
 15581      20756E73 
 15581      69676E65 
 15581      6420696E 
 15581      7400
 15582              	.LASF52:
 15583 0369 75454343 		.ascii	"uECC_curve_public_key_size\000"
 15583      5F637572 
 15583      76655F70 
 15583      75626C69 
 15583      635F6B65 
 15584              	.LASF123:
 15585 0384 7363616C 		.ascii	"scalar\000"
 15585      617200
 15586              	.LASF74:
 15587 038b 6C5F626F 		.ascii	"l_borrow\000"
 15587      72726F77 
 15587      00
 15588              	.LASF95:
 15589 0394 75454343 		.ascii	"uECC_get_rng\000"
 15589      5F676574 
 15589      5F726E67 
 15589      00
 15590              	.LASF108:
 15591 03a1 766C695F 		.ascii	"vli_mmod_fast_secp224r1\000"
 15591      6D6D6F64 
 15591      5F666173 
 15591      745F7365 
 15591      63703232 
 15592              	.LASF20:
 15593 03b9 6E756D5F 		.ascii	"num_words\000"
 15593      776F7264 
 15593      7300
 15594              	.LASF6:
 15595 03c3 73686F72 		.ascii	"short unsigned int\000"
 15595      7420756E 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 340


 15595      7369676E 
 15595      65642069 
 15595      6E7400
 15596              	.LASF141:
 15597 03d6 5F707269 		.ascii	"_private\000"
 15597      76617465 
 15597      00
 15598              	.LASF92:
 15599 03df 785F7369 		.ascii	"x_side_default\000"
 15599      64655F64 
 15599      65666175 
 15599      6C7400
 15600              	.LASF93:
 15601 03ee 6D6F645F 		.ascii	"mod_sqrt_default\000"
 15601      73717274 
 15601      5F646566 
 15601      61756C74 
 15601      00
 15602              	.LASF83:
 15603 03ff 75454343 		.ascii	"uECC_vli_modMult\000"
 15603      5F766C69 
 15603      5F6D6F64 
 15603      4D756C74 
 15603      00
 15604              	.LASF101:
 15605 0410 75454343 		.ascii	"uECC_secp224r1\000"
 15605      5F736563 
 15605      70323234 
 15605      723100
 15606              	.LASF66:
 15607 041f 75454343 		.ascii	"uECC_vli_equal\000"
 15607      5F766C69 
 15607      5F657175 
 15607      616C00
 15608              	.LASF170:
 15609 042e 736D6178 		.ascii	"smax\000"
 15609      00
 15610              	.LASF152:
 15611 0433 62697473 		.ascii	"bits2int\000"
 15611      32696E74 
 15611      00
 15612              	.LASF139:
 15613 043c 75454343 		.ascii	"uECC_make_key\000"
 15613      5F6D616B 
 15613      655F6B65 
 15613      7900
 15614              	.LASF22:
 15615 044a 6E756D5F 		.ascii	"num_n_bits\000"
 15615      6E5F6269 
 15615      747300
 15616              	.LASF126:
 15617 0455 6E756D5F 		.ascii	"num_n_words\000"
 15617      6E5F776F 
 15617      72647300 
 15618              	.LASF49:
 15619 0461 726E675F 		.ascii	"rng_function\000"
 15619      66756E63 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 341


 15619      74696F6E 
 15619      00
 15620              	.LASF146:
 15621 046e 75454343 		.ascii	"uECC_compress\000"
 15621      5F636F6D 
 15621      70726573 
 15621      7300
 15622              	.LASF119:
 15623 047c 5859635A 		.ascii	"XYcZ_add\000"
 15623      5F616464 
 15623      00
 15624              	.LASF33:
 15625 0485 626C6F63 		.ascii	"block_size\000"
 15625      6B5F7369 
 15625      7A6500
 15626              	.LASF90:
 15627 0490 646F7562 		.ascii	"double_jacobian_default\000"
 15627      6C655F6A 
 15627      61636F62 
 15627      69616E5F 
 15627      64656661 
 15628              	.LASF178:
 15629 04a8 63757276 		.ascii	"curve_secp256k1\000"
 15629      655F7365 
 15629      63703235 
 15629      366B3100 
 15630              	.LASF136:
 15631 04b8 72616E64 		.ascii	"random\000"
 15631      6F6D00
 15632              	.LASF36:
 15633 04bf 62697463 		.ascii	"bitcount_t\000"
 15633      6F756E74 
 15633      5F7400
 15634              	.LASF144:
 15635 04ca 73656372 		.ascii	"secret\000"
 15635      657400
 15636              	.LASF156:
 15637 04d1 6D657373 		.ascii	"message_hash\000"
 15637      6167655F 
 15637      68617368 
 15637      00
 15638              	.LASF85:
 15639 04de 75454343 		.ascii	"uECC_vli_modSquare_fast\000"
 15639      5F766C69 
 15639      5F6D6F64 
 15639      53717561 
 15639      72655F66 
 15640              	.LASF39:
 15641 04f6 73697A65 		.ascii	"sizetype\000"
 15641      74797065 
 15641      00
 15642              	.LASF132:
 15643 04ff 62797465 		.ascii	"bytes\000"
 15643      7300
 15644              	.LASF77:
 15645 0505 6D6F645F 		.ascii	"mod_multiple\000"
 15645      6D756C74 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 342


 15645      69706C65 
 15645      00
 15646              	.LASF58:
 15647 0512 766C695F 		.ascii	"vli_numDigits\000"
 15647      6E756D44 
 15647      69676974 
 15647      7300
 15648              	.LASF26:
 15649 0520 6D6D6F64 		.ascii	"mmod_fast\000"
 15649      5F666173 
 15649      7400
 15650              	.LASF172:
 15651 052a 706F696E 		.ascii	"points\000"
 15651      747300
 15652              	.LASF167:
 15653 0531 75454343 		.ascii	"uECC_sign_deterministic\000"
 15653      5F736967 
 15653      6E5F6465 
 15653      7465726D 
 15653      696E6973 
 15654              	.LASF64:
 15655 0549 64657374 		.ascii	"dest\000"
 15655      00
 15656              	.LASF165:
 15657 054e 484D4143 		.ascii	"HMAC_finish\000"
 15657      5F66696E 
 15657      69736800 
 15658              	.LASF45:
 15659 055a 6C656674 		.ascii	"left_word\000"
 15659      5F776F72 
 15659      6400
 15660              	.LASF11:
 15661 0564 5F5F7569 		.ascii	"__uint64_t\000"
 15661      6E743634 
 15661      5F7400
 15662              	.LASF54:
 15663 056f 75454343 		.ascii	"uECC_vli_clear\000"
 15663      5F766C69 
 15663      5F636C65 
 15663      617200
 15664              	.LASF134:
 15665 057e 75454343 		.ascii	"uECC_vli_bytesToNative\000"
 15665      5F766C69 
 15665      5F627974 
 15665      6573546F 
 15665      4E617469 
 15666              	.LASF174:
 15667 0595 63757276 		.ascii	"curve_secp160r1\000"
 15667      655F7365 
 15667      63703136 
 15667      30723100 
 15668              	.LASF44:
 15669 05a5 63617272 		.ascii	"carry\000"
 15669      7900
 15670              	.LASF94:
 15671 05ab 6C5F7265 		.ascii	"l_result\000"
 15671      73756C74 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 343


 15671      00
 15672              	.LASF104:
 15673 05b4 6D6F645F 		.ascii	"mod_sqrt_secp224r1_rm\000"
 15673      73717274 
 15673      5F736563 
 15673      70323234 
 15673      72315F72 
 15674              	.LASF25:
 15675 05ca 785F7369 		.ascii	"x_side\000"
 15675      646500
 15676              	.LASF179:
 15677 05d1 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 15677      43313120 
 15677      352E342E 
 15677      31203230 
 15677      31363036 
 15678 0604 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 15678      20726576 
 15678      6973696F 
 15678      6E203233 
 15678      37373135 
 15679 0637 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects -fomit-fram"
 15679      66756E63 
 15679      74696F6E 
 15679      2D736563 
 15679      74696F6E 
 15680 066a 652D706F 		.ascii	"e-pointer\000"
 15680      696E7465 
 15680      7200
 15681              	.LASF32:
 15682 0674 66696E69 		.ascii	"finish_hash\000"
 15682      73685F68 
 15682      61736800 
 15683              	.LASF3:
 15684 0680 756E7369 		.ascii	"unsigned char\000"
 15684      676E6564 
 15684      20636861 
 15684      7200
 15685              	.LASF138:
 15686 068e 74726965 		.ascii	"tries\000"
 15686      7300
 15687              	.LASF180:
 15688 0694 75454343 		.ascii	"uECC.c\000"
 15688      2E6300
 15689              	.LASF105:
 15690 069b 6D6F645F 		.ascii	"mod_sqrt_secp224r1_rp\000"
 15690      73717274 
 15690      5F736563 
 15690      70323234 
 15690      72315F72 
 15691              	.LASF96:
 15692 06b1 75454343 		.ascii	"uECC_secp160r1\000"
 15692      5F736563 
 15692      70313630 
 15692      723100
 15693              	.LASF98:
 15694 06c0 6F6D6567 		.ascii	"omega_mult_secp160r1\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 344


 15694      615F6D75 
 15694      6C745F73 
 15694      65637031 
 15694      36307231 
 15695              	.LASF5:
 15696 06d5 73686F72 		.ascii	"short int\000"
 15696      7420696E 
 15696      7400
 15697              	.LASF80:
 15698 06df 776F7264 		.ascii	"word_shift\000"
 15698      5F736869 
 15698      667400
 15699              	.LASF102:
 15700 06ea 6D6F645F 		.ascii	"mod_sqrt_secp224r1_rs\000"
 15700      73717274 
 15700      5F736563 
 15700      70323234 
 15700      72315F72 
 15701              	.LASF24:
 15702 0700 6D6F645F 		.ascii	"mod_sqrt\000"
 15702      73717274 
 15702      00
 15703              	.LASF73:
 15704 0709 75454343 		.ascii	"uECC_vli_modSub\000"
 15704      5F766C69 
 15704      5F6D6F64 
 15704      53756200 
 15705              	.LASF72:
 15706 0719 75454343 		.ascii	"uECC_vli_modAdd\000"
 15706      5F766C69 
 15706      5F6D6F64 
 15706      41646400 
 15707              	.LASF88:
 15708 0729 696E7075 		.ascii	"input\000"
 15708      7400
 15709              	.LASF133:
 15710 072f 6E617469 		.ascii	"native\000"
 15710      766500
 15711              	.LASF147:
 15712 0736 636F6D70 		.ascii	"compressed\000"
 15712      72657373 
 15712      656400
 15713              	.LASF17:
 15714 0741 75696E74 		.ascii	"uint32_t\000"
 15714      33325F74 
 15714      00
 15715              	.LASF121:
 15716 074a 45636350 		.ascii	"EccPoint_mult\000"
 15716      6F696E74 
 15716      5F6D756C 
 15716      7400
 15717              	.LASF38:
 15718 0758 75454343 		.ascii	"uECC_word_t\000"
 15718      5F776F72 
 15718      645F7400 
 15719              	.LASF46:
 15720 0764 72696768 		.ascii	"right_word\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 345


 15720      745F776F 
 15720      726400
 15721              	.LASF70:
 15722 076f 75454343 		.ascii	"uECC_vli_rshift1\000"
 15722      5F766C69 
 15722      5F727368 
 15722      69667431 
 15722      00
 15723              	.LASF29:
 15724 0780 75454343 		.ascii	"uECC_HashContext\000"
 15724      5F486173 
 15724      68436F6E 
 15724      74657874 
 15724      00
 15725              	.LASF153:
 15726 0791 62697473 		.ascii	"bits_size\000"
 15726      5F73697A 
 15726      6500
 15727              	.LASF151:
 15728 079b 75454343 		.ascii	"uECC_compute_public_key\000"
 15728      5F636F6D 
 15728      70757465 
 15728      5F707562 
 15728      6C69635F 
 15729              	.LASF57:
 15730 07b3 75454343 		.ascii	"uECC_vli_testBit\000"
 15730      5F766C69 
 15730      5F746573 
 15730      74426974 
 15730      00
 15731              	.LASF140:
 15732 07c4 7075626C 		.ascii	"public_key\000"
 15732      69635F6B 
 15732      657900
 15733              	.LASF30:
 15734 07cf 696E6974 		.ascii	"init_hash\000"
 15734      5F686173 
 15734      6800
 15735              	.LASF78:
 15736 07d9 696E6465 		.ascii	"index\000"
 15736      7800
 15737              	.LASF107:
 15738 07df 6D6F645F 		.ascii	"mod_sqrt_secp224r1\000"
 15738      73717274 
 15738      5F736563 
 15738      70323234 
 15738      723100
 15739              	.LASF177:
 15740 07f2 63757276 		.ascii	"curve_secp256r1\000"
 15740      655F7365 
 15740      63703235 
 15740      36723100 
 15741              	.LASF65:
 15742 0802 75454343 		.ascii	"uECC_vli_cmp_unsafe\000"
 15742      5F766C69 
 15742      5F636D70 
 15742      5F756E73 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 346


 15742      61666500 
 15743              	.LASF87:
 15744 0816 75454343 		.ascii	"uECC_vli_modInv\000"
 15744      5F766C69 
 15744      5F6D6F64 
 15744      496E7600 
 15745              	.LASF171:
 15746 0826 75454343 		.ascii	"uECC_verify\000"
 15746      5F766572 
 15746      69667900 
 15747              	.LASF68:
 15748 0832 75454343 		.ascii	"uECC_vli_cmp\000"
 15748      5F766C69 
 15748      5F636D70 
 15748      00
 15749              	.LASF148:
 15750 083f 75454343 		.ascii	"uECC_decompress\000"
 15750      5F646563 
 15750      6F6D7072 
 15750      65737300 
 15751              	.LASF89:
 15752 084f 636D7052 		.ascii	"cmpResult\000"
 15752      6573756C 
 15752      7400
 15753              	.LASF14:
 15754 0859 696E7438 		.ascii	"int8_t\000"
 15754      5F7400
 15755              	.LASF145:
 15756 0860 75454343 		.ascii	"uECC_set_rng\000"
 15756      5F736574 
 15756      5F726E67 
 15756      00
 15757              	.LASF21:
 15758 086d 6E756D5F 		.ascii	"num_bytes\000"
 15758      62797465 
 15758      7300
 15759              	.LASF82:
 15760 0877 626F7272 		.ascii	"borrow\000"
 15760      6F7700
 15761              	.LASF23:
 15762 087e 646F7562 		.ascii	"double_jacobian\000"
 15762      6C655F6A 
 15762      61636F62 
 15762      69616E00 
 15763              	.LASF137:
 15764 088e 6D61736B 		.ascii	"mask\000"
 15764      00
 15765              	.LASF120:
 15766 0893 5859635A 		.ascii	"XYcZ_addC\000"
 15766      5F616464 
 15766      4300
 15767              	.LASF143:
 15768 089d 75454343 		.ascii	"uECC_shared_secret\000"
 15768      5F736861 
 15768      7265645F 
 15768      73656372 
 15768      657400
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 347


 15769              	.LASF55:
 15770 08b0 75454343 		.ascii	"uECC_vli_isZero\000"
 15770      5F766C69 
 15770      5F69735A 
 15770      65726F00 
 15771              	.LASF63:
 15772 08c0 75454343 		.ascii	"uECC_vli_set\000"
 15772      5F766C69 
 15772      5F736574 
 15772      00
 15773              	.LASF106:
 15774 08cd 706F7732 		.ascii	"pow2i\000"
 15774      6900
 15775              	.LASF15:
 15776 08d3 75696E74 		.ascii	"uint8_t\000"
 15776      385F7400 
 15777              	.LASF160:
 15778 08db 484D4143 		.ascii	"HMAC_init\000"
 15778      5F696E69 
 15778      7400
 15779              	.LASF50:
 15780 08e5 63757276 		.ascii	"curve\000"
 15780      6500
 15781              	.LASF127:
 15782 08eb 45636350 		.ascii	"EccPoint_compute_public_key\000"
 15782      6F696E74 
 15782      5F636F6D 
 15782      70757465 
 15782      5F707562 
 15783              	.LASF128:
 15784 0907 70726976 		.ascii	"private_key\000"
 15784      6174655F 
 15784      6B657900 
 15785              	.LASF81:
 15786 0913 6269745F 		.ascii	"bit_shift\000"
 15786      73686966 
 15786      7400
 15787              	.LASF135:
 15788 091d 75454343 		.ascii	"uECC_generate_random_int\000"
 15788      5F67656E 
 15788      65726174 
 15788      655F7261 
 15788      6E646F6D 
 15789              	.LASF35:
 15790 0936 776F7264 		.ascii	"wordcount_t\000"
 15790      636F756E 
 15790      745F7400 
 15791              	.LASF112:
 15792 0942 646F7562 		.ascii	"double_jacobian_secp256k1\000"
 15792      6C655F6A 
 15792      61636F62 
 15792      69616E5F 
 15792      73656370 
 15793              	.LASF34:
 15794 095c 72657375 		.ascii	"result_size\000"
 15794      6C745F73 
 15794      697A6500 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 348


 15795              	.LASF163:
 15796 0968 6D657373 		.ascii	"message\000"
 15796      61676500 
 15797              	.LASF124:
 15798 0970 6E756D5F 		.ascii	"num_bits\000"
 15798      62697473 
 15798      00
 15799              	.LASF48:
 15800 0979 75454343 		.ascii	"uECC_vli_sub\000"
 15800      5F766C69 
 15800      5F737562 
 15800      00
 15801              	.LASF161:
 15802 0986 68617368 		.ascii	"hash_context\000"
 15802      5F636F6E 
 15802      74657874 
 15802      00
 15803              	.LASF99:
 15804 0993 75454343 		.ascii	"uECC_secp192r1\000"
 15804      5F736563 
 15804      70313932 
 15804      723100
 15805              	.LASF41:
 15806 09a2 6C656674 		.ascii	"left\000"
 15806      00
 15807              	.LASF181:
 15808 09a7 443A5C44 		.ascii	"D:\\Dropbox\\6_kurs\\diploma\\crypto_miscocontrolle"
 15808      726F7062 
 15808      6F785C36 
 15808      5F6B7572 
 15808      735C6469 
 15809 09d6 725F5354 		.ascii	"r_STABLE\\BLE_Dynamic_GATT_Service_Configuration\\B"
 15809      41424C45 
 15809      5C424C45 
 15809      5F44796E 
 15809      616D6963 
 15810 0a07 4C455F44 		.ascii	"LE_Dynamic_GATT_Service_Configuration.cydsn\000"
 15810      796E616D 
 15810      69635F47 
 15810      4154545F 
 15810      53657276 
 15811              	.LASF40:
 15812 0a33 72657375 		.ascii	"result\000"
 15812      6C7400
 15813              	.LASF47:
 15814 0a3a 75454343 		.ascii	"uECC_vli_add\000"
 15814      5F766C69 
 15814      5F616464 
 15814      00
 15815              	.LASF157:
 15816 0a47 68617368 		.ascii	"hash_size\000"
 15816      5F73697A 
 15816      6500
 15817              	.LASF142:
 15818 0a51 5F707562 		.ascii	"_public\000"
 15818      6C696300 
 15819              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccN9Mpsj.s 			page 349


