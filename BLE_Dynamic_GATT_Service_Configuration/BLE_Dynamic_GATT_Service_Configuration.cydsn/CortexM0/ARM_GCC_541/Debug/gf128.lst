ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"gf128.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.read32_be,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	read32_be, %function
  24              	read32_be:
  25              	.LFB4:
  26              		.file 1 "bitops.h"
   1:bitops.h      **** /*
   2:bitops.h      ****  * cifra - embedded cryptography library
   3:bitops.h      ****  * Written in 2014 by Joseph Birr-Pixton <jpixton@gmail.com>
   4:bitops.h      ****  *
   5:bitops.h      ****  * To the extent possible under law, the author(s) have dedicated all
   6:bitops.h      ****  * copyright and related and neighboring rights to this software to the
   7:bitops.h      ****  * public domain worldwide. This software is distributed without any
   8:bitops.h      ****  * warranty.
   9:bitops.h      ****  *
  10:bitops.h      ****  * You should have received a copy of the CC0 Public Domain Dedication
  11:bitops.h      ****  * along with this software. If not, see
  12:bitops.h      ****  * <http://creativecommons.org/publicdomain/zero/1.0/>.
  13:bitops.h      ****  */
  14:bitops.h      **** 
  15:bitops.h      **** #ifndef BITOPS_H
  16:bitops.h      **** #define BITOPS_H
  17:bitops.h      **** 
  18:bitops.h      **** #include <stdint.h>
  19:bitops.h      **** #include <stddef.h>
  20:bitops.h      **** 
  21:bitops.h      **** /* Assorted bitwise and common operations used in ciphers. */
  22:bitops.h      **** 
  23:bitops.h      **** /** Circularly rotate right x by n bits.
  24:bitops.h      ****  *  0 > n > 32. */
  25:bitops.h      **** static inline uint32_t rotr32(uint32_t x, unsigned n)
  26:bitops.h      **** {
  27:bitops.h      ****   return (x >> n) | (x << (32 - n));
  28:bitops.h      **** }
  29:bitops.h      **** 
  30:bitops.h      **** /** Circularly rotate left x by n bits.
  31:bitops.h      ****  *  0 > n > 32. */
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 2


  32:bitops.h      **** static inline uint32_t rotl32(uint32_t x, unsigned n)
  33:bitops.h      **** {
  34:bitops.h      ****   return (x << n) | (x >> (32 - n));
  35:bitops.h      **** }
  36:bitops.h      **** 
  37:bitops.h      **** /** Circularly rotate right x by n bits.
  38:bitops.h      ****  *  0 > n > 64. */
  39:bitops.h      **** static inline uint64_t rotr64(uint64_t x, unsigned n)
  40:bitops.h      **** {
  41:bitops.h      ****   return (x >> n) | (x << (64 - n));
  42:bitops.h      **** }
  43:bitops.h      **** 
  44:bitops.h      **** /** Circularly rotate left x by n bits.
  45:bitops.h      ****  *  0 > n > 64. */
  46:bitops.h      **** static inline uint64_t rotl64(uint64_t x, unsigned n)
  47:bitops.h      **** {
  48:bitops.h      ****   return (x << n) | (x >> (64 - n));
  49:bitops.h      **** }
  50:bitops.h      **** 
  51:bitops.h      **** /** Read 4 bytes from buf, as a 32-bit big endian quantity. */
  52:bitops.h      **** static inline uint32_t read32_be(const uint8_t buf[4])
  53:bitops.h      **** {
  27              		.loc 1 53 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              		.cfi_def_cfa_offset 8
  34 0002 0190     		str	r0, [sp, #4]
  54:bitops.h      ****   return (buf[0] << 24) |
  35              		.loc 1 54 0
  36 0004 019B     		ldr	r3, [sp, #4]
  37 0006 1B78     		ldrb	r3, [r3]
  38 0008 1A06     		lsls	r2, r3, #24
  55:bitops.h      ****          (buf[1] << 16) |
  39              		.loc 1 55 0
  40 000a 019B     		ldr	r3, [sp, #4]
  41 000c 0133     		adds	r3, r3, #1
  42 000e 1B78     		ldrb	r3, [r3]
  43 0010 1B04     		lsls	r3, r3, #16
  54:bitops.h      ****   return (buf[0] << 24) |
  44              		.loc 1 54 0
  45 0012 1A43     		orrs	r2, r3
  56:bitops.h      ****          (buf[2] << 8) |
  46              		.loc 1 56 0
  47 0014 019B     		ldr	r3, [sp, #4]
  48 0016 0233     		adds	r3, r3, #2
  49 0018 1B78     		ldrb	r3, [r3]
  50 001a 1B02     		lsls	r3, r3, #8
  55:bitops.h      ****          (buf[1] << 16) |
  51              		.loc 1 55 0
  52 001c 1343     		orrs	r3, r2
  57:bitops.h      ****          (buf[3]);
  53              		.loc 1 57 0
  54 001e 019A     		ldr	r2, [sp, #4]
  55 0020 0332     		adds	r2, r2, #3
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 3


  56 0022 1278     		ldrb	r2, [r2]
  56:bitops.h      ****          (buf[2] << 8) |
  57              		.loc 1 56 0
  58 0024 1343     		orrs	r3, r2
  58:bitops.h      **** }
  59              		.loc 1 58 0
  60 0026 1800     		movs	r0, r3
  61 0028 02B0     		add	sp, sp, #8
  62              		@ sp needed
  63 002a 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE4:
  66              		.size	read32_be, .-read32_be
  67              		.section	.text.write32_be,"ax",%progbits
  68              		.align	2
  69              		.code	16
  70              		.thumb_func
  71              		.type	write32_be, %function
  72              	write32_be:
  73              	.LFB8:
  59:bitops.h      **** 
  60:bitops.h      **** /** Read 4 bytes from buf, as a 32-bit little endian quantity. */
  61:bitops.h      **** static inline uint32_t read32_le(const uint8_t buf[4])
  62:bitops.h      **** {
  63:bitops.h      ****   return (buf[3] << 24) |
  64:bitops.h      ****          (buf[2] << 16) |
  65:bitops.h      ****          (buf[1] << 8) |
  66:bitops.h      ****          (buf[0]);
  67:bitops.h      **** }
  68:bitops.h      **** 
  69:bitops.h      **** /** Read 8 bytes from buf, as a 64-bit big endian quantity. */
  70:bitops.h      **** static inline uint64_t read64_be(const uint8_t buf[8])
  71:bitops.h      **** {
  72:bitops.h      ****   uint32_t hi = read32_be(buf),
  73:bitops.h      ****            lo = read32_be(buf + 4);
  74:bitops.h      ****   return ((uint64_t)hi) << 32 |
  75:bitops.h      ****          lo;
  76:bitops.h      **** }
  77:bitops.h      **** 
  78:bitops.h      **** /** Read 8 bytes from buf, as a 64-bit little endian quantity. */
  79:bitops.h      **** static inline uint64_t read64_le(const uint8_t buf[8])
  80:bitops.h      **** {
  81:bitops.h      ****   uint32_t hi = read32_le(buf + 4),
  82:bitops.h      ****            lo = read32_le(buf);
  83:bitops.h      ****   return ((uint64_t)hi) << 32 |
  84:bitops.h      ****          lo;
  85:bitops.h      **** }
  86:bitops.h      **** 
  87:bitops.h      **** /** Encode v as a 32-bit big endian quantity into buf. */
  88:bitops.h      **** static inline void write32_be(uint32_t v, uint8_t buf[4])
  89:bitops.h      **** {
  74              		.loc 1 89 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79 0000 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 4


  80              		.cfi_def_cfa_offset 8
  81 0002 0190     		str	r0, [sp, #4]
  82 0004 0091     		str	r1, [sp]
  90:bitops.h      ****   *buf++ = (v >> 24) & 0xff;
  83              		.loc 1 90 0
  84 0006 009B     		ldr	r3, [sp]
  85 0008 5A1C     		adds	r2, r3, #1
  86 000a 0092     		str	r2, [sp]
  87 000c 019A     		ldr	r2, [sp, #4]
  88 000e 120E     		lsrs	r2, r2, #24
  89 0010 D2B2     		uxtb	r2, r2
  90 0012 1A70     		strb	r2, [r3]
  91:bitops.h      ****   *buf++ = (v >> 16) & 0xff;
  91              		.loc 1 91 0
  92 0014 009B     		ldr	r3, [sp]
  93 0016 5A1C     		adds	r2, r3, #1
  94 0018 0092     		str	r2, [sp]
  95 001a 019A     		ldr	r2, [sp, #4]
  96 001c 120C     		lsrs	r2, r2, #16
  97 001e D2B2     		uxtb	r2, r2
  98 0020 1A70     		strb	r2, [r3]
  92:bitops.h      ****   *buf++ = (v >> 8) & 0xff;
  99              		.loc 1 92 0
 100 0022 009B     		ldr	r3, [sp]
 101 0024 5A1C     		adds	r2, r3, #1
 102 0026 0092     		str	r2, [sp]
 103 0028 019A     		ldr	r2, [sp, #4]
 104 002a 120A     		lsrs	r2, r2, #8
 105 002c D2B2     		uxtb	r2, r2
 106 002e 1A70     		strb	r2, [r3]
  93:bitops.h      ****   *buf   = v & 0xff;
 107              		.loc 1 93 0
 108 0030 019B     		ldr	r3, [sp, #4]
 109 0032 DAB2     		uxtb	r2, r3
 110 0034 009B     		ldr	r3, [sp]
 111 0036 1A70     		strb	r2, [r3]
  94:bitops.h      **** }
 112              		.loc 1 94 0
 113 0038 C046     		nop
 114 003a 02B0     		add	sp, sp, #8
 115              		@ sp needed
 116 003c 7047     		bx	lr
 117              		.cfi_endproc
 118              	.LFE8:
 119              		.size	write32_be, .-write32_be
 120 003e C046     		.section	.text.mask_u32,"ax",%progbits
 121              		.align	2
 122              		.code	16
 123              		.thumb_func
 124              		.type	mask_u32, %function
 125              	mask_u32:
 126              	.LFB15:
  95:bitops.h      **** 
  96:bitops.h      **** /** Encode v as a 32-bit little endian quantity into buf. */
  97:bitops.h      **** static inline void write32_le(uint32_t v, uint8_t buf[4])
  98:bitops.h      **** {
  99:bitops.h      ****   *buf++ = v & 0xff;
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 5


 100:bitops.h      ****   *buf++ = (v >> 8) & 0xff;
 101:bitops.h      ****   *buf++ = (v >> 16) & 0xff;
 102:bitops.h      ****   *buf   = (v >> 24) & 0xff;
 103:bitops.h      **** }
 104:bitops.h      **** 
 105:bitops.h      **** /** Encode v as a 64-bit big endian quantity into buf. */
 106:bitops.h      **** static inline void write64_be(uint64_t v, uint8_t buf[8])
 107:bitops.h      **** {
 108:bitops.h      ****   *buf++ = (v >> 56) & 0xff;
 109:bitops.h      ****   *buf++ = (v >> 48) & 0xff;
 110:bitops.h      ****   *buf++ = (v >> 40) & 0xff;
 111:bitops.h      ****   *buf++ = (v >> 32) & 0xff;
 112:bitops.h      ****   *buf++ = (v >> 24) & 0xff;
 113:bitops.h      ****   *buf++ = (v >> 16) & 0xff;
 114:bitops.h      ****   *buf++ = (v >> 8) & 0xff;
 115:bitops.h      ****   *buf   = v & 0xff;
 116:bitops.h      **** }
 117:bitops.h      **** 
 118:bitops.h      **** /** Encode v as a 64-bit little endian quantity into buf. */
 119:bitops.h      **** static inline void write64_le(uint64_t v, uint8_t buf[8])
 120:bitops.h      **** {
 121:bitops.h      ****   *buf++ = v & 0xff;
 122:bitops.h      ****   *buf++ = (v >> 8) & 0xff;
 123:bitops.h      ****   *buf++ = (v >> 16) & 0xff;
 124:bitops.h      ****   *buf++ = (v >> 24) & 0xff;
 125:bitops.h      ****   *buf++ = (v >> 32) & 0xff;
 126:bitops.h      ****   *buf++ = (v >> 40) & 0xff;
 127:bitops.h      ****   *buf++ = (v >> 48) & 0xff;
 128:bitops.h      ****   *buf   = (v >> 56) & 0xff;
 129:bitops.h      **** }
 130:bitops.h      **** 
 131:bitops.h      **** /** out = in ^ b8.
 132:bitops.h      ****  *  out and in may alias. */
 133:bitops.h      **** static inline void xor_b8(uint8_t *out, const uint8_t *in, uint8_t b8, size_t len)
 134:bitops.h      **** {
 135:bitops.h      ****   for (size_t i = 0; i < len; i++)
 136:bitops.h      ****     out[i] = in[i] ^ b8;
 137:bitops.h      **** }
 138:bitops.h      **** 
 139:bitops.h      **** /** out = x ^ y.
 140:bitops.h      ****  *  out, x and y may alias. */
 141:bitops.h      **** static inline void xor_bb(uint8_t *out, const uint8_t *x, const uint8_t *y, size_t len)
 142:bitops.h      **** {
 143:bitops.h      ****   for (size_t i = 0; i < len; i++)
 144:bitops.h      ****     out[i] = x[i] ^ y[i];
 145:bitops.h      **** }
 146:bitops.h      **** 
 147:bitops.h      **** /* out ^= x
 148:bitops.h      ****  * out and x may alias. */
 149:bitops.h      **** static inline void xor_words(uint32_t *out, const uint32_t *x, size_t nwords)
 150:bitops.h      **** {
 151:bitops.h      ****   for (size_t i = 0; i < nwords; i++)
 152:bitops.h      ****     out[i] ^= x[i];
 153:bitops.h      **** }
 154:bitops.h      **** 
 155:bitops.h      **** /** Produce 0xffffffff if x == y, zero otherwise, without branching. */
 156:bitops.h      **** static inline uint32_t mask_u32(uint32_t x, uint32_t y)
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 6


 157:bitops.h      **** {
 127              		.loc 1 157 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 16
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 0000 84B0     		sub	sp, sp, #16
 133              		.cfi_def_cfa_offset 16
 134 0002 0190     		str	r0, [sp, #4]
 135 0004 0091     		str	r1, [sp]
 158:bitops.h      ****   uint32_t diff = x ^ y;
 136              		.loc 1 158 0
 137 0006 019A     		ldr	r2, [sp, #4]
 138 0008 009B     		ldr	r3, [sp]
 139 000a 5340     		eors	r3, r2
 140 000c 0393     		str	r3, [sp, #12]
 159:bitops.h      ****   uint32_t diff_is_zero = ~diff & (diff - 1);
 141              		.loc 1 159 0
 142 000e 039B     		ldr	r3, [sp, #12]
 143 0010 DB43     		mvns	r3, r3
 144 0012 039A     		ldr	r2, [sp, #12]
 145 0014 013A     		subs	r2, r2, #1
 146 0016 1340     		ands	r3, r2
 147 0018 0293     		str	r3, [sp, #8]
 160:bitops.h      ****   return - (diff_is_zero >> 31);
 148              		.loc 1 160 0
 149 001a 029B     		ldr	r3, [sp, #8]
 150 001c DB17     		asrs	r3, r3, #31
 161:bitops.h      **** }
 151              		.loc 1 161 0
 152 001e 1800     		movs	r0, r3
 153 0020 04B0     		add	sp, sp, #16
 154              		@ sp needed
 155 0022 7047     		bx	lr
 156              		.cfi_endproc
 157              	.LFE15:
 158              		.size	mask_u32, .-mask_u32
 159              		.section	.text.select_xor128,"ax",%progbits
 160              		.align	2
 161              		.code	16
 162              		.thumb_func
 163              		.type	select_xor128, %function
 164              	select_xor128:
 165              	.LFB20:
 162:bitops.h      **** 
 163:bitops.h      **** /** Product 0xff if x == y, zero otherwise, without branching. */
 164:bitops.h      **** static inline uint8_t mask_u8(uint32_t x, uint32_t y)
 165:bitops.h      **** {
 166:bitops.h      ****   uint32_t diff = x ^ y;
 167:bitops.h      ****   uint8_t diff_is_zero = ~diff & (diff - 1);
 168:bitops.h      ****   return - (diff_is_zero >> 7);
 169:bitops.h      **** }
 170:bitops.h      **** 
 171:bitops.h      **** /** Select the ith entry from the given table of n values, in a side channel-silent
 172:bitops.h      ****  *  way. */
 173:bitops.h      **** static inline uint32_t select_u32(uint32_t i, volatile const uint32_t *tab, uint32_t n)
 174:bitops.h      **** {
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 7


 175:bitops.h      ****   uint32_t r = 0;
 176:bitops.h      **** 
 177:bitops.h      ****   for (uint32_t ii = 0; ii < n; ii++)
 178:bitops.h      ****   {
 179:bitops.h      ****     uint32_t mask = mask_u32(i, ii);
 180:bitops.h      ****     r = (r & ~mask) | (tab[ii] & mask);
 181:bitops.h      ****   }
 182:bitops.h      **** 
 183:bitops.h      ****   return r;
 184:bitops.h      **** }
 185:bitops.h      **** 
 186:bitops.h      **** /** Select the ith entry from the given table of n values, in a side channel-silent
 187:bitops.h      ****  *  way. */
 188:bitops.h      **** static inline uint8_t select_u8(uint32_t i, volatile const uint8_t *tab, uint32_t n)
 189:bitops.h      **** {
 190:bitops.h      ****   uint8_t r = 0;
 191:bitops.h      **** 
 192:bitops.h      ****   for (uint32_t ii = 0; ii < n; ii++)
 193:bitops.h      ****   {
 194:bitops.h      ****     uint8_t mask = mask_u8(i, ii);
 195:bitops.h      ****     r = (r & ~mask) | (tab[ii] & mask);
 196:bitops.h      ****   }
 197:bitops.h      **** 
 198:bitops.h      ****   return r;
 199:bitops.h      **** }
 200:bitops.h      **** 
 201:bitops.h      **** /** Select the ath, bth, cth and dth entries from the given table of n values,
 202:bitops.h      ****  *  placing the results into a, b, c and d. */
 203:bitops.h      **** static inline void select_u8x4(uint8_t *a, uint8_t *b, uint8_t *c, uint8_t *d,
 204:bitops.h      ****                                volatile const uint8_t *tab, uint32_t n)
 205:bitops.h      **** {
 206:bitops.h      ****   uint8_t ra = 0,
 207:bitops.h      ****           rb = 0,
 208:bitops.h      ****           rc = 0,
 209:bitops.h      ****           rd = 0;
 210:bitops.h      ****   uint8_t mask;
 211:bitops.h      **** 
 212:bitops.h      ****   for (uint32_t i = 0; i < n; i++)
 213:bitops.h      ****   {
 214:bitops.h      ****     uint8_t item = tab[i];
 215:bitops.h      **** 
 216:bitops.h      ****     mask = mask_u8(*a, i); ra = (ra & ~mask) | (item & mask);
 217:bitops.h      ****     mask = mask_u8(*b, i); rb = (rb & ~mask) | (item & mask);
 218:bitops.h      ****     mask = mask_u8(*c, i); rc = (rc & ~mask) | (item & mask);
 219:bitops.h      ****     mask = mask_u8(*d, i); rd = (rd & ~mask) | (item & mask);
 220:bitops.h      ****   }
 221:bitops.h      **** 
 222:bitops.h      ****   *a = ra;
 223:bitops.h      ****   *b = rb;
 224:bitops.h      ****   *c = rc;
 225:bitops.h      ****   *d = rd;
 226:bitops.h      **** }
 227:bitops.h      **** 
 228:bitops.h      **** /** out ^= if0 or if1, depending on the value of bit. */
 229:bitops.h      **** static inline void select_xor128(uint32_t out[4],
 230:bitops.h      ****                                  const uint32_t if0[4],
 231:bitops.h      ****                                  const uint32_t if1[4],
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 8


 232:bitops.h      ****                                  uint8_t bit)
 233:bitops.h      **** {
 166              		.loc 1 233 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 24
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170 0000 10B5     		push	{r4, lr}
 171              		.cfi_def_cfa_offset 8
 172              		.cfi_offset 4, -8
 173              		.cfi_offset 14, -4
 174 0002 86B0     		sub	sp, sp, #24
 175              		.cfi_def_cfa_offset 32
 176 0004 0390     		str	r0, [sp, #12]
 177 0006 0291     		str	r1, [sp, #8]
 178 0008 0192     		str	r2, [sp, #4]
 179 000a 1A00     		movs	r2, r3
 180 000c 6B46     		mov	r3, sp
 181 000e 0333     		adds	r3, r3, #3
 182 0010 1A70     		strb	r2, [r3]
 234:bitops.h      ****   uint32_t mask1 = mask_u32(bit, 1);
 183              		.loc 1 234 0
 184 0012 6B46     		mov	r3, sp
 185 0014 0333     		adds	r3, r3, #3
 186 0016 1B78     		ldrb	r3, [r3]
 187 0018 0121     		movs	r1, #1
 188 001a 1800     		movs	r0, r3
 189 001c FFF7FEFF 		bl	mask_u32
 190 0020 0300     		movs	r3, r0
 191 0022 0593     		str	r3, [sp, #20]
 235:bitops.h      ****   uint32_t mask0 = ~mask1;
 192              		.loc 1 235 0
 193 0024 059B     		ldr	r3, [sp, #20]
 194 0026 DB43     		mvns	r3, r3
 195 0028 0493     		str	r3, [sp, #16]
 236:bitops.h      **** 
 237:bitops.h      ****   out[0] ^= (if0[0] & mask0) | (if1[0] & mask1);
 196              		.loc 1 237 0
 197 002a 039B     		ldr	r3, [sp, #12]
 198 002c 1A68     		ldr	r2, [r3]
 199 002e 029B     		ldr	r3, [sp, #8]
 200 0030 1B68     		ldr	r3, [r3]
 201 0032 0499     		ldr	r1, [sp, #16]
 202 0034 1940     		ands	r1, r3
 203 0036 019B     		ldr	r3, [sp, #4]
 204 0038 1B68     		ldr	r3, [r3]
 205 003a 0598     		ldr	r0, [sp, #20]
 206 003c 0340     		ands	r3, r0
 207 003e 0B43     		orrs	r3, r1
 208 0040 5A40     		eors	r2, r3
 209 0042 039B     		ldr	r3, [sp, #12]
 210 0044 1A60     		str	r2, [r3]
 238:bitops.h      ****   out[1] ^= (if0[1] & mask0) | (if1[1] & mask1);
 211              		.loc 1 238 0
 212 0046 039B     		ldr	r3, [sp, #12]
 213 0048 0433     		adds	r3, r3, #4
 214 004a 039A     		ldr	r2, [sp, #12]
 215 004c 0432     		adds	r2, r2, #4
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 9


 216 004e 1168     		ldr	r1, [r2]
 217 0050 029A     		ldr	r2, [sp, #8]
 218 0052 0432     		adds	r2, r2, #4
 219 0054 1268     		ldr	r2, [r2]
 220 0056 0498     		ldr	r0, [sp, #16]
 221 0058 1040     		ands	r0, r2
 222 005a 019A     		ldr	r2, [sp, #4]
 223 005c 0432     		adds	r2, r2, #4
 224 005e 1268     		ldr	r2, [r2]
 225 0060 059C     		ldr	r4, [sp, #20]
 226 0062 2240     		ands	r2, r4
 227 0064 0243     		orrs	r2, r0
 228 0066 4A40     		eors	r2, r1
 229 0068 1A60     		str	r2, [r3]
 239:bitops.h      ****   out[2] ^= (if0[2] & mask0) | (if1[2] & mask1);
 230              		.loc 1 239 0
 231 006a 039B     		ldr	r3, [sp, #12]
 232 006c 0833     		adds	r3, r3, #8
 233 006e 039A     		ldr	r2, [sp, #12]
 234 0070 0832     		adds	r2, r2, #8
 235 0072 1168     		ldr	r1, [r2]
 236 0074 029A     		ldr	r2, [sp, #8]
 237 0076 0832     		adds	r2, r2, #8
 238 0078 1268     		ldr	r2, [r2]
 239 007a 0498     		ldr	r0, [sp, #16]
 240 007c 1040     		ands	r0, r2
 241 007e 019A     		ldr	r2, [sp, #4]
 242 0080 0832     		adds	r2, r2, #8
 243 0082 1268     		ldr	r2, [r2]
 244 0084 059C     		ldr	r4, [sp, #20]
 245 0086 2240     		ands	r2, r4
 246 0088 0243     		orrs	r2, r0
 247 008a 4A40     		eors	r2, r1
 248 008c 1A60     		str	r2, [r3]
 240:bitops.h      ****   out[3] ^= (if0[3] & mask0) | (if1[3] & mask1);
 249              		.loc 1 240 0
 250 008e 039B     		ldr	r3, [sp, #12]
 251 0090 0C33     		adds	r3, r3, #12
 252 0092 039A     		ldr	r2, [sp, #12]
 253 0094 0C32     		adds	r2, r2, #12
 254 0096 1168     		ldr	r1, [r2]
 255 0098 029A     		ldr	r2, [sp, #8]
 256 009a 0C32     		adds	r2, r2, #12
 257 009c 1268     		ldr	r2, [r2]
 258 009e 0498     		ldr	r0, [sp, #16]
 259 00a0 1040     		ands	r0, r2
 260 00a2 019A     		ldr	r2, [sp, #4]
 261 00a4 0C32     		adds	r2, r2, #12
 262 00a6 1268     		ldr	r2, [r2]
 263 00a8 059C     		ldr	r4, [sp, #20]
 264 00aa 2240     		ands	r2, r4
 265 00ac 0243     		orrs	r2, r0
 266 00ae 4A40     		eors	r2, r1
 267 00b0 1A60     		str	r2, [r3]
 241:bitops.h      **** }
 268              		.loc 1 241 0
 269 00b2 C046     		nop
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 10


 270 00b4 06B0     		add	sp, sp, #24
 271              		@ sp needed
 272 00b6 10BD     		pop	{r4, pc}
 273              		.cfi_endproc
 274              	.LFE20:
 275              		.size	select_xor128, .-select_xor128
 276              		.section	.text.cf_gf128_tobytes_be,"ax",%progbits
 277              		.align	2
 278              		.global	cf_gf128_tobytes_be
 279              		.code	16
 280              		.thumb_func
 281              		.type	cf_gf128_tobytes_be, %function
 282              	cf_gf128_tobytes_be:
 283              	.LFB25:
 284              		.file 2 "gf128.c"
   1:gf128.c       **** /*
   2:gf128.c       ****  * cifra - embedded cryptography library
   3:gf128.c       ****  * Written in 2014 by Joseph Birr-Pixton <jpixton@gmail.com>
   4:gf128.c       ****  *
   5:gf128.c       ****  * To the extent possible under law, the author(s) have dedicated all
   6:gf128.c       ****  * copyright and related and neighboring rights to this software to the
   7:gf128.c       ****  * public domain worldwide. This software is distributed without any
   8:gf128.c       ****  * warranty.
   9:gf128.c       ****  *
  10:gf128.c       ****  * You should have received a copy of the CC0 Public Domain Dedication
  11:gf128.c       ****  * along with this software. If not, see
  12:gf128.c       ****  * <http://creativecommons.org/publicdomain/zero/1.0/>.
  13:gf128.c       ****  */
  14:gf128.c       **** 
  15:gf128.c       **** #include "cf_config.h"
  16:gf128.c       **** #include "gf128.h"
  17:gf128.c       **** #include "bitops.h"
  18:gf128.c       **** 
  19:gf128.c       **** #include <string.h>
  20:gf128.c       **** 
  21:gf128.c       **** void cf_gf128_tobytes_be(const cf_gf128 in, uint8_t out[16])
  22:gf128.c       **** {
 285              		.loc 2 22 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 8
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289 0000 00B5     		push	{lr}
 290              		.cfi_def_cfa_offset 4
 291              		.cfi_offset 14, -4
 292 0002 83B0     		sub	sp, sp, #12
 293              		.cfi_def_cfa_offset 16
 294 0004 0190     		str	r0, [sp, #4]
 295 0006 0091     		str	r1, [sp]
  23:gf128.c       ****   write32_be(in[0], out + 0);
 296              		.loc 2 23 0
 297 0008 019B     		ldr	r3, [sp, #4]
 298 000a 1B68     		ldr	r3, [r3]
 299 000c 009A     		ldr	r2, [sp]
 300 000e 1100     		movs	r1, r2
 301 0010 1800     		movs	r0, r3
 302 0012 FFF7FEFF 		bl	write32_be
  24:gf128.c       ****   write32_be(in[1], out + 4);
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 11


 303              		.loc 2 24 0
 304 0016 019B     		ldr	r3, [sp, #4]
 305 0018 0433     		adds	r3, r3, #4
 306 001a 1A68     		ldr	r2, [r3]
 307 001c 009B     		ldr	r3, [sp]
 308 001e 0433     		adds	r3, r3, #4
 309 0020 1900     		movs	r1, r3
 310 0022 1000     		movs	r0, r2
 311 0024 FFF7FEFF 		bl	write32_be
  25:gf128.c       ****   write32_be(in[2], out + 8);
 312              		.loc 2 25 0
 313 0028 019B     		ldr	r3, [sp, #4]
 314 002a 0833     		adds	r3, r3, #8
 315 002c 1A68     		ldr	r2, [r3]
 316 002e 009B     		ldr	r3, [sp]
 317 0030 0833     		adds	r3, r3, #8
 318 0032 1900     		movs	r1, r3
 319 0034 1000     		movs	r0, r2
 320 0036 FFF7FEFF 		bl	write32_be
  26:gf128.c       ****   write32_be(in[3], out + 12);
 321              		.loc 2 26 0
 322 003a 019B     		ldr	r3, [sp, #4]
 323 003c 0C33     		adds	r3, r3, #12
 324 003e 1A68     		ldr	r2, [r3]
 325 0040 009B     		ldr	r3, [sp]
 326 0042 0C33     		adds	r3, r3, #12
 327 0044 1900     		movs	r1, r3
 328 0046 1000     		movs	r0, r2
 329 0048 FFF7FEFF 		bl	write32_be
  27:gf128.c       **** }
 330              		.loc 2 27 0
 331 004c C046     		nop
 332 004e 03B0     		add	sp, sp, #12
 333              		@ sp needed
 334 0050 00BD     		pop	{pc}
 335              		.cfi_endproc
 336              	.LFE25:
 337              		.size	cf_gf128_tobytes_be, .-cf_gf128_tobytes_be
 338 0052 C046     		.section	.text.cf_gf128_frombytes_be,"ax",%progbits
 339              		.align	2
 340              		.global	cf_gf128_frombytes_be
 341              		.code	16
 342              		.thumb_func
 343              		.type	cf_gf128_frombytes_be, %function
 344              	cf_gf128_frombytes_be:
 345              	.LFB26:
  28:gf128.c       **** 
  29:gf128.c       **** void cf_gf128_frombytes_be(const uint8_t in[16], cf_gf128 out)
  30:gf128.c       **** {
 346              		.loc 2 30 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 8
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350 0000 10B5     		push	{r4, lr}
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 4, -8
 353              		.cfi_offset 14, -4
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 12


 354 0002 82B0     		sub	sp, sp, #8
 355              		.cfi_def_cfa_offset 16
 356 0004 0190     		str	r0, [sp, #4]
 357 0006 0091     		str	r1, [sp]
  31:gf128.c       ****   out[0] = read32_be(in + 0);
 358              		.loc 2 31 0
 359 0008 019B     		ldr	r3, [sp, #4]
 360 000a 1800     		movs	r0, r3
 361 000c FFF7FEFF 		bl	read32_be
 362 0010 0200     		movs	r2, r0
 363 0012 009B     		ldr	r3, [sp]
 364 0014 1A60     		str	r2, [r3]
  32:gf128.c       ****   out[1] = read32_be(in + 4);
 365              		.loc 2 32 0
 366 0016 009B     		ldr	r3, [sp]
 367 0018 1C1D     		adds	r4, r3, #4
 368 001a 019B     		ldr	r3, [sp, #4]
 369 001c 0433     		adds	r3, r3, #4
 370 001e 1800     		movs	r0, r3
 371 0020 FFF7FEFF 		bl	read32_be
 372 0024 0300     		movs	r3, r0
 373 0026 2360     		str	r3, [r4]
  33:gf128.c       ****   out[2] = read32_be(in + 8);
 374              		.loc 2 33 0
 375 0028 009B     		ldr	r3, [sp]
 376 002a 0833     		adds	r3, r3, #8
 377 002c 1C00     		movs	r4, r3
 378 002e 019B     		ldr	r3, [sp, #4]
 379 0030 0833     		adds	r3, r3, #8
 380 0032 1800     		movs	r0, r3
 381 0034 FFF7FEFF 		bl	read32_be
 382 0038 0300     		movs	r3, r0
 383 003a 2360     		str	r3, [r4]
  34:gf128.c       ****   out[3] = read32_be(in + 12);
 384              		.loc 2 34 0
 385 003c 009B     		ldr	r3, [sp]
 386 003e 0C33     		adds	r3, r3, #12
 387 0040 1C00     		movs	r4, r3
 388 0042 019B     		ldr	r3, [sp, #4]
 389 0044 0C33     		adds	r3, r3, #12
 390 0046 1800     		movs	r0, r3
 391 0048 FFF7FEFF 		bl	read32_be
 392 004c 0300     		movs	r3, r0
 393 004e 2360     		str	r3, [r4]
  35:gf128.c       **** }
 394              		.loc 2 35 0
 395 0050 C046     		nop
 396 0052 02B0     		add	sp, sp, #8
 397              		@ sp needed
 398 0054 10BD     		pop	{r4, pc}
 399              		.cfi_endproc
 400              	.LFE26:
 401              		.size	cf_gf128_frombytes_be, .-cf_gf128_frombytes_be
 402 0056 C046     		.section	.text.cf_gf128_double,"ax",%progbits
 403              		.align	2
 404              		.global	cf_gf128_double
 405              		.code	16
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 13


 406              		.thumb_func
 407              		.type	cf_gf128_double, %function
 408              	cf_gf128_double:
 409              	.LFB27:
  36:gf128.c       **** 
  37:gf128.c       **** /* out = 2 * in.  Arguments may alias. */
  38:gf128.c       **** void cf_gf128_double(const cf_gf128 in, cf_gf128 out)
  39:gf128.c       **** {
 410              		.loc 2 39 0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 24
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              		@ link register save eliminated.
 415 0000 86B0     		sub	sp, sp, #24
 416              		.cfi_def_cfa_offset 24
 417 0002 0190     		str	r0, [sp, #4]
 418 0004 0091     		str	r1, [sp]
  40:gf128.c       ****   uint8_t table[2] = { 0x00, 0x87 };
 419              		.loc 2 40 0
 420 0006 03AB     		add	r3, sp, #12
 421 0008 0022     		movs	r2, #0
 422 000a 1A70     		strb	r2, [r3]
 423 000c 03AB     		add	r3, sp, #12
 424 000e 8722     		movs	r2, #135
 425 0010 5A70     		strb	r2, [r3, #1]
  41:gf128.c       ****   uint32_t borrow = 0;
 426              		.loc 2 41 0
 427 0012 0023     		movs	r3, #0
 428 0014 0593     		str	r3, [sp, #20]
  42:gf128.c       ****   uint32_t inword;
  43:gf128.c       **** 
  44:gf128.c       ****   inword = in[3];   out[3] = (inword << 1) | borrow;  borrow = inword >> 31;
 429              		.loc 2 44 0
 430 0016 019B     		ldr	r3, [sp, #4]
 431 0018 DB68     		ldr	r3, [r3, #12]
 432 001a 0493     		str	r3, [sp, #16]
 433 001c 009B     		ldr	r3, [sp]
 434 001e 0C33     		adds	r3, r3, #12
 435 0020 049A     		ldr	r2, [sp, #16]
 436 0022 5100     		lsls	r1, r2, #1
 437 0024 059A     		ldr	r2, [sp, #20]
 438 0026 0A43     		orrs	r2, r1
 439 0028 1A60     		str	r2, [r3]
 440 002a 049B     		ldr	r3, [sp, #16]
 441 002c DB0F     		lsrs	r3, r3, #31
 442 002e 0593     		str	r3, [sp, #20]
  45:gf128.c       ****   inword = in[2];   out[2] = (inword << 1) | borrow;  borrow = inword >> 31;
 443              		.loc 2 45 0
 444 0030 019B     		ldr	r3, [sp, #4]
 445 0032 9B68     		ldr	r3, [r3, #8]
 446 0034 0493     		str	r3, [sp, #16]
 447 0036 009B     		ldr	r3, [sp]
 448 0038 0833     		adds	r3, r3, #8
 449 003a 049A     		ldr	r2, [sp, #16]
 450 003c 5100     		lsls	r1, r2, #1
 451 003e 059A     		ldr	r2, [sp, #20]
 452 0040 0A43     		orrs	r2, r1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 14


 453 0042 1A60     		str	r2, [r3]
 454 0044 049B     		ldr	r3, [sp, #16]
 455 0046 DB0F     		lsrs	r3, r3, #31
 456 0048 0593     		str	r3, [sp, #20]
  46:gf128.c       ****   inword = in[1];   out[1] = (inword << 1) | borrow;  borrow = inword >> 31;
 457              		.loc 2 46 0
 458 004a 019B     		ldr	r3, [sp, #4]
 459 004c 5B68     		ldr	r3, [r3, #4]
 460 004e 0493     		str	r3, [sp, #16]
 461 0050 009B     		ldr	r3, [sp]
 462 0052 0433     		adds	r3, r3, #4
 463 0054 049A     		ldr	r2, [sp, #16]
 464 0056 5100     		lsls	r1, r2, #1
 465 0058 059A     		ldr	r2, [sp, #20]
 466 005a 0A43     		orrs	r2, r1
 467 005c 1A60     		str	r2, [r3]
 468 005e 049B     		ldr	r3, [sp, #16]
 469 0060 DB0F     		lsrs	r3, r3, #31
 470 0062 0593     		str	r3, [sp, #20]
  47:gf128.c       ****   inword = in[0];   out[0] = (inword << 1) | borrow;  borrow = inword >> 31;
 471              		.loc 2 47 0
 472 0064 019B     		ldr	r3, [sp, #4]
 473 0066 1B68     		ldr	r3, [r3]
 474 0068 0493     		str	r3, [sp, #16]
 475 006a 049B     		ldr	r3, [sp, #16]
 476 006c 5A00     		lsls	r2, r3, #1
 477 006e 059B     		ldr	r3, [sp, #20]
 478 0070 1A43     		orrs	r2, r3
 479 0072 009B     		ldr	r3, [sp]
 480 0074 1A60     		str	r2, [r3]
 481 0076 049B     		ldr	r3, [sp, #16]
 482 0078 DB0F     		lsrs	r3, r3, #31
 483 007a 0593     		str	r3, [sp, #20]
  48:gf128.c       ****   
  49:gf128.c       **** #if CF_CACHE_SIDE_CHANNEL_PROTECTION
  50:gf128.c       ****   out[3] ^= select_u8(borrow, table, 2);
  51:gf128.c       **** #else
  52:gf128.c       ****   out[3] ^= table[borrow];
 484              		.loc 2 52 0
 485 007c 009B     		ldr	r3, [sp]
 486 007e 0C33     		adds	r3, r3, #12
 487 0080 009A     		ldr	r2, [sp]
 488 0082 0C32     		adds	r2, r2, #12
 489 0084 1268     		ldr	r2, [r2]
 490 0086 03A8     		add	r0, sp, #12
 491 0088 0599     		ldr	r1, [sp, #20]
 492 008a 4118     		adds	r1, r0, r1
 493 008c 0978     		ldrb	r1, [r1]
 494 008e 4A40     		eors	r2, r1
 495 0090 1A60     		str	r2, [r3]
  53:gf128.c       **** #endif
  54:gf128.c       **** }
 496              		.loc 2 54 0
 497 0092 C046     		nop
 498 0094 06B0     		add	sp, sp, #24
 499              		@ sp needed
 500 0096 7047     		bx	lr
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 15


 501              		.cfi_endproc
 502              	.LFE27:
 503              		.size	cf_gf128_double, .-cf_gf128_double
 504              		.section	.text.cf_gf128_double_le,"ax",%progbits
 505              		.align	2
 506              		.global	cf_gf128_double_le
 507              		.code	16
 508              		.thumb_func
 509              		.type	cf_gf128_double_le, %function
 510              	cf_gf128_double_le:
 511              	.LFB28:
  55:gf128.c       **** 
  56:gf128.c       **** /* out = 2 * in.  Arguments may alias. */
  57:gf128.c       **** void cf_gf128_double_le(const cf_gf128 in, cf_gf128 out)
  58:gf128.c       **** {
 512              		.loc 2 58 0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 24
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              		@ link register save eliminated.
 517 0000 86B0     		sub	sp, sp, #24
 518              		.cfi_def_cfa_offset 24
 519 0002 0190     		str	r0, [sp, #4]
 520 0004 0091     		str	r1, [sp]
  59:gf128.c       ****   uint8_t table[2] = { 0x00, 0xe1 };
 521              		.loc 2 59 0
 522 0006 03AB     		add	r3, sp, #12
 523 0008 0022     		movs	r2, #0
 524 000a 1A70     		strb	r2, [r3]
 525 000c 03AB     		add	r3, sp, #12
 526 000e E122     		movs	r2, #225
 527 0010 5A70     		strb	r2, [r3, #1]
  60:gf128.c       ****   uint32_t borrow = 0;
 528              		.loc 2 60 0
 529 0012 0023     		movs	r3, #0
 530 0014 0593     		str	r3, [sp, #20]
  61:gf128.c       ****   uint32_t inword;
  62:gf128.c       **** 
  63:gf128.c       ****   inword = in[0];   out[0] = (inword >> 1) | (borrow << 31);  borrow = inword & 1;
 531              		.loc 2 63 0
 532 0016 019B     		ldr	r3, [sp, #4]
 533 0018 1B68     		ldr	r3, [r3]
 534 001a 0493     		str	r3, [sp, #16]
 535 001c 049B     		ldr	r3, [sp, #16]
 536 001e 5A08     		lsrs	r2, r3, #1
 537 0020 059B     		ldr	r3, [sp, #20]
 538 0022 DB07     		lsls	r3, r3, #31
 539 0024 1A43     		orrs	r2, r3
 540 0026 009B     		ldr	r3, [sp]
 541 0028 1A60     		str	r2, [r3]
 542 002a 049B     		ldr	r3, [sp, #16]
 543 002c 0122     		movs	r2, #1
 544 002e 1340     		ands	r3, r2
 545 0030 0593     		str	r3, [sp, #20]
  64:gf128.c       ****   inword = in[1];   out[1] = (inword >> 1) | (borrow << 31);  borrow = inword & 1;
 546              		.loc 2 64 0
 547 0032 019B     		ldr	r3, [sp, #4]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 16


 548 0034 5B68     		ldr	r3, [r3, #4]
 549 0036 0493     		str	r3, [sp, #16]
 550 0038 009B     		ldr	r3, [sp]
 551 003a 0433     		adds	r3, r3, #4
 552 003c 049A     		ldr	r2, [sp, #16]
 553 003e 5108     		lsrs	r1, r2, #1
 554 0040 059A     		ldr	r2, [sp, #20]
 555 0042 D207     		lsls	r2, r2, #31
 556 0044 0A43     		orrs	r2, r1
 557 0046 1A60     		str	r2, [r3]
 558 0048 049B     		ldr	r3, [sp, #16]
 559 004a 0122     		movs	r2, #1
 560 004c 1340     		ands	r3, r2
 561 004e 0593     		str	r3, [sp, #20]
  65:gf128.c       ****   inword = in[2];   out[2] = (inword >> 1) | (borrow << 31);  borrow = inword & 1;
 562              		.loc 2 65 0
 563 0050 019B     		ldr	r3, [sp, #4]
 564 0052 9B68     		ldr	r3, [r3, #8]
 565 0054 0493     		str	r3, [sp, #16]
 566 0056 009B     		ldr	r3, [sp]
 567 0058 0833     		adds	r3, r3, #8
 568 005a 049A     		ldr	r2, [sp, #16]
 569 005c 5108     		lsrs	r1, r2, #1
 570 005e 059A     		ldr	r2, [sp, #20]
 571 0060 D207     		lsls	r2, r2, #31
 572 0062 0A43     		orrs	r2, r1
 573 0064 1A60     		str	r2, [r3]
 574 0066 049B     		ldr	r3, [sp, #16]
 575 0068 0122     		movs	r2, #1
 576 006a 1340     		ands	r3, r2
 577 006c 0593     		str	r3, [sp, #20]
  66:gf128.c       ****   inword = in[3];   out[3] = (inword >> 1) | (borrow << 31);  borrow = inword & 1;
 578              		.loc 2 66 0
 579 006e 019B     		ldr	r3, [sp, #4]
 580 0070 DB68     		ldr	r3, [r3, #12]
 581 0072 0493     		str	r3, [sp, #16]
 582 0074 009B     		ldr	r3, [sp]
 583 0076 0C33     		adds	r3, r3, #12
 584 0078 049A     		ldr	r2, [sp, #16]
 585 007a 5108     		lsrs	r1, r2, #1
 586 007c 059A     		ldr	r2, [sp, #20]
 587 007e D207     		lsls	r2, r2, #31
 588 0080 0A43     		orrs	r2, r1
 589 0082 1A60     		str	r2, [r3]
 590 0084 049B     		ldr	r3, [sp, #16]
 591 0086 0122     		movs	r2, #1
 592 0088 1340     		ands	r3, r2
 593 008a 0593     		str	r3, [sp, #20]
  67:gf128.c       **** 
  68:gf128.c       **** #if CF_CACHE_SIDE_CHANNEL_PROTECTION
  69:gf128.c       ****   out[0] ^= select_u8(borrow, table, 2) << 24;
  70:gf128.c       **** #else
  71:gf128.c       ****   out[0] ^= table[borrow] << 24;
 594              		.loc 2 71 0
 595 008c 009B     		ldr	r3, [sp]
 596 008e 1B68     		ldr	r3, [r3]
 597 0090 03A9     		add	r1, sp, #12
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 17


 598 0092 059A     		ldr	r2, [sp, #20]
 599 0094 8A18     		adds	r2, r1, r2
 600 0096 1278     		ldrb	r2, [r2]
 601 0098 1206     		lsls	r2, r2, #24
 602 009a 5A40     		eors	r2, r3
 603 009c 009B     		ldr	r3, [sp]
 604 009e 1A60     		str	r2, [r3]
  72:gf128.c       **** #endif
  73:gf128.c       **** }
 605              		.loc 2 73 0
 606 00a0 C046     		nop
 607 00a2 06B0     		add	sp, sp, #24
 608              		@ sp needed
 609 00a4 7047     		bx	lr
 610              		.cfi_endproc
 611              	.LFE28:
 612              		.size	cf_gf128_double_le, .-cf_gf128_double_le
 613 00a6 C046     		.section	.text.cf_gf128_add,"ax",%progbits
 614              		.align	2
 615              		.global	cf_gf128_add
 616              		.code	16
 617              		.thumb_func
 618              		.type	cf_gf128_add, %function
 619              	cf_gf128_add:
 620              	.LFB29:
  74:gf128.c       **** 
  75:gf128.c       **** /* out = x + y.  Arguments may alias. */
  76:gf128.c       **** void cf_gf128_add(const cf_gf128 x, const cf_gf128 y, cf_gf128 out)
  77:gf128.c       **** {
 621              		.loc 2 77 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 16
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625              		@ link register save eliminated.
 626 0000 84B0     		sub	sp, sp, #16
 627              		.cfi_def_cfa_offset 16
 628 0002 0390     		str	r0, [sp, #12]
 629 0004 0291     		str	r1, [sp, #8]
 630 0006 0192     		str	r2, [sp, #4]
  78:gf128.c       ****   out[0] = x[0] ^ y[0];
 631              		.loc 2 78 0
 632 0008 039B     		ldr	r3, [sp, #12]
 633 000a 1A68     		ldr	r2, [r3]
 634 000c 029B     		ldr	r3, [sp, #8]
 635 000e 1B68     		ldr	r3, [r3]
 636 0010 5A40     		eors	r2, r3
 637 0012 019B     		ldr	r3, [sp, #4]
 638 0014 1A60     		str	r2, [r3]
  79:gf128.c       ****   out[1] = x[1] ^ y[1];
 639              		.loc 2 79 0
 640 0016 019B     		ldr	r3, [sp, #4]
 641 0018 0433     		adds	r3, r3, #4
 642 001a 039A     		ldr	r2, [sp, #12]
 643 001c 0432     		adds	r2, r2, #4
 644 001e 1168     		ldr	r1, [r2]
 645 0020 029A     		ldr	r2, [sp, #8]
 646 0022 0432     		adds	r2, r2, #4
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 18


 647 0024 1268     		ldr	r2, [r2]
 648 0026 4A40     		eors	r2, r1
 649 0028 1A60     		str	r2, [r3]
  80:gf128.c       ****   out[2] = x[2] ^ y[2];
 650              		.loc 2 80 0
 651 002a 019B     		ldr	r3, [sp, #4]
 652 002c 0833     		adds	r3, r3, #8
 653 002e 039A     		ldr	r2, [sp, #12]
 654 0030 0832     		adds	r2, r2, #8
 655 0032 1168     		ldr	r1, [r2]
 656 0034 029A     		ldr	r2, [sp, #8]
 657 0036 0832     		adds	r2, r2, #8
 658 0038 1268     		ldr	r2, [r2]
 659 003a 4A40     		eors	r2, r1
 660 003c 1A60     		str	r2, [r3]
  81:gf128.c       ****   out[3] = x[3] ^ y[3];
 661              		.loc 2 81 0
 662 003e 019B     		ldr	r3, [sp, #4]
 663 0040 0C33     		adds	r3, r3, #12
 664 0042 039A     		ldr	r2, [sp, #12]
 665 0044 0C32     		adds	r2, r2, #12
 666 0046 1168     		ldr	r1, [r2]
 667 0048 029A     		ldr	r2, [sp, #8]
 668 004a 0C32     		adds	r2, r2, #12
 669 004c 1268     		ldr	r2, [r2]
 670 004e 4A40     		eors	r2, r1
 671 0050 1A60     		str	r2, [r3]
  82:gf128.c       **** }
 672              		.loc 2 82 0
 673 0052 C046     		nop
 674 0054 04B0     		add	sp, sp, #16
 675              		@ sp needed
 676 0056 7047     		bx	lr
 677              		.cfi_endproc
 678              	.LFE29:
 679              		.size	cf_gf128_add, .-cf_gf128_add
 680              		.section	.text.cf_gf128_mul,"ax",%progbits
 681              		.align	2
 682              		.global	cf_gf128_mul
 683              		.code	16
 684              		.thumb_func
 685              		.type	cf_gf128_mul, %function
 686              	cf_gf128_mul:
 687              	.LFB30:
  83:gf128.c       **** 
  84:gf128.c       **** /* out = xy.  Arguments may alias. */
  85:gf128.c       **** void cf_gf128_mul(const cf_gf128 x, const cf_gf128 y, cf_gf128 out)
  86:gf128.c       **** {
 688              		.loc 2 86 0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 80
 691              		@ frame_needed = 0, uses_anonymous_args = 0
 692 0000 00B5     		push	{lr}
 693              		.cfi_def_cfa_offset 4
 694              		.cfi_offset 14, -4
 695 0002 95B0     		sub	sp, sp, #84
 696              		.cfi_def_cfa_offset 88
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 19


 697 0004 0390     		str	r0, [sp, #12]
 698 0006 0291     		str	r1, [sp, #8]
 699 0008 0192     		str	r2, [sp, #4]
  87:gf128.c       **** #if CF_TIME_SIDE_CHANNEL_PROTECTION
  88:gf128.c       ****   cf_gf128 zero = { 0 };
 700              		.loc 2 88 0
 701 000a 0DAB     		add	r3, sp, #52
 702 000c 1800     		movs	r0, r3
 703 000e 1023     		movs	r3, #16
 704 0010 1A00     		movs	r2, r3
 705 0012 0021     		movs	r1, #0
 706 0014 FFF7FEFF 		bl	memset
  89:gf128.c       **** #endif
  90:gf128.c       ****  
  91:gf128.c       ****   /* Z_0 = 0^128
  92:gf128.c       ****    * V_0 = Y */ 
  93:gf128.c       ****   cf_gf128 Z, V;
  94:gf128.c       ****   memset(Z, 0, sizeof Z);
 707              		.loc 2 94 0
 708 0018 09AB     		add	r3, sp, #36
 709 001a 1022     		movs	r2, #16
 710 001c 0021     		movs	r1, #0
 711 001e 1800     		movs	r0, r3
 712 0020 FFF7FEFF 		bl	memset
  95:gf128.c       ****   memcpy(V, y, sizeof V);
 713              		.loc 2 95 0
 714 0024 0299     		ldr	r1, [sp, #8]
 715 0026 05AB     		add	r3, sp, #20
 716 0028 1022     		movs	r2, #16
 717 002a 1800     		movs	r0, r3
 718 002c FFF7FEFF 		bl	memcpy
 719              	.LBB2:
  96:gf128.c       **** 
  97:gf128.c       ****   for (int i = 0; i < 128; i++)
 720              		.loc 2 97 0
 721 0030 0023     		movs	r3, #0
 722 0032 1393     		str	r3, [sp, #76]
 723 0034 24E0     		b	.L13
 724              	.L14:
 725              	.LBB3:
  98:gf128.c       ****   {
  99:gf128.c       ****     uint32_t word = x[i >> 5];
 726              		.loc 2 99 0 discriminator 3
 727 0036 139B     		ldr	r3, [sp, #76]
 728 0038 5B11     		asrs	r3, r3, #5
 729 003a 9B00     		lsls	r3, r3, #2
 730 003c 039A     		ldr	r2, [sp, #12]
 731 003e D318     		adds	r3, r2, r3
 732 0040 1B68     		ldr	r3, [r3]
 733 0042 1293     		str	r3, [sp, #72]
 100:gf128.c       ****     uint8_t bit = (word >> (31 - (i & 31))) & 1;
 734              		.loc 2 100 0 discriminator 3
 735 0044 139B     		ldr	r3, [sp, #76]
 736 0046 DB43     		mvns	r3, r3
 737 0048 1F22     		movs	r2, #31
 738 004a 1340     		ands	r3, r2
 739 004c 129A     		ldr	r2, [sp, #72]
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 20


 740 004e DA40     		lsrs	r2, r2, r3
 741 0050 1300     		movs	r3, r2
 742 0052 DAB2     		uxtb	r2, r3
 743 0054 4723     		movs	r3, #71
 744 0056 6B44     		add	r3, r3, sp
 745 0058 0121     		movs	r1, #1
 746 005a 0A40     		ands	r2, r1
 747 005c 1A70     		strb	r2, [r3]
 101:gf128.c       **** 
 102:gf128.c       **** #if CF_TIME_SIDE_CHANNEL_PROTECTION
 103:gf128.c       ****     select_xor128(Z, zero, V, bit);
 748              		.loc 2 103 0 discriminator 3
 749 005e 4723     		movs	r3, #71
 750 0060 6B44     		add	r3, r3, sp
 751 0062 1B78     		ldrb	r3, [r3]
 752 0064 05AA     		add	r2, sp, #20
 753 0066 0DA9     		add	r1, sp, #52
 754 0068 09A8     		add	r0, sp, #36
 755 006a FFF7FEFF 		bl	select_xor128
 104:gf128.c       **** #else
 105:gf128.c       ****     if (bit)
 106:gf128.c       ****       xor_words(Z, V, 4);
 107:gf128.c       **** #endif
 108:gf128.c       **** 
 109:gf128.c       ****     cf_gf128_double_le(V, V);
 756              		.loc 2 109 0 discriminator 3
 757 006e 05AA     		add	r2, sp, #20
 758 0070 05AB     		add	r3, sp, #20
 759 0072 1100     		movs	r1, r2
 760 0074 1800     		movs	r0, r3
 761 0076 FFF7FEFF 		bl	cf_gf128_double_le
 762              	.LBE3:
  97:gf128.c       ****   {
 763              		.loc 2 97 0 discriminator 3
 764 007a 139B     		ldr	r3, [sp, #76]
 765 007c 0133     		adds	r3, r3, #1
 766 007e 1393     		str	r3, [sp, #76]
 767              	.L13:
  97:gf128.c       ****   {
 768              		.loc 2 97 0 is_stmt 0 discriminator 1
 769 0080 139B     		ldr	r3, [sp, #76]
 770 0082 7F2B     		cmp	r3, #127
 771 0084 D7DD     		ble	.L14
 772              	.LBE2:
 110:gf128.c       ****   }
 111:gf128.c       **** 
 112:gf128.c       ****   memcpy(out, Z, sizeof Z);
 773              		.loc 2 112 0 is_stmt 1
 774 0086 09A9     		add	r1, sp, #36
 775 0088 019B     		ldr	r3, [sp, #4]
 776 008a 1022     		movs	r2, #16
 777 008c 1800     		movs	r0, r3
 778 008e FFF7FEFF 		bl	memcpy
 113:gf128.c       **** }
 779              		.loc 2 113 0
 780 0092 C046     		nop
 781 0094 15B0     		add	sp, sp, #84
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 21


 782              		@ sp needed
 783 0096 00BD     		pop	{pc}
 784              		.cfi_endproc
 785              	.LFE30:
 786              		.size	cf_gf128_mul, .-cf_gf128_mul
 787              		.text
 788              	.Letext0:
 789              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 790              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 791              		.file 5 "gf128.h"
 792              		.section	.debug_info,"",%progbits
 793              	.Ldebug_info0:
 794 0000 F8030000 		.4byte	0x3f8
 795 0004 0400     		.2byte	0x4
 796 0006 00000000 		.4byte	.Ldebug_abbrev0
 797 000a 04       		.byte	0x4
 798 000b 01       		.uleb128 0x1
 799 000c E9000000 		.4byte	.LASF35
 800 0010 0C       		.byte	0xc
 801 0011 05020000 		.4byte	.LASF36
 802 0015 3D000000 		.4byte	.LASF37
 803 0019 00000000 		.4byte	.Ldebug_ranges0+0
 804 001d 00000000 		.4byte	0
 805 0021 00000000 		.4byte	.Ldebug_line0
 806 0025 02       		.uleb128 0x2
 807 0026 04       		.byte	0x4
 808 0027 05       		.byte	0x5
 809 0028 696E7400 		.ascii	"int\000"
 810 002c 03       		.uleb128 0x3
 811 002d 04       		.byte	0x4
 812 002e 07       		.byte	0x7
 813 002f 30000000 		.4byte	.LASF0
 814 0033 03       		.uleb128 0x3
 815 0034 08       		.byte	0x8
 816 0035 05       		.byte	0x5
 817 0036 50020000 		.4byte	.LASF1
 818 003a 03       		.uleb128 0x3
 819 003b 08       		.byte	0x8
 820 003c 04       		.byte	0x4
 821 003d B2020000 		.4byte	.LASF2
 822 0041 03       		.uleb128 0x3
 823 0042 01       		.byte	0x1
 824 0043 06       		.byte	0x6
 825 0044 C7020000 		.4byte	.LASF3
 826 0048 04       		.uleb128 0x4
 827 0049 05000000 		.4byte	.LASF8
 828 004d 03       		.byte	0x3
 829 004e 1D       		.byte	0x1d
 830 004f 53000000 		.4byte	0x53
 831 0053 03       		.uleb128 0x3
 832 0054 01       		.byte	0x1
 833 0055 08       		.byte	0x8
 834 0056 DB000000 		.4byte	.LASF4
 835 005a 03       		.uleb128 0x3
 836 005b 02       		.byte	0x2
 837 005c 05       		.byte	0x5
 838 005d 7D020000 		.4byte	.LASF5
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 22


 839 0061 03       		.uleb128 0x3
 840 0062 02       		.byte	0x2
 841 0063 07       		.byte	0x7
 842 0064 B1010000 		.4byte	.LASF6
 843 0068 03       		.uleb128 0x3
 844 0069 04       		.byte	0x4
 845 006a 05       		.byte	0x5
 846 006b 9E020000 		.4byte	.LASF7
 847 006f 04       		.uleb128 0x4
 848 0070 F1010000 		.4byte	.LASF9
 849 0074 03       		.byte	0x3
 850 0075 41       		.byte	0x41
 851 0076 7A000000 		.4byte	0x7a
 852 007a 03       		.uleb128 0x3
 853 007b 04       		.byte	0x4
 854 007c 07       		.byte	0x7
 855 007d 8C010000 		.4byte	.LASF10
 856 0081 03       		.uleb128 0x3
 857 0082 08       		.byte	0x8
 858 0083 07       		.byte	0x7
 859 0084 0D020000 		.4byte	.LASF11
 860 0088 04       		.uleb128 0x4
 861 0089 24020000 		.4byte	.LASF12
 862 008d 04       		.byte	0x4
 863 008e 18       		.byte	0x18
 864 008f 48000000 		.4byte	0x48
 865 0093 04       		.uleb128 0x4
 866 0094 D1010000 		.4byte	.LASF13
 867 0098 04       		.byte	0x4
 868 0099 30       		.byte	0x30
 869 009a 6F000000 		.4byte	0x6f
 870 009e 04       		.uleb128 0x4
 871 009f FC010000 		.4byte	.LASF14
 872 00a3 05       		.byte	0x5
 873 00a4 1B       		.byte	0x1b
 874 00a5 A9000000 		.4byte	0xa9
 875 00a9 05       		.uleb128 0x5
 876 00aa 93000000 		.4byte	0x93
 877 00ae B9000000 		.4byte	0xb9
 878 00b2 06       		.uleb128 0x6
 879 00b3 B9000000 		.4byte	0xb9
 880 00b7 03       		.byte	0x3
 881 00b8 00       		.byte	0
 882 00b9 03       		.uleb128 0x3
 883 00ba 04       		.byte	0x4
 884 00bb 07       		.byte	0x7
 885 00bc 2C020000 		.4byte	.LASF15
 886 00c0 03       		.uleb128 0x3
 887 00c1 01       		.byte	0x1
 888 00c2 08       		.byte	0x8
 889 00c3 5E020000 		.4byte	.LASF16
 890 00c7 07       		.uleb128 0x7
 891 00c8 E7010000 		.4byte	.LASF17
 892 00cc 01       		.byte	0x1
 893 00cd 34       		.byte	0x34
 894 00ce 93000000 		.4byte	0x93
 895 00d2 00000000 		.4byte	.LFB4
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 23


 896 00d6 2C000000 		.4byte	.LFE4-.LFB4
 897 00da 01       		.uleb128 0x1
 898 00db 9C       		.byte	0x9c
 899 00dc EF000000 		.4byte	0xef
 900 00e0 08       		.uleb128 0x8
 901 00e1 62756600 		.ascii	"buf\000"
 902 00e5 01       		.byte	0x1
 903 00e6 34       		.byte	0x34
 904 00e7 EF000000 		.4byte	0xef
 905 00eb 02       		.uleb128 0x2
 906 00ec 91       		.byte	0x91
 907 00ed 7C       		.sleb128 -4
 908 00ee 00       		.byte	0
 909 00ef 09       		.uleb128 0x9
 910 00f0 04       		.byte	0x4
 911 00f1 F5000000 		.4byte	0xf5
 912 00f5 0A       		.uleb128 0xa
 913 00f6 88000000 		.4byte	0x88
 914 00fa 0B       		.uleb128 0xb
 915 00fb A7020000 		.4byte	.LASF21
 916 00ff 01       		.byte	0x1
 917 0100 58       		.byte	0x58
 918 0101 00000000 		.4byte	.LFB8
 919 0105 3E000000 		.4byte	.LFE8-.LFB8
 920 0109 01       		.uleb128 0x1
 921 010a 9C       		.byte	0x9c
 922 010b 2A010000 		.4byte	0x12a
 923 010f 08       		.uleb128 0x8
 924 0110 7600     		.ascii	"v\000"
 925 0112 01       		.byte	0x1
 926 0113 58       		.byte	0x58
 927 0114 93000000 		.4byte	0x93
 928 0118 02       		.uleb128 0x2
 929 0119 91       		.byte	0x91
 930 011a 7C       		.sleb128 -4
 931 011b 08       		.uleb128 0x8
 932 011c 62756600 		.ascii	"buf\000"
 933 0120 01       		.byte	0x1
 934 0121 58       		.byte	0x58
 935 0122 2A010000 		.4byte	0x12a
 936 0126 02       		.uleb128 0x2
 937 0127 91       		.byte	0x91
 938 0128 78       		.sleb128 -8
 939 0129 00       		.byte	0
 940 012a 09       		.uleb128 0x9
 941 012b 04       		.byte	0x4
 942 012c 88000000 		.4byte	0x88
 943 0130 07       		.uleb128 0x7
 944 0131 BE020000 		.4byte	.LASF18
 945 0135 01       		.byte	0x1
 946 0136 9C       		.byte	0x9c
 947 0137 93000000 		.4byte	0x93
 948 013b 00000000 		.4byte	.LFB15
 949 013f 24000000 		.4byte	.LFE15-.LFB15
 950 0143 01       		.uleb128 0x1
 951 0144 9C       		.byte	0x9c
 952 0145 7E010000 		.4byte	0x17e
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 24


 953 0149 08       		.uleb128 0x8
 954 014a 7800     		.ascii	"x\000"
 955 014c 01       		.byte	0x1
 956 014d 9C       		.byte	0x9c
 957 014e 93000000 		.4byte	0x93
 958 0152 02       		.uleb128 0x2
 959 0153 91       		.byte	0x91
 960 0154 74       		.sleb128 -12
 961 0155 08       		.uleb128 0x8
 962 0156 7900     		.ascii	"y\000"
 963 0158 01       		.byte	0x1
 964 0159 9C       		.byte	0x9c
 965 015a 93000000 		.4byte	0x93
 966 015e 02       		.uleb128 0x2
 967 015f 91       		.byte	0x91
 968 0160 70       		.sleb128 -16
 969 0161 0C       		.uleb128 0xc
 970 0162 35020000 		.4byte	.LASF19
 971 0166 01       		.byte	0x1
 972 0167 9E       		.byte	0x9e
 973 0168 93000000 		.4byte	0x93
 974 016c 02       		.uleb128 0x2
 975 016d 91       		.byte	0x91
 976 016e 7C       		.sleb128 -4
 977 016f 0C       		.uleb128 0xc
 978 0170 C9000000 		.4byte	.LASF20
 979 0174 01       		.byte	0x1
 980 0175 9F       		.byte	0x9f
 981 0176 93000000 		.4byte	0x93
 982 017a 02       		.uleb128 0x2
 983 017b 91       		.byte	0x91
 984 017c 78       		.sleb128 -8
 985 017d 00       		.byte	0
 986 017e 0D       		.uleb128 0xd
 987 017f 6F020000 		.4byte	.LASF22
 988 0183 01       		.byte	0x1
 989 0184 E5       		.byte	0xe5
 990 0185 00000000 		.4byte	.LFB20
 991 0189 B8000000 		.4byte	.LFE20-.LFB20
 992 018d 01       		.uleb128 0x1
 993 018e 9C       		.byte	0x9c
 994 018f E8010000 		.4byte	0x1e8
 995 0193 08       		.uleb128 0x8
 996 0194 6F757400 		.ascii	"out\000"
 997 0198 01       		.byte	0x1
 998 0199 E5       		.byte	0xe5
 999 019a E8010000 		.4byte	0x1e8
 1000 019e 02       		.uleb128 0x2
 1001 019f 91       		.byte	0x91
 1002 01a0 6C       		.sleb128 -20
 1003 01a1 08       		.uleb128 0x8
 1004 01a2 69663000 		.ascii	"if0\000"
 1005 01a6 01       		.byte	0x1
 1006 01a7 E6       		.byte	0xe6
 1007 01a8 EE010000 		.4byte	0x1ee
 1008 01ac 02       		.uleb128 0x2
 1009 01ad 91       		.byte	0x91
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 25


 1010 01ae 68       		.sleb128 -24
 1011 01af 08       		.uleb128 0x8
 1012 01b0 69663100 		.ascii	"if1\000"
 1013 01b4 01       		.byte	0x1
 1014 01b5 E7       		.byte	0xe7
 1015 01b6 EE010000 		.4byte	0x1ee
 1016 01ba 02       		.uleb128 0x2
 1017 01bb 91       		.byte	0x91
 1018 01bc 64       		.sleb128 -28
 1019 01bd 08       		.uleb128 0x8
 1020 01be 62697400 		.ascii	"bit\000"
 1021 01c2 01       		.byte	0x1
 1022 01c3 E8       		.byte	0xe8
 1023 01c4 88000000 		.4byte	0x88
 1024 01c8 02       		.uleb128 0x2
 1025 01c9 91       		.byte	0x91
 1026 01ca 63       		.sleb128 -29
 1027 01cb 0C       		.uleb128 0xc
 1028 01cc 69020000 		.4byte	.LASF23
 1029 01d0 01       		.byte	0x1
 1030 01d1 EA       		.byte	0xea
 1031 01d2 93000000 		.4byte	0x93
 1032 01d6 02       		.uleb128 0x2
 1033 01d7 91       		.byte	0x91
 1034 01d8 74       		.sleb128 -12
 1035 01d9 0C       		.uleb128 0xc
 1036 01da 63020000 		.4byte	.LASF24
 1037 01de 01       		.byte	0x1
 1038 01df EB       		.byte	0xeb
 1039 01e0 93000000 		.4byte	0x93
 1040 01e4 02       		.uleb128 0x2
 1041 01e5 91       		.byte	0x91
 1042 01e6 70       		.sleb128 -16
 1043 01e7 00       		.byte	0
 1044 01e8 09       		.uleb128 0x9
 1045 01e9 04       		.byte	0x4
 1046 01ea 93000000 		.4byte	0x93
 1047 01ee 09       		.uleb128 0x9
 1048 01ef 04       		.byte	0x4
 1049 01f0 F4010000 		.4byte	0x1f4
 1050 01f4 0A       		.uleb128 0xa
 1051 01f5 93000000 		.4byte	0x93
 1052 01f9 0E       		.uleb128 0xe
 1053 01fa 1C000000 		.4byte	.LASF25
 1054 01fe 02       		.byte	0x2
 1055 01ff 15       		.byte	0x15
 1056 0200 00000000 		.4byte	.LFB25
 1057 0204 52000000 		.4byte	.LFE25-.LFB25
 1058 0208 01       		.uleb128 0x1
 1059 0209 9C       		.byte	0x9c
 1060 020a 2A020000 		.4byte	0x22a
 1061 020e 08       		.uleb128 0x8
 1062 020f 696E00   		.ascii	"in\000"
 1063 0212 02       		.byte	0x2
 1064 0213 15       		.byte	0x15
 1065 0214 EE010000 		.4byte	0x1ee
 1066 0218 02       		.uleb128 0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 26


 1067 0219 91       		.byte	0x91
 1068 021a 74       		.sleb128 -12
 1069 021b 08       		.uleb128 0x8
 1070 021c 6F757400 		.ascii	"out\000"
 1071 0220 02       		.byte	0x2
 1072 0221 15       		.byte	0x15
 1073 0222 2A010000 		.4byte	0x12a
 1074 0226 02       		.uleb128 0x2
 1075 0227 91       		.byte	0x91
 1076 0228 70       		.sleb128 -16
 1077 0229 00       		.byte	0
 1078 022a 0E       		.uleb128 0xe
 1079 022b 3A020000 		.4byte	.LASF26
 1080 022f 02       		.byte	0x2
 1081 0230 1D       		.byte	0x1d
 1082 0231 00000000 		.4byte	.LFB26
 1083 0235 56000000 		.4byte	.LFE26-.LFB26
 1084 0239 01       		.uleb128 0x1
 1085 023a 9C       		.byte	0x9c
 1086 023b 5B020000 		.4byte	0x25b
 1087 023f 08       		.uleb128 0x8
 1088 0240 696E00   		.ascii	"in\000"
 1089 0243 02       		.byte	0x2
 1090 0244 1D       		.byte	0x1d
 1091 0245 EF000000 		.4byte	0xef
 1092 0249 02       		.uleb128 0x2
 1093 024a 91       		.byte	0x91
 1094 024b 74       		.sleb128 -12
 1095 024c 08       		.uleb128 0x8
 1096 024d 6F757400 		.ascii	"out\000"
 1097 0251 02       		.byte	0x2
 1098 0252 1D       		.byte	0x1d
 1099 0253 E8010000 		.4byte	0x1e8
 1100 0257 02       		.uleb128 0x2
 1101 0258 91       		.byte	0x91
 1102 0259 70       		.sleb128 -16
 1103 025a 00       		.byte	0
 1104 025b 0F       		.uleb128 0xf
 1105 025c 8E020000 		.4byte	.LASF27
 1106 0260 02       		.byte	0x2
 1107 0261 26       		.byte	0x26
 1108 0262 00000000 		.4byte	.LFB27
 1109 0266 98000000 		.4byte	.LFE27-.LFB27
 1110 026a 01       		.uleb128 0x1
 1111 026b 9C       		.byte	0x9c
 1112 026c B6020000 		.4byte	0x2b6
 1113 0270 08       		.uleb128 0x8
 1114 0271 696E00   		.ascii	"in\000"
 1115 0274 02       		.byte	0x2
 1116 0275 26       		.byte	0x26
 1117 0276 EE010000 		.4byte	0x1ee
 1118 027a 02       		.uleb128 0x2
 1119 027b 91       		.byte	0x91
 1120 027c 6C       		.sleb128 -20
 1121 027d 08       		.uleb128 0x8
 1122 027e 6F757400 		.ascii	"out\000"
 1123 0282 02       		.byte	0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 27


 1124 0283 26       		.byte	0x26
 1125 0284 E8010000 		.4byte	0x1e8
 1126 0288 02       		.uleb128 0x2
 1127 0289 91       		.byte	0x91
 1128 028a 68       		.sleb128 -24
 1129 028b 0C       		.uleb128 0xc
 1130 028c DA010000 		.4byte	.LASF28
 1131 0290 02       		.byte	0x2
 1132 0291 28       		.byte	0x28
 1133 0292 B6020000 		.4byte	0x2b6
 1134 0296 02       		.uleb128 0x2
 1135 0297 91       		.byte	0x91
 1136 0298 74       		.sleb128 -12
 1137 0299 0C       		.uleb128 0xc
 1138 029a E0010000 		.4byte	.LASF29
 1139 029e 02       		.byte	0x2
 1140 029f 29       		.byte	0x29
 1141 02a0 93000000 		.4byte	0x93
 1142 02a4 02       		.uleb128 0x2
 1143 02a5 91       		.byte	0x91
 1144 02a6 7C       		.sleb128 -4
 1145 02a7 0C       		.uleb128 0xc
 1146 02a8 87020000 		.4byte	.LASF30
 1147 02ac 02       		.byte	0x2
 1148 02ad 2A       		.byte	0x2a
 1149 02ae 93000000 		.4byte	0x93
 1150 02b2 02       		.uleb128 0x2
 1151 02b3 91       		.byte	0x91
 1152 02b4 78       		.sleb128 -8
 1153 02b5 00       		.byte	0
 1154 02b6 05       		.uleb128 0x5
 1155 02b7 88000000 		.4byte	0x88
 1156 02bb C6020000 		.4byte	0x2c6
 1157 02bf 06       		.uleb128 0x6
 1158 02c0 B9000000 		.4byte	0xb9
 1159 02c4 01       		.byte	0x1
 1160 02c5 00       		.byte	0
 1161 02c6 0F       		.uleb128 0xf
 1162 02c7 9E010000 		.4byte	.LASF31
 1163 02cb 02       		.byte	0x2
 1164 02cc 39       		.byte	0x39
 1165 02cd 00000000 		.4byte	.LFB28
 1166 02d1 A6000000 		.4byte	.LFE28-.LFB28
 1167 02d5 01       		.uleb128 0x1
 1168 02d6 9C       		.byte	0x9c
 1169 02d7 21030000 		.4byte	0x321
 1170 02db 08       		.uleb128 0x8
 1171 02dc 696E00   		.ascii	"in\000"
 1172 02df 02       		.byte	0x2
 1173 02e0 39       		.byte	0x39
 1174 02e1 EE010000 		.4byte	0x1ee
 1175 02e5 02       		.uleb128 0x2
 1176 02e6 91       		.byte	0x91
 1177 02e7 6C       		.sleb128 -20
 1178 02e8 08       		.uleb128 0x8
 1179 02e9 6F757400 		.ascii	"out\000"
 1180 02ed 02       		.byte	0x2
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 28


 1181 02ee 39       		.byte	0x39
 1182 02ef E8010000 		.4byte	0x1e8
 1183 02f3 02       		.uleb128 0x2
 1184 02f4 91       		.byte	0x91
 1185 02f5 68       		.sleb128 -24
 1186 02f6 0C       		.uleb128 0xc
 1187 02f7 DA010000 		.4byte	.LASF28
 1188 02fb 02       		.byte	0x2
 1189 02fc 3B       		.byte	0x3b
 1190 02fd B6020000 		.4byte	0x2b6
 1191 0301 02       		.uleb128 0x2
 1192 0302 91       		.byte	0x91
 1193 0303 74       		.sleb128 -12
 1194 0304 0C       		.uleb128 0xc
 1195 0305 E0010000 		.4byte	.LASF29
 1196 0309 02       		.byte	0x2
 1197 030a 3C       		.byte	0x3c
 1198 030b 93000000 		.4byte	0x93
 1199 030f 02       		.uleb128 0x2
 1200 0310 91       		.byte	0x91
 1201 0311 7C       		.sleb128 -4
 1202 0312 0C       		.uleb128 0xc
 1203 0313 87020000 		.4byte	.LASF30
 1204 0317 02       		.byte	0x2
 1205 0318 3D       		.byte	0x3d
 1206 0319 93000000 		.4byte	0x93
 1207 031d 02       		.uleb128 0x2
 1208 031e 91       		.byte	0x91
 1209 031f 78       		.sleb128 -8
 1210 0320 00       		.byte	0
 1211 0321 0F       		.uleb128 0xf
 1212 0322 C4010000 		.4byte	.LASF32
 1213 0326 02       		.byte	0x2
 1214 0327 4C       		.byte	0x4c
 1215 0328 00000000 		.4byte	.LFB29
 1216 032c 58000000 		.4byte	.LFE29-.LFB29
 1217 0330 01       		.uleb128 0x1
 1218 0331 9C       		.byte	0x9c
 1219 0332 5D030000 		.4byte	0x35d
 1220 0336 08       		.uleb128 0x8
 1221 0337 7800     		.ascii	"x\000"
 1222 0339 02       		.byte	0x2
 1223 033a 4C       		.byte	0x4c
 1224 033b EE010000 		.4byte	0x1ee
 1225 033f 02       		.uleb128 0x2
 1226 0340 91       		.byte	0x91
 1227 0341 7C       		.sleb128 -4
 1228 0342 08       		.uleb128 0x8
 1229 0343 7900     		.ascii	"y\000"
 1230 0345 02       		.byte	0x2
 1231 0346 4C       		.byte	0x4c
 1232 0347 EE010000 		.4byte	0x1ee
 1233 034b 02       		.uleb128 0x2
 1234 034c 91       		.byte	0x91
 1235 034d 78       		.sleb128 -8
 1236 034e 08       		.uleb128 0x8
 1237 034f 6F757400 		.ascii	"out\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 29


 1238 0353 02       		.byte	0x2
 1239 0354 4C       		.byte	0x4c
 1240 0355 E8010000 		.4byte	0x1e8
 1241 0359 02       		.uleb128 0x2
 1242 035a 91       		.byte	0x91
 1243 035b 74       		.sleb128 -12
 1244 035c 00       		.byte	0
 1245 035d 10       		.uleb128 0x10
 1246 035e 0F000000 		.4byte	.LASF38
 1247 0362 02       		.byte	0x2
 1248 0363 55       		.byte	0x55
 1249 0364 00000000 		.4byte	.LFB30
 1250 0368 98000000 		.4byte	.LFE30-.LFB30
 1251 036c 01       		.uleb128 0x1
 1252 036d 9C       		.byte	0x9c
 1253 036e 08       		.uleb128 0x8
 1254 036f 7800     		.ascii	"x\000"
 1255 0371 02       		.byte	0x2
 1256 0372 55       		.byte	0x55
 1257 0373 EE010000 		.4byte	0x1ee
 1258 0377 03       		.uleb128 0x3
 1259 0378 91       		.byte	0x91
 1260 0379 B47F     		.sleb128 -76
 1261 037b 08       		.uleb128 0x8
 1262 037c 7900     		.ascii	"y\000"
 1263 037e 02       		.byte	0x2
 1264 037f 55       		.byte	0x55
 1265 0380 EE010000 		.4byte	0x1ee
 1266 0384 03       		.uleb128 0x3
 1267 0385 91       		.byte	0x91
 1268 0386 B07F     		.sleb128 -80
 1269 0388 08       		.uleb128 0x8
 1270 0389 6F757400 		.ascii	"out\000"
 1271 038d 02       		.byte	0x2
 1272 038e 55       		.byte	0x55
 1273 038f E8010000 		.4byte	0x1e8
 1274 0393 03       		.uleb128 0x3
 1275 0394 91       		.byte	0x91
 1276 0395 AC7F     		.sleb128 -84
 1277 0397 0C       		.uleb128 0xc
 1278 0398 D6000000 		.4byte	.LASF33
 1279 039c 02       		.byte	0x2
 1280 039d 58       		.byte	0x58
 1281 039e 9E000000 		.4byte	0x9e
 1282 03a2 02       		.uleb128 0x2
 1283 03a3 91       		.byte	0x91
 1284 03a4 5C       		.sleb128 -36
 1285 03a5 11       		.uleb128 0x11
 1286 03a6 5A00     		.ascii	"Z\000"
 1287 03a8 02       		.byte	0x2
 1288 03a9 5D       		.byte	0x5d
 1289 03aa 9E000000 		.4byte	0x9e
 1290 03ae 02       		.uleb128 0x2
 1291 03af 91       		.byte	0x91
 1292 03b0 4C       		.sleb128 -52
 1293 03b1 11       		.uleb128 0x11
 1294 03b2 5600     		.ascii	"V\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 30


 1295 03b4 02       		.byte	0x2
 1296 03b5 5D       		.byte	0x5d
 1297 03b6 9E000000 		.4byte	0x9e
 1298 03ba 03       		.uleb128 0x3
 1299 03bb 91       		.byte	0x91
 1300 03bc BC7F     		.sleb128 -68
 1301 03be 12       		.uleb128 0x12
 1302 03bf 30000000 		.4byte	.LBB2
 1303 03c3 56000000 		.4byte	.LBE2-.LBB2
 1304 03c7 11       		.uleb128 0x11
 1305 03c8 6900     		.ascii	"i\000"
 1306 03ca 02       		.byte	0x2
 1307 03cb 61       		.byte	0x61
 1308 03cc 25000000 		.4byte	0x25
 1309 03d0 02       		.uleb128 0x2
 1310 03d1 91       		.byte	0x91
 1311 03d2 74       		.sleb128 -12
 1312 03d3 12       		.uleb128 0x12
 1313 03d4 36000000 		.4byte	.LBB3
 1314 03d8 44000000 		.4byte	.LBE3-.LBB3
 1315 03dc 0C       		.uleb128 0xc
 1316 03dd 00000000 		.4byte	.LASF34
 1317 03e1 02       		.byte	0x2
 1318 03e2 63       		.byte	0x63
 1319 03e3 93000000 		.4byte	0x93
 1320 03e7 02       		.uleb128 0x2
 1321 03e8 91       		.byte	0x91
 1322 03e9 70       		.sleb128 -16
 1323 03ea 11       		.uleb128 0x11
 1324 03eb 62697400 		.ascii	"bit\000"
 1325 03ef 02       		.byte	0x2
 1326 03f0 64       		.byte	0x64
 1327 03f1 88000000 		.4byte	0x88
 1328 03f5 02       		.uleb128 0x2
 1329 03f6 91       		.byte	0x91
 1330 03f7 6F       		.sleb128 -17
 1331 03f8 00       		.byte	0
 1332 03f9 00       		.byte	0
 1333 03fa 00       		.byte	0
 1334 03fb 00       		.byte	0
 1335              		.section	.debug_abbrev,"",%progbits
 1336              	.Ldebug_abbrev0:
 1337 0000 01       		.uleb128 0x1
 1338 0001 11       		.uleb128 0x11
 1339 0002 01       		.byte	0x1
 1340 0003 25       		.uleb128 0x25
 1341 0004 0E       		.uleb128 0xe
 1342 0005 13       		.uleb128 0x13
 1343 0006 0B       		.uleb128 0xb
 1344 0007 03       		.uleb128 0x3
 1345 0008 0E       		.uleb128 0xe
 1346 0009 1B       		.uleb128 0x1b
 1347 000a 0E       		.uleb128 0xe
 1348 000b 55       		.uleb128 0x55
 1349 000c 17       		.uleb128 0x17
 1350 000d 11       		.uleb128 0x11
 1351 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 31


 1352 000f 10       		.uleb128 0x10
 1353 0010 17       		.uleb128 0x17
 1354 0011 00       		.byte	0
 1355 0012 00       		.byte	0
 1356 0013 02       		.uleb128 0x2
 1357 0014 24       		.uleb128 0x24
 1358 0015 00       		.byte	0
 1359 0016 0B       		.uleb128 0xb
 1360 0017 0B       		.uleb128 0xb
 1361 0018 3E       		.uleb128 0x3e
 1362 0019 0B       		.uleb128 0xb
 1363 001a 03       		.uleb128 0x3
 1364 001b 08       		.uleb128 0x8
 1365 001c 00       		.byte	0
 1366 001d 00       		.byte	0
 1367 001e 03       		.uleb128 0x3
 1368 001f 24       		.uleb128 0x24
 1369 0020 00       		.byte	0
 1370 0021 0B       		.uleb128 0xb
 1371 0022 0B       		.uleb128 0xb
 1372 0023 3E       		.uleb128 0x3e
 1373 0024 0B       		.uleb128 0xb
 1374 0025 03       		.uleb128 0x3
 1375 0026 0E       		.uleb128 0xe
 1376 0027 00       		.byte	0
 1377 0028 00       		.byte	0
 1378 0029 04       		.uleb128 0x4
 1379 002a 16       		.uleb128 0x16
 1380 002b 00       		.byte	0
 1381 002c 03       		.uleb128 0x3
 1382 002d 0E       		.uleb128 0xe
 1383 002e 3A       		.uleb128 0x3a
 1384 002f 0B       		.uleb128 0xb
 1385 0030 3B       		.uleb128 0x3b
 1386 0031 0B       		.uleb128 0xb
 1387 0032 49       		.uleb128 0x49
 1388 0033 13       		.uleb128 0x13
 1389 0034 00       		.byte	0
 1390 0035 00       		.byte	0
 1391 0036 05       		.uleb128 0x5
 1392 0037 01       		.uleb128 0x1
 1393 0038 01       		.byte	0x1
 1394 0039 49       		.uleb128 0x49
 1395 003a 13       		.uleb128 0x13
 1396 003b 01       		.uleb128 0x1
 1397 003c 13       		.uleb128 0x13
 1398 003d 00       		.byte	0
 1399 003e 00       		.byte	0
 1400 003f 06       		.uleb128 0x6
 1401 0040 21       		.uleb128 0x21
 1402 0041 00       		.byte	0
 1403 0042 49       		.uleb128 0x49
 1404 0043 13       		.uleb128 0x13
 1405 0044 2F       		.uleb128 0x2f
 1406 0045 0B       		.uleb128 0xb
 1407 0046 00       		.byte	0
 1408 0047 00       		.byte	0
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 32


 1409 0048 07       		.uleb128 0x7
 1410 0049 2E       		.uleb128 0x2e
 1411 004a 01       		.byte	0x1
 1412 004b 03       		.uleb128 0x3
 1413 004c 0E       		.uleb128 0xe
 1414 004d 3A       		.uleb128 0x3a
 1415 004e 0B       		.uleb128 0xb
 1416 004f 3B       		.uleb128 0x3b
 1417 0050 0B       		.uleb128 0xb
 1418 0051 27       		.uleb128 0x27
 1419 0052 19       		.uleb128 0x19
 1420 0053 49       		.uleb128 0x49
 1421 0054 13       		.uleb128 0x13
 1422 0055 11       		.uleb128 0x11
 1423 0056 01       		.uleb128 0x1
 1424 0057 12       		.uleb128 0x12
 1425 0058 06       		.uleb128 0x6
 1426 0059 40       		.uleb128 0x40
 1427 005a 18       		.uleb128 0x18
 1428 005b 9742     		.uleb128 0x2117
 1429 005d 19       		.uleb128 0x19
 1430 005e 01       		.uleb128 0x1
 1431 005f 13       		.uleb128 0x13
 1432 0060 00       		.byte	0
 1433 0061 00       		.byte	0
 1434 0062 08       		.uleb128 0x8
 1435 0063 05       		.uleb128 0x5
 1436 0064 00       		.byte	0
 1437 0065 03       		.uleb128 0x3
 1438 0066 08       		.uleb128 0x8
 1439 0067 3A       		.uleb128 0x3a
 1440 0068 0B       		.uleb128 0xb
 1441 0069 3B       		.uleb128 0x3b
 1442 006a 0B       		.uleb128 0xb
 1443 006b 49       		.uleb128 0x49
 1444 006c 13       		.uleb128 0x13
 1445 006d 02       		.uleb128 0x2
 1446 006e 18       		.uleb128 0x18
 1447 006f 00       		.byte	0
 1448 0070 00       		.byte	0
 1449 0071 09       		.uleb128 0x9
 1450 0072 0F       		.uleb128 0xf
 1451 0073 00       		.byte	0
 1452 0074 0B       		.uleb128 0xb
 1453 0075 0B       		.uleb128 0xb
 1454 0076 49       		.uleb128 0x49
 1455 0077 13       		.uleb128 0x13
 1456 0078 00       		.byte	0
 1457 0079 00       		.byte	0
 1458 007a 0A       		.uleb128 0xa
 1459 007b 26       		.uleb128 0x26
 1460 007c 00       		.byte	0
 1461 007d 49       		.uleb128 0x49
 1462 007e 13       		.uleb128 0x13
 1463 007f 00       		.byte	0
 1464 0080 00       		.byte	0
 1465 0081 0B       		.uleb128 0xb
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 33


 1466 0082 2E       		.uleb128 0x2e
 1467 0083 01       		.byte	0x1
 1468 0084 03       		.uleb128 0x3
 1469 0085 0E       		.uleb128 0xe
 1470 0086 3A       		.uleb128 0x3a
 1471 0087 0B       		.uleb128 0xb
 1472 0088 3B       		.uleb128 0x3b
 1473 0089 0B       		.uleb128 0xb
 1474 008a 27       		.uleb128 0x27
 1475 008b 19       		.uleb128 0x19
 1476 008c 11       		.uleb128 0x11
 1477 008d 01       		.uleb128 0x1
 1478 008e 12       		.uleb128 0x12
 1479 008f 06       		.uleb128 0x6
 1480 0090 40       		.uleb128 0x40
 1481 0091 18       		.uleb128 0x18
 1482 0092 9742     		.uleb128 0x2117
 1483 0094 19       		.uleb128 0x19
 1484 0095 01       		.uleb128 0x1
 1485 0096 13       		.uleb128 0x13
 1486 0097 00       		.byte	0
 1487 0098 00       		.byte	0
 1488 0099 0C       		.uleb128 0xc
 1489 009a 34       		.uleb128 0x34
 1490 009b 00       		.byte	0
 1491 009c 03       		.uleb128 0x3
 1492 009d 0E       		.uleb128 0xe
 1493 009e 3A       		.uleb128 0x3a
 1494 009f 0B       		.uleb128 0xb
 1495 00a0 3B       		.uleb128 0x3b
 1496 00a1 0B       		.uleb128 0xb
 1497 00a2 49       		.uleb128 0x49
 1498 00a3 13       		.uleb128 0x13
 1499 00a4 02       		.uleb128 0x2
 1500 00a5 18       		.uleb128 0x18
 1501 00a6 00       		.byte	0
 1502 00a7 00       		.byte	0
 1503 00a8 0D       		.uleb128 0xd
 1504 00a9 2E       		.uleb128 0x2e
 1505 00aa 01       		.byte	0x1
 1506 00ab 03       		.uleb128 0x3
 1507 00ac 0E       		.uleb128 0xe
 1508 00ad 3A       		.uleb128 0x3a
 1509 00ae 0B       		.uleb128 0xb
 1510 00af 3B       		.uleb128 0x3b
 1511 00b0 0B       		.uleb128 0xb
 1512 00b1 27       		.uleb128 0x27
 1513 00b2 19       		.uleb128 0x19
 1514 00b3 11       		.uleb128 0x11
 1515 00b4 01       		.uleb128 0x1
 1516 00b5 12       		.uleb128 0x12
 1517 00b6 06       		.uleb128 0x6
 1518 00b7 40       		.uleb128 0x40
 1519 00b8 18       		.uleb128 0x18
 1520 00b9 9642     		.uleb128 0x2116
 1521 00bb 19       		.uleb128 0x19
 1522 00bc 01       		.uleb128 0x1
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 34


 1523 00bd 13       		.uleb128 0x13
 1524 00be 00       		.byte	0
 1525 00bf 00       		.byte	0
 1526 00c0 0E       		.uleb128 0xe
 1527 00c1 2E       		.uleb128 0x2e
 1528 00c2 01       		.byte	0x1
 1529 00c3 3F       		.uleb128 0x3f
 1530 00c4 19       		.uleb128 0x19
 1531 00c5 03       		.uleb128 0x3
 1532 00c6 0E       		.uleb128 0xe
 1533 00c7 3A       		.uleb128 0x3a
 1534 00c8 0B       		.uleb128 0xb
 1535 00c9 3B       		.uleb128 0x3b
 1536 00ca 0B       		.uleb128 0xb
 1537 00cb 27       		.uleb128 0x27
 1538 00cc 19       		.uleb128 0x19
 1539 00cd 11       		.uleb128 0x11
 1540 00ce 01       		.uleb128 0x1
 1541 00cf 12       		.uleb128 0x12
 1542 00d0 06       		.uleb128 0x6
 1543 00d1 40       		.uleb128 0x40
 1544 00d2 18       		.uleb128 0x18
 1545 00d3 9642     		.uleb128 0x2116
 1546 00d5 19       		.uleb128 0x19
 1547 00d6 01       		.uleb128 0x1
 1548 00d7 13       		.uleb128 0x13
 1549 00d8 00       		.byte	0
 1550 00d9 00       		.byte	0
 1551 00da 0F       		.uleb128 0xf
 1552 00db 2E       		.uleb128 0x2e
 1553 00dc 01       		.byte	0x1
 1554 00dd 3F       		.uleb128 0x3f
 1555 00de 19       		.uleb128 0x19
 1556 00df 03       		.uleb128 0x3
 1557 00e0 0E       		.uleb128 0xe
 1558 00e1 3A       		.uleb128 0x3a
 1559 00e2 0B       		.uleb128 0xb
 1560 00e3 3B       		.uleb128 0x3b
 1561 00e4 0B       		.uleb128 0xb
 1562 00e5 27       		.uleb128 0x27
 1563 00e6 19       		.uleb128 0x19
 1564 00e7 11       		.uleb128 0x11
 1565 00e8 01       		.uleb128 0x1
 1566 00e9 12       		.uleb128 0x12
 1567 00ea 06       		.uleb128 0x6
 1568 00eb 40       		.uleb128 0x40
 1569 00ec 18       		.uleb128 0x18
 1570 00ed 9742     		.uleb128 0x2117
 1571 00ef 19       		.uleb128 0x19
 1572 00f0 01       		.uleb128 0x1
 1573 00f1 13       		.uleb128 0x13
 1574 00f2 00       		.byte	0
 1575 00f3 00       		.byte	0
 1576 00f4 10       		.uleb128 0x10
 1577 00f5 2E       		.uleb128 0x2e
 1578 00f6 01       		.byte	0x1
 1579 00f7 3F       		.uleb128 0x3f
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 35


 1580 00f8 19       		.uleb128 0x19
 1581 00f9 03       		.uleb128 0x3
 1582 00fa 0E       		.uleb128 0xe
 1583 00fb 3A       		.uleb128 0x3a
 1584 00fc 0B       		.uleb128 0xb
 1585 00fd 3B       		.uleb128 0x3b
 1586 00fe 0B       		.uleb128 0xb
 1587 00ff 27       		.uleb128 0x27
 1588 0100 19       		.uleb128 0x19
 1589 0101 11       		.uleb128 0x11
 1590 0102 01       		.uleb128 0x1
 1591 0103 12       		.uleb128 0x12
 1592 0104 06       		.uleb128 0x6
 1593 0105 40       		.uleb128 0x40
 1594 0106 18       		.uleb128 0x18
 1595 0107 9642     		.uleb128 0x2116
 1596 0109 19       		.uleb128 0x19
 1597 010a 00       		.byte	0
 1598 010b 00       		.byte	0
 1599 010c 11       		.uleb128 0x11
 1600 010d 34       		.uleb128 0x34
 1601 010e 00       		.byte	0
 1602 010f 03       		.uleb128 0x3
 1603 0110 08       		.uleb128 0x8
 1604 0111 3A       		.uleb128 0x3a
 1605 0112 0B       		.uleb128 0xb
 1606 0113 3B       		.uleb128 0x3b
 1607 0114 0B       		.uleb128 0xb
 1608 0115 49       		.uleb128 0x49
 1609 0116 13       		.uleb128 0x13
 1610 0117 02       		.uleb128 0x2
 1611 0118 18       		.uleb128 0x18
 1612 0119 00       		.byte	0
 1613 011a 00       		.byte	0
 1614 011b 12       		.uleb128 0x12
 1615 011c 0B       		.uleb128 0xb
 1616 011d 01       		.byte	0x1
 1617 011e 11       		.uleb128 0x11
 1618 011f 01       		.uleb128 0x1
 1619 0120 12       		.uleb128 0x12
 1620 0121 06       		.uleb128 0x6
 1621 0122 00       		.byte	0
 1622 0123 00       		.byte	0
 1623 0124 00       		.byte	0
 1624              		.section	.debug_aranges,"",%progbits
 1625 0000 64000000 		.4byte	0x64
 1626 0004 0200     		.2byte	0x2
 1627 0006 00000000 		.4byte	.Ldebug_info0
 1628 000a 04       		.byte	0x4
 1629 000b 00       		.byte	0
 1630 000c 0000     		.2byte	0
 1631 000e 0000     		.2byte	0
 1632 0010 00000000 		.4byte	.LFB4
 1633 0014 2C000000 		.4byte	.LFE4-.LFB4
 1634 0018 00000000 		.4byte	.LFB8
 1635 001c 3E000000 		.4byte	.LFE8-.LFB8
 1636 0020 00000000 		.4byte	.LFB15
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 36


 1637 0024 24000000 		.4byte	.LFE15-.LFB15
 1638 0028 00000000 		.4byte	.LFB20
 1639 002c B8000000 		.4byte	.LFE20-.LFB20
 1640 0030 00000000 		.4byte	.LFB25
 1641 0034 52000000 		.4byte	.LFE25-.LFB25
 1642 0038 00000000 		.4byte	.LFB26
 1643 003c 56000000 		.4byte	.LFE26-.LFB26
 1644 0040 00000000 		.4byte	.LFB27
 1645 0044 98000000 		.4byte	.LFE27-.LFB27
 1646 0048 00000000 		.4byte	.LFB28
 1647 004c A6000000 		.4byte	.LFE28-.LFB28
 1648 0050 00000000 		.4byte	.LFB29
 1649 0054 58000000 		.4byte	.LFE29-.LFB29
 1650 0058 00000000 		.4byte	.LFB30
 1651 005c 98000000 		.4byte	.LFE30-.LFB30
 1652 0060 00000000 		.4byte	0
 1653 0064 00000000 		.4byte	0
 1654              		.section	.debug_ranges,"",%progbits
 1655              	.Ldebug_ranges0:
 1656 0000 00000000 		.4byte	.LFB4
 1657 0004 2C000000 		.4byte	.LFE4
 1658 0008 00000000 		.4byte	.LFB8
 1659 000c 3E000000 		.4byte	.LFE8
 1660 0010 00000000 		.4byte	.LFB15
 1661 0014 24000000 		.4byte	.LFE15
 1662 0018 00000000 		.4byte	.LFB20
 1663 001c B8000000 		.4byte	.LFE20
 1664 0020 00000000 		.4byte	.LFB25
 1665 0024 52000000 		.4byte	.LFE25
 1666 0028 00000000 		.4byte	.LFB26
 1667 002c 56000000 		.4byte	.LFE26
 1668 0030 00000000 		.4byte	.LFB27
 1669 0034 98000000 		.4byte	.LFE27
 1670 0038 00000000 		.4byte	.LFB28
 1671 003c A6000000 		.4byte	.LFE28
 1672 0040 00000000 		.4byte	.LFB29
 1673 0044 58000000 		.4byte	.LFE29
 1674 0048 00000000 		.4byte	.LFB30
 1675 004c 98000000 		.4byte	.LFE30
 1676 0050 00000000 		.4byte	0
 1677 0054 00000000 		.4byte	0
 1678              		.section	.debug_line,"",%progbits
 1679              	.Ldebug_line0:
 1680 0000 43020000 		.section	.debug_str,"MS",%progbits,1
 1680      02003201 
 1680      00000201 
 1680      FB0E0D00 
 1680      01010101 
 1681              	.LASF34:
 1682 0000 776F7264 		.ascii	"word\000"
 1682      00
 1683              	.LASF8:
 1684 0005 5F5F7569 		.ascii	"__uint8_t\000"
 1684      6E74385F 
 1684      7400
 1685              	.LASF38:
 1686 000f 63665F67 		.ascii	"cf_gf128_mul\000"
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 37


 1686      66313238 
 1686      5F6D756C 
 1686      00
 1687              	.LASF25:
 1688 001c 63665F67 		.ascii	"cf_gf128_tobytes_be\000"
 1688      66313238 
 1688      5F746F62 
 1688      79746573 
 1688      5F626500 
 1689              	.LASF0:
 1690 0030 756E7369 		.ascii	"unsigned int\000"
 1690      676E6564 
 1690      20696E74 
 1690      00
 1691              	.LASF37:
 1692 003d 443A5C44 		.ascii	"D:\\Dropbox\\6_kurs\\diploma\\crypto_miscocontrolle"
 1692      726F7062 
 1692      6F785C36 
 1692      5F6B7572 
 1692      735C6469 
 1693 006c 725F5354 		.ascii	"r_STABLE\\BLE_Dynamic_GATT_Service_Configuration\\B"
 1693      41424C45 
 1693      5C424C45 
 1693      5F44796E 
 1693      616D6963 
 1694 009d 4C455F44 		.ascii	"LE_Dynamic_GATT_Service_Configuration.cydsn\000"
 1694      796E616D 
 1694      69635F47 
 1694      4154545F 
 1694      53657276 
 1695              	.LASF20:
 1696 00c9 64696666 		.ascii	"diff_is_zero\000"
 1696      5F69735F 
 1696      7A65726F 
 1696      00
 1697              	.LASF33:
 1698 00d6 7A65726F 		.ascii	"zero\000"
 1698      00
 1699              	.LASF4:
 1700 00db 756E7369 		.ascii	"unsigned char\000"
 1700      676E6564 
 1700      20636861 
 1700      7200
 1701              	.LASF35:
 1702 00e9 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1702      43313120 
 1702      352E342E 
 1702      31203230 
 1702      31363036 
 1703 011c 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 1703      20726576 
 1703      6973696F 
 1703      6E203233 
 1703      37373135 
 1704 014f 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects -fomit-fram"
 1704      66756E63 
 1704      74696F6E 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 38


 1704      2D736563 
 1704      74696F6E 
 1705 0182 652D706F 		.ascii	"e-pointer\000"
 1705      696E7465 
 1705      7200
 1706              	.LASF10:
 1707 018c 6C6F6E67 		.ascii	"long unsigned int\000"
 1707      20756E73 
 1707      69676E65 
 1707      6420696E 
 1707      7400
 1708              	.LASF31:
 1709 019e 63665F67 		.ascii	"cf_gf128_double_le\000"
 1709      66313238 
 1709      5F646F75 
 1709      626C655F 
 1709      6C6500
 1710              	.LASF6:
 1711 01b1 73686F72 		.ascii	"short unsigned int\000"
 1711      7420756E 
 1711      7369676E 
 1711      65642069 
 1711      6E7400
 1712              	.LASF32:
 1713 01c4 63665F67 		.ascii	"cf_gf128_add\000"
 1713      66313238 
 1713      5F616464 
 1713      00
 1714              	.LASF13:
 1715 01d1 75696E74 		.ascii	"uint32_t\000"
 1715      33325F74 
 1715      00
 1716              	.LASF28:
 1717 01da 7461626C 		.ascii	"table\000"
 1717      6500
 1718              	.LASF29:
 1719 01e0 626F7272 		.ascii	"borrow\000"
 1719      6F7700
 1720              	.LASF17:
 1721 01e7 72656164 		.ascii	"read32_be\000"
 1721      33325F62 
 1721      6500
 1722              	.LASF9:
 1723 01f1 5F5F7569 		.ascii	"__uint32_t\000"
 1723      6E743332 
 1723      5F7400
 1724              	.LASF14:
 1725 01fc 63665F67 		.ascii	"cf_gf128\000"
 1725      66313238 
 1725      00
 1726              	.LASF36:
 1727 0205 67663132 		.ascii	"gf128.c\000"
 1727      382E6300 
 1728              	.LASF11:
 1729 020d 6C6F6E67 		.ascii	"long long unsigned int\000"
 1729      206C6F6E 
 1729      6720756E 
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 39


 1729      7369676E 
 1729      65642069 
 1730              	.LASF12:
 1731 0224 75696E74 		.ascii	"uint8_t\000"
 1731      385F7400 
 1732              	.LASF15:
 1733 022c 73697A65 		.ascii	"sizetype\000"
 1733      74797065 
 1733      00
 1734              	.LASF19:
 1735 0235 64696666 		.ascii	"diff\000"
 1735      00
 1736              	.LASF26:
 1737 023a 63665F67 		.ascii	"cf_gf128_frombytes_be\000"
 1737      66313238 
 1737      5F66726F 
 1737      6D627974 
 1737      65735F62 
 1738              	.LASF1:
 1739 0250 6C6F6E67 		.ascii	"long long int\000"
 1739      206C6F6E 
 1739      6720696E 
 1739      7400
 1740              	.LASF16:
 1741 025e 63686172 		.ascii	"char\000"
 1741      00
 1742              	.LASF24:
 1743 0263 6D61736B 		.ascii	"mask0\000"
 1743      3000
 1744              	.LASF23:
 1745 0269 6D61736B 		.ascii	"mask1\000"
 1745      3100
 1746              	.LASF22:
 1747 026f 73656C65 		.ascii	"select_xor128\000"
 1747      63745F78 
 1747      6F723132 
 1747      3800
 1748              	.LASF5:
 1749 027d 73686F72 		.ascii	"short int\000"
 1749      7420696E 
 1749      7400
 1750              	.LASF30:
 1751 0287 696E776F 		.ascii	"inword\000"
 1751      726400
 1752              	.LASF27:
 1753 028e 63665F67 		.ascii	"cf_gf128_double\000"
 1753      66313238 
 1753      5F646F75 
 1753      626C6500 
 1754              	.LASF7:
 1755 029e 6C6F6E67 		.ascii	"long int\000"
 1755      20696E74 
 1755      00
 1756              	.LASF21:
 1757 02a7 77726974 		.ascii	"write32_be\000"
 1757      6533325F 
 1757      626500
ARM GAS  C:\Users\andrew\AppData\Local\Temp\ccpGYBrl.s 			page 40


 1758              	.LASF2:
 1759 02b2 6C6F6E67 		.ascii	"long double\000"
 1759      20646F75 
 1759      626C6500 
 1760              	.LASF18:
 1761 02be 6D61736B 		.ascii	"mask_u32\000"
 1761      5F753332 
 1761      00
 1762              	.LASF3:
 1763 02c7 7369676E 		.ascii	"signed char\000"
 1763      65642063 
 1763      68617200 
 1764              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
